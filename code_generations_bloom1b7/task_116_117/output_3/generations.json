[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    #-----------------------------\n    # If you have an array arr of non-negative integers\n    # You can implement this by using function sort_arr_integer().\n    # You can also use function sort_arr_integer(arr) to create an array,\n    # and then use this function to sort it.\n    arr_integer = array(arr)\n    sort_arr_integer(arr_integer)\n    return arr_integer", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[1] * x[0] if x[1] else x[0], reverse=not x[1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: (x.count('1') > x.count('2')) & (x.count('3') > x.count('4')) & (x.count('5') > x.count('6')))\n    return arr\n    \"\"\"\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if not isinstance(arr, list):\n        return\n    size = len(arr)\n    if size == 0:\n        return\n    return sorted(arr, key=lambda x: x > 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(nums):\n        if len(nums) == 1:\n            return nums[0]\n        nums = [nums]\n        for num in nums:\n            if num <= 0:\n                return num\n        return -1\n\n    def sort(nums):\n        if len(nums) == 1:\n            return nums[0]\n        nums = [nums]\n        for num in nums:\n            if num <= 0:\n                return num\n        return sorted(nums, key=_sort)\n\n    nums = [-3, -1, -2, -1, -2, 0, -2, 0, -2, 0]\n    sort(nums)\n    sort(nums)\n\n    sort([-3, 0, -2, -1, 0, -2, 0, -2, 0])\n\n    return nums", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    if arr[0] == 0:\n        return arr\n    if len(arr) == 2:\n        return sorted(arr)\n    if len(arr) == 3:\n        return sorted([arr[0], arr[1]])\n    if len(arr) == 4:\n        return sorted([arr[0], arr[1]], key=lambda x: x[0])\n    if len(arr) == 5:\n        return sorted([arr[0], arr[1]], key=lambda x: x[1], reverse=True)\n    if len(arr) == 6:\n        return sorted([arr[0], arr[1]], key=lambda x: x[0], reverse=True)\n    if len(arr) == 7:\n        return sorted([arr[0], arr[1]], key=lambda x: x[0], reverse=True)\n    if len(arr) == 8:\n        return sorted([arr[0], arr[1]], key=lambda x: x[0], reverse=True)\n    if len(arr) == 9:\n        return sorted([arr[0], arr[1]], key=lambda x: x[0], reverse=True)\n    if len(arr) == 10:\n        return sorted([arr[0], arr[1]], key=lambda x: x[0], reverse=True)\n    if len(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from math import ceil\n    num_ones = len(arr) // 2\n    if num_ones == 0:\n        return arr\n    if num_ones == 1:\n        return [0, 0, 0, 0, 0, 0, 0]\n    elif num_ones == 2:\n        return [0, 0, 0, 0, 0, 0, 0, 0]\n    elif num_ones == 3:\n        return [0, 0, 0, 0, 0, 0, 0, 0]\n    elif num_ones == 4:\n        return [0, 0, 0, 0, 0, 0, 0, 0]\n    elif num_ones == 5:\n        return [0, 0, 0, 0, 0, 0, 0, 0]\n    elif num_ones == 6:\n        return [0, 0, 0, 0, 0, 0, 0, 0]\n    else:\n        raise ValueError, 'invalid array length: %d' % num_ones", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_acc(x, y):\n        if x > y:\n            return 1\n        elif x < y:\n            return -1\n        else:\n            return 0\n    def sort_dec(x, y):\n        if x > y:\n            return -1\n        elif x < y:\n            return 1\n        else:\n            return 0\n    arr = [None] * len(arr)\n    for i in range(len(arr)):\n        arr[i] = sort_acc(arr[i], arr[i+1])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_numeric(arr):\n        \"\"\"\n        Sort the array arr in descending order of binary representation of numbers.\n        \"\"\"\n        for i in range(0, len(arr)):\n            if arr[i] > 0:\n                return i\n        return -1\n\n    def print_arr(arr, max_length):\n        \"\"\"\n        print the sorted array arr in ascending order of binary representation.\n        \"\"\"\n        if len(arr) == 0:\n            print(\"\")\n        else:\n            print(\"[\")\n            for i in range(0, len(arr)):\n                print(\"%4d\" % (i), end=\"\")\n                if arr[i] > 0:\n                    print(\", \", end=\"\")\n            print(\"]\", end=\"\")\n\n    print_arr(sort_array(arr), max_length)\n\n    print(\"There are %d numbers in array\" % len(arr))\n\n    for i in range(0, len(arr)):\n        print(\"%d. %s\" % (i+1, arr[i]))\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def swap(i):\n        a = i\n        i = a\n        a = i\n        return i\n\n    def binary(i):\n        a = i\n        i = binary(i)\n        return i\n\n    def add(i):\n        a = i\n        i = binary(i)\n        return i\n\n    def remove(i):\n        a = i\n        i = binary(i)\n        return i\n\n    def merge(arr1, arr2):\n        \"\"\"\n        Merge two arrays in a way that their elements are sorted in ascending order.\n\n        >>> merge([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0]\n        >>> merge([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0]\n\n        >>> merge([1, 2, 3, 4, 5], [-1, 0, 1, 2, 3, 4]) == [-1, 0, 1, 2, 3, 4, 5]\n        >>> merge([1, 2, 3,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n\n    a = arr[0]\n    b = arr[-1]\n    result = []\n    for i in range(len(a)):\n        if a[i] == b:\n            result.append(i)\n            break\n    result.sort(key=lambda i: i - b, reverse=True)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary(n):\n        \"\"\"\n        Returns the binary representation of n as a string\n\n        >>> binary(4)\n        '4'\n        >>> binary(7)\n        '71'\n        >>> binary(13)\n        '13'\n        >>> binary(48)\n        '48'\n        >>> binary(33)\n        '33'\n        >>> binary(97)\n        '97'\n        >>> binary(38)\n        '38'\n        >>> binary(88)\n        '88'\n        >>> binary(52)\n        '52'\n        >>> binary(24)\n        '24'\n        >>> binary(35)\n        '35'\n        >>> binary(17)\n        '17'\n        >>> binary(57)\n        '57'\n        >>> binary(51)\n        '51'\n        >>> binary(6)\n        '6'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23)\n        '23'\n        >>> binary(23", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    else:\n        return sorted(arr)[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    print(\"sort array\")\n    #arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr = []\n    for i in range(len(arr)):\n        arr.append(i)\n    arr.sort(key=lambda x: abs(x))\n    print(\"sort array:\", arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = np.asarray(arr)\n    arr = np.sort(arr, key=lambda i: i[0])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr is None:\n        return []\n\n    list_of_ones = set()\n    for i in range(len(arr)):\n        if arr[i]:\n            list_of_ones.add(i)\n\n    if len(list_of_ones) == 0:\n        return []\n\n    if len(list_of_ones)!= 1:\n        raise TypeError(\"sort_array(): array must have one element.\")\n\n    # Sort array according to number of ones in binary representation\n    binary_array = [list_of_ones.pop() for i in range(len(arr))]\n    binary_sort = sorted(binary_array, key=lambda x: x[1])\n\n    # Sort array according to number of ones in decimal representation\n    decimal_array = [list_of_ones.pop() for i in range(len(arr))]\n    decimal_sort = sorted(decimal_array, key=lambda x: x[1])\n\n    if len(decimal_array)!= len(decimal_sort):\n        raise TypeError(\"sort_array(): array must have same length.\")\n\n    return binary_sort + decimal_sort", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def compare(a, b):\n        return cmp(a[1], b[1])\n\n    def sieve(x):\n        \"\"\"\n        Sieve of Eratosthenes.\n\n        In this Kata, you have to sieve an integer x using sieves of Eratosthenes\n        such as the trapezoidal sieves.\n\n        It must be implemented like this:\n        >>> sieve(10) == 10\n        >>> sieve(17) == 17\n        >>> sieve(20) == 20\n        >>> sieve(25) == 25\n        >>> sieve(30) == 30\n        \"\"\"\n\n        # The main part of sieving is the construction of the sieves themselves,\n        # which are stored in a list of arrays of size s. The first element of\n        # the list is the key and the rest are the values of the sieves.\n        sieves = []\n\n        for x in xrange(1, max(s, len(arr))):\n            sieve = sieves[-1]\n\n            if x == 1:\n                sieve[1] = 1\n\n            elif x == 0:\n                sieve[1] = 0\n\n            else:\n                sieve[1] = 0.5 * x + 0.5 * x ** 2\n\n            sieves.append(sieve)\n\n        # Now we", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    ones = arr[0]\n    dec = arr[1]\n    arr = arr[1:]\n    new_arr = [dec]\n    for i in range(len(ones)):\n        if ones[i] == dec:\n            new_arr.append(ones[i - 1])\n        else:\n            new_arr.append(ones[i - 1] - ones[i])\n    return new_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort_order(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n\n        It must be implemented like this:\n        >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        >>> sort_array([2, 3, 4, 5, 6]) == [0, 1, 2, 3, 4]\n        >>> sort_array([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\n        \"\"\"\n\n        def _sort_value(arr):\n            \"\"\"\n            In this Kata, you have to sort an array of non-negative integers according to\n            number of ones in their binary representation in ascending order.\n            For similar number of ones, sort based on decimal value.\n            \"\"\"\n\n            def _cmp(a, b):\n                if a == b:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Code for integer sorting\n    arr = sort_array(arr)\n    return sorted(arr, key=lambda i: (i == 0 and 0) or (i == len(arr) and 0))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(0, len(arr)):\n        if arr[i] == 1:\n            arr[i] = -1\n        if arr[i] == 0:\n            arr[i] = 1\n        if arr[i] == 2:\n            arr[i] = 1\n        if arr[i] == 3:\n            arr[i] = 0\n        if arr[i] == 4:\n            arr[i] = -1\n        if arr[i] == 5:\n            arr[i] = -1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Return sorted values according to the binary representation\n    new_array = []\n    new_array.append(0)\n    for i in range(len(arr)):\n        if len(arr) > i:\n            for j in range(i+1, len(arr)):\n                if arr[i][j] == 1:\n                    new_array.append(i)\n                else:\n                    new_array.append(j)\n        else:\n            new_array.append(i)\n\n    return new_array\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if arr[0] == 1:\n        return arr[1:]\n    #arr is in ascending order\n    one_count = 0\n    result = []\n    for i in range(0, len(arr)):\n        if arr[i] == 1:\n            one_count += 1\n            result.append(i)\n        else:\n            result.append(-1)\n    if one_count == len(arr):\n        return result\n    if len(result) == 1:\n        return sorted(result, key=lambda k: k[1])\n    else:\n        return sorted(result, key=lambda k: k[0], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort based on binary representation\n    if len(arr) % 2 == 0:\n        arr.sort(key=lambda i: (i % 2 == 0))\n    else:\n        arr.sort(key=lambda i: (i % 2) + 1)\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort the array\n    arr = sorted(arr, key=lambda x: x and x[0] or 0, reverse=False)\n    # get the sorted array\n    out = []\n    for i in range(len(arr)):\n        out.append(arr[i])\n    return out", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return\n\n    if arr[0] == 1:\n        return\n\n    if arr[0] == 2:\n        return sorted([arr[1] for i in range(1, len(arr))], reverse=True)\n\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            continue\n\n        if arr[i] == 2:\n            continue\n\n        if arr[i] == 3:\n            continue\n\n        if arr[i] == 4:\n            continue\n\n        if arr[i] == 5:\n            continue\n\n        return sorted([arr[i] for i in range(1, len(arr))], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # You can replace this line with something like:\n    # arr = [max(int(x)) for x in arr]\n    def sort_based_on_distance(x, y):\n        return x - y\n    return sorted(arr, key=lambda x: sort_based_on_distance(x, 1))\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return [arr[0]]\n    elif len(arr) == 3:\n        return [arr[0], sort_array(arr[1]), sort_array(arr[2])]\n    else:\n        raise ValueError(\"Argument 3 must be 1,2,or 3.\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def f(i, j):\n        if i % 2 == 1:\n            return i - 1\n        return j - 1\n\n    def r(i, j):\n        if i % 2 == 1:\n            return i - 1\n        return j - 1\n\n    if len(arr) < 3:\n        print \"Error: length of array is less than 3\"\n        return None\n    if arr[0] == arr[1] == arr[2]:\n        print \"Error: First two elements are the same\"\n        return None\n    if arr[0] < arr[1] < arr[2]:\n        print \"Error: first three elements are less than the second\"\n        return None\n    if arr[0] < arr[1] < arr[2] < arr[3]:\n        print \"Error: first three elements are less than the second\"\n        return None\n    if arr[0] == arr[2]:\n        print \"Error: First two elements are the same\"\n        return None\n    if arr[1] == arr[3]:\n        print \"Error: First two elements are the same\"\n        return None\n    if arr[0] > arr[2] > arr[3]:\n        print \"Error: First two elements are less than the second\"\n        return None\n    if arr[0] > arr[1] > arr[2] < arr[3]:\n        print \"Error: First two elements are less than the second\"\n        return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert isinstance(arr, list)\n\n    num_ones = len(arr)\n    if num_ones == 0:\n        return []\n\n    for i in range(0, num_ones, 2):\n        arr[i] %= 1\n\n    num_bits = len(arr)\n    if num_bits == 0:\n        return []\n\n    if num_bits == 1:\n        return arr\n\n    if num_bits == 2:\n        num_bits1 = len(arr)\n        if num_bits1 == 1:\n            return arr\n        else:\n            return sort_array(arr)\n\n    elif num_bits == 3:\n        num_bits2 = len(arr)\n        if num_bits2 == 1:\n            return arr\n        else:\n            return sort_array(arr)\n\n    elif num_bits == 4:\n        num_bits3 = len(arr)\n        if num_bits3 == 1:\n            return arr\n        else:\n            return sort_array(arr)\n\n    else:\n        raise ValueError('Illegal input length: {}'.format(len(arr)))\n\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.count(0) == 0:\n        return arr\n    elif arr.count(1) == 0:\n        return sorted(arr, key=lambda x: x + 1)\n    elif arr.count(2) == 0:\n        return sorted(arr, key=lambda x: x + 1 + x)\n    elif arr.count(3) == 0:\n        return sorted(arr, key=lambda x: x + 1 + x + x)\n    elif arr.count(4) == 0:\n        return sorted(arr, key=lambda x: x + 1 + x + x + x)\n    elif arr.count(5) == 0:\n        return sorted(arr, key=lambda x: x + 1 + x + x + x + x + x)\n\n    if not isinstance(arr, list):\n        arr = [arr]\n    for i in range(arr.count(0)):\n        arr[i] = sorted(arr[i], key=lambda x: x + 1 + x)\n\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.__class__ == int:\n        raise TypeError('Argument must be of type int')\n    def sort_with_ones(i):\n        if arr[i] == 1:\n            return 1\n        elif arr[i] == 2:\n            return 2\n        elif arr[i] == 3:\n            return 3\n        else:\n            return i\n    i = arr.__class__\n    # Ordered array of ints\n    if arr.__class__ == list:\n        def sort(i):\n            return sort_array(i)\n        return sort\n    # Ordered array of floats\n    if arr.__class__ == float or arr.__class__ == np.floatt:\n        def sort(i):\n            return sort_array(i)\n        return sort\n    # Ordered array of bytes\n    if arr.__class__ == bytes:\n        def sort(i):\n            return sort_array(i)\n        return sort\n    # Ordered array of objects\n    if arr.__class__ == str or arr.__class__ == unicode:\n        def sort(i):\n            return sort_array(i)\n        return sort\n    # Ordered array of dicts\n    if arr.__class__ == dict:\n        def sort(i):\n            return sort_array(i)\n        return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n    arr.sort()\n    if len(arr) == 0:\n        return\n    # example for sorting of [-2, -3, -4, -5, -6]\n    if len(arr) == 2:\n        return arr\n    # example for sorting of [-2, -3, -4, -5, -6]\n    if len(arr) == 4:\n        return [\n            arr[0] + arr[1] * (-2) / (-3) - arr[2] * (-4) / (-5),\n            arr[0] + arr[1] * (-2) / (-3) - arr[2] * (-4) / (-5),\n            arr[0] + arr[1] * (-2) / (-3) - arr[2] * (-4) / (-5),\n        ]\n    # example for sorting of [1, 0, 2, 3, 4]\n    if len(arr) == 3:\n        return [\n            arr[0] + arr[1] * (-1) / (-3) + arr[2] * (-2) / (-4) - arr[3] * (-5) / (-6),\n            arr[0] + arr[1] * (-1) / (-3) + arr[2] * (-2) / (-4) - arr[3] * (-5) / (-6),\n            arr[0] + arr[1] * (-1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if len(arr[i]) == 1:\n            if arr[i] == 1:\n                arr[i] = 0\n            else:\n                arr[i] = 1\n        else:\n            if arr[i] < arr[-1]:\n                arr[i] = 0\n            else:\n                arr[i] = 1\n\n    arr = [arr[i] for i in arr]\n    arr.sort(key=lambda i: (i[0], i[1]))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if not isinstance(arr, int):\n        arr = [arr]\n\n    def compare(a, b):\n        try:\n            if len(a) == len(b):\n                return cmp(a, b)\n            else:\n                if len(a) > len(b):\n                    return 1\n                else:\n                    return -1\n        except TypeError:\n            if isinstance(a, int) and isinstance(b, int):\n                return cmp(a, b)\n            else:\n                return cmp(a, b.count(1))\n        else:\n            return 0\n\n    for i in range(len(arr)):\n        if compare(arr[i], arr[i+1]) == 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            arr[i+1], arr[i] = arr[i], arr[i+1]\n        elif compare(arr[i], arr[i+1]) == 1:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            arr[i+1], arr[i] = arr[i], arr[i+1]\n        elif compare(arr[i], arr[i+1]) == -1:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            arr[i+1], arr[i] = arr[i], arr[i+1]\n\n    return arr\n\nsort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for a in arr:\n        if a in [1, 0, 2, 3, 4]:\n            return a\n        if a in [0, 1, 2, 3, 4]:\n            if a in [1, 2, 3, 4]:\n                return a\n            else:\n                return sorted([a for a in arr if a % 2 == 0 and a in [1, 0, 2, 3, 4]])\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, dict):\n        return sort_array(arr.values())\n    if isinstance(arr, (list, tuple)):\n        return sorted(arr)\n    elif isinstance(arr, int):\n        if arr == 1:\n            return [1, 2]\n        elif arr == 2:\n            return [2, 3]\n        elif arr == 3:\n            return [3, 4]\n        elif arr == 4:\n            return [4, 5]\n        elif arr == 5:\n            return [5, 6]\n        elif arr == 6:\n            return [6, 7]\n        else:\n            return [0, 1, 2, 3, 4]\n    elif isinstance(arr, float):\n        return [float(a) for a in sorted(arr)]\n    else:\n        raise TypeError(\"Can't sort number %s\" % str(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    _sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= len(arr[0]):\n        return arr\n    out = []\n    for i in range(0, len(arr[0])):\n        if arr[i]:\n            out.append(arr[i])\n        else:\n            out.append(0)\n    return sort(out)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort integer based on binary representation\n    for i,n in enumerate(arr):\n        if (n & 1)!= 0:\n            arr[i] = sort_array(arr[i - 1] + arr[i])\n    # sort based on decimal\n    for i,n in enumerate(arr):\n        arr[i] = arr[i] / 10\n    # sort based on decimal\n    return sorted(arr, key=lambda x : -x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        if arr[0] == 1:\n            return [arr[1:] for x in range(1, len(arr), 1)]\n        else:\n            return sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) > 1:\n        arr = sorted(arr, key=lambda x: int(x) // 2, reverse=True)\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Example:\n    # >>> sort_array([2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    # >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    # >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    # >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\n    def __init__(self):\n        self.pos = 0\n        self.mask = 1\n\n    def sort(self):\n        \"\"\"\n        Given an array of non-negative integers, sort the array according to their\n        number of ones in binary representation in ascending order.\n        \"\"\"\n\n        # example 1:\n        # >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        # >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        # >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n        # Example 2:\n        #", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # first, remove the ones from the array\n    arr = [ arr for arr in arr if arr ]\n    # convert the array to int, then sort it\n    for number in range(len(arr)):\n        if arr[number] == 1:\n            arr[number - 1] += 1\n        else:\n            arr[number] += 1\n    return arr\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # We use a bitwise and to compare the binary representation of the elements.\n    # If the values are the same then compare based on the decimal value.\n    for i, b in enumerate(arr):\n        if b == '1':\n            return i\n        if b in ['0', '1']:\n            return i - 1\n        if i > 0:\n            if i == len(arr) - 1:\n                return i - 1\n        else:\n            if b == '1':\n                return i - 1\n            if i < len(arr) - 1:\n                return i\n    return -1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _make_sorted(s):\n        i = 0\n        while i < len(s):\n            j = i + 1\n            if s[i] == 1:\n                s[j] = 0\n            else:\n                s[j] = s[i]\n        return s\n\n    def _sort(s, start, end):\n        i = start\n        while i < end:\n            j = i\n            if s[i] == 1:\n                s[j] = 0\n            else:\n                s[j] = s[i]\n            i = j + 1\n        return s\n\n    def _sort_list(lst):\n        l = lst\n        start = 0\n        end = len(l)\n        while start < end:\n            s = []\n            _make_sorted(l)\n            _sort(s, start, end)\n            l = [l[s[0]], l[s[1]]]\n        return l\n\n    return sort_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[0], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            return sorted(arr[i+1:], key=lambda x: x*x)\n        elif arr[i] == 0:\n            return sorted(arr[i+1:], key=lambda x: x*x)\n        else:\n            return sorted(arr[i+1:], key=lambda x: x*x*2)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    raise NotImplementedError(\"Sort function is not implemented\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_first(arr):\n        \"\"\"\n        Sorts the first item in the array in ascending order.\n        This is the first element of the array.\n        >>> arr == [1, 1, 1, 1, 1]\n        True\n        >>> arr == [1, 1, 2, 2, 2]\n        True\n        >>> arr == [1, 3, 5, 3, 5]\n        True\n        >>> arr == [1, 1, 1, 1, 2]\n        True\n        >>> arr == [1, 2, 2, 2, 2]\n        True\n        >>> arr == [1, 1, 2, 3, 4]\n        True\n        >>> arr == [1, 2, 2, 3, 4]\n        True\n        >>> arr == [1, 2, 2, 3, 4]\n        True\n        >>> arr == [1, 2, 2, 3, 4]\n        False\n        >>> arr == [1, 2, 2, 4, 4]\n        False\n        >>> arr == [1, 2, 2, 4, 4]\n        False\n        >>> arr == [1, 2, 3, 3, 3]\n        True\n        >>> arr == [1, 2, 3, 4, 4]\n        True\n        >>> arr == [1, 2, 4, 4, 4]\n        True\n        >>> arr == [1, 2, 4, 5, 5]\n        True", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_value(value):\n        \"\"\"\n        Returns the sorted array according to the sorted value.\n\n        For example, the array [0, 1, 2, 3] is sorted in ascending order based\n        on the sorted value of 0. So, this function returns [0, 1, 2, 3]\n        \"\"\"\n        try:\n            return sorted(value)\n        except ValueError:\n            return sorted(value, reverse=True)\n\n    def sort_integers(value):\n        \"\"\"\n        Returns the sorted array according to the sorted number of ones in their\n        binary representation in ascending order.\n\n        For example, the array [0, 1, 2, 3] is sorted in ascending order based\n        on the sorted number of ones of 3.\n        \"\"\"\n        try:\n            return sorted(value)\n        except ValueError:\n            return sorted(value, reverse=True)\n\n    if len(arr) > 0:\n        for index, value in enumerate(arr):\n            if value == 1:\n                value = '-1'\n            elif value == 0:\n                value = '0'\n            elif value == 2:\n                value = '0'\n            elif value == 3:\n                value = '1'\n            elif value == 4:\n                value = '1'\n            elif value == 5:\n                value = '1'\n            elif value == 6:\n                value = '1'\n            elif value == 7:\n                value = '0'\n            elif value", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return sort_array(arr)\n    # If the array is longer than 2, sort the array in a list.\n    elif len(arr) > 2:\n        return sorted(arr)\n    else:\n        return sorted([int(x) for x in arr])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) % 2:\n        raise ValueError, 'Sort array must be of the form (a,b,c)'\n\n    if len(arr) % 3:\n        raise ValueError, 'Sort array must be of the form (a,b,c,d)'\n\n    if len(arr) % 4:\n        raise ValueError, 'Sort array must be of the form (a,b,c,d,e)'\n\n    nums = 0\n    ones = 0\n    for i in range(len(arr)):\n        nums = nums + 1\n        if arr[i] % 2:\n            ones = ones + 1\n            continue\n        if arr[i] % 3:\n            ones = ones + 1\n            continue\n        if arr[i] % 4:\n            ones = ones + 1\n            continue\n\n        if nums == 0:\n            return\n        if ones == 0:\n            return\n        # Sort by number of ones.\n        new_arr = sorted(array(arr, 'uint64'), key=lambda i: (i - nums) * (i + ones))\n\n        # Sort by decimal value.\n        if len(new_arr) == 0:\n            return\n        new_arr = sorted(array(new_arr, 'double'), key", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda i: int(i[0]) or 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) % 2 == 0:\n        return arr.reverse()\n    else:\n        return sort_decimal(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # There must be a case for taking array into account.\n    if arr is None:\n        return arr\n    if arr.__len__() == 0:\n        return []\n    if arr.__len__() == 1:\n        return sorted(arr, key=lambda x: x + 1)\n    elif arr.__len__() == 2:\n        return sorted(arr, key=lambda x: x + x)\n    elif arr.__len__() == 3:\n        return sorted(arr, key=lambda x: x + x + x)\n    else:\n        return sorted(arr, key=lambda x: (x < 0 and -(x + 1)) or x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This code is a bit brute force, but it is extremely fast.\n    # >>> sort_array([1, 5, 2, 3, 4]) # No idea why it takes so long\n    # [-2, -3, -4, -5, -6]\n    # >>> sort_array([-2, -3, -4, -5, -6]) # Yes, it is faster\n\n    arr = [int(x) for x in arr]\n\n    try:\n        if arr[0] % 2 == 0:\n            arr.sort()\n            return arr\n        else:\n            return arr[1:]\n    except IndexError:\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if not isinstance(arr, list):\n        arr = [arr]\n    if len(arr) % 2 == 1:\n        return\n    for i in range(len(arr) / 2):\n        j = i / 2 + 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n    if len(arr) % 2 == 1:\n        return\n    for i in range(len(arr) / 2):\n        j = i / 2 + 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1\n        j += 1\n        if arr[j] < arr[j + 1:]:\n            j += 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for k in range(len(arr)):\n        if arr[k] == 1:\n            if arr[k] == 2 or arr[k] == 3:\n                if arr[k] == 4:\n                    k += 1\n            else:\n                k -= 1\n        else:\n            k += 1\n    return sorted(arr, key=lambda k: -k)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        num_of_x = len(arr) - 1\n        arr_sorted = []\n        for i in range(0, num_of_x):\n            if arr[i] == 1:\n                arr_sorted.append(i)\n        return arr_sorted\n\n    def sort_negative(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers\n        according to the number of ones in their binary representation in\n        descending order.\n        For similar number of ones, sort based on decimal value.\n        \"\"\"\n        if len(arr) == 0:\n            return arr\n        else:\n            num_of_x = len(arr) - 1\n            arr_sorted = []\n            for i in range(0, num_of_x):\n                if arr[i] < 0:\n                    arr_sorted.append(i)\n            return arr_sorted\n\n    def sort_biggest(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers\n        according to the number of ones in their binary representation in\n        ascending order.\n        For similar number of ones, sort based on decimal value.\n        \"\"\"\n        if len(arr) == 0:\n            return arr\n        else:\n            num_of_x = len(arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        if len(arr) % 2!= 0:\n            raise ValueError(\"length of array must be even!\")\n        elif arr[0] == 1:\n            return arr\n        else:\n            sorted_array = sorted(arr, key=lambda a: a.count(1), reverse=False)\n            if len(sorted_array) == 0:\n                return arr\n            else:\n                return sorted_array[0]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Calculate the sum of the number of ones in the binary representation\n    sum_of_one_count = sum(1 for i in arr)\n    # If there is no sum of ones, then there is no sum of ones, so no one\n    # is more than any other one\n    if not sum_of_one_count:\n        return [-1 for i in arr]\n    # All other ones are less than the ones in the binary representation\n    for i in range(sum_of_one_count):\n        if arr[i] > arr[i - 1] or arr[i] < arr[i + 1]:\n            return [i]\n    return sorted(arr, key=lambda x: x.count(1) - x.count(0), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort the array of numbers, storing it in an array of integers\n    sorted = []\n    for i in arr:\n        if i > 0:\n            sorted.append(i)\n        else:\n            sorted.append(-1)\n    # sort the array of integers\n    sorted_arr = sorted(sorted)\n    # print the sorted array\n    print sorted_arr\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda n: n - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from collections import OrderedDict\n\n    def sort_ascending(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n\n        It must be implemented like this:\n        >>> sort_ascending([1, 5, 2, 3, 4]) == [1, 5, 2, 3, 4]\n        >>> sort_ascending([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> sort_ascending([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        \"\"\"\n        k = 0\n        for i in arr:\n            if i > 0 and i % 2 == 0:\n                if i / 2 == 0:\n                    k += 1\n                else:\n                    k += 2\n\n        if k == 0:\n            return OrderedDict()\n        else:\n            i = arr[k]\n            k += 1\n            while i > 0:\n                if k % 2 == 0:\n                    i = i / 2\n                else:\n                    i = i - 1\n                k = k - 1\n            return OrderedDict((k, i))\n\n    def sort_dec", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.count(1) > 1:\n        arr.sort(key=lambda x: x % 2)\n        return arr[:-1]\n\n    def count_ones(x):\n        return x % 2 == 1\n\n    def sort_by_ones(arr):\n        arr.sort(key=count_ones)\n        return arr[:-1]\n\n    def sort_by_decimal(arr):\n        arr.sort(key=lambda x: x % 2)\n        return arr[:-1]\n\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.__len__() == 0:\n        return arr\n    else:\n        return sorted(arr, key=lambda x: x.count('1') * -1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x % 2 == 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return\n\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        arr = [arr]\n    for x in range(len(arr)):\n        if arr[x] < 0:\n            arr[x] = 0\n        else:\n            arr[x] = arr[x] + 1\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0] == 0:\n        return [arr[1:] for _ in range(len(arr))]\n    else:\n        if arr[0]!= 0:\n            return sorted([int(a) for a in arr], key=lambda x: x[0])\n        else:\n            return sorted([int(a) for a in arr])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    sorted_arr = []\n    for i in range(0, len(arr), 1):\n        if arr[i] in [0, 1, 2, 3, 4]:\n            sorted_arr.append(arr[i])\n        else:\n            sorted_arr.append(i)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # If we find a comparison that would not work, we just return the \n    # original array.\n\n    for x in arr:\n        if x == 0:\n            return x\n        if x == 1:\n            return x\n        if x == 2:\n            return x\n        if x == 3:\n            return x\n        if x == 4:\n            return x\n        if x == 5:\n            return x\n        if x == 6:\n            return x\n        if x == 7:\n            return x\n        if x == 8:\n            return x\n        if x == 9:\n            return x\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(cmp=lambda a, b: cmp(a, b)) # => [1, 3, 4, 5, 2]\n\n    arr.sort(cmp=lambda a, b: cmp(a, b) / 5) # => [2, 4, 6, 5]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if arr[-1] == 0:\n        return\n    if arr[0] == 0:\n        return\n    arr = sorted(arr)\n    return arr[-1] == 0", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = np.array(arr)\n    if arr.count(0) == 0:\n        return arr\n    if arr.count(1) == 0:\n        return arr[1:]\n    if arr.count(2) == 0:\n        return arr[2:]\n    if arr.count(3) == 0:\n        return arr[1:]\n    if arr.count(4) == 0:\n        return arr[1:4]\n    return sorted(arr, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return\n\n    inds = [len(i) for i in arr]\n\n    # Loop over numbers\n    for i in range(inds):\n        if arr[inds - i - 1] == 1:\n            inds -= 1\n\n        if arr[inds - i - 1] == 0:\n            inds -= 1\n\n    # Sort by number of ones\n    for i in range(inds):\n        if arr[inds - i - 1] == 1:\n            arr[inds - i - 1] -= 1\n\n        if arr[inds - i - 1] == 0:\n            arr[inds - i - 1] -= 1\n\n    # Remove all elements\n    arr = [arr[i:] for i in range(inds)]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Two different arrays, sort one first.\n    if len(arr)!= len(arr[0]):\n        raise ValueError('Bad sort')\n    for i, x in enumerate(arr):\n        if x == 0:\n            continue\n        if x > 0:\n            arr[i] = arr[i] - 1\n        elif x < 0:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: len(x) == 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    if not hasattr(arr, \"__len__\"):\n        return []\n    size = len(arr)\n    if size > 1:\n        return sorted(arr, key=lambda x: x, reverse=False)\n    elif size == 1:\n        return arr\n    return sorted(arr, key=lambda x: x*10, reverse=False)[0:10]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Python 2.x doesn't have a built-in sort function\n    if sys.version_info < (2, 5):\n        raise NotImplementedError('sort_array() is only available in Python 2.5+.')\n    # Python 3.x has built-in sort function\n    elif sys.version_info >= (3, 0):\n        def sorted_array(arr):\n            result = []\n            for i in range(len(arr)):\n                if len(arr[i]) == 1:\n                    result.append(i)\n            return result\n\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) > 1:\n        def sorted_array(arr):\n            return sorted(arr)\n        arr = sorted_array(arr)\n        return arr\n    else:\n        def sorted_array(arr):\n            return sorted(arr)\n        arr = sorted_array(arr)\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    if arr[0] == 0 or arr[1] == 0:\n        return None\n    if arr[0] > arr[1]:\n        return arr\n    else:\n        return sorted(arr, key=lambda i: i[1], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        ans = int(arr[0]) + int(arr[1]) + int(arr[2]) + int(arr[3])\n    except ValueError:\n        return [-1, -1, -1, -1]\n    if len(ans) > 1:\n        return sort_array(ans)\n\n    if not isinstance(ans, str):\n        return [-1, -1, -1, -1]\n    if not len(ans) == 4:\n        return [-1, -1, -1, -1]\n    try:\n        ans = int(ans)\n    except ValueError:\n        return [-1, -1, -1, -1]\n    if len(ans) > 1:\n        return sort_array(ans)\n    return [ans]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    for i in range(0, len(arr), 1):\n        if arr[i] == 1:\n            arr[i] = 0\n        elif arr[i] == 0:\n            arr[i] = 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[0] * x[1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # We have to make sure that the array is not empty.\n    if len(arr) < 1:\n        return []\n\n    # Find number of ones in the binary representation.\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] in [1, 2]:\n            num_ones += 1\n\n    # Compare the binary representation of the ones with the decimal values.\n    # The more ones in the binary representation, the higher the priority.\n    # The greater the priority, the more we sort on the decimal value.\n\n    # And the more we sort on the decimal value, the more we sort on the binary\n    # representation.\n    # The better the order is, the greater the priority.\n    priority = [(num_ones / (num_ones + 1)) for num_ones in sorted(arr)]\n    # The less the priority, the more we sort on the binary representation.\n\n    return sorted(priority, reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    count = 0\n    for element in arr:\n        if count == 0:\n            count = 1\n        else:\n            if element > 0:\n                count += 1\n        else:\n            count -= 1\n    return sorted(count)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.count(1) == 0:\n        return arr\n    else:\n        return sorted(arr, key=lambda x: x - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= len(arr[0]):\n        raise ValueError(\"Number of elements in array is not equal to number of elements in array[0]\")\n    if len(arr) == 0:\n        raise ValueError(\"No elements in array.\")\n    if arr[0] == 0:\n        return sorted(arr[1:], key=lambda x: x[0])\n    else:\n        return sorted(arr, key=lambda x: x[0])[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        lower = 0\n        upper = len(arr) - 1\n        reverse = False\n        while lower < upper:\n            if lower in arr[lower]:\n                reverse = True\n                lower = lower + 1\n            else:\n                upper = upper - 1\n            if reverse:\n                lower = upper - 1\n\n    return sorted(arr, key=lambda x : x[0], reverse=reverse)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort ascending\n    arr.sort()\n    # sort descending\n    arr.reverse()\n    # return sorted array\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0] < arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    elif arr[1] < arr[0]:\n        arr[1], arr[0] = arr[0], arr[1]\n    if arr[0] == arr[1]:\n        return arr\n    else:\n        arr[0], arr[1] = arr[1], arr[0]\n        return sort_array([(arr[0] + arr[1])/2])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # define array keys\n    keys = list(arr) # list of keys\n    sorted_keys = sorted(keys, key=lambda x: x % 2)\n    # for each key, sort according to number of ones in its binary representation\n    for key in sorted_keys:\n        if key % 2:\n            yield key", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Create a bit mask to index the integers in the array and to represent\n    # ones in binary format.\n    mask = 1 << (len(arr) - 1)\n    # The decimal representation of an integer. The first digit is the number of\n    # ones in binary representation, the second digit is the number of zeros.\n    dec = struct.pack('d', len(arr) - 1)\n\n    # Iterate through the array and build the binary representation of each\n    # integer from its decimal representation. Use the byte array to store the\n    # binary representation of each integer.\n    for i in range(len(arr)):\n        result = arr[i]\n        # Find the index of the integer in the binary representation. The\n        # byte array stores a string of zeros and ones. The binary representation\n        # of an integer is the integer with a 1 in the correct position and\n        # zeros in the wrong positions.\n        index = 0\n        # Build the binary representation of each integer based on the binary\n        # representation of the index. The binary representation of an\n        # integer is the integer with a 1 in the correct position and\n        # zeros in the wrong positions.\n        # Note that we must extract the last digit. This is needed to extract\n        # the number of", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # A naive implementation will return '[1, 5, 2, 3, 4], [-6, -5, -4, -3, -2]'\n    # which is not acceptable. You can implement it like this:\n    # >>> arr = [1, 5, 2, 3, 4]\n    # >>> list(sort_array(arr))\n    # ['1', '5', '2', '3', '4'], ['-6', '-5', '-4', '-3', '2']\n    # >>> arr = [-1, -2, -3, -4, -5, -6]\n    # >>> list(sort_array(arr))\n    # ['-', '-2', '-3', '-4', '-5', '-']\n    # >>> arr = [-1, -2, -3, -4, -5, -6]\n    # >>> list(sort_array(arr))\n    # ['-6', '-5', '-4', '-3', '-2']\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted([int(x) for x in arr], key=lambda x: x.count('1'))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return [arr]\n    if isinstance(arr, int):\n        arr = [arr]\n    elif isinstance(arr, long):\n        arr = [arr]\n    elif isinstance(arr, float):\n        arr = [arr]\n    elif isinstance(arr, str):\n        arr = [arr]\n    elif isinstance(arr, bytes):\n        arr = [arr]\n    else:\n        raise TypeError('Input must be int, long or string.')\n    for i in range(0, len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return sorted(arr, key=lambda x: x[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"First element should be at least two.\")\n    if len(arr) > 2:\n        raise ValueError(\"Second element should be at most two.\")\n\n    num_of_1s = 0\n    for i in range(len(arr)):\n        if (1 in arr[i]) and (1 not in arr[i + 1]):\n            num_of_1s += 1\n\n    sorted_array = []\n    sorted_array.append(num_of_1s)\n    while len(sorted_array) < 3:\n        sorted_array.append(0)\n\n    for i in range(len(sorted_array)):\n        if (sorted_array[i] < 3) and (sorted_array[i + 1] > 0):\n            sorted_array.insert(i, sorted_array[i + 1])\n            sorted_array.insert(i + 1, sorted_array[i - 1])\n\n    return sorted_array\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    raise NotImplementedError\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(arr, key=lambda x: x[0]):\n        \"\"\"\n        Sorts an array in ascending order by key.\n        If key has already been computed, then it is returned. Otherwise, if\n        the key is not defined, then it returns None.\n        \"\"\"\n        if not arr:\n            return None\n        if key is None:\n            return arr\n        key = key(arr)\n        if key is None:\n            return None\n        if key in arr:\n            return arr[key]\n        else:\n            return sort(arr, key)\n\n    def _sorted_sorted(s):\n        \"\"\"\n        Returns a sorted list of elements in s.\n        \"\"\"\n        if len(s) == 1:\n            return [s]\n        if len(s) == 0:\n            return []\n        if isinstance(s, list):\n            return sorted(s)\n        if isinstance(s, tuple):\n            return sorted(s, key=sort)\n        else:\n            return s\n\n    def _sorted_sorted_with_negative_zero(s):\n        \"\"\"\n        Returns a sorted list of elements in s that have a negative value.\n        \"\"\"\n        if len(s) == 0:\n            return [s]\n        if len(s) == 1:\n            return [s]\n        if isinstance(s, list):\n            return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a, b % 2)\n    def shift(a, n):\n        return (a << (n - 1)) | (a >> (n - 1))\n    def sort(a):\n        \"\"\"\n        Sort the input array in ascending order. So that if the input\n        array has the same number of ones, the output array has the same\n        number of ones.\n        \"\"\"\n        def sorted_array(a, n):\n            \"\"\"\n            Sort the input array in ascending order. So that if the input\n            array has the same number of ones, the output array has the same\n            number of ones.\n            \"\"\"\n            if len(a) == n:\n                return a\n            if len(a)!= 0:\n                a = [a[0]]\n            if n < len(a):\n                n = n + 1\n            res = [(a[0] << shift(a, n))]\n            for i in range(n):\n                res.append(a[i] << shift(a, n))\n                res.append(a[i] >> shift(a, n))\n            return res\n        return sorted_array(arr, len(arr))\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    s = []\n    l = len(arr)\n    while l > 1:\n        n = arr.pop()\n        if n!= 0:\n            if n > 1 and n % 2 == 0:\n                s.append(n)\n            else:\n                s.append(n-1)\n\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        if arr.__len__() == 1:\n            return arr\n        if not isinstance(arr, int):\n            raise TypeError(\"array of non-negative integers must be of type int\")\n    except TypeError:\n        return sorted(arr, key=lambda x: x[1], reverse=True)\n    else:\n        return sorted([(x[1], x[0]) for x in arr], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if arr[0] == 0 and len(arr) == 1:\n        return [arr[0]]\n    if arr[0]!= 0 and arr[0] not in [1, 5]:\n        return []\n    max_value = 0\n    for i in range(len(arr)):\n        if arr[i] == 0 and arr[i] not in [1, 5]:\n            continue\n        if arr[i] > max_value:\n            max_value = arr[i]\n    if max_value == 0:\n        return []\n    return sorted(arr[:max_value], key=lambda x: int(x//max_value)*x, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        # We can't sort the values even if there is only one, because\n        # negative numbers cannot be represented as integers.\n        if len(arr) == 1:\n            arr = [0]*len(arr)\n            return arr\n        else:\n            # convert the array into a string\n            arr = arr.split(' ')\n            # sort the values by number of ones\n            arr = sorted(arr, key=lambda x: x.count('1') * 1, reverse=True)\n            # if we are doing a binary comparison, we have to use the\n            # smaller number as lower bound\n            if arr[1] < arr[0]:\n                arr = sorted(arr, key=lambda x: x, reverse=True)\n            # return the sorted array\n            return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [(int(n) + 1) % 2 for n in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        if a[0] == 0 and b[0] == 0:\n            return 0\n        elif a[0] == 0 and b[0]!= 0:\n            return 1\n        else:\n            return cmp(a[1:], b[1:])\n\n    def _sort_indices(arr):\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                arr[i] = 1\n            elif arr[i] == 1:\n                arr[i] = 0\n            else:\n                continue\n            _sort_indices(arr[1:])\n        return arr\n\n    if len(arr)!= len(arr[0]):\n        return\n    arr = sort_array(arr)\n    return sorted(arr, cmp=cmp, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def reverse(x):\n        return x > 0\n    def num_nonzero(x):\n        return x > 0 and x < len(x) // 2\n    def binary_sort(a):\n        \"\"\"\n        Returns a new array of binary numbers.\n        \"\"\"\n        new_a = [reverse(a)]\n        for i in range(len(a)):\n            new_a[i] = binary_sort(a[i])\n        return new_a\n    return sorted(a for a in arr if num_nonzero(a))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0] == 1:\n        return sorted(arr[1:], key=lambda x: x - 1)\n    else:\n        return sorted(arr[1:], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Determine the minimum and maximum count\n    min_count, max_count = arr.count(1)\n    # Determine the number of ones in the binary representation of arr\n    ones = arr.count(0)\n    # Determine the binary representation of arr\n    binary = []\n    for i in range(min_count):\n        binary.append(arr[i % ones])\n        arr[i] = 0\n    # Sort based on binary representation in ascending order\n    binary.sort(key=lambda x: x)\n    return binary", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Since we will sort on one number of ones, we need to save the original\n    # input array first.\n    arr = arr.copy()\n    arr[:] = []\n    arr = arr.sort()\n\n    # Now we are going to find the most common ones among the ones in the input\n    # array. The simplest way to find the most common ones is to take the\n    # highest number of ones and divide it by the total number of ones.\n    # This is a tricky operation and we will have to perform more comparisons.\n    if arr.count(1) > len(arr) / 2:\n        return sorted(arr[:-1])\n\n    # This is the most common number of ones in the input array.\n    return sorted(arr[:-1])[-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if len(arr) < 2:\n        raise ValueError('Too few integers to sort.')\n\n    arr = [int(i) for i in arr]\n\n    arr = [arr]\n\n    arr = sorted(arr, key=lambda x: x * x)\n\n    if len(arr) < len(arr):\n        return arr\n\n    tmp = arr\n    for i, v in enumerate(arr):\n        if i == len(arr) - 1:\n            tmp.append(v)\n        else:\n            tmp.insert(i - 1, v)\n\n    return tmp\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return\n\n    if len(arr) == 0:\n        return\n    arr_ary = []\n\n    for i in range(0, len(arr)):\n        arr_ary.append(arr[i])\n        if arr[i] == 1:\n            arr_ary.append(0)\n        else:\n            arr_ary.append(1)\n\n    sorted_arr = []\n    for i in range(0, len(arr)):\n        if arr[i] == 1:\n            sorted_arr.append(i+1)\n        else:\n            sorted_arr.append(i)\n\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 1:\n        raise ValueError(\"You must pass a single element as first parameter.\")\n\n    n = len(arr)\n    i = 1\n    while i < n:\n        if arr[i] == 1:\n            i = i + 1\n        else:\n            if abs(arr[i]) > abs(arr[i-1]):\n                i = i - 1\n\n    if i < n:\n        return arr[i-1]\n\n    return arr[i-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_index(index):\n        if index < 0:\n            return -1\n        return 1 + index - 1\n\n    def sort_by_hex(index, arr):\n        if index in arr:\n            return 1\n        return -1\n\n    def sort_by_int(index, arr):\n        if index >= 0:\n            return index + 1\n        return -1\n\n    def sort_array(arr):\n        arr2 = [(n, s) for n, s in arr]\n        s = sort_index(arr2.index(arr2[0][1]))\n        return sorted(arr2, key=lambda x: sort_by_hex(x[0], arr), reverse=True)\n\n    # printing the above function\n    # >>> print sort_array([1, 5, 2, 3, 4])\n    # [1, 2, 3, 4, 5]\n    # >>> print sort_array([-2, -3, -4, -5, -6])\n    # [-6, -5, -4, -3, -2]\n    # >>> print sort_array([1, 0, 2, 3, 4])\n    # [0, 1, 2, 3, 4]\n    # >>> print sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    # [1,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Count total number of ones in binary representation of arr\n    total_ones = 0\n    for i in range(0, len(arr)):\n        total_ones += arr[i]\n    # Create a new array in which every element will be smaller than the other\n    smaller_arr = [None] * (len(arr) + 1)\n    # Sort the array based on number of ones\n    # and the number of ones in the binary representation\n    for i in range(len(arr)):\n        # Check if the element is equal to the smallest element of the array\n        if smaller_arr[i] is None:\n            # Insert the element to the new array\n            smaller_arr[i] = arr[i]\n            # If we find the smallest element we get the smallest element of the\n            # smaller_arr\n            if smaller_arr[i] is None:\n                # No such element exist in the smaller_arr\n                # So, we cannot insert the smallest element to the smaller_arr\n                continue\n        # Check if the element is larger than the smallest element of the array\n        elif smaller_arr[i] is not None:\n            # Insert the element to the new array\n            smaller_arr[i] = smaller_arr[i] - arr[i]\n            # If we find the smallest element we get the smallest element of the\n            # smaller_arr\n            if smaller", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr)!= 1:\n        raise ValueError(\"sort_array([]) not implemented\")\n    if arr[0] == 0:\n        return []\n    n = len(arr)\n    if n < 1:\n        return []\n    if arr[0] % 2 == 1:\n        result = []\n        for i in range(1, n):\n            result.append(arr[i])\n        return result\n    i = 1\n    while i <= n:\n        if arr[i] % 2 == 1:\n            result = []\n            for j in range(i, i + 1):\n                result.append(arr[j])\n            return result\n        i = i + 1\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert len(arr) % 2 == 0, \"not a multiple of 2\"\n    # If the input is sorted by descending order, we must revert the order\n    # before we can sort it in ascending order.\n    if sort_by_decimals:\n        arr = list(arr)\n        arr.reverse()\n        sort_array(arr)\n\n    # If there are 2's in binary representation, we must sort by descending order\n    if arr[0] == 2 and arr[1] == 2:\n        arr = sorted(arr, reverse=True)\n    elif arr[0] == 2:\n        # Sort by ascending order\n        sort_array(arr)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        left, right = arr\n    except ValueError:\n        return [left, right]\n    res = []\n    for i, l in enumerate(left):\n        for j, r in enumerate(right):\n            if l == r:\n                res.append(i)\n        elif l < r:\n            res.append(i + 1)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_iter(iterable):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n        \"\"\"\n        result = {}\n        # Initialise result\n        for element in iterable:\n            result[element] = element\n        # Loop over elements\n        for index in range(len(iterable)):\n            # Get index\n            index = index / (len(iterable) - 1)\n            # Get element\n            element = iterable[index + 1]\n            # Update result\n            result[index] = result[index] + element\n        return result\n\n    # Get binary representation of elements\n    numbers = sorted(iterable, key=sort_iter)\n    # Iterate over binary representation\n    for number in numbers:\n        # Put number in result\n        result[number] = number\n\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO implement something useful for sorting array based on integer\n\n    # Pick the smallest element from arr, or raise exception\n\n    if not isinstance(arr, list):\n        raise TypeError(\"sort_array requires an array\")\n\n    # If arr is already sorted in descending order, just return the result.\n\n    if isinstance(arr, dict):\n        return sorted(arr.items(), key=lambda x: x[1])\n\n    if len(arr) == 0:\n        raise ValueError(\"No values found\")\n\n    # Build up a list of the smallest values.\n\n    sorted_list = []\n\n    # Remove the sorted values from arr.\n\n    arr = arr[::-1]\n\n    # Determine the smallest element that is not in arr.\n\n    smallest_value = arr.index(arr[-1])\n\n    # Build up the list sorted in descending order.\n\n    sorted_list.append(smallest_value)\n\n    # If arr is sorted in ascending order, just return the result.\n\n    return sorted_list", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [None] * len(arr)\n    if arr:\n        # start with None\n        for i in range(len(arr)):\n            if arr[i] == None:\n                arr[i] = 0\n            else:\n                arr[i] += 1\n    return sorted(arr, key=lambda x : -x)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def reverse(s):\n        \"\"\"\n        Reverses the input string.\n        \"\"\"\n        if s[-1] == '1':\n            return s[:-1]\n        return s\n\n    def main():\n        \"\"\"\n        The main function that performs the sorting.\n        \"\"\"\n        # Declare the input values\n        arr = []\n        # Declare the for loop\n        for i in range(1, 3):\n            arr.append(i * 10)\n        # Declare the function that performs the sorting\n        def sort_func():\n            \"\"\"\n            Function that performs the sorting.\n            \"\"\"\n            for i in range(1, len(arr)):\n                # Sorting the array\n                sort_array(arr)\n                # Sorting the sorted array\n                sort_array(arr[:len(arr) / 2])\n            # Sorting the reversed array\n            sort_array(reverse(arr))\n        # Call the function\n        sort_func()\n        # Display the output\n        print(sort_func())\n    main()\n    main()\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    elif len(arr) == 2:\n        return sorted([int(x) for x in arr])\n    else:\n        return sorted(sorted([int(x) for x in arr]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0] == 1:\n        return arr[1:]\n    elif arr[0] == 0:\n        return sorted(arr[1:], reverse=True)\n    else:\n        return sorted(arr, reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0] == 0:\n        return\n    arr[::-1].sort(key=lambda x: x[0]) # reverse\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"You must specify a list of non-negative integers,\"\n                  \" not only integers\")\n    if len(arr) == 2:\n        return int(arr[0])\n    arr = sorted(arr, key=lambda x: x & 1)\n    return arr[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert(arr.count(0) == 1)\n    assert(arr.count(1) == 1)\n    assert(arr.count(2) == 1)\n    assert(arr.count(3) == 1)\n    assert(arr.count(4) == 1)\n    assert(arr.count(5) == 1)\n    assert(arr.count(6) == 1)\n    for i in range(0, 6):\n        if arr[i] == 1:\n            sort(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n    if len(arr) == 0:\n        return []\n    # Binary representation of non-negative integers.\n    b_array = []\n    for i in range(0, len(arr)):\n        b_array.append(arr[i] % 2)\n    # Binary representation of integers in ascending order.\n    a_array = []\n    for i in range(0, len(arr)):\n        a_array.append(b_array[i] - arr[i])\n    # Sort ascending.\n    a_array = sorted(a_array, key=lambda x: x, reverse=False)\n    return a_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0]) # call sort function\n    return zip(arr, x for x in arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sorted(arr, key=lambda x, y: cmp(y, x) if y > x else cmp(x, y))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    arr = [a for a in arr]\n    def _reverse(a):\n        if len(a) == 0:\n            return None\n        elif len(a) == 2:\n            return a[0]\n        else:\n            return a[1]\n    def _sort_each(array):\n        \"\"\"\n        You can sort array using the above two function in either ascending or descending order.\n        \"\"\"\n        arr = []\n        for i in range(len(array)):\n            array[i] = _reverse(array[i])\n        for i in range(len(array)):\n            for j in range(len(array[i])):\n                arr.append(array[i][i])\n        return arr\n\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)\n    arr = sort_array(arr)\n    print(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return\n    if len(arr) == 0:\n        return\n    arr_ints = []\n    for i, number in enumerate(arr):\n        arr_ints.append(number % 2)\n    if len(arr_ints) == 1:\n        return arr_ints\n    index = 0\n    while index < len(arr_ints):\n        if arr_ints[index]:\n            index += 1\n        else:\n            index -= 1\n    if len(arr_ints)!= 1 or (len(arr_ints) == 1 and len(arr_ints[0]) == 1):\n        print \"ERROR: An array was passed in, but it is not sorted.\"\n    else:\n        sorted_array = sorted(arr_ints, key=lambda x: x % 2)\n        return sorted_array\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # FIXME\n    return sort_array(arr, [int(x) for x in arr], 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert arr.shape == (2,)\n    assert arr.count(1) == 1\n    sorted_arr = arr[::-1]\n    sorted_sorted = sorted(sorted_arr)\n    return sorted(sorted_sorted, key=lambda x: x * (-x) ** 2)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = []\n    for i in range(len(arr)):\n        a.append(arr[i])\n    a.sort()\n    return a\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[0] + x[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # First, we need to convert the array into a binary string.\n    arr = sorted(arr)\n    # Then, we have to convert it back to an array.\n    arr = [binary(i) for i in arr]\n    # And we will sort the array based on number of ones in their binary\n    # representation in ascending order.\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    def _compare(a, b):\n        \"\"\"\n        Compares a with b in binary representation.\n        \"\"\"\n        return a[0] + b[0] + a[1] + b[1] + a[2] + b[2]\n\n    if isinstance(arr, list):\n        return sorted(arr, cmp=_compare)\n    elif isinstance(arr, dict):\n        return sorted(arr.keys(), cmp=_compare)\n\n    if isinstance(arr, list):\n        arr = sorted(arr, key=_compare)\n    elif isinstance(arr, dict):\n        arr = sorted(arr.keys(), key=_compare)\n\n    def _sort_func(a, b):\n        \"\"\"\n        Compares a with b in binary representation.\n        \"\"\"\n        return (a[0] + b[0] + a[1] + b[1] + a[2] + b[2]) / 2\n\n    return sorted(arr, key=_sort_func, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x:x[0])\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            arr.insert(i, arr[i-1]+ 1)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, int):\n        raise TypeError(\"sort_array(): expected array of integer\")\n    else:\n        return [sorted(x) for x in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x:x.count('1'))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr == []:\n        return []\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    if len(arr) == 3:\n        return [arr[0], arr[1], arr[2]]\n    if len(arr) == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 1:\n            arr[i] += 1\n        else:\n            arr[i] -= 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    a = []\n    for i in range(len(arr)):\n        if arr[i]:\n            a.append(i)\n    # if len(a) > 1:\n    #     arr.sort(key=lambda x: x[0], reverse=True)\n    # else:\n    #     arr.sort(key=lambda x: -x[0], reverse=False)\n    return a\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # We just use the default algorithm for this\n    def _sorter(a, b):\n        try:\n            # It's better to use a faster algorithm for all types of numbers that\n            # have millions of elements.\n            n = b.count('1') - a.count('1') + 1\n        except ValueError:\n            # Otherwise, use the standard algorithm\n            return cmp(b.count('1'), a.count('1'))\n    return _sorter", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) > 1:\n        return sorted(arr, key=lambda x: int(x) - int(arr[0]) + 1)\n    else:\n        return sorted(arr, key=lambda x: int(x) - int(arr[0]) + 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, int):\n        arr = [arr]\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    else:\n        arr = sorted(arr)\n        return [arr[i] for i in range(len(arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= len(arr[0]):\n        raise ValueError('Length of arrays must be the same')\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] / 2\n        else:\n            arr[i] = arr[i] - arr[i] / 2\n    return sorted(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # use binary comparator here\n    def binary_compare(a, b):\n        \"\"\"\n        Returns true if two values a and b are equal, else false\n        \"\"\"\n        return ((a == 0) and (b == 0)) or ((a == 1) and (b == 1))\n    return lambda a, b: binary_compare(a, b)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort is not possible to sort smaller numbers than 3, 6 and 9\n    if arr.size() < 3:\n        return arr\n    # If the number of ones is equal to the number of ones in arr, sort by\n    # order of decimal representation\n    if len(arr) == len(arr[0]):\n        arr = sorted(arr, key=lambda x: x.decimal_representation())\n        return arr\n    # The number of ones in arr is less than the number of ones in arr[0]\n    else:\n        # If the number of ones is greater than the number of ones in arr[0]\n        # than arr[0] is less than arr. If the number of ones in arr[0]\n        # is greater than arr[0], arr[0] is greater than arr.\n        if arr[0] < arr:\n            return sort_array(arr)\n        else:\n            return sort_array(arr[0])\n    # If the number of ones in arr[0] is greater than arr[0], arr[0] is greater\n    # than arr, arr is greater than arr[0], and arr[0] is greater than arr.\n    if arr[0] > arr:\n        return sort_array(arr)\n    else:\n        return sort_array(arr[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if i > 1:\n            result.append(arr[i - 1])\n            arr[i - 1] = arr[i]\n        else:\n            result.append(arr[i])\n            arr[i] = arr[i - 1]\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(x, y):\n        if x.count(1) == y.count(1):\n            return x[0] < y[0]\n        elif x.count(1) > y.count(1):\n            return x[1] < y[1]\n        else:\n            return x[0] < y[0]\n    arr = sorted(arr, key=lambda x: sort(x, x[0]))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, int):\n        arr = [arr]\n    if len(arr) == 0:\n        return\n    # Sort the array of non-negative integers in ascending order.\n    # Determine a common denominator.\n    common_denominator = 0\n    for i in range(len(arr)):\n        if (arr[i]!= 0 and arr[i]!= 1):\n            common_denominator += arr[i]\n    # If the common denominator is zero, we know that the elements are non-negative.\n    # Otherwise, we must make sure all elements are non-negative.\n    if common_denominator == 0:\n        # Find the next largest element.\n        i = 0\n        while i < len(arr):\n            if (arr[i] > common_denominator):\n                break\n            i += 1\n    # Find the largest element.\n    largest = 0\n    for i in range(len(arr)):\n        if (arr[i] > largest):\n            largest = arr[i]\n    # Now sort the list according to the largest element.\n    # Insert the largest element into the array.\n    arr.insert(0, largest)\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] / 2\n    return sorted(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from collections import defaultdict\n    sorted_array = defaultdict(list)\n    for item in arr:\n        item = item.to_num()\n        if item == 1:\n            sorted_array[item].append(1)\n        elif item == 2:\n            sorted_array[item].append(2)\n        elif item == 3:\n            sorted_array[item].append(3)\n        elif item == 4:\n            sorted_array[item].append(4)\n        elif item == 5:\n            sorted_array[item].append(5)\n        elif item == 6:\n            sorted_array[item].append(6)\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def accumulate(arr):\n        count = 0\n        for i in range(len(arr)):\n            if arr[i]:\n                count += 1\n        return count / len(arr)\n\n    def iterkeys(arr):\n        arr.sort()\n        return sorted(arr, key=accumulate)\n    return iterkeys(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sorted_array(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n\n        It must be implemented like this:\n        >>> sorted_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> sorted_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> sorted_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        \"\"\"\n        if arr is None:\n            raise ValueError(\"sort_array() can't be called on None\")\n        result = []\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                result.append(i)\n            else:\n                result.append(i * arr[i] / 100 + i)\n        return sorted(result, reverse=True)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(arr, count, reverse=False):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according\n        to number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n\n        It must be implemented like this:\n        >>> sort([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> sort([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> sort([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        >>> sort([-2, -3, -4, -5, -6]) [0, -2, -3, -4, -5, -6]\n        >>> sort([1, 0, 2, 3, 4]) [0, 1, 0, 2, 3, 4]\n        >>> sort([-2, -3, -4, -5, -6]) [0, -2, -4, -5, -3, -4]\n        \"\"\"\n        if reverse:\n            arr = sorted(arr, key=lambda x: x[1])\n            return sorted(arr, reverse=reverse)\n        else:\n            return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        arr = [arr]\n    if not len(arr):\n        return\n    if len(arr) > 1 and arr[0] > arr[-1]:\n        sort_order = arr[0] - arr[-1]\n    else:\n        sort_order = -ord(arr[-1])\n    if sort_order == 0:\n        return\n    if sort_order < 0:\n        return\n    return sorted(arr, key=lambda x: -sort_order, reverse=True)[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # First, you must provide the length of array, then you need to\n    # get the list of ones from binary representation.\n    # Remember, the binary representation of an int must be [0, 1, 2, 3]\n    # if your integer is in binary representation.\n\n    arr = [ord(i) for i in arr]\n    try:\n        # Use a dict to maintain the sorted order in descending order.\n        # For example, you can keep the order as:\n        # >>> dict([0, 1, 2, 3])\n        # {'0': 0, '1': 1, '2': 2, '3': 3}\n        # Or you can keep the order as:\n        # >>> dict([(i * 2) for i in range(0, len(arr), 2)])\n        # {'0': 0, '1': 1, '2': 2, '3': 3}\n        dict = {}\n        for i in range(0, len(arr), 2):\n            dict[i] = arr[i // 2]\n            dict[i % 2] = 0\n        for i in range(1, len(arr), 2):\n            dict[i] = dict[i - 1] + arr[i // 2]\n            dict[i % 2] = dict[i // 2]\n\n        # Then, sort the dict using the", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # this is my assumption that the number of ones in a binary representation is\n    # not a parameter to sort this array\n    i = 0\n    j = 0\n    while i < len(arr):\n        if arr[i] & 1:\n            if i == j:\n                break\n            j += 1\n        i += 1\n    return sorted(arr[i:j])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if isinstance(arr, int):\n        arr = arr.tolist()\n    elif arr is None:\n        return\n    elif arr.count('*') > 1:\n        return sorted(arr, key=lambda x: x.count('1'))\n    else:\n        result = []\n        for i in range(len(arr)):\n            result.append(arr[i])\n        return sorted(result, key=lambda x: x.count('1'), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert arr is not None\n    if not len(arr):\n        return\n    return arr.sort()", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if not isinstance(arr, list):\n        return arr\n\n    sorted_arr = [False] * len(arr)\n\n    for i in xrange(len(arr)):\n        for j in xrange(len(arr[i])):\n            if arr[i][j] == 1:\n                if arr[i][j - 1] == 1:\n                    sorted_arr[i][j] = 0\n                    sorted_arr[i][j - 1] = 0\n                else:\n                    sorted_arr[i][j] = 1\n                    sorted_arr[i][j - 1] = 1\n\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) > 1:\n        return sorted(arr, key=lambda n: n % 2)\n    else:\n        if len(arr) > 0:\n            return sorted(arr, key=lambda n: n, reverse=True)[0]\n        else:\n            return arr[0]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = list(arr)\n\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] == 0:\n        return arr[1:]\n    else:\n        # A direct comparison is required for greater than 0 and 0 <= abs(a) < 1.\n        return abs(arr[0] - arr[1]) < 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    arr = arr[0::-1]\n    return sorted(arr, key=lambda x: int(x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # NOTE: you can do this more efficiently by using sorted(x, reverse=True)\n    # but you are not allowed to use this method in Python 2.x\n\n    if isinstance(arr, basestring):\n        arr = [int(x) for x in arr.split(',')]\n\n    return sorted(arr, key=lambda x: x, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 1\n    j = 1\n    while i <= len(arr)-1:\n        if abs(arr[i]) > abs(arr[i+1]):\n            if i < len(arr)-2:\n                if arr[i] - arr[i+1] == 0:\n                    j += 1\n                    while j < len(arr)-1:\n                        if arr[i] - arr[j+1] == 0:\n                            i += 1\n                            break\n                    else:\n                        j = 0\n                    i += 1\n                    while i < len(arr)-1:\n                        if arr[i] - arr[i+1] == 0:\n                            j += 1\n                            while j < len(arr)-1:\n                                if arr[i] - arr[j+1] == 0:\n                                    i += 1\n                                    break\n                            else:\n                                j = 0\n                            i += 1\n                        else:\n                            break\n            else:\n                i += 1\n        else:\n            j += 1\n            while j < len(arr)-1:\n                if abs(arr[i]) == abs(arr[i+1]):\n                    i += 1\n                    break\n                else:\n                    j += 1\n    return arr[:j]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted.append(i)\n        else:\n            if arr[i] == 1:\n                sorted.append(i) # 1 if equal to 0\n            if arr[i] == 2:\n                sorted.append(i) # 2 if equal to 0\n            if arr[i] == 3:\n                sorted.append(i) # 3 if equal to 0\n            if arr[i] == 4:\n                sorted.append(i) # 4 if equal to 0\n            if arr[i] == 5:\n                sorted.append(i) # 5 if equal to 0\n            if arr[i] == 6:\n                sorted.append(i) # 6 if equal to 0\n            if arr[i] == 7:\n                sorted.append(i) # 7 if equal to 0\n            if arr[i] == 8:\n                sorted.append(i) # 8 if equal to 0\n            if arr[i] == 9:\n                sorted.append(i) # 9 if equal to 0\n            if arr[i] == 10:\n                sorted.append(i) # 10 if equal to 0\n            if arr[i] == 11:\n                sorted.append(i) # 11 if equal to 0\n            if arr[i] == 12:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def oned_count(arr):\n        \"\"\"\n        Returns True if arr has exactly one '1'.\n        \"\"\"\n        return len(arr) == 1\n    def reverse(arr):\n        \"\"\"\n        Returns a reversed sequence of arr.\n        \"\"\"\n        return sorted(reverse(arr), key=lambda x: x[1], reverse=True)\n\n    def length(arr):\n        \"\"\"\n        Returns the length of arr.\n        \"\"\"\n        return len(arr)\n\n    def index_of_non_one(arr, i):\n        \"\"\"\n        Returns index of arr where '1' is not found in arr.\n        \"\"\"\n        for j in range(i, len(arr)):\n            if arr[j] == 1:\n                return i + j\n        return i - len(arr) - 1\n\n    def index_of_one(arr, i):\n        \"\"\"\n        Returns index of arr where '1' is found in arr.\n        \"\"\"\n        for j in range(i, len(arr)):\n            if arr[j] == '1':\n                return j + 1\n        return i + len(arr) - 1\n\n    def find_one(arr, i, j):\n        \"\"\"\n        Returns the index of the first occurrence of arr in arr at index i, and\n        the index of the last occurrence of arr in arr at index j", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i, val in enumerate(arr):\n        if val == 1:\n            return i\n        elif val == 0:\n            return -1\n        elif val == 2:\n            return i\n        elif val == 3:\n            return i\n        elif val == 4:\n            return i\n        elif val == 5:\n            return i\n        else:\n            return i + 1\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_func(x):\n        \"\"\"\n        In this function, you have to define how to sort based on the number of\n        ones in their binary representation.\n        >>> sort_func([]) == []\n        >>> sort_func([-1, -2, -3, -4, -5, -6]) == [-2, -3, -4, -5, -6]\n        >>> sort_func([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        >>> sort_func([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        \"\"\"\n        if x.count(1) == len(x):\n            return x\n        return sorted(x, key=lambda x: x.count(1))\n\n    def sort_func1(x):\n        \"\"\"\n        In this function, you have to define how to sort based on the number of\n        ones in their binary representation.\n        >>> sort_func1([]) == []\n        >>> sort_func1([-1, -2, -3, -4, -5, -6]) == [-2, -3, -4, -5, -6]\n        >>> sort_func1([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Make sure we start at 0\n    if arr[0] == 0:\n        arr = [0]*len(arr)\n    # Make sure we have a positive start position\n    if len(arr) < len(arr[0]):\n        arr = [arr[0:]]*(len(arr) - len(arr[0]))\n    # Sort the array based on number of ones\n    arr = sorted(arr, key=lambda x:x, reverse=False)\n    # Clean up the list\n    arr = arr[:len(arr)]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0 or len(arr) % 2 == 1:\n        return arr\n    # get first and last elements of array\n    first = arr[0]\n    last = arr[-1]\n    # get integer part of each element\n    integers = []\n    for i in range(1, len(arr)):\n        integers.append(arr[i] % 2)\n    # calculate integer part based on number of ones\n    for i in range(0, len(arr), 2):\n        integers[i] = int(integer_part(arr[i - 1], integers[i - 1], integers[i + 1]))\n    # find largest integer in each binary representation\n    largest = max(integers)\n    # sort array according to largest integer in each binary representation\n    return sorted(integers, key=lambda x: x[largest])\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0 :\n        return []\n\n    def reverse(s, count):\n        \"\"\"\n        \"\"\"\n        if count == 1:\n            return s[::-1, -1]\n        else:\n            return s[::-1, :-1]\n\n    def replace(s, count, new, index):\n        \"\"\"\n        \"\"\"\n        if count == 1:\n            return new\n        else:\n            return new[index, count]\n\n    new = []\n    s = []\n    for c in range(len(arr)):\n        if arr[c] < 0 :\n            return []\n        if len(arr) < count :\n            s.append(arr[c])\n            new.append(reverse(arr[c], count))\n        else:\n            s.append(replace(arr[c], count, new, index))\n            new.append(reverse(arr[c], count))\n\n    return sort_array(new)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        if len(arr) == 2:\n            return sort_array(arr) == arr\n        elif len(arr) == 3:\n            return sorted(arr) == sorted(arr)\n        elif len(arr) == 4:\n            return sorted(arr) == sorted(arr)\n            #etc...\n    return None", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def num_ones(bin):\n        if bin in [0, 1, 2, 3]:\n            return 1\n        else:\n            return -1\n    def sort_array(arr):\n        tmp = []\n        for item in arr:\n            tmp.append(item if num_ones(item) == 0 else item - num_ones(item))\n        return tmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(a):\n        \"\"\"\n        Sort a list by the number of ones in its binary representation.\n        \"\"\"\n        if len(a) == 0:\n            return None\n        if a[-1]:\n            return a[-1]\n        return a[-1]\n\n    def _get_one(a):\n        \"\"\"\n        Get the binary representation of the number one.\n        \"\"\"\n        if len(a) == 1:\n            return \"1\"\n        elif a[0] == 1:\n            return \"01\"\n        else:\n            return \"0.0\"\n\n    def _get_len(a):\n        \"\"\"\n        Get the number of ones in the binary representation.\n        \"\"\"\n        return len(a)\n\n    def _get_one_not(a):\n        \"\"\"\n        Get the binary representation of the number one if the binary representation\n        of the number one is not one.\n        \"\"\"\n        if a[0]!= 1:\n            return a\n\n    def _sort_preserve(a):\n        \"\"\"\n        Sort the array with respect to the binary representation of number ones.\n        \"\"\"\n        if len(a) == 0:\n            return None\n        if a[-1]:\n            return a[-1]\n        return a[-1]\n\n    def _sort_decide(a):\n        \"\"\"\n        Sort the array based on the decimal value.\n        \"\"\"\n        if len(a) == 0:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for x in arr:\n        if x == 0:\n            continue\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x == 3:\n            return 3\n        if x == 4:\n            return 4\n        if x == 5:\n            return 5\n        if x == 6:\n            return 6", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    arr = sorted(arr, key=lambda x, y: cmp(x, y))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def prune(a, k):\n        ''' Prune an array of a size k. \n        a is an array of ints with k elements.\n        '''\n        for i in range(len(a)-k):\n            if a[i] == 1:\n                a[i] = 0\n\n    def prune_each(a, k):\n        ''' Prune an array of a size k. \n        a is an array of ints with k elements.\n        '''\n        for i in range(len(a)-k):\n            if a[i] == 1:\n                a[i] = 0\n\n    def insert(a, b, k):\n        ''' Insert a k-element array into a smaller array of the same length.\n        a is an array of ints with k elements.\n        '''\n        if a == b:\n            return\n        if len(a) < k:\n            insert(a, b[:k], k)\n        else:\n            insert(a, b, k-k)\n\n    def swap(a, b):\n        ''' Swap two arrays of the same size.\n        a is an array of ints with k elements.\n        '''\n        if len(a) == k:\n            for i in range(len(b)-k):\n                a[len(a)-k-i] = b[", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.count(0) == 0:\n        return [-1 for _ in range(len(arr))]\n    return sorted(list(zip(*sorted(arr, key=lambda _: _.count(0)))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[1], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[1] * x[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def get_next(arr, n):\n        if n == 0:\n            return arr[0]\n        else:\n            return arr[n - 1]\n\n    def get_value(arr, i):\n        return arr[i]\n\n    def sort_decimal(arr):\n        \"\"\"\n        This function is a pseudo-algorithm for sorting a non-negative array\n        by its decimal value. It will sort a non-negative array of\n        integers in ascending order, if the number of ones in the array\n        equals the number of ones in its decimal representation.\n        \"\"\"\n        try:\n            arr[0]\n        except IndexError:\n            return []\n        else:\n            first = True\n            for n in range(1, len(arr)):\n                if arr[n] == 0:\n                    if not first:\n                        first = False\n                    else:\n                        for i in range(n - 1, -1, -1):\n                            arr[i + 1] = arr[i + 1] + 1\n                    first = True\n                else:\n                    first = False\n                    arr[i] = get_next(arr, n)\n            return arr\n\n    def sort_array(arr):\n        \"\"\"\n        This function is a pseudo-algorithm for sorting an array of non-negative\n        integers according to number of ones in their binary representation in\n        ascending order. For similar number of ones, sort based on decimal value", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # a, b, c, d are the numbers in the array\n    a = arr[0]\n    b = arr[1]\n    c = arr[2]\n    d = arr[3]\n\n    # The algorithm works as follows.\n    #\n    # 1) First, calculate the binary representation of the numbers.\n    # 2) Then, calculate the decimal value of the binary representation.\n    # 3) Then, calculate the difference between a and b.\n    # 4) Finally, sort the numbers in descending order based on the difference.\n    #\n    # The binary representation of the numbers can be calculated as follows.\n    #\n    #   If b is a multiple of a, then the binary representation of a is\n    #   the concatenation of the binary representation of b and a itself.\n    #   Otherwise, the binary representation of a is the binary representation of\n    #   a - a itself.\n    #\n    # The decimal value of the binary representation can be calculated as follows.\n    #\n    #   If b is a multiple of a, then the decimal value of b is 1.\n    #   Otherwise, the decimal value of b is the binary representation of b -\n    #   a itself.\n\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0]!= 0:\n        raise ValueError(\"Index 0 is not 0\")\n\n    if arr[1]!= 0:\n        raise ValueError(\"Index 1 is not 0\")\n\n    if arr[2]!= 0:\n        raise ValueError(\"Index 2 is not 0\")\n\n    if arr[3]!= 0:\n        raise ValueError(\"Index 3 is not 0\")\n\n    if arr[4]!= 0:\n        raise ValueError(\"Index 4 is not 0\")\n\n    for i in range(0, 5):\n        if arr[i] > arr[i + 1]:\n            arr[i] = arr[i + 1]\n    for i in range(5, 10):\n        if arr[i] > arr[i + 5]:\n            arr[i] = arr[i + 5]\n    return arr"]]