[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Init list of factors\n    factors = []\n    factors.append(n)\n    factor = n\n    # Loop over factors\n    while factor!= 1:\n        # Get next factor from list\n        factor = factor % factors[-1]\n        # Factorize and append it to list of factors\n        factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = [0] * n\n    for i in xrange(n):\n        factor[i] = factor[i] ** n\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if len(n) == 1:\n        return [1]\n    if len(n) == 2:\n        return [2, 1]\n    factor_list = []\n    factor_list.append(n)\n    for i in range(2, len(n), 2):\n        factor_list.append(n % i)\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    f = (n * n) // 2\n    assert f >= 1\n    assert f <= len(factorize(f - 1))\n    factors = factorize(f - 1)\n    if f % 2:\n        return factors\n    else:\n        return f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for p in range(1, n + 1):\n        if p == n:\n            continue\n        yield p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    primes = [x for x in range(n)]\n\n    prime_count = 0\n\n    if n < 2:\n        while primes[prime_count] > 1:\n            prime_count += 1\n\n    if n < 3:\n        for p in primes:\n            if p > 1:\n                primes.remove(p)\n                prime_count -= 1\n\n    for p in primes:\n        if p > 1:\n            prime_count += 1\n\n    if primes[prime_count] > 1:\n        primes.pop()\n\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 0\n    while factor > 0:\n        factor = factor * n\n        factors.append(factor)\n        if factor % n == 0:\n            break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List()\n\n    # factorize(4) -> [0, 1, 1, 2, 2, 2, 2, 3]\n    # factorize(8) -> [1, 3, 5, 7, 8, 11, 13, 19, 23, 29, 31]\n    # factorize(10) -> [1, 3, 5, 7, 9, 11, 13, 19, 23, 29, 31]\n    # factorize(25) -> [1, 3, 5, 7, 9, 11, 13, 19, 23, 29, 31, 35]\n    # factorize(50) -> [1, 3, 5, 7, 9, 11, 13, 19, 23, 29, 31, 35, 41, 45]\n    # factorize(70) -> [1, 3, 5, 7, 9, 11, 13, 19, 23, 29, 31, 35, 41, 45, 47]\n    # factorize(100) -> [1, 3, 5, 7, 9, 11, 13, 19, 23, 29, 31, 35, 41, 45, 47, 49]\n    return factorize(n)[0] * factorize(n)[1] * factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    # expand any factors that are not a power of two (ie. 6, 16)\n    factorized = []\n    for power in xrange(1, n - 1):\n        if factorized:\n            factorized.append(n)\n        else:\n            factorized.append(power)\n    # list all factors at the end\n    factorized.append(n)\n    # get lowest common factor\n    factorized.pop()\n    return factorized\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # if not n: return None\n    factors = list(n)\n    factor_sizes = {}\n    for i in range(len(factors)):\n        if factors[i] % 2 == 0:\n            factor_sizes[factors[i]] += 1\n    for i in range(len(factors)):\n        if factors[i] % 2 == 0:\n            factors[i] /= 2\n            factor_sizes[factors[i]] += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n\n    return [factorial(x) for x in range(n, 1, -1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    p = 1\n    for i in range(0, len(n), 2):\n        if n % p == 0:\n            p += 1\n    for i in range(0, len(n) - 1, 2):\n        if n % p == 0:\n            p += 1\n    return [p]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        prime.factor(x)\n        for x in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # scale denominator (such that each factor must be divisible by denominator)\n    denominator = 1 << n\n    factors = []\n    for factor in xrange(0, n):\n        if factor == 1:\n            continue\n        elif factor == denominator - 1:\n            factors.append(factor)\n        else:\n            factors.append(factor * denominator)\n\n    # form factorization\n    factors = list(itertools.product(f for f in factors if f % denominator == 0))\n\n    # factorize the list with integers in the order from smallest to largest\n    factor_list = []\n    for factor in factors:\n        factor_list.append(factorial(factor))\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i * 2)\n        else:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    factors = []\n    while n!= 0:\n        factor = factorize(n)\n        if len(factor) == 1:\n            factors.append(factor[0])\n            n -= 1\n        else:\n            for i in range(len(factor)):\n                if i % factor[i] == 0:\n                    factors.append(factor[i])\n                    n -= 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 1\n    for i in range(n):\n        factor *= factor\n        factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [factorize(factor) for factor in n]\n    return [factors[i:i + 2 for i in range(n, len(factors), 2)] for factor in factors]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in xrange(n):\n        factors.append(i % 2)\n        if i % 2 == 1:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 0\n    product = 0\n    for i in range(n):\n        product *= i\n        if i % factor == 0:\n            factor += 1\n        else:\n            break\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(0, n):\n        factors.append(i * i * i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for x in xrange(n):\n        assert x % 2 == 0\n        if x % 5 == 0:\n            return [x, x, x, x, x]\n        if x % 7 == 0:\n            return [x, x, x, x, x, x]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(0, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            if i == 1:\n                factors.append(i + 1)\n            else:\n                factors.append(i - 1)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # find the number of prime factors of n\n    p = int(n // 2)\n    # find the number of factors\n    nf = p + 1\n    # iterate over all primes p <= n\n    for p in range(nf, n):\n        # iterate over all prime factors of p\n        f = factorize(p)\n        # find the product of all factors\n        r = sum(f)\n        # if r is even, then print result\n        if r % 2 == 0:\n            print(f\"{n} is a multiple of {p}\")\n    # if r is odd, then output result\n    else:\n        print(f\"{n} is not a multiple of {p}\")", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factor = 0\n    for v in n:\n        factor = factor * v\n        if factor % 2 == 1:\n            factor = factor / 2\n    return factorize(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    try:\n        return factorize(n, base=10)\n    except ValueError:\n        pass\n\n    factors = [\n        n % base for base in range(10, len(base) + 1)\n    ]\n\n    factorized = [\n        base for base in factors if base not in factors\n        for factor in factors if factor in factors\n    ]\n\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for p in range(1, n + 1):\n        factors.append(p)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [1 for _ in range(n) if not factor(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    left = []\n    right = []\n    for i in xrange(n):\n        if n % i == 0:\n            left.append(i)\n            right.append(n)\n        elif n % i == 1 and i in left:\n            left.remove(i)\n            right.append(n)\n        elif n % i == 2 and i in right:\n            right.remove(i)\n            left.append(n)\n    return left, right", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = factorize(n)\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [n]\n    if n % 2 == 1:\n        return factorize(n / 2)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factorial(n) for factor in itertools.product(factors(i), factors(i)) for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1, 1, 1]\n    if n == 2:\n        return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n > 2:\n        return [\n            i\n            for i in range(1, n - 1, 2)\n            if i < n and i in [1, 2, 3, 5, 7]\n        ]\n    return [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 1:\n        return [factorial(i) for i in range(n - 1, 0, -1)]\n\n    return [factorial(i) for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [0]*n\n    for i in xrange(0, len(factors), 1):\n        factor = factors[i]\n        if factor:\n            yield factor * i\n\n    # Last factor is smaller, so it is out of order\n    if len(factors) > len(factors[0]):\n        yield len(factors) - 1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        if i!= 1:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = {}\n    factor = 0\n    for i in range(n):\n        if n % i == 0:\n            p.update(factor)\n            factor += 1\n            if factor > 2:\n                break\n    factor = list(set(p.keys())).union(range(1, len(p)+1))\n    return factor\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = list(range(n))\n    for i in range(n):\n        if l[i] == 0:\n            continue\n        l[i] /= l[i - 1]\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = n // 2\n    return [item for item in factor * 3 if item % 3 == 0 and item % 2!= 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    primes = list(range(n))\n    n = n % primes[0]\n    primes = [prime for prime in primes if prime]\n    return primes\n\n    def factorize_digits(n: int) -> List[int]:\n        \"\"\" Returns the list of all primes for given number n. \"\"\"\n        # Find first prime\n        p = primes[0]\n        # If there are more than one prime, find the smallest\n        if len(primes) > 1:\n            p = primes[0]\n\n        # Find all prime factors of n\n        pq = []\n        for _ in xrange(n):\n            p += 1\n            q = n // p\n            pq.append(q)\n\n        # Get the smallest prime\n        return pq\n\n    factors = []\n    if n == 0:\n        return factors\n\n    while n > 0:\n        # Find all prime factors upto current n\n        for _ in xrange(n):\n            if len(factors) > 0:\n                p = factors[0]\n                q = n // p\n                factors.append(factors[-1] + q)\n            else:\n                p = n // p\n                q = 1\n                factors.append(q)\n            n = n % p\n        # Get the smallest prime\n        p = factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = int(n)\n    factors = [factors[i] for i in range(n - 1, n)]\n    factors.extend([factors[i - 1] for i in range(n - 1, n)])\n    factors.extend([factors[i] for i in range(n - 1, n)])\n    factors = list(set(factors))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [n for n in xrange(n) if n % 2 == 1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    prime = range(1, n + 1)\n\n    return list(prime * factorize(prime[1:]))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [\n        i if i % 2 == 0 else i\n        for i in range(0, n)]\n    factor_list = []\n    for factor in factors:\n        factor_list.append(factor)\n    return factor_list\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    try:\n        l = int(n)\n        p = l\n        while p > 1:\n            l = l/p\n            if p % 2 == 0:\n                p = p // 2\n    except ValueError:\n        raise ValueError('Invalid value for prime factorization.')\n    factors = []\n    for n in xrange(1, p+1):\n        factors.append(l)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    list = []\n    for i in range(n):\n        # we have to factorize all the numbers that are smaller than n\n        if i < n:\n            list.append(i)\n            break\n        if i % 2 == 0:\n            # we have to factorize all the numbers that are not divisible by two\n            if i == 2:\n                list.append(i)\n                break\n    if list[-1] == 0:\n        return list\n    else:\n        return list[1:]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    allPrimeFactors = [int(p * q) for p, q in enumerate(range(n))]\n    factorized = [allPrimeFactors[p - 1] for p in range(n)]\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = int(n)\n    if n > 1 and n % 2 == 0:\n        return [factors(i) for i in range(n)]\n    factorize_p = []\n    factorize_r = []\n    for i in range(n):\n        if n % 2 == 0:\n            factorize_p.append(factors(i))\n        else:\n            factorize_r.append(factors(i))\n    return factorize_p + factorize_r", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    return [\n        n if n % 2 == 0 else n / 2,\n        n if n % 2 == 1 else n / 2,\n        n if n % 3 == 0 else n / 3,\n        n if n % 3 == 1 else n / 3,\n        n if n % 5 == 0 else n / 5,\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n\n    for i in xrange(n):\n        if n % i == 0:\n            factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorize_list = [x for x in factorize(n)]\n    return [factor for factor in factorize_list if factor]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return []\n\n    factor_list = []\n    factorized = []\n\n    factor_list = [factorial(i) for i in factor_list]\n    factorized = [factorial(i) for i in factorized]\n\n    factor_list.sort(key=lambda x: x - 1)\n    factorized.sort(key=lambda x: x - 1)\n\n    for factor in factor_list:\n        if factor == 1:\n            continue\n        factorized.append(factor)\n\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 2:\n        return factorize(2)\n    if n == 3:\n        return [factors[0] for factors in factorize(n - 2)]\n    if n == 4:\n        return factorize(n - 2)\n    if n == 5:\n        return factorize(n - 1)\n    if n == 6:\n        return factorize(n)\n    if n == 7:\n        return factorize(n - 1)\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # take up the list\n    factorized_list = []\n    factorized_list.append(n)\n\n    # factorize\n    for i in range(n):\n        for j in range(n):\n            factorized_list.append(factort(j) * factorort(i))\n\n    return factorized_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(x * n for x in range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Get all primes\n    primes = [prime for _ in xrange(n)]\n    if len(primes) == 1:\n        return primes[0]\n\n    # Print each of the primes\n    for p in primes:\n        print('{:3}'.format(p))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for _ in range(n):\n        factors.append(n % _)\n        if factors:\n            factors.append(factors[-1])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [1 for _ in range(n)]\n    for p in range(n):\n        factors.append(p * p)\n    return tuple(factors)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n is None:\n        raise ValueError(\"n is not specified\")\n    if n < 1:\n        raise ValueError(\"n cannot be less than 1\")\n\n    factors = []\n    # Add all primes\n    for p in xrange(n):\n        factors.append(p)\n\n    # Calculate what number of times each prime appears in factorization\n    for p in xrange(n):\n        factors.append(1)\n        if p in factors:\n            break\n\n    # Return factorization in the order\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = n\n    if factor < 1:\n        return []\n    factor = factor // 2\n    if factor < 2:\n        return []\n    factor = factor // 4\n    if factor < 8:\n        return []\n    factor = factor // 16\n    if factor < 18:\n        return []\n    factor = factor // 32\n    if factor < 64:\n        return []\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factor = i / n\n        if factor in factors:\n            raise ValueError(\"Increment factor \" + str(factor) + \" twice, it should be in list only once\")\n        factors.append(factor)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Get a list of primes\n    p = []\n    for i in range(n):\n        p.append(i)\n    # The order of the list is the smallest prime p\n    order = p[-1]\n    # This is the most efficient way to factorize n\n    # >>> factorize(n)\n    # [prime factors of n]\n    factors = factorize(order)\n    # >>> factorize(10)\n    # [prime factors of 10]\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n < 2:\n        return factorize(n)\n    else:\n        factor_list = []\n        for a, b in zip(n, n / 2, n / 2):\n            factor_list.append(a * b)\n\n        if n % 2 == 1:\n            return factor_list\n\n        factor_list = [\n            i * b for i in factor_list\n        ]\n        return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n % 2 == 0, \"Input number should be equal to the product of all factors\"\n    return factorize(n / 2).union([factors(n / 2) for factors in itertools.count(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in xrange(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [prime for prime in list(range(n)) if prime % 2 == 0]\n    if primes == []:\n        return []\n    return [prime / 2 for prime in primes if prime / 2]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = n\n    while factor > 1:\n        if factor % 2 == 0:\n            factors.append(factor)\n            factor /= 2\n        else:\n            factors.append(factor % 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    s, e = divmod(n, 2)\n    if s == 1:\n        return s\n    else:\n        return [e, e]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # if it doesn't have any prime factors, it is the whole number\n    if n == 1 and n % 2 == 0:\n        return [n]\n\n    # if it has 1 prime factor, return it\n    if n % 2 == 1:\n        return factorize(n / 2)\n\n    # if it has 2 prime factors, return them\n    if n % 2 == 2:\n        return factorize(n / 2)\n\n    # if it has 3 prime factors, return them\n    if n % 2 == 3:\n        return factorize(n / 2)\n\n    # if it has 4 prime factors, return them\n    if n % 2 == 4:\n        return factorize(n / 2)\n\n    # if it has 5 prime factors, return them\n    if n % 2 == 5:\n        return factorize(n / 2)\n\n    # if it has 6 prime factors, return them\n    if n % 2 == 6:\n        return factorize(n / 2)\n\n    # if it has 7 prime factors, return them\n    if n % 2 == 7:\n        return factorize(n / 2)\n\n    # if it has 8 prime factors, return them\n    if n % 2 == 8:\n        return factorize(n / 2)\n\n    # if it has 9 prime factors, return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1, 1]\n    factors = [factors[n] for n in xrange(1, int(ceil(n))+1)]\n    factor_list = []\n    while n > 1:\n        try:\n            factor_list.append(factors[n] % n)\n        except ValueError:\n            print('Failed to factorize:', str(n))\n            raise\n\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = [\n        int(num) for num in product(range(n), len(range(1, n + 1)) * (1 / (n - 1)) for _ in range(1, n + 1))\n    ]\n\n    return [\n        factor for factor in factors\n        if not factor in factorize(factors[1:])\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factors[factors.index(f) for f in xrange(n)] for factors in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 0\n    return [prime for prime in list(range(n))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = [factorial(i) for i in n]\n    for factor in factorization:\n        if factor!= 1:\n            factor = factor * factor\n        if factor < 1:\n            return [factor]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i * i)\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[i - 1] + i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(x) for x in (n // int(x) for x in range(1, n))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    if n % 2 == 1:\n        factor = n / 2\n        factors = []\n        while factor!= 2:\n            factors.append(factor)\n            factor = factor / 2\n        return factors\n    if n % 3 == 1:\n        factor = n / 3\n        factors = []\n        while factor!= 3:\n            factors.append(factor)\n            factor = factor / 3\n        return factors\n    if n % 5 == 1:\n        factor = n / 5\n        factors = []\n        while factor!= 5:\n            factors.append(factor)\n            factor = factor / 5\n        return factors\n    if n % 7 == 1:\n        factor = n / 7\n        factors = []\n        while factor!= 7:\n            factors.append(factor)\n            factor = factor / 7\n        return factors\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [1, 2, 3]\n    # Note: factorization of number should be sorted\n    return primes.filter(x < n for x in factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: Check whether factorization algorithm has errors or not\n    p = list(range(n))\n    k = p.pop()\n    while True:\n        if k == 0:\n            break\n        factor = factorize(p)\n        if factor == k:\n            break\n        k = p.pop()\n    return p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    n = int(round(n))\n    if n == 1:\n        return []\n    p = []\n    for i in range(n):\n        p.append(i)\n    for a, b in zip(p, n):\n        if a < b:\n            return a, b\n        p.remove(b)\n    return p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # factorization should be of the form [a * b] * [c * d] * [e]\n    if n!= 1:\n        raise ValueError('Input number must be equal to product of all factors')\n    return [\n        # factorization is [a * b] * [c * d] * [e]\n        factorize(n) * (\n                factorize(b) * factorize(c) * factorize(d),\n                factorize(e) * factorize(a) * factorize(b) * factorize(c) * factorize(d)) * factorize(e)\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        raise ValueError(\"n must be given\")\n\n    factors = []\n\n    if n == 0:\n        return factors\n\n    assert n % 2 == 0\n\n    for i in range(n//2):\n        factors.append(n%i)\n\n    for i in range(n//2):\n        for j in range(n//2):\n            if i == j:\n                factors.append(n%(i+1))\n\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n is None:\n        return []\n\n    if n == 0:\n        return []\n\n    p = [np.floor(n)]\n    for i in xrange(2, p.count(n) + 1):\n        if p[-1]:\n            p.remove(p[-1])\n    return p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        i\n        for i in xrange(1, int(n) * n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    from itertools import product\n\n    if n == 0:\n        return []\n\n    if len(product(x for x in range(n - 1, n + 1))) == n:\n        return factorize(n - 1)\n\n    if n % 2:\n        return [1, 1, n]\n\n    return [\n        x\n        for _ in range(n)\n        if not x % 2\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorized = []\n    # first, factorize all factors\n    for factor in n:\n        factorized.append(factor)\n    # second, count each factor in the order from smallest to largest\n    for factor in factorized:\n        # iterate over factors from smallest to largest\n        for factor in factorized:\n            if factor < factor:\n                break\n            if factor == factor:\n                break\n        # if the product of all factor is equal to the input number\n        if len(factorized) == len(n):\n            return factorized\n    return None", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [factors[0] * n for factors in [factors[0]] * (n - 1)]\n    return sorted(factors)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [0, 2, 3]\n    if n == 3:\n        return [0, 1, 3]\n    if n == 4:\n        return [0, 2, 3]\n    if n == 5:\n        return [0, 2, 2, 3]\n    if n == 6:\n        return [0, 3, 5]\n    if n == 7:\n        return [0, 2, 3, 5]\n    if n == 8:\n        return [0, 2, 2, 4]\n    return [1, 2, 3, 4, 5]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [0, 1]\n    p = 0\n    for i in range(n):\n        if (i % p) == 0:\n            p += 1\n    return [p]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = int(n)\n    factors = []\n    for i in xrange(0, n):\n        factors.append(factors[-1] + n % i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = [n]\n    while n > 0:\n        if n % 2 == 0:\n            result.append(n // 2)\n        else:\n            result.append(n // 2 + 1)\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n > 1:\n        return factorize(n - 1) + factorize(n - 2)\n    else:\n        return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [1, 1]\n    if n % 3 == 0:\n        return [1, 2, 1]\n    if n % 4 == 0:\n        return [1, 2, 3]\n    if n % 5 == 0:\n        return [1, 2, 3, 5]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = int(n)\n    s = []\n    for _ in range(1, n // 2):\n        s.append(n % 2)\n    return s", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    factor = 0\n    for f in range(1, n + 1):\n        factor += f\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    factors = []\n    while n > 1:\n        factor = 1\n        while n % factor == 0:\n            factor = factor * 2\n        if n % factor == 0:\n            factors.append(factor)\n        n /= factor\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n % 2:\n        return []\n    prime = n // 2\n    primes = list(prime)\n    primes.append(prime)\n    while len(primes) > 1:\n        primes.pop(prime)\n    if len(primes) > 1:\n        return primes[:-1]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n % 2 == 0:\n        return [n]\n\n    if n % 5 == 0:\n        return [(n - 2) // 2, n, 2, n - 2]\n\n    if n % 7 == 0:\n        return [(n - 4) // 4, n, n - 2, n - 4]\n\n    if n % 9 == 0:\n        return [(n - 8) // 8, n, n - 4, n - 6]\n\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    first = n // 2\n    factors = []\n    for i in range(first, n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [i for _, i in enumerate(zip(range(n), range(n-1, -1, -1)))) if i % n == 0 and i in range(n, -1, -1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for n in xrange(1, n):\n        factors.append(n)\n    factors.sort()\n    factors = [factors[i] for i in xrange(len(factors), -1, -1)]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # return list of prime factors\n    factors = list()\n    while n > 1:\n        factors.append(n % 2)\n        n = n / 2\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [\n        2 ** i for i in range(n // 2, n // 2 + 1) if n % i == 0\n    ]\n    if n % 2 == 0:\n        return factors\n    else:\n        return [\n            factor\n            for factor in factors\n            if factor * factor < n\n        ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n == 0:\n        return factors\n\n    factors.append(n)\n    for i in range(1, n):\n        factors.append(factors[-1] * factors[i - 1])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2:\n        return [1, 1, 1]\n    else:\n        return [0, 0, 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = set()\n    for i in range(n):\n        factor = n / i\n        if factor not in factors:\n            factors.add(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # as one of the factors is prime, just give it zero or one chance\n    if n % 2 == 0:\n        return []\n    factor = n / 2\n    return list(range(factorial(fact)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [prime for i in range(n) if factor(prime) in factorize(i + 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factor = factorize_modulo(n, 1)\n    if len(factor)!= 1:\n        raise ValueError('factorization of given number is not correct')\n    if factor[0]!= 0:\n        raise ValueError('factors of given number must be positive')\n\n    for i in range(1, len(factor) - 1):\n        if n % factor[i]:\n            return factor\n    return list(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # input should be a number with prime factors\n    if n < 1:\n        raise ValueError('n must be greater than zero')\n\n    # we can't factorize an integer if it has prime factors\n    if len(list(set(factors(n))) >= len(n)):\n        raise ValueError('n is not prime')\n\n    # calculate the number of prime factors\n    n = len(factors(n))\n    if n > 1:\n        # calculate the number of odd prime factors\n        odd = 0\n        for i in range(n):\n            if (factors(n - 1 - i) == factors(n - i - 1)):\n                odd += 1\n        # calculate the number of even prime factors\n        even = 0\n        for i in range(n):\n            if (factors(n - 1 - i) & factors(n - i - 1)):\n                even += 1\n        # calculate the factorization\n        factor = [(n - 1 - i) / odd + 1 for i in range(n)]\n        if even > 0:\n            factor = factor / even\n        else:\n            factor = factor / odd\n        return factor\n\n    # return all the factors\n    return factors(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorized = []\n    if n % 2 == 0:\n        factorized.append(n)\n    for i in range(n - 1):\n        factorized.append(n - i)\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # get all primes in the order from smallest to largest\n    primes = [prime for prime in range(n)]\n    # iterate over the primes in the order from smallest to largest\n    factors = [prime for prime in primes if prime not in primes]\n    # get the list of each factor\n    factor_list = [prime for prime in factors if prime not in primes]\n    # factorize the number into factors\n    factor_list.sort()\n    # get the list of each factor\n    factor_list = [prime for prime in factor_list if prime in primes]\n    # return the list of each factor\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [Factor(x) for x in n * Factors(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [(n & (n - 1)) for n in range(2, len(n))]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = []\n    for i in xrange(1, n + 1):\n        if (i % 2 == 1) and i!= 1:\n            primes.append(i)\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Get list of all possible factors\n    factors: List[int] = []\n    for x in range(n):\n        factor = x / n\n        factors.append(factor)\n        if factor < 1:\n            factors.append(-1)\n    # Pick up the smallest factor\n    factor = factors[0]\n    if factor < 1:\n        return factors\n    # Pick up the next smallest factor\n    factors.pop()\n    # Pick up the next largest factor\n    factor = factors[-1]\n    if factor > 1:\n        return factors\n    # Pick up the next largest factor\n    factors.pop()\n    # Pick up the largest factor\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [0]\n    for i in range(n):\n        factors.append(i % i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n == 1\n    assert n > 1\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [(n - 1) // 2, n // 2]\n    if n % 5 == 0:\n        return [(n - 1) // 5, n // 5]\n    if n % 7 == 0:\n        return [(n - 1) // 7, n // 7]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [prime for prime in factorize(x) for x in factorize(x * n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1 or n > 10000:\n        raise ValueError(\"Invalid number\")\n    if n > 10000:\n        n = 10000\n    return range(n, 1, -1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorized = []\n    primeFactors = reduce(lambda x, y: x*y, n // 2, 2)\n    while len(primeFactors):\n        factorized.append(primeFactors.pop())\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = None\n    if n <= 1:\n        return [n]\n    for i in xrange(1, n + 1):\n        if n % i == 0:\n            factor = i\n            break\n    if factor is None:\n        return [n]\n    return factorize(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n, 2):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n\n    factors = n * [Integer(i) for i in range(2, n - 1)]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    f = 0\n    for x in range(n):\n        if x % 2 == 0:\n            f += 1\n    return [(i * f) % n for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = factorize(n)\n    return sorted([fact[0]] * factor for factor in factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [\n        x * x\n        for x in n\n        if x!= n\n    ]\n    return [\n        x\n        for x in factors\n        if x not in factors\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = List()\n    factorization.append(1)\n    factorization.append(2)\n    factorization.append(3)\n    factorization.append(5)\n    factorization.append(7)\n    if n % factorization[-1] == 0:\n        factorization.append(factorization[-1])\n    for i in range(len(factorization) - 1, -1, -1):\n        factorization.append(n / factorization[i])\n    return factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = []\n    for prime in range(1, n + 1):\n        if not prime in primes:\n            primes.append(prime)\n            yield prime\n    else:\n        while primes[0]!= primes[1]:\n            prime = primes[0]\n            primes.pop()\n        yield prime", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return [\n        factor(i) for i in xrange(n) if i % 2 == 0\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list(range(0, n))\n    for factor in factors:\n        if factor < len(factors) - 1:\n            factor = factor * factors[factors.index(factor)]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [(i % n) for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = [0 for p in range(n)]\n    for i in range(n):\n        if i % 2 == 0:\n            prime_factors.append(i)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return []\n    else:\n        return factorize(n / float(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    try:\n        return [\n            abs(i) for i in xrange(1, n + 1)]\n    except TypeError:\n        return xrange(n + 1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n is None:\n        return []\n\n    n = n / 2\n    if n is 0:\n        return []\n\n    return [(i + 1) * 2 for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Create a list of factors in the order required\n    factors = []\n    for factor in range(0, n):\n        factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [0]\n\n    factors = []\n    for i in range(n):\n        if n % i == 0:\n            factors.append(i)\n\n    if len(factors) > 1:\n        # replace previous pair with a new one, leaving first one alone\n        for i in range(len(factors) - 1, 0, -1):\n            if factors[i - 1]!= factors[i]:\n                factors.append(factors[i - 1])\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = []\n    for i in range(n):\n        if i % 2 == 0:\n            p.append(i)\n        else:\n            p.append(i // 2)\n    return p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = set(range(0, n))\n    # Find number of distinct prime factors of n\n    factorization = []\n    for i in range(n):\n        if not primes.issuperset(set(i)):\n            factorization.append(i)\n    # Count how many times factorization appears in the factorization list\n    factors = [prime for prime in primes if not factorization.issuperset(set(prime))]\n    # Find smallest and largest factor\n    smallest = min(fabs(factors))\n    largest = max(fabs(factors))\n    # Factorization is not prime, do not add it to the list\n    if factors.count(smallest):\n        factors.append(smallest)\n    if factors.count(largest):\n        factors.append(largest)\n    # Return factorization\n    return factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # First it is necessary to find smallest prime factor of n\n    try:\n        d = int(round(n))\n    except ValueError:\n        raise ValueError(f\"Integer can't be factorized: {n}.\")\n    if d < 1:\n        raise ValueError(f\"Integer can't be factorized: {n}.\")\n\n    # If it is possible to factorize into at least one prime, let's do it\n    for k in range(2, d):\n        if k < d and k not in d * (k - 1) + 1:\n            continue\n        # Get number of factor of k\n        if d == k:\n            return []\n\n        if k > d:\n            return [k]\n\n        if k > k - 1:\n            # Get number of factors of k - 1\n            for j in range(k - 1, k):\n                if k - 1 - j < k:\n                    continue\n                if k - 1 - j not in d * (k - 1 - j) + 1:\n                    continue\n                return [k]\n\n        # Get number of factors of k - 1\n        for j in range(k - 1, k):\n            if k - 1 - j < k:\n                continue\n            if k - 1 - j not in d * (k - 1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 10:\n        return [0, 1, 1, 1, 1, 1]\n    if n < 20:\n        return [0, 1, 1, 1, 2, 2]\n    if n < 40:\n        return [0, 1, 1, 2, 2, 2]\n    if n < 60:\n        return [0, 1, 1, 2, 5, 5]\n    if n < 80:\n        return [0, 1, 1, 2, 5, 10]\n    if n < 100:\n        return [0, 1, 1, 2, 5, 20]\n    if n < 200:\n        return [0, 1, 1, 2, 5, 40]\n    if n < 400:\n        return [0, 1, 1, 2, 5, 60]\n    if n < 600:\n        return [0, 1, 1, 2, 5, 80]\n    if n < 800:\n        return [0, 1, 1, 2, 5, 100]\n    if n < 1200:\n        return [0, 1, 1, 2, 5, 200]\n    if n < 2400:\n        return [0, 1, 1, 2, 5, 400]\n    if n < 3600:\n        return [0, 1, 1, 2, 5, 600]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # The number of factors is determined by the last number in the list\n    # <factorize(8)> = [(5, 2), (7, 2), (2, 5), (5, 7)]\n    # <factorize(25)> = [(5, 5), (2, 5), (5, 5), (7, 5), (2, 7), (5, 7)]\n    # <factorize(70)> = [(5, 5), (2, 5), (5, 5), (7, 5), (2, 7), (5, 7)]\n    n = n - 1\n    result = []\n    for f in range(n):\n        factor = list(factors(n, f))\n        if factor:\n            result.append(factor[-1])\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        [\n            p for p in xrange(n, -n)\n            if factorize(p) == factorize(n)\n        ] for n in xrange(n)\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = int(n)\n    factors = []\n    i = 0\n    while i < num:\n        i = i * i\n        factors.append(i)\n        if i % 2 == 0:\n            i += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [[n % factor for factor in range(1, len(factorize(n)))] if factorize(n) else range(1, len(factorize(n)))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime = 1\n    for x in range(n):\n        for y in range(x):\n            if y % x == 0:\n                if prime < x or prime == x:\n                    prime += 1\n                else:\n                    break\n    return prime", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = []\n    for i in range(n):\n        p.append(i * i)\n    return p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factor = [0 for i in range(1, n + 1)]\n\n    for factor in factor:\n        factor = factor[(factor - 1) % n]\n\n        if len(factor) > 1:\n            factor = factor.reversed()\n\n        factor.append(n)\n\n    return factor\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for factor in n:\n        factor = factor % 2\n        if factor < 1:\n            continue\n        factor = factor / 2\n        if factor < 1:\n            continue\n        result.append(factor)\n\n    return list(result)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(factors[0] * n)\n        factors = factors[1:]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [fact for fact in range(n) if fact % 2 == 1]\n    return factorize(sum(factors) / 2)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factor = n // 2\n\n    factor = factor.split()\n    factor = [factor[0], factor[1], factor[2]]\n    factor = sorted(factor)\n\n    return list(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    m = n // 2\n    a = m // 2\n    b = m // 2\n\n    s = 1\n    while s < m:\n        if a == b:\n            s += 1\n            continue\n        else:\n            if a == 1:\n                s += 1\n                break\n            else:\n                s += a\n\n    return [x * s for x in range(m)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    factor = factorize(n-1)\n    if len(factor) == 1:\n        return [fact[0]]\n    factor = factor * factors(factor)\n    return [(i + 1) % len(factor) for i in range(0, len(factor), 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for k in range(n):\n        factors.append(k)\n        if k % 2 == 0:\n            factors.append(k - 1)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = n / 2\n    m = 1\n    factors = []\n    for i in range(n):\n        m *= i\n        if m == 1:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n == product(n for n in range(1, n + 1))\n    factor = product(n for n in range(1, n + 1))\n    return list(factor for n in range(1, n + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [x for x in range(n) if x!= 1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n            factors.append(1)\n        else:\n            factors.append(factors[-1] + 1)\n    return result, factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    # Take list of all factors\n    factors = [\n        x for x in reduce(lambda x, y: x + y, xrange(n)) if x % n == 0]\n\n    # Take list of all factors except for first\n    factors2 = [\n        x for x in factors if x!= 1]\n\n    # Take list of all factors except for first and last\n    factors3 = [\n        x for x in factors2 if x!= 0 and x!= n-1]\n\n    # Take list of all factors except for first and last and first\n    factors4 = [\n        x for x in factors3 if x!= 0 and x!= n-1]\n\n    # Take list of all factors except for first and last and first\n    factors5 = [\n        x for x in factors4 if x!= 0 and x!= n-1]\n\n    # Take list of all factors except for first and last and first and last\n    factors6 = [\n        x for x in factors5 if x!= 0 and x!= n-1]\n\n    # Take list of all factors except for first and last and first and last\n    factors7 = [\n        x for x in factors6 if x!= 0 and x!=", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        int(x * x) for x in list(range(n)) if x % n == 0\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = list()\n    primes.append(n)\n    while len(primes) > 0:\n        for i in range(len(primes)):\n            if primes[i] % primes[i - 1] == 0:\n                primes.pop()\n        primes.insert(0, n)\n\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [0, 0, 0, 0]\n    i = 1\n    # As long as i < n-1, there are prime factors\n    while i < n:\n        p = i\n        while i + 1 < n and p % i == 0:\n            p = p / i\n            i += 1\n    factors = []\n    while i <= n:\n        factors.append(p)\n        i += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = factorize.__name__\n    assert factor == factorize.factorize\n    assert len(n) == len(factor)\n    assert factor in (\"primefactors\",\"factors\",\"factors_4\",\"factors_15\",\"factors_23\",\"factors_29\",\"factors_45\",\"factors_57\")\n    factor = factor.capitalize()\n    factor = [fact.group(i) for i in xrange(0,len(factor),2)]\n    factor = factor[::-1]\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for n in xrange(2**n, 2**n+1):\n        factors.append(n)\n    factor = factors[-1]\n    for factor in factors:\n        factors.remove(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    #\n    # 1. return list of primes up to 100\n    #\n    p = 100\n    while p > 1:\n        p %= 2\n        if p == 1:\n            return []\n    #\n    # 2. return list of primes up to 1000\n    #\n    p = 1000\n    while p > 1:\n        p %= 2\n        if p == 1:\n            return []\n    #\n    # 3. return list of primes up to 100000\n    #\n    p = 100000\n    while p > 1:\n        p %= 2\n        if p == 1:\n            return []\n    #\n    # 4. return list of primes up to 1000000\n    #\n    p = 1000000\n    while p > 1:\n        p %= 2\n        if p == 1:\n            return []\n    #\n    # 5. return list of primes up to 100000,000\n    #\n    p = 100000,000\n    while p > 1:\n        p %= 2\n        if p == 1:\n            return []\n    #\n    # 6. return list of primes up to 1000000,000,000\n    #\n    p = 1000000,000,000\n    while p > 1:\n        p %= 2\n        if p == 1:\n            return []\n    #\n    # 7. return list of primes up to 1000000,000,000,000\n    #", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Work out the largest prime factor\n    # We make sure we don't go past 2^31 as it is not prime for any power of 2\n    while True:\n        x = (1 << 32) - 1\n        if x > n:\n            break\n        else:\n            break\n\n    if not x:\n        raise ValueError('Integer is not prime.')\n\n    # Handle exception if x is not a power of 2\n    if x % 2 == 1:\n        raise ValueError('Integer is not a power of 2')\n\n    # Return prime factors in the order we want\n    return list(x / (1 << 32))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Check if number is even or odd:\n    if not n % 2:\n        raise ValueError(\"Invalid number given.\")\n\n    # Make sure there are exactly 2 factors:\n    if n % 2:\n        raise ValueError(\"Invalid number given.\")\n\n    # Determine all the possible prime factors of the number n:\n    factor = []\n    for x in range(1, n + 1):\n        if n % x:\n            continue\n        factor.append(x)\n\n    return factor\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if len(n)!= 2:\n        raise ValueError(\"Invalid number\")\n    if n[1] == n[0]:\n        raise ValueError(\"Number is the same\")\n    result = []\n    for i in range(1, n[1] + 1):\n        result.append(n[i])\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [Factor(n) for i in range(1, n - 1)]\n    if n % 2 == 1:\n        return [Factor(n) for i in range(n - 2, -1, -1)]\n    if n % 2 == 3:\n        return [Factor(n) for i in range(n - 2, -1, -1)]\n    if n % 2 == 4:\n        return [Factor(n) for i in range(n - 2, -1, -1)]\n    return [Factor(n) for i in range(n - 2, -1, -1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = [1 for i in xrange(n)]\n    for p in xrange(n):\n        for x in l:\n            if x!= p:\n                l.remove(x)\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = 1\n    q = n\n    while p < q:\n        if (p * p) % q == 0:\n            return p * p, p\n        else:\n            p = p * p + 1\n    return p, p", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not n:\n        return []\n    factorized = []\n    for i in range(0, len(n)):\n        factorized.append(n[i])\n    factorized = factorized[::-1]\n    factorized = factorized[:-1]\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 0\n    for i in range(len(n)):\n        factor += 1\n        if i in factor:\n            return []\n        else:\n            if factor == 1:\n                return [factor]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = [n] * int(math.sqrt(n))\n    if not factorization:\n        return []\n    return factorization[::-1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        product(factors.map(lambda x: x + 1, x))\n        for x in range(n)\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if len(n) == 1:\n        return [n for n in xrange(2)]\n    if n % 2 == 0:\n        return [n * 2 ** (-n / 2) for n in xrange(2, len(n), 2)]\n    elif n % 2 == 1:\n        return [n * 2 ** (-n / 2) for n in xrange(2, len(n), 2)]\n    else:\n        return [n * 2 ** (-n / 2) for n in xrange(2, len(n), 2)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorized = []\n    for i in range(n):\n        factorized.append(i)\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for p in range(0, len(n)):\n        if p < len(n) - 1:\n            if n % p == 0:\n                result.append(p)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime = {k: 2 if k % 2 else 1 for k in range(0, n)}\n    factor = {k: int(k * prime[k]) for k in range(0, n)}\n    return [prime[k] + factor[k] for k in range(0, n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [prime for prime in factorize(n) if prime is not None]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 1:\n        return [ factorize(factor) for factor in factorize(n - 1)]\n\n    return [0] * n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    result = []\n    factor_list = []\n    for i in range(1, n):\n        factor_list.append(i)\n\n    while n % factor_list:\n        result.append(n % factor_list)\n\n    factor_list = factor_list[1:]\n    for i in range(len(factor_list) - 1):\n        result.append(factor_list[i])\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [prime for prime in n // factor if prime in factor]\n    factors = [prime for prime in factors if prime!= 1]\n    if len(factors) == 1:\n        return factors[0]\n    else:\n        return factorize(factors[0])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return (x for x in n if x % 2 == 0) + [0 for x in n if x % 2 == 1 and x % 5!= 0 and x % 5!= 1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 0\n    for i in range(n):\n        if i == 1:\n            factor += 1\n        else:\n            factor += i\n    return factor\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 9:\n        return [n]\n    else:\n        if n <= 18:\n            return [19 * factor(n) - 1 for factor in factorize(n - 1)]\n        else:\n            return [factor(n - 2) for factor in factorize(n - 1)]\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1, 1, 1]\n    factor = n / float(n)\n    while factor!= 0:\n        a, b = factor\n        factor = b * factor\n        if a < b and a not in [2**a, 2**(a + 1)]:\n            continue\n        factor = a * factor\n\n    return list(range(a, a + b + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = set(range(n))\n    if n == 1:\n        return primes\n    if n < 6:\n        return primes\n    return primes - set(range(n - 6, n + 1, -1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [x for x in xrange(n) if x % 2 == 0 and x % 4 == 0]\n    return primes\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # iterate through the powers of n, and pull out the factor powers\n    factor = []\n    for _ in range(n):\n        if _ % 2 == 0:\n            factor.append(1)\n        else:\n            factor.append(n)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # First, the list of primes\n    primes = [prime for _, prime in enumerate(xrange(n, n+1, -1)) if prime % 2 == 1]\n    # Next, a list of factors. It is just a list of all the factors to be found\n    factors = []\n    for _, prime in enumerate(primes):\n        # We only factorize those primes which are actually prime\n        if prime < n:\n            continue\n        # We will get the list of primes that is divisible by all of the factors\n        divisible_prime = primes[:]\n        for factor in factorize(prime):\n            divisible_prime.extend(factor)\n        # The list of factors divisible by all of the primes\n        divisible_factors = list(set(factors) & set(divisible_prime))\n        # We will get the list of all those primes that are divisible by all of the factors\n        divisible_prime = primes[:]\n        for factor in divisible_factors:\n            divisible_prime.extend(factors)\n        # The list of all those primes that are divisible by all of the factors\n        divisible_factors = list(set(factors) & set(divisible_prime))\n        # The list of all those primes that are", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(i) # doesn't matter if any of these are prime\n        if i % 2 == 0:\n            factor = factor[:-1]\n        else:\n            factor = factor[1:]\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input number should be positive\")\n    factors = []\n    factor_count = 0\n    max = max(len(f), len(g) for f, g in zip(f, g))\n    while factor_count < max:\n        count = 0\n        for factor in factorize(n):\n            if factor == n:\n                break\n            else:\n                if factor in factors:\n                    count += 1\n                else:\n                    factors.append(factor)\n                factor_count += 1\n            if count == max:\n                break\n        if count > max:\n            max = count\n\n    return factors"]]