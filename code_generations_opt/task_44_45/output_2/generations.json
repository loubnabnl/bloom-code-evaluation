[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 10:\n       return \"0\"\n    else:\n       return change_base(x, base)\nI think you meant to do this:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError(\"invalid number\")\n    else:\n        return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def __init__(self, x: int, base: int):\n       self.x = x\n       self.base = base\n       self.base_string = \"\"\n\n    def to_string(self):\n       \"\"\"Return string representation of the number after the conversion.\n    return '%s' % self.base_string\n\n    def __str__(self):\n       \"\"\"Return string representation of the number.\n    return '%s' % self.base_string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"\".join(str(x) for x in x if x!= base)\n\nI like it, but I don't see how it's a \"life hack\".</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"\";", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        return '0'\n    base = int(input(\"Enter base number: \"))\n    return string(input(\"Enter number to convert: \"))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    base = int(input(raw_input(\"Enter base: \"))\n    return string(chr(base, 10))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x == 0:\n        return \"0\"\n    else:\n        return \"1\"\n        def to_string(x):\n        return \"\".join(str(x))\n        return to_string\n\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\nSee also\n Python\n\nReferences</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(x) +'' * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x * (base - 1)\n\nThis is awesome. Thank you.\n\nI was going to say that, but then I saw your username.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    base = int(input(\"Enter base: \"))\n    input(\"Enter number to be converted: \")\n    return string(base*base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(base) * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base * 10 + str(x)\n    def to_base(x: int):\n    \"\"\"Convert number x to base.\n    return base * 10 + x\n    >>> to_base(8)\n    '1000'\n    >>> to_base(8)\n    '10'\n    >>> to_base(8)\n    '100'\n    >>> to_base(8)\n    '1000'\n    \"\"\"\n    return change_base(x, to_base)\n\nThis is a simple and elegant solution. I would also add a comment explaining why it's 10.\n\nI don't think it's elegant, because it doesn't work if you want to convert from base 10 to a different base.\n\nIt's not elegant, but it is simple.\n\nYou could make it elegant by using the trick of using the base as a multiplier.\n\nYou mean like this?", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    print('Base of %d is %d' % (x, base))\n    return ''.join(int(x) for x in x.split('.'))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x ** base\n\nIt's not really a Python question.\n\nThe question is, why would you ever want to do this?\n\nI'm not sure if you're serious, but the answer is: for example, if you're writing a program that deals with binary numbers.\n\nYou can't write a binary number in a Python string.\n\nThe question is, why would you want to?\n\nI'm not sure if you're serious, but the answer is: for example, if you're writing a program that deals with binary numbers.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"x\"\nYou could also make it return a tuple of string and int, and then just use the int as the base.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def __init__(self, x: int, base: int):\n    \"\"\"Create a new ChangeBase object.\n    x is the input number.\n    base is the numerical base to convert to.\n    self.x = x\n    self.base = base\n    \"\"\"\n    self.base_string = ''\n    self.x = x\n    self.base = base\n    def __str__(self):\n    \"\"\"Return a string representation of the number.\n    \"\"\"\n    return self.base_string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x.to_string()\nThis is a nice little function. I'd suggest using the built-in operator to_string() rather than defining your own.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 10:\n       return '0'\n    base = int(x ** base)\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    else:\n        return '1' + (int(x) - base)\n    return '0'\n\nThis is so simple and straightforward that I can't think of any reason why it would be wrong. I'd be very interested to hear if someone could explain why this is wrong.\n\nThe problem is that base numbers are less than 10. So if the input number is greater than 10, you'll get an error.\n\nAh, thanks. I thought that might be the case, but wasn't sure.\n\nI'm surprised that base 10 is the norm. The article gives a list of 10 base systems and the pros and cons of each.\n\nI think it's just a historical accident.\n\nI would have expected base 2 to be the norm.\n\nI don't understand the appeal of base 2. It seems like it would make arithmetic more difficult.\n\nIt's much easier to count to 10 than it is to count to 1023.\n\nI think I agree with you. I guess I had always assumed that the advantage of base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \" \".join(str(int(base)) for base in range(10))\nThat's not the same thing.\n\nI think it's just a joke, not a serious code example.\n\nThe joke is that \"x.base\" is not an attribute of any Python type.\n\nI'm surprised nobody has mentioned the real reason that Python doesn't have a \"base\" attribute:\nIt's not needed. The type of x.base is int.\n\nI'm surprised nobody has mentioned the real reason that Python doesn't have a \"base\" attribute:\nIt's not needed. The type of x.base is int.\n\nI'm surprised nobody has mentioned the real reason that Python doesn't have a \"base\" attribute:\nIt's not needed. The type of x.base is int.\n\nI'm surprised nobody has mentioned the real reason that Python doesn't have a \"base\" attribute:\nIt's not needed. The type of x.base is int.\n\nI'm surprised nobody has mentioned the real reason that Python doesn't have a \"base\" attribute:\nIt's not needed. The type of x.base is int.\n\nI'm surprised", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def __init__(self, x: int, base: int):\n    self.x = x\n    self.base = base\n    self.string_representation = \"\".join(self.x + self.base)\n    def __str__(self):\n    \"\"\"Return string representation of x.\n    >>> print(self.string_representation)\n    '22'\n    >>> print(self.string_representation.encode('utf-8'))\n    '22'\n    >>> print(self.string_representation.encode('iso-8859-1'))\n    '22'\n    >>> print(self.string_representation.encode('utf-8', 'latin-1'))\n    '22'\n    \"\"\"\n    return self.string_representation", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base*x\n\nChange the second line to:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    print('Enter the base number: ')\n    x = int(input(''))\n    print('Enter the input number: ')\n    x = int(input(''))\n    base = int(input(''))\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return 'base'\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x\nThat's the most unreadable piece of code I've seen in a long time.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n        return '0' if x < 10 else '1' if x > 10\n    def change_base_from_int(base: int, x: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_from_int(8, 3)\n    '22'\n    >>> change_base_from_int(8, 2)\n    '1000'\n    >>> change_base_from_int(7, 2)\n    '111'\n    \"\"\"\n        return '0' if x < 10 else '1' if x > 10\n    def change_base_to_int(base: int, x: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_to_int(8,", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # 1st arg - input number\n    input_number = int(input(''))\n    # 2nd arg - base number\n    base = int(input(''))\n    # 3rd arg - output string\n    output = ''\n    # 4th arg - base change string\n    base_change = ''\n    # 5th arg - input string\n    input_string = ''\n    # 6th arg - output string\n    output_string = ''\n    # 7th arg - number of digits after decimal point\n    output_number_of_digits = 0\n    # 8th arg - output string\n    output_string = str(output_number_of_digits)\n    # 9th arg - base change string\n    base_change = str(base_change)\n    # 10th arg - input string\n    input_string = str(input_string)\n    # 11th arg - output string\n    output_string =", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError, \"Cannot change base of negative number\"\n    elif x > 10:\n        raise ValueError, \"Cannot change base of number greater than 10\"\n    else:\n        raise ValueError, \"Cannot change base of number less than 10\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    else:\n        return string(x)\n\nYou might want to consider using str.format.\n\nI think that's the best option, but I'm curious about the OP's reason for not using it.\n\nI guess I wanted to learn how to use the method I posted. I didn't know about the format function until now.\n\nYou can use str.format to specify the output format, and then change_base to do the conversion.\n>>> str(7) '7'\n>>> str(7, 2) '111'\n>>> str(7, 2, '0') '7000'\n>>> str(7, 2, '0.00') '7000.00'\n\nFor some reason, I can't get the change_base function to work. I'm using Python 3.3.1.\n\nThe last line is an error.\n\nI think that's because the base is less than 10.\n\nI don't see why the base should matter, as long as the string is in the same base.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x <= 0:\n        raise ValueError(\"Can't convert a negative number\")\n    x = int(x)\n    base = int(base)\n    return ''.join(str(x) for x in x if x < base else '0')\n    def change_base(x: int, base: int, precision: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 2, 2)\n    '1000'\n    >>> change_base(8, 2, 1)\n    '100'\n    >>> change_base(8, 2, 0)\n    '1'\n    >>> change_base(8, 1, 0)\n    '0'\n    >>> change_base(7, 2, 1)\n    '111'\n    >>> change_base(7, 2, 0)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0'\n\nI'm not sure what's the point of the example. Is it supposed to be a problem?\n\nIf the change_base function is called with a number less than 10, the return value is '0'.\nIf it is called with a number greater than 10, the return value is '1'.\n\nThe example is wrong. You can't do this with the standard library:\n>>> change_base(2, 3) Traceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: 'int' object has no attribute '__new__'\n\nIt's a good thing that this isn't in the standard library then.\n\nYeah, I was wondering why a function that doesn't do what it says it does was being lauded.\n\nI'm not sure why this is here. The title is \"A Better Way to Change Base\" and the text is \"A Better Way to Change Base\".\n\nThe title is \"A Better Way to Change Base\" and the text is \"A Better Way to Change Base\".\n\nThe title is \"A Better Way to Change Base\" and the text is \"A", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"x\"\n\nThis is so awesome!\n\nThank you, it's a small thing, but I like it.\n\nThis is awesome. I love the fact that you can just do:\n>>> change_base(1, 2)\n'2'\n>>> change_base(1, 3)\n'4'\n>>> change_base(1, -1)\n'-1'\n>>> change_base(1, -2)\n'-2'\n>>> change_base(-1, -2)\n'-2'\n>>> change_base(-1, -1)\n'1'\n>>> change_base(-2, -2)\n'4'\n>>> change_base(-2, -1)\n'2'\n>>> change_base(-2, -2)\n'-2'\n>>> change_base(-2, -1)\n'-1'\n>>> change_base(-2, -2)\n'1'\n>>> change_base(-2, -1)\n'-2'\n>>> change_base(-2, -2)\n'2'\n>>> change_base(-2, -1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def __str__(self):\n    \"\"\"Return string representation of the number.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(str(self) for x in range(0, self.base))\n\nThis is the Python version of the program. It works fine but I was wondering if there is a better way to do this in Python.\n\nThe following is the C version of the program:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0'\n    def to_decimal(x: int, base: int):\n    \"\"\"Return string representation of number x after base change.\n    return base * 10 + x\n    >>> to_decimal('10', 2)\n    '100'\n    >>> to_decimal('10', 3)\n    '1000'\n    >>> to_decimal('10', 4)\n    '10000'\n    >>> to_decimal('10', 5)\n    '100000'\n    \"\"\"\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    else:\n        return '1' + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base + str(x)\nI'm not sure if I'm reading this wrong, but the answer is always the same for me.\n\nIt's a bit of a cheat, but it's using the same trick that the Python 2 version of the code uses.\n\nI think the trick is that it's a trick.\n\nIt's a trick that works for all the numbers except those for which it doesn't work.\n\nYou can do this in Perl:\nsub change_base {\nmy ($x, $base) = @_;\n$x = int($x) if $base >= 10;\n$x = $x * 10 if $base <= 10;\nreturn \"10*$x\";\n}\n\nIn Ruby:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(x) * int(base) + '0';", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return '0' + str(x)\n\nThat's a really bad solution. It's going to fail if the input is negative.\n\nIt's a really bad solution if you don't know what it's trying to do. If you do, it's a very simple solution.\n\nIt's a bad solution because it's going to fail in the general case.\n\nI'm not sure what you mean by \"general case\". If you mean \"general input\", it's not going to fail in the general case. If you mean \"general base\", it's not going to fail in the general case.\n\nI mean in the general case where the input is a number and the base is greater than zero.\n\nThat's not the general case.\n\nIt is, because the input can be a number.\n\nBut the input can also be a string.\n\nSo what?\n\nThe input can be anything. Therefore, the general case is all inputs.\n\nI guess I don't see your point. It's a function", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    base = int(input(\"Enter base number: \"))\n    if base <= 10:\n       return '0' + str(x)\n    else:\n       return str(x)\n\nYou can also use the standard library function str(x).\n\nI thought about that, but I wanted to have the function work for any base.\n\nThis is a very simple but useful function. Thanks!\n\nI thought about this a few times and never thought of the obvious solution. Thanks!\n\nI've been using it for a while. It's a very useful function.\n\nThis is the most useful function I've seen in a while.\n\nI'm using this function since I saw it a couple of days ago. Thanks!\n\nI use it everyday.\n\nI use it every day.\n\nI use it everyday.\n\nI use it every day.\n\nI use it every day.\n\nI use it every day.\n\nI use it every day.\n\nI use it every day.\n\nI use it every day.\n\nI use it every day.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    print 'Base change to:', base, '\n    >>> change_base(10, 2)\n    '100'\n    >>> change_base(10, 3)\n    '1000'\n    >>> change_base(10, 4)\n    '10000'\n    >>> change_base(10, 5)\n    '1000000'\n    >>> change_base(10, 6)\n    '1000000000'\n    >>> change_base(10, 7)\n    '1000000000000'\n    >>> change_base(10, 8)\n    '100000000000000'\n    >>> change_base(10, 9)\n    '1000000000000000'\n    >>> change_base(10, 10)\n    '1000000000000000'\n    >>> change_base(10, 11)\n    '1000000000000000'\n    >>> change_base(10, 12)\n    '1000000000000000'\n    >>> change_", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base * int(x)\nThat's not the string representation, that's the base * the value of the number.\nWhat the OP wants is the string representation of the number.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be non-negative')\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(base*10), x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    else:\n        raise ValueError(\"x must be non-negative\")\n    return \"x\"\nThis is the part I don't understand. Why is the `raise ValueError` necessary?\n\nI'm guessing that it's because of this line:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def to_string(x):\n    \"\"\"Return string representation of x.\n    >>> to_string(8)\n    '8'\n    >>> to_string(8, base=3)\n    '22'\n    \"\"\"\n    return ''.join(to_string(x, base=base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    print(x)\n    print(base)\n    return ''.join(str(x) + '.' + str(base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    print(\"Base of input number:\", x)\n    print(\"Original number:\", x)\n    if x < 10:\n       return \"0\"\n    else:\n       return \"1\" * (x - base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return 'x'\n> change_base(8, 3)\n> '22'\n> change_base(8, 2)\n> '1000'\n> change_base(7, 2)\n> '111'\nIt's an interesting idea, but it's not clear to me what it's for.\n\nI'm not sure if this is what you were asking, but it's pretty useful for me.\n\nThe author is clearly a programmer.\n\nI thought the same thing.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.\n\nI thought the same thing too.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def to_string(x: int, base: int):\n    \"\"\"Return string representation of x.\n    \"\"\"\n    if x < base:\n       return '0'\n    else:\n       return '1' + str(x)\n    return to_string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def change_base_str(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_str(8, 3)\n    '22'\n    >>> change_base_str(8, 2)\n    '1000'\n    >>> change_base_str(7, 2)\n    '111'\n    \"\"\"\n    return '%s%s' % (x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    print(x)\n    return base * x\nI think you mean:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def __init__(self, x, base):\n        self.x = x\n        self.base = base\n        self.decimal = False\n\n    def to_string(self):\n        return self.x + '0' + self.base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(x) % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    else:\n        return '1' + str(x)\n\nThat's not really a Pythonic way to do it.\n\nYou're right, it's not. But the OP seems to be a newbie, and the code is pretty close to what he was looking for.\n\nIt's not close to what he was looking for. He wanted to convert from base 10 to base 3, and you can't do that with that code.\n\nYou can't do it directly, but the code is pretty close to what he wanted.\n\nI would have expected to see a discussion of the pros and cons of the various methods in the article.\n\nI was expecting the same.\nI've used the \"dotted decimal\" method (as shown in the article) when writing code to parse numbers from a CSV file, but I'm not sure if it's the best method.\n\nThis is what I used for parsing numbers from a CSV file:\n\nIf you're using Python 3, you should use decimal.\n\nWhy?\n\nBecause it's what", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return 'x' if x == base else 'x' + str(x)\nThe problem is that the author is using Python 3, which has a different way of handling integers. It's pretty easy to solve this problem by using the `int()` function, which returns an integer in the range of 0 to 255:      def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return int(x)\n`int()` will also convert the number to a string.\n\nI'm not sure why you'd use int() instead of str() here.\n\nIn Python 3, int() is the correct way to convert an integer to a string.\n\nI'm", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base*(x+1)\n> I would expect the first one to return '8' and the second one to return '10'.\n>\n> Why does it return '22' and '1000' instead?\n>\n>\n\nOn Wed, Jan 28, 2009 at 11:00:31AM -0800, G. David, Jr. wrote:\n> def change_base(x: int, base: int):\n>    \"\"\"Change numerical base of input number x to base.\n>    return string representation after the conversion.\n>    base numbers are less than 10.\n>    >>> change_base(8, 3)\n>    '22'\n>    >>> change_base(8, 2)\n>    '1000'\n>    >>> change_base(7, 2)\n>    '111'\n>    \"\"\"\n>    return base*(x+1)\n>\n> I would expect the first one to return '8' and the second one to return\n> '10'.\n>\n> Why does it", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x + \"0\" * base + \"0\" * x\nI know this is a joke, but I still cringed.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def to_s(x: int):\n    \"\"\"Return string representation of input number x.\n    >>> to_s(8)\n    '8'\n    >>> to_s(8, change_base(8, 3))\n    '22'\n    >>> to_s(7, change_base(7, 2))\n    '111'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(x) for x in range(base))\nThis is nice. But it's not a one-liner.\n\nI agree, this is not a one-liner.\n\nIt's not one-liner, but it's a one-liner in the spirit of the site.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"\";", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(x) + '.' + str(base))\n> I don't get it.\n>\n> - N\n>\n>\n> On Mon, Sep 16, 2013 at 1:01 PM, N. T. Wright <ntwright@...> wrote:\n>\n> >\n> > On Mon, Sep 16, 2013 at 10:55 AM, David Beazley <dbeazley@...> wrote:\n> >\n> >> This is the code for change_base. I'm not sure if it's correct.\n> >>\n> >> def change_base(x: int, base: int):\n> >> \"\"\"Change numerical base of input number x to base.\n> >> return string representation after the conversion.\n> >> base numbers are less than 10.\n> >> >>> change_base(8, 3)\n> >> '22'\n> >> >>> change_base(8, 2)\n> >> '1000'\n> >> >>> change_base(7, 2)\n> >> '111'\n> >> \"\"\"\n> >> return ''.join(str(x) + '.' + str(base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def to_string(x):\n    \"\"\"Return string representation of number x.\n    >>> to_string(change_base(8, 3))\n    '22'\n    \"\"\"\n    return change_base(x, base)\nI would have preferred to have seen the type signature of the function, instead of the function name.  In my mind, this is the difference between:      import math", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base*x+x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # Convert number to string, then reverse it.\n    return ''.join(str(x).rjust(3))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(base) for base in range(10))\nI think you should be using `range(base)` instead of `range(10)`.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def get_base(base: int):\n    \"\"\"Return numerical base of input number.\n    return base.\n    >>> get_base(3)\n    '3'\n    >>> get_base(2)\n    '2'\n    >>> get_base(1)\n    '1'\n    >>> get_base(0)\n    '0'\n    \"\"\"\n    def to_int(base: int):\n    \"\"\"Return numerical value of input number.\n    return base * 10.\n    >>> to_int(3)\n    '30'\n    >>> to_int(2)\n    '20'\n    >>> to_int(1)\n    '10'\n    >>> to_int(0)\n    '0'\n    \"\"\"\n    def to_string(x: int):\n    \"\"\"Return string representation of input number.\n    return x.to_int()", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    \"\"\"\n    def change_base_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_2(8, 2)\n    '1000'\n    >>> change_base_2(7, 2)\n    '111'\n    \"\"\"\n    \"\"\"\n    def change_base_3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_3(8, 3)\n    '22'\n    >>> change_base_3(7, 3)\n    '111'\n    \"\"\"\n    \"\"\"\n    def change_base_4(x: int, base: int):\n    \"\"\"Change numerical base of input number x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0' + str(x) + '0' + str(base) + '0' + str(x)\n    + '0' + str(base) + '0' + str(x) + '0' + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError('x must be non-negative')\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    \"\"\"\n    if x <= base:\n        return '0'\n    else:\n        return str(x)\n   \n    def str(x):\n    \"\"\"Return string representation of input number.\n    >>> str(8)\n    '8'\n    >>> str(8, 2)\n    '1000'\n    >>> str(7, 2)\n    '111'\n    \"\"\"\n    return x\nIn Python 3, use'str(x)' instead of 'x'.\n\nI had a similar problem with a C++ program and a double. I solved it by converting the input to a string, then converting the string to a double, then converting the double to a string.\n\nThat's a good idea, but if you use Python 2, you will get an error:\n>>> from __future__ import unicode_literals\n>>> str(8)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if base == 0:\n        return '0'\n    else:\n        return '0' + base + '0'\n\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\n>>> print(\"base is %d\" % base)\nbase is 0\n>>> print(\"base is %d\" % base)\nbase is 2\n>>> print(\"base is %d\" % base)\nbase is 3", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base*x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x > 10:\n       raise ValueError(\"Base must be less than 10\")\n    if x < 0:\n       raise ValueError(\"Base must be positive\")\n    return string.format(\"%d\", x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 10:\n        raise ValueError('change_base() must be called with a number greater than 10')\n    base = x\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # return a string representation of the number after the conversion\n    return str(int(x))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(x).encode('utf-8'))\n    + '0' * base + '0'\n\nThis is the most basic of basic solutions.\n\nI'm not sure if I'm missing something, but this seems like a bad idea.\n\nIt's not the most elegant of solutions. I'll admit that.\n\nWhat are the use cases for this function? I can't think of any.\n\nIt's a good exercise to teach about string formatting and the string type in python.\n\nIt's also a good exercise to teach about the importance of choosing the right tool for the job.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(x / base)\nIt's a good exercise to write this function using only the standard library, and without using division.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '%d' % int(x)\nThis is a great example of a function that is extremely easy to read and understand.  The function does exactly what it says it does, and the return type is obvious.  This is the type of code that you should strive to write.\nI agree. I find that when I'm writing something, I can't think of a good way to do it, I just copy the way someone else did it and change it to fit my needs.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(x)\nAh, I see. I didn't know about that. Thanks!</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError('Can't change base of negative number')\n    else:\n        return string(x) +'' + string(base)\n\nChange the input base to 3.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(x)\nI'm not sure if I'm missing something here, but what if x is negative?\nAlso, the return type is not specified.\n\nYou are missing something.\n\nI am. Thanks.\n\nI was expecting something like:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '%s' % (x, base)\nI think this should be a `str` object instead of a string.\n\nPython 2.7 doesn't have `str` objects.\n\nA string is a str object.\n\nI don't think that's true. I believe that a string is a type, and a str is an object that is of that type.\n\nA string is a type, but a string is also an object that is of type str.\n\nI'm not sure what the point of the article is.\nI've written a lot of C in my day, and I've never seen a program that used strlen() for any reason other than to determine the length of a string.\nThere are some cases where strlen() is useful, but I'm not sure that's the point of the article.\n\nThe article is about strlen() and how it doesn't always return the length of a string, but the length of a pointer to the first character.\n\nYeah, I get that. I just don't see what the point of the article is.\nI mean, I get it, but it's not really an issue for me. I've", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(x) + base + '0' + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(map(str, x))\nThis is the same as:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(x)\nI think it's pretty clear that this is the correct answer.\nI would change the name to \"to_string\" though.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n       return ''.join(x)\n    else:\n       return x\n\n>>> change_base(8, 2)\n'22'\n>>> change_base(8, 3)\n'1000'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(8, 3)\n'22'\n>>> change_base(7, 2)\n'111'\n>>> change_base(7, 3)\n'22'\n\nNice!\n\nNote that this is not the same as the usual base-10 to base-2 or base-16 conversion, which are used to print numbers in columns or rows, or to change the number of digits to fit in a given number of bits, or to make a number more easily manipulated by a computer.\nThis is a change of the base, which can change the numerical value of the number.\n\nI think it's a little more than that. It's a conversion from one base to another, and it's a change in the base. But I think it's more than that too.\n\nIt's a", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"3\"\n    if x == 4:\n        return \"4\"\n    if x == 5:\n        return \"5\"\n    if x == 6:\n        return \"6\"\n    if x == 7:\n        return \"7\"\n    if x == 8:\n        return \"8\"\n    if x == 9:\n        return \"9\"\n    if x == 10:\n        return \"10\"\n    return \"0\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(base*x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0' + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 10:\n        return base\n    else:\n        return x\nIn python, you don't need the else clause.\nI'm not sure if that's because python is more flexible, or if it's because the author is not very familiar with python.\nOr, it could be a different language.\n\nPython is more flexible.\n\nThis is a good example of a function that should be a class.\n\nOr a function that should be a method.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    \"\"\"\n    return \"x\" + str(int(x)) + \"%d\" % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 10:\n       return '0'\n    else:\n       return str(x)\nI think this is the answer.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(x)\nWow, that's a lot of code for a trivial problem.\n\nI think it's a pretty good example of how to do something simple in Python, but maybe not the best example of how to do something simple in Python.\n\nI think it's a pretty good example of how to do something simple in Python, but maybe not the best example of how to do something simple in Python.\n\nI think it's a pretty good example of how to do something simple in Python, but maybe not the best example of how to do something simple in Python.\n\nI think it's a pretty good example of how to do something simple in Python, but maybe not the best example of how to do something simple in Python.\n\nI think it's a pretty good example of how to do something simple in Python, but maybe not the best example of how to do something simple in Python.\n\nI think it's a pretty good example of how to do something simple in Python, but maybe not the best example of how to do something simple in Python.\n\nI think it's a pretty good example of how to do something simple in Python, but maybe not the best example of how to do", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    else:\n        return '1'\nThis is a bit more robust, but it still has the same problem. If I try it with base=2, it will give me a string \"1\", which is not what I want.\n\nSorry, you're right. I was just trying to be clever.\n\nI think the simplest solution is to write a function that returns a string with the number in base 10, followed by a string with the number in base X. For example,", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # Change 8 to base 3\n    return \"3\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # Base numbers are less than 10.\n    if x < 10:\n        return '0' + base + '0' + x\n    return '0' + base + '0' + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return string(x)\n    else:\n        return string(x, base-1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n    return \"0\" + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # Calculate the number of digits in the result\n    digits = int(x * 10)\n    # Change the base\n    base = int(base * 10)\n    # Calculate the number of digits in the result\n    digits = int(x * 10)\n    return string(digits)\nThis is really interesting, but I don't know enough about Python to know if this is idiomatic or not.\n\nI'd say it's not idiomatic, but it's not a bad way to do it either. The problem with this is that you're changing the type of the input and output, which is generally not a good idea.\nA better way to do it is to use a type converter. The reason for this is that you can then define your own type converters, and you can do some really nifty things with them.\n\nThe only problem with that is that you can't convert to base 10.\n\nI think I would prefer this:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def convert(x: int, base: int):\n    \"\"\"Convert input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> convert(8, 3)\n    '22'\n    >>> convert(8, 2)\n    '1000'\n    >>> convert(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n       return '0'\n    else:\n       return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        x = int(x)\n    else:\n        return '0'\n\nThis is a common pattern in Python. It is better to use a built-in function, such as int(), than to write your own.\n\nfrom __future__ import print_function", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # Change the base of the number to the specified base.\n    return ''.join(str(x) for x in x if isinstance(x, int))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    raise NotImplementedError('change_base() expected base to be a number between 1 and 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"\".join(map(str, int(x)) for x in xrange(base))\nI'm not sure if this is the best way to do it, but it's the way I did it in my first attempt.\n\nYou can also use the string method:\n>>> from itertools import cycle\n>>> def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return cycle(base) + x\n\nI would prefer:\n>>> from itertools import cycle\n>>> def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"x\"\n    + base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    change_base(x, base):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%s' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return x\n    else:\n        return '0'*x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x == 0:\n        raise ValueError(\"x must be non-zero\")\n    return \"0\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(x) ** base\nThis is not correct, because the result will always be an integer.\nI think the author meant to use the `int()` function, which will convert the input to an integer if it is a number.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 10:\n        return '0'\n    base = int(x)\n    return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base*x+'0'\nI think that the last one is the best. It's easy to read and to understand.\nI'd like to see some examples of why the other ones are better though.\n\nI would disagree with this. I would say that the best is the shortest.\n\nI think this is the most common way to write this:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError, \"Not a positive number\"\n    else:\n        return str(x)\n    def change_base_string(base: int, x: int):\n    \"\"\"Change string representation of x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_string(3, 8)\n    '000'\n    >>> change_base_string(3, 7)\n    '111'\n    >>> change_base_string(3, 2)\n    '1000'\n    >>> change_base_string(2, 8)\n    '0000'\n    >>> change_base_string(2, 2)\n    '10000'\n    >>> change_base_string(1, 8)\n    '100000'\n    >>> change_base_string(1, 2)\n    '1000000'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    from decimal import Decimal\n    from itertools import islice\n    from collections import OrderedDict\n    from string import codecs\n    from string import roman\n    from string import hexlify\n    from decimal import int\n    from decimal import float\n    from decimal import round\n    def change_base_decimal(x: int, base: int):\n    \"\"\"Change base of decimal number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_decimal(8, 3)\n    '22'\n    >>> change_base_decimal(8, 2)\n    '1000'\n    >>> change_base_decimal(7, 2)\n    '111'\n    \"\"\"\n    x = Decimal(x)\n    base = int(x)\n    return roman(x, base)\n    def change_base_", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base == 10? x : x * 10\n\nThis is not a \"beautiful\" solution, but it works.\n\nThis is a bit of a hack, but it will work:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x + base\nI think you meant to post this in /r/shittyprogramming.\nNo, I think he meant to post this in /r/programminghorror</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n\nimport string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n       return '0'\n    else:\n       return '1'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(x, base)\nYes, that's exactly the one I was looking for.  Thanks!</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return base*x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return x\n    return '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(x) + \" \" + str(base)\nThis is a good example of a function that shouldn't be in the stdlib.\n\nI disagree.\nIt's a good example of a function that should be in the stdlib, but that should be in the stdlib in a module that can be imported explicitly, rather than the main stdlib module.\nIt's a very basic function, and it's not a bad idea to have it available.\n\nNo, it's a bad idea. There's no reason to have a function like this in the stdlib, and there's no reason to have it be imported automatically.\n\nIt's not that bad an idea.\nIt's not like there are a lot of people who are going to start writing code like", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"base_number_to_string(x, base)\".format(x, base)\nSo, if I'm reading this right, you're not actually changing the base, you're just changing the representation?\n\nYes, that's right. I'm not sure it's the best way to do it.\n\nI would probably recommend a different name, like \"translate_base\" or something.\n\nI'm not sure if the code is correct but I think I get the idea.\n\nI'm not sure I understand how it works. I would expect the following to produce the same output:\n>>> from itertools import chain\n>>> chain([change_base(8, 3), change_base(8, 2), change_base(7, 2), change_base(7, 1)] + '0')\n'1000'\n\nIt's a simple function to convert from one base to another.\n\nI'm not sure I understand why you'd need to convert bases.\n\nI have a need to convert from binary to decimal and vice versa.\n\nI would recommend using a library. There are a number of Python libraries that can do this, and they're", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 10:\n        return '0'\n    else:\n        return '1'\n    else:\n        raise ValueError('Base must be less than 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"x\" + str(base * x) + \".\" + str(base * x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0' + str(base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(x) for x in range(base))\n> change_base(8, 3)\n> '22'\n> change_base(8, 2)\n> '1000'\n> change_base(7, 2)\n> '111'\n\nYou are using a base of 10 and the code is written in Python, so I'm assuming you are on a machine that uses the decimal number system.\nThe code is not correct.\n\nIt should be:\n\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n\nYou are trying to change the base of the number to a different base.\nThe correct way to do this is to use the decimal module.\n\n>>> import decimal\n>>> decimal.from_base(3)\n'3'\n>>> decimal.from_base(2)\n'2'\n>>> decimal.from_base(7)\n'7'\n>>> decimal.from_base(8)\n'8'\n>>> change_base(8, 3)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    base = int(input(\"Please enter the base number: \"))\n    return string(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def change_base_string(x: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_string(8, 3)\n    '22'\n    >>> change_base_string(8, 2)\n    '1000'\n    >>> change_base_string(7, 2)\n    '111'\n    \"\"\"\n    return '0x' + x +'' + change_base_string(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '1' if x < base else '0'\nI've never seen the % operator used like this.  It's always been a modulo operator.\nI'm not sure what the difference is, but I'd expect:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    # This is a class method.\n    def __call__(self, x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return ''.join(map(str, x, base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0'\n> def change_base(x: int, base: int):\n>    \"\"\"Change numerical base of input number x to base.\n>    return string representation after the conversion.\n>    base numbers are less than 10.\n>    >>> change_base(8, 3)\n>    '22'\n>    >>> change_base(8, 2)\n>    '1000'\n>    >>> change_base(7, 2)\n>    '111'\n>    \"\"\"\n>    return '0'\n\nHow do you get the string representation of the number?</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0x' + base + 'x'\n\n>>> change_base(8, 2)\n'1000x'\n\n>>> change_base(8, 3)\n'22x'\n\n>>> change_base(8, 2)\n'1000x'\n\n>>> change_base(8, 3)\n'22x'\n\n>>> change_base(8, 2)\n'1000x'\n\n>>> change_base(8, 3)\n'22x'</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return string(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def change_base_str(base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_str(8, 3)\n    '22'\n    >>> change_base_str(8, 2)\n    '1000'\n    >>> change_base_str(7, 2)\n    '111'\n    \"\"\"\n    return \"\".join([str(x) for x in range(base)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '%d.%d' % (x, base)\nI would be wary of calling this function without some sort of type check.  It would be trivial for someone to pass in an int and get a string back.\n\nWell, it's an example. The real code will have type checks.\n\nI agree with the point about not using eval.\nI also disagree with the point about not using eval.\nI think that if you're using eval in the context of a small, easy-to-maintain script, you're doing it right.\n\nI agree.\nAlso, eval is not necessarily slow. It can be as fast as the normal function call if you are using it to execute a simple function.\n\nI disagree.\nI think eval is a very useful tool, and can be very fast in some circumstances.\n\nI disagree.\nI think eval is a very useful tool, and can be very fast in some circumstances.\n\nI disagree.\nI think eval is a very useful tool, and can be very fast in some circumstances.\n\nI disagree.\nI think eval is a very useful tool, and can be very fast in some circumstances.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '%s' % x\nI've never seen a string representation of a number in python.  Is that common?\nI've seen it in C, but only in debug builds.   I think it's a pretty common thing.\nI've seen it in C++, but only in debug builds.   I think it's a pretty common thing.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    \"\"\"\n    if base <= 0:\n        raise ValueError('base cannot be zero')\n    \"\"\"\n    new_base = (base << 1)\n    return str(new_base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        return \"\"\n    else:\n        return '0' * x + '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(x).decode('ascii'))\n\nIf you want to convert a number from base 10 to base 8, you could just do:\n>>> change_base(10, 8)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return x\n    return str(x)\n\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n>>> change_base(6, 2)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: can't convert 'int' to str\n\nThe 'int' in 'int x' is the type of x, not the type of x's value.\n\nI don't see how this is a \"Python\" question. This is a C question.\n\nIt's a C question that is asked in Python.\n\nThe answer is:\nint x = 8;\nint y = 8;", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x <= 0:\n        return '0'\n    else:\n        return '0x' + str(x) + 'b' + str(base)\n    + 'b' + '0' + str(x)\n\nWhat is the purpose of this?\n\nMy first thought was to write a \"base conversion\" function that would convert base-10 numbers to base-2 numbers, but I soon realized that the standard library already has one:\n>>> from decimal import Decimal\n>>> Decimal('100')\nDecimal('1')\n>>> Decimal('100000000000000000000')\nDecimal('100000000000000000000')\n\nThis is just a quick hack to convert numbers in a particular base to a string representation in that base.\n\nI'm sorry to say that this is very bad programming style.\nYou should never use 'b' or '0' in a string.\nYou should never use 'b' or '0' as a number.\n\nYou are right, but this is just a quick hack.\n\nThis is a good example of what happens when you use a language like", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(x) for x in range(base))\n\nThe correct answer is \"it depends\". There are a lot of factors that affect the performance of a program, and without knowing the use case, it's impossible to tell which one will be the bottleneck.\n\nIt depends.\n\nYes, it does.\n\nNo.\n\nI don't know.\n\nIt depends.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(map(str, x))\nThis is Python 3, where str is a string type.\nWhat is the type of x? What is the type of base?\n\nx is an int.\nbase is a string.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def to_string(x: int, base: int):\n    \"\"\"Return string representation of input number x.\n    >>> to_string(change_base(8, 3))\n    '22'\n    >>> to_string(change_base(8, 2))\n    '1000'\n    \"\"\"\n    return ''.join(map(str, change_base(x, base)))\n\nI love this! Very clean and simple.\n\nIt's a good example of why I like Python. You can create a whole program, including a reasonably complex function, in a single line.\n\nI love Python, but I don't think this is a good example of why I like Python.\nI like Python because it's a great language for quickly prototyping and iterating. I like Python because I can easily write code that's both concise and readable. I like Python because it has a lot of libraries to help you get things done, and because it's easy to extend the language with your own libraries.\nI don't like Python because it's a language for writing one-liners that do one thing.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    else:\n        return '1' + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n       raise ValueError('Base must be greater than or equal to 0.')\n    else:\n       return int(x)\nThis is a fun exercise to do in Python, but it's not a good way to convert from one base to another. The problem is that the result is not guaranteed to be a correct number.  The reason is that the string representation of the number depends on the implementation of the str() function, which may not be accurate.  The Python implementation is not a good example because it is not guaranteed to be accurate for all bases.\n\nI was wondering about this, too. Is there a better way to do this in Python?\n\nIt's not really possible to do this in a portable way. There are a number of different ways to represent a number in a string, depending on the implementation of the str() function.\n\nI think that the best way to do it would be to take the result of str(x), and convert it to a decimal, octal, etc.\n\nThat's what I do in my python library:\n\nI'm not sure if this is the best", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return string(x)\nI don't think that's how it works.\n\nWhat's the base of 2^3?\n\nIt's not base 3, it's base 10.\n\nI see what you mean. I misread it.\n\nI don't get the point. If you need to do numerical operations on a non-base 10 number, you should use the right number system.\n\nThe point is that when you need to convert a number from one base to another, you often need to do it with a string.\n\nThe article has a link to this, which is a much better explanation:\n\nI wish I had the time to get into all of the things that I want to do. I have a list of projects that I want to work on, but I don't have the time to do it all.\n\nI have the same problem. It's been a few months since I've done any coding. I have a list of things I want to work on, but I just can't find the time.\n\nI have the same problem. I have a list of things I want to work on, but I just can't find the time.\n\nI have", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x > base:\n        raise ValueError(\"Base too large\")\n    return string(base-x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x >= 10:\n       return '0'\n    base = int(x)\n    return base.upper()\nI think you mean \"base numbers are less than 10\".</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return string(x) + 'd' + 'd' + base\n\nThis is nice, but if you want to do this in a more idiomatic Python, you can use the repr() method:\n>>> import math\n>>> math.pi = 3.14159\n>>> math.pi.repr()\n'3.14159'\n>>> math.pi.repr(10)\n'3.14159d'\n>>> math.pi.repr(2)\n'1000d'\n\nNice!\n\nThis is the sort of thing that makes me love Python.\n\nI'm not sure why, but I really like this kind of code. I've seen it in a few other places and it always makes me smile.\n\nThis is a nice example of using the built-in string formatting functions.\n\nI'd like to see this in a more idiomatic way.\n\nThere's a similar function in C# too:\n\nIsn't that basically just the same as strtoll()?\n\nIt's a little different, because it's a function and not a method.\nIt also doesn't take a base number (it's always 10).", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return int(str(x) * base)\n> def change_base(x: int, base: int):\n>    \"\"\"Change numerical base of input number x to base.\n>    return string representation after the conversion.\n>    base numbers are less than 10.\n>    >>> change_base(8, 3)\n>    '22'\n>    >>> change_base(8, 2)\n>    '1000'\n>    >>> change_base(7, 2)\n>    '111'\n>    \"\"\"\n>    return int(str(x) * base)\n>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n        return '0'\n    return base + '0' + x\n\nI'm not sure if this is the correct way to do this, but I think it's close.\n\nI'm not sure if the original code is correct either, but I think it's close. I think the author was trying to express a base 2 number in base 10.\n\nAh, I see. I didn't read it that way.</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    \"\"\"This is a very old function.\n    >>> from decimal import Decimal\n    >>> from itertools import product\n    >>> from decimal import Decimal\n    >>> from itertools import product\n    >>> product(change_base(8, 2), Decimal('2'))\n    '0'\n    \"\"\"\n\nI can't believe how easy that was to read.\n\nThe python docs are really good, but they are not the easiest to read.\n\nI don't know what you mean. They are the easiest to read of any language I've ever worked with.\n\nI think he's saying that while the Python docs are great, they could be better.\n\nI don't think they could be better. They're the best I've ever seen.\n\nThey are the best I've ever seen too, but I can see how they could be better.\n\nThe only way they could be better is if they were easier to read.\n\nI agree. I think they could be easier to read.\n\nNo, I think they are easier to read.\n\nI think they could be easier", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"\".join([int(x) % base for x in xrange(1, int(x) - base)] +\n    x)\n\nThe function is a bit more complicated than the one that was posted.\nI like this one better because it is less likely to have a bug.\nThe one that was posted is very easy to have a bug in because it doesn't handle overflow and it is easy to pass it a number that is too big.\n\nI agree, but I think the goal was to demonstrate the concept, not to write an optimal implementation.\n\nI think this is a better way of doing it.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < base:\n       return str(x)\n    else:\n       return str(base) + '0' + str(x)\n    return ''\n\nThe above code has a bug.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return ''.join(str(x).lower() for x in xrange(base))\nI think I have the same problem as the OP. I don't understand what this is doing. What does \"return ''.join(str(x).lower() for x in xrange(base))\" mean? I know how to use.join, but what is the purpose of the xrange(base) and what is the x?</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return str(x)\nThe other one is even better, but the code is a bit more complicated.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return \"\";\nI would have thought \"return base\" would be more useful.\n\nI don't understand why they chose to do the change with base-10 instead of base-2.\n\nIt's a good question, but I think it's because they're trying to keep the code as simple as possible.\n\nSimple is good, but it's not good to have to do a conversion before you can work with a number.\n\nIt's a little funny that the implementation is longer than the original code.\n\nIt's not funny if you know about the Zen of Python.\n\nIt's funny that the Zen of Python is longer than the original Zen.\n\nIt's not funny if you know about the Zen of Zen.\n\nIt's funny that the Zen of Zen is longer than the original Zen.\n\nIt's not funny if you know about the Zen of Zen.\n\nIt's funny that the Zen of Zen is longer than the original Zen.\n\nIt's not funny if you know about the Zen of Zen.\n\nIt's funny that the Zen of Zen is longer than the original Zen.\n\nIt's not funny if you know about the Zen of Zen.", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def is_base(x: int):\n    \"\"\"Check whether the number is a base number or not.\n    return True if x is a base number.\n    >>> is_base(3)\n    True\n    >>> is_base(9)\n    False\n    >>> is_base(7)\n    True\n    \"\"\"\n    def to_base(x: int):\n    \"\"\"Return string representation of x in base number.\n    return ''.join([str(x) for x in x if is_base(x)])\n    \"\"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return '0' + str(x) + '0'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    if x < 0:\n        raise ValueError(\"Must be non-negative\")\n    return str(x)\n>\n> I'd rather like to do this:\n>\n> def change_base(x: int, base: int):\n>    \"\"\"Change numerical base of input number x to base.\n>    return string representation after the conversion.\n>    base numbers are less than 10.\n>    >>> change_base(8, 3)\n>    '22'\n>    >>> change_base(8, 2)\n>    '1000'\n>    >>> change_base(7, 2)\n>    '111'\n>    \"\"\"\n>    if x < 0:\n>        raise ValueError(\"Must be non-negative\")\n>    return x\n\nI'd rather like to do this:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x ** base\n\nThere are two ways to read this code. The first way is to read it as the following:", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\" \"\"\"\n    return x.decode('base-10').lower()\nI like this one.\n\nPython's str.decode is much faster than that.\n\nWell, yeah, but I think the point is to show how to do it in pure Python.\n\nI think the point is to show how to do it in pure Python in a way that is not idiomatic and not idiomatic for a reason.\n\nThe reason is that it's much faster.\n\nI'm not sure if it's faster. It is certainly more readable and more pythonic.\n\nI don't know, it seems like it's more readable because you already know it's faster.\n\nA lot of things seem more readable because you know they are faster.\n\nIt's a good thing to know, but you can't take it for granted.</s>"]]