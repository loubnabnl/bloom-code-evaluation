[["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for i in range(0, n):\n        return s[i:]\n    return []\n\nWell, I have one for you. It doesn't require any data structures but it does require a bit of string manipulation:\nfunction words_from_string(s)\n    if s.endswith(\"\"):\n        return s.split(\"\")[0]\n    elif s.endswith(\"a\"):\n        return s.split(\"a\")[0]\n    else:\n        return s.split(\"\")[0]\n\nI don't see how that is any better than the OP's solution?\n\nIt works.\n\nAFAIK, all of these solutions are O(n) worst-case time. I don't see why it's a problem for people to just use n - 1 for efficiency.\n\nIt's not like there are actual human beings typing these. If you're looking for the most efficient solution, you're not the target audience of these problems.\nThe goal is to", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for word in range(n):\n         return word.replace(\"[^a-zA-Z]\", '')\nThe big-O is one.\n\nIt's one, but the function is slow and the input is not well-formed.\n\nWhoops, I missed that.\n\nI did a dumbed down version of this:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[i] for i in range(1, len(s) - n)]\n\nWhat I would expect:\nselect_words(\"Mary had a little lamb\", 4) ==> [ \"Mary\", \"had\", \"little\", \"lamb\" ]\n\nWhat I get:\n\"little\"\n\nWorks great for me.\n\nWorks fine for me.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[i] for i in s.finditer(c=0) if c in [\"c\", \"c\", \"c\", \"c\", \"c\"]]\nThis does not take into account words that might contain a number of c's in a row. For example \"abracadabra\" has 4.\n\nYep, very true. But there is no simple solution for that.\n\nI have some experience with these kinds of projects, and the more effort you put into the solution, the more experience you gain solving problems like this.\nI think it's actually _more_ of a problem to not have enough c's. There is a simple solution for that, as you say.\n\nIt is a good exercise for anyone that does not know the different sorting algorithms and wants to use them.\n\nI don't see any mention of sortsort in that file.\n\nOf course, you could just use a dictionary (if the list of words is small enough)\n\nSeems like the author has missed the real problem. The real problem is that the first letters of the words are in random order, not that there are some number of consonants.\n\nYes, I agree", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Get the letter count for each word\n    for w in s:\n        if len(w) > n:\n           # This word contains at least n letters\n            # so we keep it\n            # If we already have this word, don't add it again\n            # Otherwise, we don't have it so add it\n            # to the list\n            # We keep going until we find no words that meet our criteria\n            return w", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    count = 0\n    for c in s:\n        if c == 'n':\n           count += 1\n    return list(map(count, select_words(s, count-1)))\n\nThe `select_words` function is a very simple solution to the problem.\nBut, as you can see, we have to maintain a global `count` variable which might\nturn out to be quite cumbersome if we want to apply this to a large set of\nstrings (hundreds, thousands, tens of thousands).\n\nMoreover, the `select_words` function only works for \"natural\" words.\nLet's say we have a sentence like \"I have the feeling that the boy is angry with me\",\nwhere the string contains at least two consecutive \"N\"s:\n\n\"I have the feeling that the boy is angry with me\"\n\nThis string is not an accepted input for `select_words`. We have to take care\nof this type of situations, which can turn out to be quite cumbersome to do.\n\nLet's see how we can solve this problem.\n\nIm", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return []\n    for word in s:\n        if word.startswith('l'):\n            # letter 'l' appears exactly n times in word\n             # return all the words that contain the letter 'l' exactly n times\n             # in order these words appear in the string\n              # The first word, containing 'l' exactly n times, is returned first\n              for n in range(len(word)):", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n              return [s.split()[0] for s in s.split(\" \")]\n\nI've never seen anyone else use `.split()` in this way. I've always used `.split()` as \"take the part of the string before this character, and the part of the string after this character, and return them separately\".\nI do not think it is valid to say \"split the string on the first space\" or \"split the string on the last space\". The string does not have a natural structure.\nThis seems like a very interesting way to use `.split()`! Can someone comment on how they have used `.split()` in the past and/or why this is the best way to use it?\n\nI never actually thought about the fact that split() has no way to specify the delimiter. It's always \"sliced\" right in the middle, rather than splitting the string at a character.\nI used to just use it as the latter, but now I'm considering using it as the former. I'm not sure which is more intuitive.\n\nThe split() method _does_ have a way to", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return set(s)\nThis is a really good exercise. It's a common problem to solve for new programmers.\nThe one thing I would suggest you do is create a set of words to test against. I started out with the following (not very large) set of words:\nAnimal - fawn, kitten, mongoose, porcupine, turtle, whale\nColor - brown, blue, green, red, yellow\nDrink - tea, coffee, soda, water\nFruit - banana, apple, grape, orange\nVegetable - carrot, celery, potato\nObject - book, pencil, tree\nOccupation - actor, banker, farmer, teacher\nVehicle - car, bicycle, bus\nNumber - one, two, three, four\nShape - square, cube, sphere, cylinder\nAnimal sound - moo, oink, honk, baa\nColor sound - brown, blue, green, red\nDrink sound - fizz, splash, fizz, slurp\nFruit sound - crunch, slurp, squish, crunch\nVegetable sound - crunch, squish, slurp\nObject sound - clink, clunk, thunk, snap", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for w in s:\n        if w not in n:\n           w += 1\n        return [w]\n\nI think it's pretty clear that Python is the only one that actually meets the requirements:\n1\\. It does not handle empty strings\n2\\. The definition of the function says that it must return an empty list if s is empty.\n\nThis one handles empty strings:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [str(i) for i in range(n)]\n\nI like to call it \"lazy css\".\n\nI think you mean \"lazy lisp\".\n\nI mean lazy css since css has the quotes.\n\nand \"css\" has the letters\n\nI was expecting a sort of CSS preprocessor, where you could write a block of CSS and it would only apply the rule when it was absolutely necessary.\n\nI think this is a clever way to evaluate something that could be very difficult to evaluate on a particular string.\n\nThis is a great example of how the Python syntax doesn't suit a lot of real-world use cases. If you were trying to do this in a language with named parameters you would have the option to define the string to operate on as a parameter and to name the number of characters as well.\n\nI see your point, but it's also a little funny that you're suggesting a more verbose syntax to make the same thing more concise.\n\nI agree it's funny but I didn't mean that the name should be part of the function name. I meant that the name should be part of the argument name. In other words, it", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if s:\n        return [s[i:] for i in range(0, len(s), n)]\n    else:\n        return []\n    return []\n\n_\\--_\n|", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [x[0] for x in s.lower() if x[0] in ['c','g','h','k','l','m','n','r','s']]\n\nThat's not a function that can return a list of all words with a given number of consonants. The word \"ship\" has one more consonant than you want, and the words \"crash\" and \"crashes\" have three less.\n\nThere's no problem with it returning an empty list when the input is empty.\n\nIt is the common misconception that the \"()\" is a syntax error.\nIt is not.\n\nCorrect!\n\nI was expecting to see a python version of this:\n\nThis is like a robot wrote it.\n\nNo it's not. The robot would be more complicated.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if s.startswith(\"-\") or s.startswith(\"_\"):\n    return [s[:-n], s[:-n],..., s[-n]]\n    if len(s) == 0:\n       return []\n       return [s[:n] for n in range(len(s))]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for letter in s:\n        if letter not in [a, e, i, o, u, y, h, l, r, m, n, p, w, y, z]:\n            continue\n        n -= 1\n        if len(word_list) == 0:\n            return []\n            for w in word_list:\n                 word_list.append(w)\n                word_list.append(\"\")\n                 return word_list\n\nAs a Rubyist, this looks like an awful lot of code to do something that should be a two-liner.\n\nIt's not hard to write a two-liner that does it, but it's not obvious what the performance characteristics are. You want to take a string and", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return sorted(s.split())\nDoes this work with any string?\n\nSorting an empty string gives an empty list. It seems like it should work in most cases.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [x for x in s.split() if x.count(letter) == n]\n\nSelect all the words that contain the string \"world\" in order they appear in the string.\nworld    world    world    world    world    world    world\n------------------------------\nHello   Hello   Hello   Hello   Hello   Hello   Hello\nworld", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for letter in s:\n        if letter in 'a':\n           words.append(letter)\n        else:\n           words.append(s[letter])\n    return words\n\nWhat's the point of this?\n\nSeems like an exercise in string processing, and a fun one. I know I'm not the only one who has learned a lot of string processing algorithms by implementing them in code.\n\nOne problem with this code is that, for some values of n, the function may return empty words. For example, with 5, it returns \" \"; with 6 it returns \"helloworld\"; with 7, it returns \"hello\" and \"world\".\n\nWhat do you mean, it returns an empty string? It's called \"select_words\".\n\nI wonder how many will see this and then try to work out what would happen if you gave it the empty string as input.\n\nThose of us who don't waste time doing stupid shit like that would see it and say \"it", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = set(s)\n    for c in s:\n        if c == 'a':\n             words[n + 1] = words[n] + 1\n                words[n] = words[n - 1]\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n        # Define the function and parameters\n        def select_words(s, n):\n           return [x for x in s if x.strip()[0] == n for n in range(n)]\n\nWhat's wrong with this code?\n\nFirst, 'n' is the wrong variable name. It should be 'c'.\nSecond, the function does not return the list, it modifies it.\nThird, if the input string is empty, the function should return an empty list.\nAnd, most importantly, you have not defined the function, it is just a\ncomment.\n\nThank you for the help. I've changed the n to c and added a function definition.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    consonants = []\n    i = 0\n\n    while len(s) > 0 and i < n:\n        if i == n:\n           words.append(s[i:])\n           consonants.append(s[i:])\n\n    return words\n\nI think he's looking for something that requires more than string manipulation.\n\n(I didn't mean to be snarky... I just really like the code sample.)\n\ntry this, it's a bit more interesting: \n\nthanks, that is an interesting code sample. the code itself seems reasonably\nsimple to implement.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    a, b = re.split(' ')\n    if b:\n        for word in word_list(b, n):\n            if word not in s:\n                word_list.append(word)\n    return list(word_list)\nelse:\n    return []\n\nSince I was going to post this anyway...\nimport random", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[s.index(s.index('.', n)]) for s in s.split()]\n    def nl_dropout(nl, d):\n    \"\"\"Given two lists (nl, d), return a new list (d) in which each item is a \n    list with the items from nl, but where each item of nl appears only", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return list(word.split(s[::-1]))\n\nAssuming you want to sort it, use sort.  For the reason you give, you probably should use find(str, {n}) and then just call sort on the results.  (You probably don't want to sort on the spaces.)  It's also not at all clear what you mean by \"this function should return the list of words\" \\- all the words in the string?  All words of length n?  Something else?\n\nGood one. I just assumed that he wanted to return the list of words in order. I was wrong.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = {}\n    for w in s:\n        if w[-1] == 'n':\n           words.append(w)\n    return words\n\nAha!  But how would you implement it if you had to use the standard library?", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = [word[x] for x in s for n in range(n)]\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # List of consonants\n    consonants = set(s)\n    # return set of words that contain n consonants\n    return set(words, n in consonants.itertuples(set(n)))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.filter(w for w in set(n))\n\nIn a non-pythonic way, you could use \"in\" as your comparison function:\nfor w in (n):", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s.upper() for s in s if s.find('.') =='']\n\nTo me, the second example is much easier to read. It's also easier to debug when something goes wrong, because the problem is a bit more obvious.\n\nI'm curious why you think that?\nThe first example is also easier to debug if something goes wrong. You know exactly where you are in the code.\n\nBecause your code is likely to be littered with `s.find(...)` and the like.\n\nThat's a fair point. Although the example with the list comprehension, if you are using python 3.x, is not much different than:\nword_count = [x.count(w) for w in x if w.startswith('.') and x.endswith('.')]\n\nIf you're going to use the argument that the 2nd example is easier to understand, I'd agree with you. However, I think the 1st example is more efficient and is more easily ammended to return the first n words.\n\nI would disagree, it takes more lines of code, and the logic is more difficult to follow.\nIf you", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[i:i+n] for i in range(len(s)-1)]\n\nThat's not a good algorithm for the following reasons:\n1\\. No mention of memory usage.\n2\\. No mention of efficiency (time, memory, space).\n3\\. No mention of performance.\n\nThis algorithm is not what I would call \"fast\". However, you will certainly have a smaller program (the alternative is to build a custom iterator and support more than one call to the function).\n\nIf you want a small program that runs fast, you are better off using a simple lookup table and generating a list of all possible results.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word.find(\"[a-z]*\") == n:\n            words.append(word)\n        else:\n            pass\n    return words\n\nThis is wrong, but I'll give it a shot:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [str(x) for x in s if len(x) >= n]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for i, c in enumerate(n):\n        if c not in s:\n            break\n        else:\n             s = s.strip()\n             words = s.split(\" \")\n             for word in words:\n               if len(word) == i:\n                   break\n    return words\nThis is a good example of Python not being a programming language.\n\nIf you're going to criticize a solution, you should at least offer a better one.\n\nIt's not a criticism. It's a realization of an important fact.\nThe fact is that Python is not a programming language, but a scripting language.\n\nThat's not a realization, it's just a truism, and not even a particularly interesting one. You can trivially translate the solution", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return sorted(set(s.lower() for s in s if s.lower() in [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z] for i, j, k, l, m in zip(set(s.lower() for s in s if s.lower() in [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z] for i, j, k, l, m in zip(set(s.lower() for s in s if s.lower() in [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z] for i, j, k, l, m in zip(set(s", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for word in s.split(\",\"):\n        if word in select_words(s, n):\n            return [word]\n    return []\n\nNeat.\nThe base case could be simpler.\n\nTrue. The base case could be simplified by checking if the string is empty.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[i] for i in s if s[i] for i in s[:n]]\nSeems like an interesting exercise, but you should probably mention that it is a homework exercise and that the solutions to this problem will be posted on a course website so that people are not reluctant to give you answers.\n\nthanks. Edited.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split(0)\nIt's a very naive approach. Note that it won't work on a single-character word such as \"a\", \"e\", \"i\", etc.\n\nI'm not sure about the split() function, but it seems like a good first approach.", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) == 0:\n         return []\n    for c in s:\n         if c in word_list:\n            break\n           else:\n             continue\n    return list(map(lambda c: c == ',', word_list))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for w in s:\n        if n % w == 0:\n           return list(w)\n    return list(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    count = len(s)\n    for i in range(n+1):\n        if s[i] not in count:\n            count = count + 1\n    return [s[i] for i in range(n+1)]\n\nwhile not in (select_words(\"Uncle sam\", 3), select_words(\"Uncle Sam\", 4)) and not in (select_words(\"world\", 4), select_words(\"Hello world\", 4)) and not in (select_words(\"the\", 4), select_words(\"the\", 3)) and not in (select_words(\"the\", 3), select_words(\"the\", 4)) and not in (select_words(\"a\", 3), select_words(\"a\", 4)) and not in (select_words(\"a\", 3), select_words(\"a\", 4)) and not in (select_words(\"a\", 3), select_words(\"a\", 4)) and not in (select_words(\"the\", 3), select_words(\"the\", 4)) and not in (select_words(\"the\", 3), select", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.find('[^A-Za-z]')", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n         s = re.sub('[^a-zA-Z0-9]','', s)\n         if len(s)!= n:\n             continue\n          for c in s:\n              if c =='':\n                 continue\n                if c == n:\n                      n = c\n                      i = i + 1\n                      continue\n                       words = [c for c in", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for word in s:\n        if word[-1] == '.':\n           continue\n        if word[-1] == '\\t':\n           continue\n        if word[-1] == '\\n':\n           continue\n        if word[-1] =='':\n           continue\n        if word[-1] == '!' or word[-1] == '\\''':\n           continue\n        if word[-1] == 'Y':\n           continue\n        if word[-1] == 'a':\n           continue\n        if word[-1] == 'e':", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [str.startswith(x) for x in s.split() if len(x) == n]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for x in s.split():\n        if len(x) == n:\n           return x", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if n == 0:\n        return []\n    for word in s:\n        if len(word) == n:\n           return word\n    return []\n\nI would use \"only letters, spaces, and punctuation\" instead of just letters.\n\nExactly my point. It's a contrived example, but I see how the original sentence can be misunderstood.\n\nWhat's the point? This isn't even a dictionary, but just a list of words.\n\nIt is a dictionary, you are just making the wrong assumptions.\n\nIn terms of computational complexity, this is an O(n) time algorithm. The \"best\" list of words containing N characters (assuming a constant number of characters per word) can be found in O(n) time, using a trie data structure (or DFA).\n\nThis is an O(n) algorithm only if you don't make use of the dictionary data structure, which in this case is a perfect match.\n\nNo. You can look up the same word in a dictionary in O(1) time. You", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w[i] for i in range(n)]\n\nIs that a common interview question? I can't imagine ever having to write something like that in the real world.\n\nThis was a common interview question in the early 90s when I interviewed for my first job. (I recall that there was a similar question in one of the CS degree final exams in my uni course.) It's a good brainteaser and I'd expect it to be fairly common.\n\nI've never encountered it in all my years of interviewing people for software engineering positions, which I've done for over a decade. I wouldn't expect it to be very common at all.\n\nI was asked this question last week, I know of several others that were asked it this year, so I'd say it's pretty common. It's usually phrased a bit differently, e.g. \"Given a string, return a list of all the unique words that appear in the string.\"\n\nA minor tweak,", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = set()\n    for i in range(0, len(s)):\n        for word in s:\n             words.add(word)\n             if word == 'n':\n                 words.remove(word)\n               if len(words) == n:\n                  return words\n\nI'd probably write it like this. It's much more idiomatic and in Python 3 has the added benefit of being a little bit faster.\nimport re", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if s.endswith(\",\"):\n        return [s[i:] for i in xrange(n)]\n    else:\n        return [xrange(n)]\n\nThis is a good example of the power of Python and the fact that it isn't necessary to remember a lot of syntax to do some really neat things.\n\nIn a language that doesn't have _range()_ it could have been worse.\n\nJust use xrange.\n\nrange is more general\n\nThen you'll have to do it manually, like this:\nfor word in xrange(n):", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[len(s)-n:] for s in s if len(s)<=n]\n\nI think this is something that most programmers would expect to be a dictionary lookup. I think it would be nice to also see the dictionary lookup version of this, along with the explanation.\n\nI agree.\nI'm surprised by the answers that were given. It's good that people are having their thinking challenged by this, but I feel the questions are a bit off.\n\nI think the point is to focus on implementing the recursive solution without understanding it.\n\nIs it just me or does anyone else think that this is a terrible interview question? I feel like I could have spent the time more productively than thinking about how to implement a simple dictionary-like data structure.\n\nThis is pretty trivial and would be a good question to ask a junior developer.\n\nIf you can write a recursive function without understanding it, you're not a junior developer.\n\nI can't agree more. That's how I learn best and still most interviews are either questions like this or \"what's your biggest flaw?\" type questions.\n\nI guess that is the reason why I hated almost all of my interviews", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return words(s[::-1])\n\nPretty neat and simple.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split(\",\").filter(lambda s, w: len(w) == n)\n\nNope. Wrong on two counts:\n1) You need to check the length of the output list as well. That's a very common mistake.\n2) You also need to handle the case of a word with no consonants. Your version handles that by returning an empty list, but that is a very poor solution. Consider this input:\ns = \"Uncle sam\"\nn = 3\nselect_words(s, n) ==> [\"Uncle\"]\nSince no word in your list has more than 3 consonants, you return the empty list. However, the expected output is\n\"Uncle sam\"\nYou should return a list containing exactly \"sam\", because that is the only word with exactly 3 consonants.\n\n1) length = len(w)\n2) I think you're right. Is this a better version?", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return sorted(set(s.split()[1:-n]))\n\nThe code above would only work if the word 'little' always appears before the word 'lamb' in the string 'Mary had a little lamb'.\n\nIt would have been more robust to use something like this instead:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if n == 0:\n        return []\n    else:\n        return s[0] for _ in range(1, len(s)-1)\nThis is wrong, because you can get words in the middle of the word that you don't want. For example,\nselect_words(\"hello world\", 1) ==> [\"hello\"]\nshould be\nselect_words(\"hello world\", 2) ==> [\"hello\"]\n\nThanks for the feedback!\nI'll update the code to support the extra cases you mentioned.\n\nI believe it's best to use the same convention as in C/C++, where whitespace is considered to be a character. This would change your method of counting words to:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split(\" \")[0]\nThe problem with this is that it can return values that aren't actually words. For example, \"abracadabra\" contains 4 consonants (ab, ra, c, da), but only the first two are actual words.\n\n\"abracadabra\" is not a word in the English language. It's a nonsense word.\n\nI didn't say it was a word in English, only that it contains 4 consonants.\n\nIt is impossible to determine if the following is a word or not.", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for i in range(1, n):\n        if s[i] in [a, e, i, o, u, y, e, i, o]:\n           words.append(s[i])\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Note: In the above example, n = 4, so we know that the first word is \"little\"\n    # and the second word is \"lamb\"\n    words = []\n    for c in s:\n        if c in [a,b,c,d,e]:\n             words.append(c)\n        else:\n              words.append(\"\")\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return set(s[i:i+n])\n\nThis is a toy example I copied from here:\n\nPython version:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [x for x in s if x.startswith(n)]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    list(len(s)) = len(s)\n    words = []\n    for i in range(n):\n         if s[i] in [a..z]:\n              words.append(s[i])\n          else:\n               return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    while len(s) > 0:\n        w = s[0]\n        if w in word_list:\n             return word_list\n          else:\n              return []\n    return word_list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return list(map(lambdax:x.encode('ascii'), s.split()))\n\nI don't quite understand this function. What is it supposed to do?\n\nThis is the sort of question that would be better answered with code that compiles and runs than with any sort of English explanation.\n\nI don't disagree with the assessment, but I'm a relative newcomer to Python and I'm not sure how I'd go about writing such a function in the first place.\n\nThis is the sort of question that would be better answered with code that compiles and runs than with any sort of English explanation.\n\nI don't disagree with the assessment, but I'm a relative newcomer to Python and I'm not sure how I'd go about writing such a function in the first place.\n\nIf you don't understand the function, then ask for help to understand the function.\n\nThis is the sort of question that would be better answered with code that compiles and runs than with any sort of English explanation.\n\nI don't disagree with the assessment, but I'm a relative newcomer to Python and I'm not sure how I'd go about writing such a function in the first", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    \"\"\"This is an example of how you would do the above task in Python.\n    \"\"\"\n\n    from collections import OrderedDict\n    s = \"Hello world\"\n    n = 4\n\n    words = OrderedDict([s[i] for i in range(n)])\n\n    print words[0]\n\n    print \"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [n for n in sorted(s.split(' ')[0] if n in s[1:]])\n\nHere's an alternative that doesn't use a dictionary, and has the advantage that it's a single function call, without any parameter passing:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return set(s.index(str.strip()).translate(str.rfind(\"[^\\s]\", -1)) + s.index(str.strip()).translate(str.rfind(\"[^\\s]\", -1)) + s.index(str.strip()).translate(str.rfind(\"[^\\s]\", -1)) + set(str.index(str.strip()).translate(str.rfind(\"[^\\s]\", -1)) + s.index(str.strip()).translate(str.rfind(\"[^\\s]\", -1)) + s.index(str.strip()).translate(str.rfind(\"[^\\s]\", -1)))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s[0:n].lower()\n\nI like the concept of this challenge, but it is way too easy to write code that passes the test. Here is one that works:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) > 0:\n        return [s[0] for s in s]\n    else:\n        return []\n\nIt's not the most efficient thing in the world, but if you're building a project that doesn't have the time to spend optimizing the selection of words from a string, it's a solid solution.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    counts = []\n    for w in s:\n        for c in s.find(\"c\"):\n           if c not in counts:\n             counts.append(c)\n             counts.append(w)\n    return counts", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    result = []\n\n    for word in s:\n        if word[n] == n:\n            result.append(word)\n\n    return result", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for i in range(n):\n        #search the string for consonants\n          if isinstance(ch, unicode_letters):\n             return word[i:i+n]\n    return []</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Create a list of all the letters in the string.\n    for c in s:\n        # If the letter is not a vowel, remove it.\n        if c in [i for i in v for v in ['a','e','i','o','u']]:\n           continue\n        # For each letter, remove the first consonant.\n       for consonant in [c for c in [i for i in v for v in ['a','e','i','o','u']]]:\n           if c == consonant:\n               continue\n        # If the remaining letters are a vowel, add it to the list.\n       for vowel in [c for c in [i for i in v for v in ['a','e','i','o','u']]]:\n             if c ==", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    s = s.lower()\n    words = set(s.split(\" \"))\n    for c in s:\n        if c not in words:\n            words.add(c)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w[n:] for w in s if w[n] for n in range(n)]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    consonants = [0]\n    for w in s:\n        if w.find(\"ch\") == 0:\n           consonants.append(w)\n          if w.find(\"ck\") == 0:\n             consonants.append(w)\n           if w.find(\"ckk\") == 0:\n              consonants.append(w)\n           if w.find(\"ckkc\") == 0:\n              consonants.append(w)\n           if w.find(\"ckkck\") == 0:\n              consonants.append(w)\n           if w.find(\"ckkckc\") == 0", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n       if c in s[n]:\n           words.append(c)\n    return words\n\nGiven a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n>>> select_words('Mary had a little lamb', 4) ==> ['little']\n>>> select_words('Mary had a little lamb', 3) ==> ['Mary', 'lamb']\n>>> select_words('simple white space', 2) ==> []\n>>> select_words('Hello world', 4) ==> ['world']\n>>> select_words('Uncle sam', 3) ==> ['Uncle']", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if n == 0:\n        return []\n    for c in s:\n        if len(c) == n:\n            return [c]\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    n = int(n)\n    for c in s:\n        if c == n:\n           break\n    return [c]\n\n>>> m = select_words(\"Mary had a little lamb\")\n>>> m.sort()\n'little'\n\nIf you want to try it out yourself, I've got a page of snippets with full source code here:\n\nThis is a nice example of an interesting algorithm.\nI like it, but I don't think it belongs in the discussion of some of the more creative approaches mentioned.\nThis algorithm is a classic exercise in a CS class.\n\ni wrote a little java implementation for fun, it looks like this:\n\nthis is a nice problem to solve with recursion:\n\nI wrote a little perl version for fun:\n\nIs that you, Mr. Step?\n\nIt is me!\n\nI wrote a PHP version just for fun:\n\nI wrote one for fun in Perl too:\n\nI wrote an implementation in Ruby:\n\nI wrote an implementation in Erlang. It's about 700 lines.\nHere's an", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    n = int(n)\n    words = []\n    for letter in s:\n        if letter in n:\n            words.append(letter)\n    return words\n    print select_words(\"Mary had a little lamb\", 4)\n\nI wrote something similar to this a long time ago: \nI was thinking of writing a similar one as a Python module that made it easier to deal with the input, but I haven't gotten around to it yet.\n\nCan you do this without using the strings' characters as keys?\n\nHah, I wrote the same code last week. Mine is a bit more bare-bones though.\n\nthe code could be a bit shorter.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return sorted(s.split(\" \")[1:])\nNote that this is really ugly and you probably want to add a more sophisticated regular expression.  But it is a start.\n\nThis would also work well with a simple suffix tree...</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for c in s:\n        # Find all characters in s that are consonants (i.e. c[0], c[1],..., c[n-1])\n        words = []\n        for c in range(n):\n           if c[0] == 'c':\n               words.append(c)\n            else:\n               words.append(\"\")\n             else:\n               words.append(c[1])\n             # If there is no character that is not a consonant in s then the list", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return n in s.find(\"[\", c).count()\n\nYes, this is the perfect example for this. The algorithm is quite simple, but I would suggest refactoring it slightly to use the `findall` builtin instead:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.findall(lambda x: x.lower() in x.lower())\nThis is a bad example: \"Uncle\" is a common word. It will always be in the list of words. You want to exclude the common words, but not for all languages.\n\nHow about:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for c in s:\n        if c in {'e','i','o','u'}:\n           for s, w in enumerate(c):\n              if w[1] == 'n':\n                  yield w\n                    elif w[1] =='m':\n                     yield s\n                      else:\n                      yield s\n    return list(c)\n\nThis may be the most trivial example ever of the \"cheer up, it can be worse\" philosophy.\n\nIt seems trivial, but it's a good exercise in CS fundamentals.\n\nWhat's the point of the article? It", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w[0] for w in s for w in w if not w[0] =='']", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return list(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return sorted(set(s.split()), key=lambda c: c[0]), key=lambda c: c[1:])", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    print(\"Length of the words in the list: %s\\n\".format(len(words)))\n    for word in words:\n       print(word)\n    return words\n\nMore or less. And you can even do it with just the 'print' statement.", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n       if c in words:\n          words.append(c)\n          c = word_count(s, n, words)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for w in s.split():\n        if len(w) == n:\n            return w\n    return []</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [word for word in s if len(word) == n]\n\nI had to write code like this in high school to figure out what words were in a string for a competition. It worked, but I definitely remember it taking a long time to run on the computer we were using.\n\nIt's really very inefficient.\nI would use the following:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Assume the input string contains only letters and spaces\n    for c in s:\n        if c == 'x':\n              return list(c)\n        else:\n              return []\n\nThis is something I've written recently. It's an attempt to automatically generate a program from a description, similar to how BDD works.\nhttps://github.com/kcjw/genprogram\nIt's not quite there yet but I'm hoping it will be soon.\n\nI am not sure I understand. Is this a transpiler for some other programming language?\n\nYes, it's designed to translate a BDD-style description into a working program.\n\nThat's cool! I didn't see it in the README or in the comments here, but do you plan on making the BDD syntax available? I would love to try it out.\n\nI haven't decided yet. It's still very much a work in progress but if I do I will definitely open source it.\n\nI", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for word in s:\n        if word.find(\"ch\") == 0:\n            return []\n        else:\n            for w in word.find(\"ch\"):\n              if len(w) == n:\n                  return [w]\n               return []\n    return []\n\nThis is a fairly \"clever\" algorithm, but the cleverness comes at a cost: it's horribly slow.\n\nI had to use this once for a project. My version was a bit less clever, but it also used a vector. I think this version is a bit faster:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    count=0\n    for i in s:\n         if n in i:\n              count += 1\n    return list(count)\n\nIf you like this, check out this other example from the SO meta question linked in the OP: \n\nOr, instead of trying to convert an English sentence into an array, maybe you should take a look at a search engine API and use that to solve the problem.\n\nOk, I'm not really sure what you are trying to do here. Are you trying to find the longest word in a string of text? Or are you trying to find all the words in a string of text that are of length n? Or maybe both?\nI think you are over-thinking the problem. Why don't you just take a look at the code of a dictionary, or a simple search engine like Google's? Or, if you don't know how to do that, take a look at any book on compilers or interpreters and try to write a simple one. It will teach you about parsing, and you will learn about lexical analysis, syntax analysis, and", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [x[i] for i in range(len(s) - n)]\n\nSelect only one of the words:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split('')\n\nI'd like to see a \"decreasing number of words\" version of this algorithm too.\nI'm sure it can be done by just changing the last line to:\nreturn s.split('') if len(s) > n\nor something like that.\n\nI like that. It's a nice touch.\n\nI used to be really into string algorithms. For awhile I had a page that had all the cool string algorithms I could find. You can find it here:\n\nNice list.\n\nI've always wondered why nobody ever comes up with something like a \"Turing-complete\" programming language that is all based around string manipulation. I mean, you can do a lot with strings. But they're kinda hard to \"think in\", I guess.\n\nI like the algorithm. I don't understand why it's a _string_ algorithm though.\nI mean, it's not that different from the set intersection algorithms for any other data structure.\n\nThe existence of the \"split\" method in Python is probably why this is considered a string algorithm.\nThe cool thing about strings is that the methods are all in one place, so", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # We keep a counter variable which counts the number of occurrences of  # the same consonant\n    counter = 0\n    # Go through the list of words in the string, note which letters are  # consonants, and increment the counter variable.\n    words = list(s.split())\n    for w in words:\n       if w[0] in [c, m, n, l, r, y, w, h, b, t, f, v, z, s, x, j,  h, e, a, o, n, u, m, h, k, g, b,  p, d, t, l, s, t, n, p, g, k, f, q, j, v, z,  sh, x, y, t, h, c, v, z,  s, z, h, j, x, k,  g, f, p, d, s]:\n          counter += 1\n    return counter", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w for w in s if w.count('C') == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    consonants = n\n    for letter in s:\n        if consonants >= letter:\n             words.append(letter)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [int(x) for x in s for x in xrange(n)]\n\nIt's been a while since I've done any Python, but shouldn't this be (return [int(x) for x in s for x in xrange(n)] for n in xrange(n))?\n\nThat's correct.\n\nDo people actually write code like this?\n\nIt's called \"code golfing\"\n\nI didn't know about that term. I had just assumed that since the function is pretty much useless, and that it was an assignment, that the OP didn't know how to write good code and that this was a homework assignment.\n\nI'm surprised the author used his own site to host this. It really is not the place for that.\n\nI am not sure why you are getting downvoted, I have seen other professors get in trouble for this before.\n\nI've seen this before as well. I'm assuming that the professor owns the domain name and is hosting the assignment himself. If that's the case, he's probably just giving the students an opportunity to practice with the technology they will be using in the real world.\n\nI'd say it", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for w in s:\n        if n in w:\n           yield w[n:]\n    return []\n    \"\"\"\nI don't know how python works, but that's a lot of work for a function that can be implemented in a few lines of code.\n\nTrue, but the time to write it is usually small and it's a nice exercise for someone who's learning.\n\nIt's not a lot of work in Python either, if you know the in operator (I don't think it's in the Python tutorial).", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    print 'This is a function that takes two arguments: '\n       print's, the string you want to search, and '\n       print 'n, the number of elements you want to return.'\n       print 'It returns a list of elements that you want to keep.'\n       print 'If the string you give is empty, you will get an empty list.'\n       print 'Examples:\n       '\n       print'select_words(\"Mary had a little lamb\", 4) ==> ['little'];'\n       print'select_words(\"Mary had a little lamb\", 3) ==> ['Mary', 'lamb'];'\n       print'select_words(\"simple white space\", 2) ==> []';\n       print'select_words(\"Hello world\", 4) ==> ['world']';\n       print'select_words(\"Uncle sam\", 3) ==> ['Uncle']';", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    for w in s:\n          return w if w.isdigit() and w.isdigit() or w.isdigit() or w.isdigit()\n          return w.substr(0, n) if w.isdigit()\n\nUsing a regular expression to check if a substring starts with a digit is silly. What's wrong with this:\nfor w in s:\n    if w.isdigit() and w.isdigit() or w.isdigit() or w.isdigit()\n          return w\n\nIt's only silly if you have other reasonable alternatives. For example, in Python's string module,\n>>> s.find('\\d+')\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x',", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for k, w in enumerate(s):\n        if k == n:\n           return k, w\n    return []\n\nThe test suite fails, however:\ntest_select_words_test.py:43: UserWarning: Truncated exception message:\nValueError: list index out of range\nI suspect that the test uses the unittest assertEqual instead of the python assert, and assertEqual is not a good choice for testing equality with Python.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for i, word in enumerate(s):\n        words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return sorted(map(lambda x: x.strip().lower(), [s], n), key=lambda x: x.length())\n\nI'm not a Python expert, but I find this code way too verbose. It looks more like Java than Python, and I would expect it to have a much lower performance.\n\nThere's no comparison to Python in this code, it's a comparison to the code that OP is complaining about in the post they're responding to.\n\nOP said that they didn't want to use str.split() because it was too slow, so I was comparing their code to the code in the post they were responding to. If the code they provided was an improvement over that code, I don't think they would have posted it.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    def remove_duplicates(list):\n    \"\"\"Given a list and a natural number n, you have been tasked to implement a \n    function that removes from the list all elements that appear more than n times.\n    If the list is empty then the function should return an empty list.\n    Note: you may assume the input list contains only strings.\n    Examples:\n    remove_duplicates(\"Mary had a little lamb\", 3) ==> [\"little\", \"had\"]\n    remove_duplicates(\"Hello world\", 4) ==> [\"world\"]\n    \"\"\"\n    def words_to_remove(words):\n    \"\"\"Given a list of words, you have been tasked to implement a function \n    that returns a list of all words that should be removed from the input list, \n    based on the length of the input list.\n    If the list is empty then the function should return an empty list.\n    Note: you may assume the input list contains only strings.\n    Examples:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # find the first consonant in the string s\n    consonant = s.find(\"[a-zA-Z]\")\n    # if there are at least n consonants in s, return a list of them\n    if consonant > n:\n        return list(s.strip(n+1))\n    else:\n        return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split()\nBut this won't work if the string s is empty.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return []\n    else:\n        for c in s:\n            if c in n:\n               return [c]\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for _ in range(n):\n        if s.startswith(word):\n           words.append(word)\n        else:\n            words.append(s)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return list(range(s.length), key=lambda s: len(s[s[0]]), reverse=True)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for w in s:\n        for c in w:\n           if n == c:\n               return [w[c], w[c+1:])\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    n = int(input(\"Enter the number of letters to find\"))\n    for letter in s:\n        if n <= letter:\n           words.append(letter)\n           n = n - 1\n    return words</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [x for x in s.split() if x[0] for x in x[:-n]]\n\nI'm not sure what you mean by this. What you have is a function that will return every word in the string if there are less than n words, and nothing if there are more than n words.\n\nI think you can rewrite it as", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split()\n\nI think this is not hard.\nIn Python 3, you can use _n_ for char in range(n) and xrange() for string in range(n). So", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return set([str(s)[i] for i in s.finditer(0, n)] if len(s) else []\n\nI've written a few select_words() implementations in different languages and none of them has been optimal.\n\nYou could do it in constant time with an inductive definition and a set of constant functions\n\nWhy not in linear time?\n\nI don't see any obvious optimization.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w for w in s.split(' ') if n in w]\n\nYou can also use a trie[1] to get a similar effect.\n[1] http://en.wikipedia.org/wiki/Trie\n\nI think this is a more efficient implementation:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    def find_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    find_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"had\"]\n    find_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\"]\n    find_words(\"simple white space\", 2) ==> []\n    find_words(\"Hello world\", 4) ==> [\"world\"]\n    find_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def find_words_in_string(s, n):\n    \"\"\"Given a string s and a natural number n,", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = [x for x in s if s[x] == n]\n    if n == 0 or n == len(s):\n        return [x for x in words]\n    return words\nPython is actually more verbose than Ruby in this case.\nIn Ruby:\n[x.to_i if x.chars!= 4]\nIn Python:\nwords = x for x in s if s[x] == n:\nor\nwords = x for x in s if s[x] in range(n):\n\nIt's a little bit more verbose in the first example but it's worth noting that\nthe Python version is always correct. The Ruby version will return an empty\narray if `n == 0` which is probably not what the OP wants.\n\nRight. I was just being a smartass.\nIn the Ruby example, the only way to make it correct is to specify an empty\nresult if `n == 0`, which then it becomes:\n[x.to_i if x.chars!= 4]\nor\nwords = [x.to_i if x.chars!=", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split()", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    word_list = []\n    for i in s:\n        if n <= len(i):", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    n_words = len(s)\n    for i in range(n_words):\n        if s[i+1:] == '_':\n            return []\n           else:\n             return words(s, i+1:n_words, n+1)\n    return []\n\nThis is a complete implementation of the solution given by  the OP, but the OP's\nsolution only works with a single string, and requires a dictionary lookup to\nget the second half of the solution.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for word in s:\n       if word in [y for y in n]:\n         return [word]\n    return []\n\nI think this is the kind of questions that OP was asking for.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    from collections import OrderedDict\n    n = int(raw_input(s))\n    words = {}\n    for word in s:\n        if n == word:\n             word = word[:-n]\n             if len(word) > n:\n                  word = OrderedDict(word)\n                  words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word == n:\n           words.append(word)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    results = []\n    for x in s:\n           if len(x) > n:\n               results.append(x)\n    return results", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) == n:\n        return s\n    return [s[0], s[1:] for s in s if len(s) % n == 0]\n\nfor i in range(1, len(s)):\n    if i % n == 0:\n        return s[i]\n\nYes, I am aware that I could use itertools.\nBut, I don't like it for this kind of job, as it's too complicated and verbose.\n\nI don't know about you, but I don't think it's too complicated and verbose. It's one of the simplest examples of using the `itertools` module.\nAnd your solution isn't so simple to read and understand. I can't even tell what the input string is.\n\nI think this one is simple.\n\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Hello world\", 4) ==> [\"hello\"]\nselect_words(\"Hello world\", 4) ==> [\"Hello\"]\nselect_words(\"Hello world\", 4) ==>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    s_sorted = sorted(s, key=lambda x: x[1], reverse=True)\n    for i, consonant in enumerate(s_sorted):\n        n = (n+1)/2\n        if n == len(s_sorted):\n            break\n            s_sorted.append(s_sorted[-n], list(concordant = consonant))\n    return s_sorted\nI'm not seeing the parallelism. It looks like a series of individual functions.\n\nAnd this is why you shouldn't use `sorted` in this situation. It's O(n) which is a big problem here.\n\nIf you don't use sorted, how do you propose to generate a list of consonants in order?\n\nYou don't generate a list of consonants in order. You generate a list of consonants, in order.\n\nThat's essentially what sorted does for you.\n\nWouldn't this be more appropriately named \"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n        if c == ':':\n            break\n         words.append(c)\n    return words\n\nI'm guessing you're using this for an assignment or something, and it's a good exercise to do this in a few different ways.\n\nWhy do you use an array as a return value? Wouldn't a dict be better?\n\nThe logic of the function is such that the result of the function is a list of word-c-count tuples.\nIf the input string is empty, the function should return an empty list.\nBut if the input string is not empty, then the function should return the list of the word-c-count tuples where the c represents the number of consonants in the input word.\n\nThis is a recursive function. You are going to run into memory issues.\n\nThere are no memory issues since the input string is assumed to be an array of integers (i.e. not a string).\n\nHe's talking about the problem that all recursive functions have,", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    n = int(math.ceil(len(s)) / 2)\n    for word in s:\n        if word[:n] == word[n+1:] + 'Z':\n             return [word[n], word[n+1:n+1]]\n\nNote that this is not in Python.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Words with at least n consonants, in order of appearance in the string\n    return [w for w in s.split(\",\") if len(w) > n for w in w]\n\nIn Python 2, using strings as arrays:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for x in range(0, n):\n        s = s[x:x+n]\n    return [x for x in s if x not in s]\n\nThis is the list comprehension, and it's very similar to the other lists.", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Apply the n-gram algorithm to produce a list of all consonants that occur \n    # more than n times.\n    # (n-gram is a statistical technique for finding repeated phrases in a text)\n    n_grams = []\n    for n in range(n_grams):\n        g = ngrams[n]\n        # n-gram: 1 2 3 4 5 6\n        for g in gs:\n            # If the gs contains only a single element, then that element is the     # n-gram.\n             if g == \"\":\n                     return g\n                          else:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # The following two lines return the length of s and s[:-1]\n    # which are needed in the next line\n    len(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    words = []\n    for c in s:\n        if c in s:\n            words.append(c)\n    return words\n\nWhat about", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = [s[0] for s in s.split() if s[0] in words]\n    if len(words) == 0:\n        return []\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return []\n    for i in range(0, len(s) - 1):\n        if s[i] == c:\n                 # p(c) is the probability of observing the letter c\n                    # The sum of p(c) over all c's is 1, this is the  probability\n                       # of finding a word that contains c\n                        # of length n or more", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for i in s:\n         word = s[i]\n         if len(word) == n:\n             words.append(word)\n    return words\nIt's a pity the answer doesn't accept `re`. It's almost 1/4th the code and 3 times faster.\n\nI agree. It is even a bit more elegant than the Python code.\n\nI used the python function in my code for a while, but then decided that it was too much work to do, and instead implemented a simple recursive descent parser. It's still not as fast as re, but it's not that much slower, and it was a lot easier to write.\n\nI think he's hinting to the fact that Python has an built-in regex library:\nimport re", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for w in s:\n        if w.isalpha():\n           yield w\n        else:\n            w = list(w)\n         if len(w) > n:\n             w.reverse()\n         else:\n             w.append(w)\n    return w", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Given s, list of words with n consonants in order of appearance in s.\n    words = [x for x in s if x.lower() in {'a','e','i','o','u','e','x','t','a'}]\n    for i in range(n):\n         if s.find(i) == -1:\n             words.append(x)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for i in range(n):\n        return s.split(i)[0] if i == n\n    return []\n\nThis is a list of all words from the string that contain exactly four consonants, in order these words appear in the string.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = {}\n    for c in s:\n        if len(c) < n:\n            words.setdefault(c)\n        else:\n             words[n] = c\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) == n:\n        return []\n    return s[::-1]\n\nOops. The above is incorrect; it returns `[]` if the string is empty.\n\nI think it's correct. The author mentioned that the input string contains only letters and spaces.\n\nThe author mentioned that the input string contains only letters and spaces, and then defined the function select_words to do more than that. If I enter\nselect_words(\"Hello world\")\nI'd like it to return a list of words that contain exactly 4 consonants, in order, so the above function isn't correct.\n\nIn that case, the correct function is:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for w in range(n):\n        if s[w] == any(c):\n            return w\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[i:i+n] for i in range(n)]\nIn python, this is just:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split(',').words()\n\nI've seen the code before. What's it doing?\n\nIt's a string manipulation function for Python that will split a string in to words. If you were to split the string \"Mary had a little lamb\" on the word \"had\", you'd get:\nword1 = \"Mary\"\nword2 = \"had\"\nword3 = \"a\"\nword4 = \"little\"\nThe function returns all the words in a string, in order that they appear. The reason it's so useful is that it's a lot simpler to just return a list of words than to use a bunch of indexing and slicing to return a list of individual characters.\n\nHere's the cleaned up version of the above code:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w[w.lstrip()[0]] for w in s.split()[0:n]]\n\nI really like your solution, but I'd use a couple of extra features:\nfrom itertools import count\nfrom itertools import chain", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return []\n\nI used to do a lot of puzzles like this when I was younger, like \"write a program to find all words with a length of exactly n\" or \"write a program to find all words with a palindromic substring\". It's fun to keep your mind sharp.\n\nThis one is just asking you to find words that contain a certain number of letters. I'm sure you could do it with regular expressions in a fraction of a second.\n\nUsing DFA for each word.\n\nI would do a shortest common subsequence algorithm.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return set(n)\nAhah, well, we can probably do better than that...", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # The dictionary with all words that contain exactly n consonants\n    words_with_exactly_n_consonants = {", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s) > 0:\n         return s.lower().split(\" \")[0]\n    else:\n         return []\n\nAnd it is pythonic enough?\n\nIt's not, I'd like to use split as well to allow spaces, but I can't figure out how to use the split function without splitting all the spaces too.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word[0] == 'e':\n            words.append(word)\n             if word[1] =='s':\n               words.append(word)\n              if word[2] == 't':\n                words.append(word)\n              if word[3] == 'h':\n                 words.append(word)\n               if word[4] == 'a':\n                  words.append(word)\n                if word[5] == '", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    return [w for w in s if len(w) % n == 0]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = [w for w in words if len(w) > 0]\n    for w in words:\n        if w[-1] == 'n':\n           words.append(w)\n    return words\n\nThat is correct as long as the input string is sorted.\nIf the input string is not sorted, then the output will be the same as the input string.\n\nThis is a good example of how someone can take a simple problem and make it more complicated than it needs to be.\n\nit's important to note that all solutions of this problem will always be O(n)\n\nWhy? Can you explain?\n\nBecause if you remove the elements, you need to remove them in a sort-able order, but you don't know which elements are going to be removed, so you have to remove them in every order.\n\nI think there is an obvious solution for this problem that is not being explored.\nGiven a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return re.split(' ')[0].split(s)\n\nI think the ternary operator might be confusing for beginners. I would use a for loop.\n\nthis code is terrible. you should replace it with a for loop and fix your indentation.\n\nIt's not clear if it was meant to be a ternary operator or not, but in any case, the ternary operator in this context is a bad idea.\n\nTernary operators are dangerous because they make you feel clever.\n\nUnnecessary ternary operator.\n\nReplace with a for loop.\n\nyeah the ternary operator is confusing\n\nI would remove the ternary operator and use a for loop.\n\nI would use a for loop, like this:\nfor word in re.split(' ')[0]:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for c in s:\n         if c not in n:\n            continue\n          if c in n:\n              return []\n          else:\n              return c\n    return []\n\nThis is where I am stuck. What do I do with this? How do I apply this to my code?\nThanks in advance!</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # If the string has no consonants at all, return an empty list\n    if len(s) == 0:\n       return []\n    # Skip over the spaces\n    for word in s:\n       if word in ['','', '.','', '.','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for c in s:\n        if c == n:\n           return []\n    return s[c:]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n        if c in ['E', 'R', 'O', 'N', 'D', 'T']:\n            words.append(c)\n    return words\n\nWhat about a space?\n\nShould be fixed now\n\nWhat about a comma?\n\nI'm sure there is a joke in there somewhere...\n\nWhat about a question mark?\n\nWhat about an exclamation mark?\n\nWhat about the droid attack on the Wookiees?\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there is a joke in there somewhere...\n\nI'm sure there", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n        if c not in words:\n           words.append(c)\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s[i:i+n] for i in s.split() if i not in s[:-n]]\n\nThis is trivial. It's not even code golf.\n\nThe Gist is more than just the code. It's a repository for the solutions of programming challenges. Also it's a great way for people to submit code and share it.\n\nAre you sure it's not a way for people to show off how little code they can write?\n\nActually, you are probably right. I think the original intentions were just to show off a little bit of code and what not but it was easy to abuse. It's definitely the latter now.\n\nI guess the way I see it, if I want to read about people's short solutions to \"challenges\", I'll go to /r/dailyprogrammer or something.\n\nThat's not the intent of the site. It's a way to share code and solutions in a way that's easy to read, browse, and compare. I'm not saying it's perfect but it's the way it was intended to be used.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for c in s.split():\n        if c =='':\n            return []\n        for w in s.split():\n            if w.find('n') == n:\n                return w\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # function definitions\n    return (\n          if len(s) > n:\n               return []\n          else:\n               return s.split(\"\")\n    )\n\nA better alternative would be:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    c = s.lower()\n    i = len(c)\n    words = list(set(c.split()) for c in s if c[i:] == n)\n    return [i + 1 for i, word in enumerate(words)]\n\nPython, without using a recursive approach:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for c in s:\n        if c == n:\n           return [c]\n    return []\n\nI'm sorry, I don't quite understand this. I know what a list is, but not this code.</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    for i in range(n):\n         return s[i]\n\nShouldn't the word \"Uncle\" in the last line be \"Uncle a\" instead of \"Uncle\"?\n\nI think this is a really good example of a simple problem that is a good way to practice programming. The grammar is simple and unambiguous, the problem can be solved in a few lines of code, and the simplicity of the problem forces you to focus on the small details.\n\nNow that I think about it, I think the OP should have used an \"unordered_set\" instead of a \"list\". This would allow for multiple words to have the same number of consonants.\n\nIn fact, you can write the algorithm with just a single `for` loop.\n\nThis is better, but I'd still use an \"unordered_set\".\n\n_\"... Here is an example that I just came up with. It was the first thing that popped up when I thought of this question....\"_\nYou should have a more extensive example. You could have written this question in a question box but you didn't, you wrote it here in a discussion area.", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = {}\n    for word in s:\n        words[word] = n\n    return words\n\nI'm not sure if your assignment requires you to \"program\" this in a particular language, but I'm assuming it's python.\nI would recommend you start with something like:\nfrom itertools import chain", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for n, word in enumerate(s):\n        if word in word_to_list(n):\n           return [word]\n        else:\n            return []\n    return [s]\n\nThis function is a good example of a'solution to a problem you didn't have' and is unlikely to be used in practice.\n\nThis is neat. It's not clear from the docs what the difference is between this and the \"in\" operator [1] is.\n1\\.\n\nAccording to the article the in operator is for numbers and this function is for strings.\n\nThanks! I was skimming the article and missed the details.\n\nI like the idea of a minimalistic DSL for constructing functional languages, but one could argue that it is more than just minimalistic. It seems to be mostly a syntactic sugar over the expression evaluation mechanism of the language. You can do something similar with Python by using a generator expression:\n>>> words = [(x, '.') for x in range(4)] >>> words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [i[1:] for i in s if i.find(\" \")!= -1]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if n == 0:\n        return []\n    for w in s:\n        if len(w) == n:\n            return w\n    return []</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return sorted(set(reversed(s.split())))\n\nthis is the python 2.5 version, that was a bit more readable for me:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [i.find(s) for i in range(n)]\n\nfor i in range(5):\n    select_words('bla bla bla')\n    print i\n\nfor i in range(5):\n    select_words('hello world')\n    print i\n\nfor i in range(5):\n    select_words('hello world')\n    print i\n\nfor i in range(5):\n    select_words('hello world')\n    print i</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    print \"Input: \",s\n    return [s.findall(word=='' for word in s if word.find(\"[a-z]\")+1 in s[1:n])+s.rfind(\" \")]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # e.g. for \"Mary had a little lamb\"\n    # return [\"little\", \"lamb\"]\n    words = []\n    for c in s:\n        if c == 't':\n            words.append(c)\n            break\n    return words", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split(' ')[0]\n\nOr more concisely, ignoring the empty case:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [str.finditer(c) for c in s if c in range(n)]</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    # Create a list of the first n letters of the string, then remove these\n    # letters from the string.\n    l = []\n    for i in range(n):\n       l.append(s[i:])\n       l.remove(i)\n    return l", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [s.lower() for s in s.split(\",\")]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    return list(xrange(0, len(s) - n))", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if n == 0:\n        return []\n    for w in s:\n        if n == len(w):\n           return w\n    return []\n\nIn the case where the word \"world\" appears, it returns [\"world\"] instead of [\"Hello world\"]\n\nThis is because the word \"world\" appears twice. The first time it has exactly 4 consonants (it starts with w, has a \"r\", an \"l\", and ends with a \"d\") and the second time it has exactly 3 consonants (it starts with \"w\", has a \"l\", and ends with an \"d\").\n\nThe reason it works that way is that the first time \"world\" is iterated over, there are 4 consonants in the word, and thus n is 4. So the list is returned.\n\nWhen \"world\" is iterated over the second time, the first iteration of \"world\" is still being iterated over, and so n is still 4. This results in [[\"world\"]].\n\nThe solution for this is to make n an index", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    consonants = set()\n    for consonant in s:\n        if n % consonants == 0:\n             consonants.add(consonant)\n             return consonants\n\nreturn select_words(s, n)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w for w in s.split() if w.length == n]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    list(s)\n    for w in s.split():\n        if len(w) > n:\n            break\n    return w\n\n\"\"\"", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n\n    return sorted(s.replace(' ', '+'), key=lambda w: w.count('+'))\n\nin python 3.3", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return n == len(s)", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if len(s)!= n:\n        return []\n    n = len(s) - n\n    return [s[i:i+n] for i in range(0, n)]\n\nPossible question:\nHow would you go about implementing this in a language that doesn't have a\nlist type, such as Python?\nAnswer: https://news.ycombinator.com/item?id=8249624</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n        for w in s[c]:\n           if w[0] == c and w[1] == c:\n                words.append(w[1])\n    return words\n\nThe first version of the program I wrote was about 60 lines of code. I thought it would be much shorter. I was wrong. That was the wrong approach. I have since re-written the program using the code kata method. It is about 10 lines of code. I could have gotten it down to 5 lines of code, but I wanted to use python's 'with' statement to ensure the memory used to create the list is cleaned up.\n\nHere is the shorter version of the program:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n        if c not in wordlist:\n           words.append(c)\n        else:\n            words.append(c)\n    return words\n\nimport string", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    for i in range(n):\n         return s[i:], s[i+1:]\n    return []", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s.split(r\"\\s+\")[0:n]\nThis is about the most basic possible version. I suspect the OP is trying to give an example of a general problem that shows how to build a new list from an existing one without using a loop. If that's the case, here's a slightly more advanced version:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    if n == 1:\n        return ['', 'a', 'b', 'c', 'd']\n    else:\n        return s.split(\"\"), list(s.split(''))\n\nI think it's a lot clearer if you use the list comprehension syntax:", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return s[s.find(' ') + n:s.end()]", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    return [w.strip() for w in s.split(' ')]\n\nDon't miss the obvious: \n\nVery useful, thanks. But, it's not quite the same. The script you linked to does not do a reverse split in the middle of the string.\n\nNo, but it's a pretty good first pass, then you can add a reverse split on the last word.\n\nThank you. Just one thing though, why do you need to reverse split at the end?\n\nTo separate the words that you want to keep from the last word.\n\nThat's a really nice and clean solution to the problem, well done!</s>", "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n        if c == '.':\n             break\n            words.append(c)\n    return words"]]