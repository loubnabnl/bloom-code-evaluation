[["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    for i in range(1, n):\n        return i is a simple power of n\n    return False\n\nNot sure why you're getting downvoted. It's a little contrived but it's a good example of what you should expect from a programming interview.\n\nI didn't downvote the OP but I feel it's an example of a contrived question.\nIt's a binary search to a power function. In my opinion it's much harder than the author thinks.\n\nIt's harder than \"What is the value of x when n=100\", but it's still a pretty basic programming problem.\n\nAs a Python user, I would have written it like this:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n==0:\n       return True\n    else:\n       n = int(n) / int(n)\n       return n**int>=x", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**n==0\n\nNo, not quite. (This is a \"fork\".)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (n**int)%x==0\n\nThat is a neat function. If you want to learn how to implement it in C, I recommend the book _Learning C the hard way_ [1] (The HARD way is intentional, and it's awesome).\n[1]\n\nThank you for the recommendation! I will check it out.\n\nIf you're interested in C, you should also check out the book \"Higher Order Perl\". It's a great read and introduces you to functional programming in Perl through the lens of C.\n\nThank you for the recommendation!\n\nThese two books are more relevant, and actually discuss what it means for a function to be \"simple\", as opposed to just calculating the answer:\nhttp://incompleteideas.org/unix-and-python/\nhttp://incompleteideas.org/unix-and-python-2/\n\nI wish the author would take the time to make a copy of his code available, at least as an executable file.\n\nWhy?\n\nWhy not?\n\nbecause you can do that yourself, and then you can modify it to fit your needs.\n\nBecause if you don't", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n ** int == x:\n        return True\n    else:\n        return False\n\npython -c \"def is_simple_power(x, n):\n    if n ** int == x:\n        return True\n    else:\n        return False\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**int == n**int", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return 0 if x == 1\n    return 1 if x == 2\n    return 0 if x == 3\n    return 1 if x == 4\n    return 0 if x == 5\n    return 1 if x == 6\n    return 0 if x == 7\n    return 1 if x == 8\n    return 0 if x == 9\n    return 1 if x == 10", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x%n==0\nI'm not sure why you are being downvoted.  In any case, I'll offer a few reasons this is a bad idea, although this may be a good exercise for you:\n1\\.  It doesn't handle the case where n is a prime.\n2\\.  It doesn't handle the case where n is not a number.\n3\\.  It doesn't handle the case where n is negative.\n4\\.  It doesn't handle the case where n is zero.\n\nI think the point of the exercise is to show how to use a basic modulo function and not really to handle all of the edge cases. The only thing I could add to the exercise is that the modulo function is useful if the exponent is not an integer.\n\nHe should not write a function, but a method. That way, he can change the number he wants to test without having to modify the function.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n == 1 or n == 3 or n == 5:\n       return True\n    return False\n\n    def is_prime(x):\n    \"\"\"Your task is to write a function that returns true if a number x is prime.\n    For example:\n    is_prime(1) => True\n    is_prime(11) => False\n    is_prime(123) => False\n    is_prime(333) => True\n    is_prime(789) => True\n    \"\"\"\n    if x == 1 or x == 2 or x == 3:\n       return True\n    return False\n\n    def is_perfect_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a perfect\n    power of n and false in other cases.\n    x is a perfect power of n if n**int=x\n    For example:\n    is_perfect_power(1, 2", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x == 0 or x == 1:\n        return False\n    return is_positive(x, n) or is_negative(x, n)\nThis can be easily optimized to be O(n) instead of O(n^2)\nHow do you figure?  Sure, you can do it using a lookup table, but then you're not doing anything at runtime.\nThe purpose of the exercise is to teach students the value of using a lookup table, especially for simple problems.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n**int==1:\n        return True\n    return False\n    def is_prime(x):\n    \"\"\"Your task is to write a function that returns true if x is prime and false otherwise.\n    x is prime if x is either 2 or 3.\n    For example:\n    is_prime(4) => False\n    is_prime(2) => True\n    is_prime(3) => True\n    is_prime(7) => False\n    \"\"\"\n    if x == 2 or x == 3:\n        return True\n    return False\n    def is_prime_p(x):\n    \"\"\"Your task is to write a function that returns true if x is prime and p is a prime less than or equal to x.\n    x is prime if x is either 2 or 3.\n    For example:\n    is_prime_p(2) => True\n    is_prime_p(3", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if int(n**x) == x:\n        return False\n    return True", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (n**int) == x\n\nIt is hard to argue against that.\n\nNote that this program has a bug. It says that 3 is a simple power of 2, but it is not.\n\nSee also\nMathematical induction\nProof by mathematical induction\n\nReferences</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n in [1, 4, 2]:\n       return True\n    return False\n\nfor n in range(1, 5):", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int==x\n\nIt's just simple division.\n\nAnd the answer is 8.\n\nHere's another one:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**x == x\n    for x in range(1, n, 1):\n    if x!= 1:\n       raise NotImplementedError\n\nI think it's pretty clear that is_simple_power is not a simple power of n.\n\nI've been thinking about this for several minutes now, and the best I can come up with is:\nx = 1\nx = (x + 1) / 2", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x == int(x)**n for x in range(n)\n\nWow, that's a very cute solution. Thanks.\n\nIt's one I've come across a few times, and it is remarkably effective.\n\nI used to think \"What? This is obvious\", but in practice I've found that you can't always think of the most obvious solution.\n\nI agree. What's really interesting is that sometimes when I'm stuck on a problem, I'll be halfway through something that's not very good and then think \"wait, what if I take this in this direction?\", and the \"right\" solution is suddenly obvious.\n\nHere's another one that I used a lot, back when I was still taking math courses and had to learn all kinds of stuff about series:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\nThis is a bad example for a programming interview question. The 2^10 example is off by one, but it is still correct, because of this:\nis_simple_power(5, 3) => false\n\nIn other words,\n(3*3) * (3*3) == 21 * 21 == 5*5 = 25\n21 * 21 == 5 * 5, so it's a power of 5.\n\nI would say that the example is ambiguous, because you can do the same with the exponentiation operator:\n3*3 * 3 == 3 * (3 * 3) == 3 * (1 + 3) == (1 + 3) * 3 == 3 * 3 == 3\nIf you want to make this example unambiguous you have to do some conditional logic to check the base case.\n\nThat's not an answer to the question, it's an alternate way of approaching it.\n\nThe problem is that he did not say that the answer was the same for all numbers (you may have even said something to that effect). That is what makes the problem ambiguous.\n\nThe OP also said that he didn't want it to be a trick question.\n\nThis is a nice example", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return math.sqrt(x**2 + x**1) == n**int\n\nI think it's important to point out that this isn't a \"new\" function, but it's an alias for the built-in isinstance() function from the standard library.\n\nI think it's important to point out that the built-in isinstance() function only works with integers, while the author's function is flexible and works for any type.\n\nThat's true, but the author's function is considerably less flexible.\n\nIf you had read the parent's comment, you would have realized that he was talking about the return type of the function.\n\nI don't think it's fair to say that the author's function is \"considerably less flexible\" than builtin isinstance. You can define your own function to have as many return types as you like.\n\nThis is a good point, but I think it's generally considered good practice to write functions that are as general as possible.\n\nIt doesn't matter that it's \"generally considered good practice to write functions that are as general as possible.\" We are talking about a function that you would only ever call once.\nThe OP's", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int % x == 0\n\nThis is a very naive implementation. For example, is_simple_power(1, 4) would return false.\n\nYeah, I think that's a bit too broad. Even a fraction of a number can be a power of a given number if the denominator is greater than 1.\ne.g. is_simple_power(1/2, 3) is false, yet 1/2 * 3 = 3/4 which is a power of 3.\n\nThe idea is to test whether the number can be simplified to a power of n. For example, is_simple_power(1/2, 3) would return true.\n\nI don't think that's what is meant by \"simple power\". It's more like, can you write the number as a product of n-factors, with each factor being 1 or less?\n\nIt's a hack, but it works: is_simple_power(1, x) = 2*x%x==0.\n\nElegant.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int % x == 0\n    print is_simple_power(1, 4)\n\nPython 3.4 (default, Oct 3 2011, 20:39:11)\n[GCC 4.3.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> is_simple_power(1, 4)\nTrue\n>>> is_simple_power(2, 2)\nTrue\n>>> is_simple_power(8, 2)\nTrue\n>>> is_simple_power(3, 2)\nFalse\n>>> is_simple_power(3, 1)\nFalse\n>>> is_simple_power(5, 3)\nFalse\n\n>>> is_simple_power_from_python(4, 1)\nFalse\n>>> is_simple_power_from_python(5, 2)\nTrue\n>>> is_simple_power_from_python(3, 1)\nTrue\n>>> is_simple_power_from_python(3, 2)\nTrue\n>>> is_simple_power_from_python(5, 3)\nTrue", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**x==x\n    a) Is it right that this is_simple_power() returns true for 1, 4 and\n     8, but returns false for 3 and 5?\n              b) Is it right that this is_simple_power() returns true for 2,\n    2 and 8, but returns false for 3 and 5?\n              c) Is it right that this is_simple_power() returns false for\n    2, 2 and 5, but returns true for 3 and 8?\n              d) Is it right that this is_simple_power() returns true for 1,\n    4 and 3, but returns false for 8?\n\na) yes.\nb) yes.\nc) yes.\nd) no.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**(int-1)==x\n\nThe reason I think this is so difficult to grasp is that the problem is very different when n is a prime number. For example, when n=2 (the base of the natural numbers) the above function is trivial:\nis_simple_power(1, 2) == True\nis_simple_power(2, 2) == True\nis_simple_power(8, 2) == True\nis_simple_power(3, 2) == False\nis_simple_power(3, 1) == False\nis_simple_power(5, 3) == False\nBut when n is a composite number (n is not a prime) the problem is very different:\nis_simple_power(2, 3) == False\nis_simple_power(3, 2) == False\nis_simple_power(3, 1) == True\nis_simple_power(5, 3) == True\nis_simple_power(5, 2) == True\nSo, the problem is the same but the solution is completely different.\n\nI think the difficulty people have in grasping the concept is that they're", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**(int) == x\n\nCan someone explain this one?\n\n2 ** 2 = 4\n3 ** 3 = 9\n5 ** 5 = 25\n3 ** 2 ** 2 = 27\n5 ** 3 ** 3 = 125\n\nThe function is_simple_power only returns true if n**(int) == x.\n3 ** 2 ** 2 == 27, so it will return true.\n3 ** 2 ** 2 ** 2 == 27, so it will return true.\n3 ** 2 ** 2 ** 2 ** 2 == 27, so it will return true.\nBut 3 ** 2 == 27, so it will return false.\n5 ** 3 == 25, so it will return false.\n5 ** 3 ** 3 == 125, so it will return false.\n\nHmmm. Ok.\n\n(5 ** 3) * (2 ** 2) == (5 ** 2) * 2 + (5 * 2)\n2 * (5 ** 3) == 2 * 2 + 5\n5 * 2 == 10\n10 * 2 == 20\n20 == 40\n\nWhoa!</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n == 1:\n       return True\n    else:\n       return False\n    def is_simple_square_root(n):\n    \"\"\"Your task is to write a function that returns true if a number x is a\n    simple square root of n and false in other cases.\n    x is a simple square root of n if n**int=x\n    For example:\n    is_simple_square_root(1, 4) => true\n    is_simple_square_root(2, 2) => true\n    is_simple_square_root(8, 2) => true\n    is_simple_square_root(3, 2) => false\n    is_simple_square_root(3, 1) => false\n    is_simple_square_root(5, 3) => false\n    \"\"\"\n    if n == 1:\n       return True\n    else:\n       return False", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if not int(n) == int(x):\n        return False\n    return int(n) ** int(x) == x\n\nI don't know C++ at all, so that's probably wrong (it's Python).\n\nThat's pretty good, but I was hoping for something more like:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n**int>1 and n**int>0:\n       return True\n    else:\n       return False", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return False\n    if n == 10:\n        return True\n    if n == 11:\n        return False\n    if n == 12:\n        return False\n    if n == 13:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x**n == 0:\n       return True\n    return False\nI'm pretty sure you can use any other set than \"int\" for n, and it should still work (at least in python).\n\nI was able to use 'int' in my code for n and got the same result, so you are correct!\n\nNicely done. I don't think I would have had the guts to use that function name, though.\n\nI'm still not sure what the author was trying to get across.\n\nThe name is a pun on the commonly-used Python function is_prime().\n\n...and it's actually quite clever.\n\nI'm surprised that no one mentioned the fact that if you have this as a function, you can add it to NumPy. That would be pretty cool if you ask me.\n\nI wonder if there's a library like numexpr for C++ that would allow this sort of thing.\n\nI'm surprised that no one mentioned the fact that if you have this as a function, you can add it to NumPy. That would be pretty cool if you ask me.\n\nI wonder if there's a", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return abs(x**n) >= n\n\n[a] = [1, 2, 3, 4, 5]\nis_simple_power(a, 4)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    is_simple_power = lambda x:\n        if x <= 2:\n           return True\n         else:\n            return False\n    # True if x is a simple power of n\n    def is_power(x, n):\n    \"\"\"Your task is to write a function that returns true if x is a power of n.\n    If x is a power of n, x is a multiple of n.\n    For example:\n    is_power(2, 3) => True\n    is_power(1, 2) => False\n    is_power(2, 1) => False\n    is_power(5, 2) => True\n    is_power(4, 2) => True\n    is_power(5, 1) => False\n    is_power(1, 1) => True\n    is_power(5, 1) => False", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    return n**int == x\n\nIt is common for programmers to write this as:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(x**int)==n\nThe better solution is to use the usual is_number method.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(x**n)==x\n\nIs this your program? You need to read the \"Show HN\" guidelines:\n\nNo, it's not mine. It was just the first thing that came up on Google.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    for i in xrange(2):\n       if n**int(i) == x[i]:\n          return True\n    else:\n          return False\n    return is_simple_power(x, n)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (x**n)**n == x\n\nYou're not counting powers of 2.\n\nIf you fix that:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x % n == 0\n\nWe can use it to compute the Fibonacci numbers", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\n    # this is false\n    # because 3 is not a simple power of 2\n\n> is_simple_power(1,4) => true\n> is_simple_power(2,2) => true\n> is_simple_power(8,2) => true\n> is_simple_power(3,2) => false\n> is_simple_power(3,1) => false\n> is_simple_power(5,3) => false\nIt's hard to tell if this is supposed to be a negative point about this approach.\n\nI don't think it is, it's just an illustration of the fact that for numbers of the form 3n+1 (where n is even) then you can't determine whether it's a power of 2 or not just by testing with the power function.\n\nYes.\nI didn't think of this example before because I didn't expect anyone to think of \"3n+1\" as a \"number of the form 3n+1\". :-)\n\nIs the real-world example the only use-case, or is this more of a theoretical exercise? It", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x%n == x\nThere are more elegant solutions, but this is faster and shorter.\n\ni wrote:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n**int!= x:\n        return False\n    return True\n    def is_simple_power_modulo(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a\n    simple power of n modulo n and false otherwise.\n    x is a simple power of n modulo n if n**int % n == x.\n    For example:\n    is_simple_power_modulo(2, 3) => True\n    is_simple_power_modulo(8, 2) => False\n    is_simple_power_modulo(8, 3) => False\n    \"\"\"\n    if n**int % n == x:\n        return True\n    return False", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**n>=1\nI'm gonna do this one soon, wish me luck!\nCan you prove that?\nIt is an elementary fact. I'm not sure if there's a theorem with a name.\nIt's not.  You can't just assume it's an elementary fact.  It's not.  It's just been proven over and over again since it's more convenient.  You can't just assume it's an elementary fact, but you can assume that it's true.  I don't know the exact proof, but it's not something I could prove if I didn't know the answer.\n> It's just been proven over and over again since it's more convenient.  That's what an elementary fact is.\n> That's what an elementary fact is.  But it's not.  You can't prove an elementary fact unless you know the answer.  If you don't know the answer, you can't prove it.  You have to have a foundation of knowledge to prove an elementary fact, and if you didn't have that knowledge, you couldn't prove it.\nWhy do you think you can't prove an elementary fact unless you know the answer?  I can", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(x) % n == 1\n\nThis is the sort of thing that is pretty easy to get right the first time you see it and hard to get right if you've never seen it before.\n\nNot really. You just write it as a \"truth table\".\n\nYeah, that's one way of looking at it, but there are still a number of ways that a human can get it wrong.\nIf you're thinking \"well, that's only if the number is divisible by 5\" then you're right, but there are other ways to screw it up.\nFor example, 2^3 is 9, but 9 mod 5 is 1, so 2^3 is not a simple power.\nThat's probably one of the easier ones to get wrong, though.\n\nJust divide all the numbers by 5 in your head as you read them. That's what I do.\n\nThat's what I do as well, but it's not the same as the program doing it.\n\nWhat I meant was I don't use the program at all.\n\nWell, that's fine for you. Some people would be more comfortable using a program like that, though.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if __name__ == \"__main__\":\n    is_simple_power = lambda x: (x**int)(x)\n    if is_simple_power(1, 4):\n       print(\"1 is a simple power of 4\")\n    if is_simple_power(2, 2):\n       print(\"2 is a simple power of 2\")\n    if is_simple_power(8, 2):\n       print(\"8 is a simple power of 2\")\n    if is_simple_power(3, 2):\n       print(\"3 is not a simple power of 2\")\n\nIt's not very likely that you would need to write a program in Python to test your knowledge of Python, but just in case, here is a simple implementation:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**(x**n for x in range(1, n))\n    or x%n==0\n    def is_prime(x):\n    \"\"\"Your task is to write a function that returns true if x is prime.\n    x is prime if it is of the form x^2 +1\n    For example:\n    is_prime(4) => false\n    is_prime(2) => true\n    is_prime(2, 3) => false\n    is_prime(5) => true\n    is_prime(7) => true\n    \"\"\"\n    return x%2==0\n    def is_prime_power(x):\n    \"\"\"Your task is to write a function that returns true if x is prime power.\n    x is prime power if it is of the form x^n-1\n    For example:\n    is_prime_power(2, 2) => true\n    is_prime_power(2, 3) => false", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(n**int)==x\n\nIt's missing a key piece of information: does the power have to be a fixed value, or is a range OK?\nE.g. is the solution to 5^3 a power of 3? That's 5*5*5, but it can also be written as 5*5*5+5*5*4 or 5*5*5+5*4*3, all of which are powers of 3.\n\nI think the intent is the following:\nis_simple_power(5,3) => false\nis_simple_power(5,5) => true\nis_simple_power(5,10) => true\n\nI'm pretty sure it's exactly the latter.\n\nIs there a standard for these kinds of programming challenges? The ones I've seen always include the task description and the expected solution. This one, however, leaves out the description, so I don't know what I'm supposed to be solving.\n\nI'm not sure how to post a comment on that site, but I posted this there:\nx = is_simple_power(4, 3)\nassert(x == 4", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (n**int) == x\n\nSince this is a language assignment, you should use x == n**int in the return statement instead of the other way around.\n\nYou could use a lookup table, but it's a bit verbose. It would look like this:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x in int**n\n\nThe problem with this is that it relies on integer overflow. It also returns false for 2^16, 2^16+1, and 2^16+2, which it should not.\n\nYou're right, it's flawed. I did this for a programming competition, where only pure Python was allowed.\nMy new approach for integer is as follows:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\nIs there any reason you're not using a counter and the power operator?\n\nHence the exercise :)</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return True\nAs a matter of fact, it's even simpler than that. It can just return True for all non-zero values.  (It's even shorter, if that matters.)</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return 1 if x == 1 else 0\nWow. I like this.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (((n**int) & int) == x)\nWell, as many people noted, this is trivial:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x ** n % n == 0\n\nIsn't it a little bit misleading to call that a Python solution?\n\nSo, you have to know Python to solve the problem.\n\nI believe it is more like:\nIf you are a Python programmer, you can solve the problem.\nIf you are not, you will have to learn Python to solve the problem.\n\nWouldn't it be a little more useful to teach your programming language of choice?\n\nI think that teaching python to the non-programmers, and then using it to solve real problems would be a much better use of time and resources.\n\nI was so hoping this would be a True/False solution.\n\nI really liked the analogies for the various types of power functions.\n\nIt's kind of weird that it's not written in Python...\n\nCan someone explain why the last solution is the correct one?</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\n    /*********************************************************************/\n    def is_integer(x):\n    \"\"\"Your task is to write a function that returns true if a number x is an integer\n    and false in other cases.\n    x is an integer if int(x) == x\n    For example:\n    is_integer(3) => true\n    is_integer(2.5) => false\n    is_integer(3.5) => true\n    is_integer(4.5) => false\n    is_integer(5.5) => true\n    is_integer(2.5, 2.5) => true\n    is_integer(2.5, 2) => true\n    is_integer(2.5, 1) => true\n    is_integer(3, 3) => true\n    is_integer(3, 2) => true\n    is_integer(4, 2) => true\n    is_integer(4, 1)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    is_simple_power = lambda x, n: x % n == 0", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (n**int)**int == x\n    # 2nd part\n    is_simple_power(1, n)\n    is_simple_power(2, n)\n    is_simple_power(4, n)\n    is_simple_power(2, n)\n    is_simple_power(n, n)\n\nNow, I have no clue what this will do. I have no idea why it is returning true for 2, but not for 3. I have no idea how the function works. Is it returning false because 1 is even?\nIt is not very well written, but I have no idea how to improve it.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return 1.0*(1.0**(n**int) - 1.0)\n    def is_simple_multiple_of_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    multiple of n and false in other cases.\n    x is a simple multiple of n if n**int=x\n    For example:\n    is_simple_multiple_of_2(1, 2) => true\n    is_simple_multiple_of_2(2, 2) => false\n    is_simple_multiple_of_2(2, 3) => true\n    is_simple_multiple_of_2(1, 3) => false\n    is_simple_multiple_of_2(1, 1) => false\n    is_simple_multiple_of_2(2, 4) => true\n    is_simple_multiple_of_2(2, 2) => true\n    is_simple_multiple_of_2(", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return math.pow(x, n).is_positive()", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x ** n == 0:\n        return False\n    return x ** n == 1 and int(x ** n) == 0", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return 1 if int(n**int) == x\n    return 0 if int(n**int)!= x\nThis is a horrible function, but it does it's job:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (n**int) % x == 0\n\nThis is from:\n\nThanks. It is still a function returning a boolean.\n\nInteresting, but a good bit too slow for most purposes (at least for me).\nI've written a really simple version of this that I find much more useful:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**int % n == 0</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\nThe problem with this is that n can be negative, in which case your code will return false.\n\nIn other words, it is not a simple power of n if n is not a power of 2.\n\nSince 2^n is always positive and 2^-n is always negative, you can just check for the sign of n and return true if n is positive.\n(And I think it's always easier to check for a positive number than to check for a negative one.)\n\nThis doesn't take into account that the numbers you want to test could be negative.\n\n_\"This doesn't take into account that the numbers you want to test could be negative.\"_\nNo, it does.\n2^-n is always negative, so it's not a power of 2, so it's not a \"simple power\" of n.\n\nYou are right. I was thinking that 2^-n is a negative number and should be tested for, but that is unnecessary.\n\nOr just use the power operator (which is also available in the Python standard library).\n>>> is_simple_power(3,2) True\n>>> is_simple_", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n == 0:\n        return True\n    else:\n        return False\n    is_simple_power(1, 2)\n\nWhat's the point of this? It's neither interesting nor hard, and it's certainly not \"challenging\". This is just a contrived example to make a point.\n\nThe point is to show a simple solution to a simple problem. It is a contrived example to make a point, yes, but it's one that people could easily make themselves.\n\nThe point is that the \"challenge\" is not a challenge.\nIt's a contrived example, sure, but I could write a function that outputs \"Hello World\" in a single line. It is not a challenge.\n\nI mean, in a real world scenario you'd probably have to work around floating point errors, but it's the same concept.\n\nThere is no floating point error for x^4 = x^2. And even if there is, it would not matter.\n\nI mean if you had a more realistic case like x^4 = x^2 + 2x.", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x == 1\n\nI am not the only one to see the problem here?</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n < x or n > x:\n        return False\n    return x*n == x\nNote that the author of this question has added a useless dependency on type == int. The function should work just fine without it.\n\nI don't know much about Python. But, this would work for any type of variable wouldn't it? If a, b, and c are different types, this will return True in this case:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x % n == 0:\n       return False\n    return n**int == x\n\nI don't get it. Is this meant to be a joke, or is it an actual bit of code?\n\nIt is a real question. The question is 'define a function'. The only way to solve it is to create a function that takes the number n, and one parameter x, and returns a boolean. I think the question is not very clear and the language is too broad. The function returns true if x is a simple power of n. It is not easy to tell whether a given number is a simple power of another number, but for n=2, and x=1, the function is easy to define.\n\nI see. I've read this quite a few times now and it's quite difficult to understand. I think it's the definition of simple power that throws me off. I've never heard of the term.\nThe question should be something like:\n\"Write a function that takes an integer n and an integer x. If the two numbers are coprime, return True. Otherwise return False\"\n\nYou are right. The question is not very", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return False if n**int is not equal to x\n\nPretty simple.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (n**int)**n==x", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n       return n == 0 and x == 1 and x!= n\n      else:\n          raise ValueError(\"Not a simple power of n\")\n\nI don't understand how this works. It looks like it's just a bunch of if statements.\n\nCan you write a simple program that checks whether a number is a power of 5? (It's not so easy)\n\nYes, it's just a bunch of if statements, and it's a terrible way to do it.\nThe complexity of the algorithm is O(n), where n is the size of the number, but all you're checking is that the first number in the pair is divisible by 5.\n\nActually, it's O(n*log(n)). That's because the only test that matters is the last, which is a binary search.\n\nThat's not a binary search. If I have an n-digit number, there are 2^n possibilities for the first digit. This is O(n^2).\n\nOops. You're right, I think.\n\nI think you meant \"O(n^2 log n)\", since the", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    print 'x is a simple power of n'\n    return x**int == n**int\n\nFor a second, I thought this was going to be a troll post, but I was pleasantly surprised.\n\nFor the sake of pedantry, I believe that this could be written more clearly as", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x < 0:\n       return False\n    if n**int < x:\n       return False\n    if n**int == 0:\n       return False\n    return True", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n % x == 0\n\nI am sorry, it's been a long time since I did any kind of math, but this seems to return true for all possible numbers x that are factors of n.\nIs that really what you meant?\n\nI'm pretty sure you're correct. What is the intent of the question, then?\n\nYou are correct. I have modified the question.\n\nI'll give you a hint:\n\na = [1,2,3]\nb = [2,4,6]\nc = [3,5,7]\nd = [5,7,9]\ne = [6,8,10]\nf = [1,2,3,5,7]", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(n**int) == x\n\nIs that a classic problem or what?\n\nIt's also the first question in\n\nYes, it's a classic interview question, and it's on the top 100 questions of all time (on Google Groups). Here's a Python version:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    return n**int == x\n\n    print is_simple_power(1, 4)\n\n    print is_simple_power(2, 2)\n\n    print is_simple_power(8, 2)\n\n    print is_simple_power(3, 2)\n\n    print is_simple_power(3, 1)\n\n    print is_simple_power(5, 3)\n\n    print is_simple_power(6, 4)\n\n    print is_simple_power(9, 5)\n\n    print is_simple_power(2, 3)\n\n    print is_simple_power(9, 2)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**int == n**int\n\nSimple enough, right?  Except, in the real world, the operations that are\ncomputing the result of the expression n**int (numerical multiplication)\nare multiplying very large numbers (e.g. numbers with up to a billion or\nmore digits).  There are a few operations that can be done to improve the\nperformance of such code (or make it run at all, in the case of some\nhardware), but the easiest one to implement is \"memoization\".  Here's how\nyou do it:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x == 1:\n       return True\n    return False\n\nThis reminds me of the \"Hacker's Delight\" algorithm.\nx is a power of n if n!=x mod n.\nhttp://en.wikipedia.org/wiki/Hacker%27s_delight\n\nGiven that you can test for x mod n in constant time, I don't see why\nthe recursive algorithm is any faster than this.\n\nI wasn't comparing the two algorithms, but I believe the Hacker's Delight\nalgorithm is simpler and easier to explain.\n\nIt's not, actually, and it's certainly not easier to explain.\n\nActually it is. The complexity analysis is trivial. And the recursive\nalgorithm is more obvious to people who don't understand recursion.\n\nI meant in terms of the explanation, not in terms of the implementation.\nFor the explanation, the Hacker's Delight algorithm is needlessly complicated.\nFor the explanation, the recursive algorithm is trivial.\n\nYou're assuming that the explanation is to the person being taught the subject, not to the instructor.\n\nPlease add (2009) to the title.", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    # Proof\n    # For any n:\n    # 0**n = 0\n    # 1**n = 1\n    # 2**n = 2\n    # 3**n = 3\n    # 4**n = 4\n    # 5**n = 5\n    # 6**n = 6\n    # 7**n = 7\n    # 8**n = 8\n    return n**int == x", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x % n == 0\n\n\tQuentin\n\t\t\t\t*************************************************************************\n\t\t\t\tThis e-mail and any files transmitted with it may contain\n\t\t\t\tconfidential and/or privileged information. If you are not\n\t\t\t\tthe intended recipient (or have received this e-mail in\n\t\t\t\terror) please notify the sender immediately and destroy\n\t\t\t\tall copies of the original message. Any unauthorized\n\t\t\t\tuse, dissemination, distribution or reproduction of this\n\t\t\t\tmessage is strictly forbidden.\n\n\t\t*************************************************************************\n\n\t\tThis e-mail and any files transmitted with it may contain\n\t\tconfidential and/or privileged information. If you are not the\n\t\tintended recipient, please notify us immediately and destroy the\n\t\toriginal message. Any unauthorized use, dissemination,\n\t\tdistribution or reproduction of this message is strictly\n\t\tforbidden.\n\n\t\t*************************************************************************</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n == 0 || n == 1 || n == 2\nThis isn't correct. There's a special case when n is zero, since x^0 = x for any number x.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(x) ** n == int(n)\n    or int(x) ** (int(x) ** n) == int(n)\nThat's incorrect. The problem is that you're assuming that the value of x is a number. But the question doesn't say that.\nIt does, implicitly.  The only time the values x could be anything other than integers are if n = 1 and the problem is trivially solvable, or if x is infinity.  In that case, the problem is trivially unsolvable.\nActually, the problem statement is not clear, because it never states that the value of x is a number. It only states that the function is to be written to return true if x is a simple power of n, which is a different proposition.\nI agree it's not very clear, but it's definitely the intention that the value of x is a number, as you can see in the comments here.\nWell, that was the intention, but it still doesn't mean that it's correct.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n < 1:\n        return false\n    if n == 1:\n        return true\n    return int(n**2) == x\n\nThe code is by no means optimal. For example, it will not detect non- integer powers (it doesn't even check if n is an integer, much less if it is a power of 2). If you want to make it a bit more robust, you need to check if n is an integer and then if it is a power of 2.\n\nIt will return false for multiples of 2, 3, 4, 5, 6, 8, 9 and 10.\n\nYou should probably create a new thread for each problem.\n\nI am assuming that the reason you have been downvoted is that you posted code to HN which doesn't have a license.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int % x == 0\n\nThe problem is, I'm trying to do this using generators, and I can't for the life of me figure out how to use the function in a generator.\n\nHere's what I have so far, which isn't working.", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x in x**(n**int-1)\n\nI came up with a similar solution and was surprised to see that it was not the top comment. I suppose I'm not surprised to see it's the top comment for this post.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (n**x)**x == x", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if not (n%x == 0):\n        return True\n    return False\nI'd like to see the code that implements this.\n\nFor the first version, you can use the power function on the number and check if it is equal to 1. If not, return True.\n\nI think the point of the exercise is to write the function, not to use an existing one.\n\nWhat's the point in writing a function that is already implemented?\n\nThat is a good question. I would argue that the point is to learn how to write such a function. That being said, I would have suggested a slightly more sophisticated version of this problem to get the idea across:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (((x ** n) ** n) ** n) ** n == x\nI prefer that as a function call, but that's just my taste.\n\nI've always preferred \"x**n is n**n\" as the simple power test.\n\nThis looks like it would be good practice for beginners (and also intermediate programmers) to learn how to deal with ambiguity. I've seen a few of my friends struggle with parsing, and this seems like a good way to get used to this.\n\nI made a python version of this:\n\nVery interesting. I think it could be improved by using a grammar parser, though.\n\nThis reminds me of the \"2 bugs in C\" post.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    x = int(x)\n    return is_simple_power(n**x, n) == x\n\nA person who wrote this didn't know what a power function was, but was pretty sure he could write a better one in python.\n\nNice.\nI would like to see the code that this was written in.\n\nPython's implementation of power:\n\nHow does it return an integer?</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    x = 1\n    for i in range(n):\n        if i % n == 0:\n           return x\n    return False\nI'm not sure you can have a function with no return statement.\n\nYou can do this:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x == 0:\n        return True\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6:\n        return False\n    if n == 7:\n        return False\n    if n == 8:\n        return False\n    return False\n    # Simple power of 2\n\n    def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x ** n == 0", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    def is_simple_power(x, n):\n    return n**(x%n)==x\n\n    print(\"Powers of 2 are easy:\")\n    print(\"1, 2, 4, 8, 16...\")\n    print(\"and so is 16^n\")\n    print(\"Powers of 3 are easy too:\")\n    print(\"1, 3, 6, 12...\")\n    print(\"Powers of 5 are easy too:\")\n    print(\"1, 5, 12, 25...\")\n    print(\"Powers of 3 and 5 are not so easy:\")\n    print(\"2, 3, 5, 15, 30...\")\n    print(\"Powers of 2, 3 and 5 are not so easy:\")\n    print(\"3, 6, 10, 15...\")\n    print(\"Powers of 5, 3 and 5 are not so easy:\")\n    print(\"5, 12, 20, 30...\")\n    print(\"Powers of 3, 5 and 5 are not so easy", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**n==0\nSimple to the point of being useless.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x == x ** n\nIt's not that hard. In fact, it's so easy to write that you probably won't be able to use it.\nYou can solve this in linear time with a quick jump through the code. You will need the following:\n1. Define a function x=x+1 and then say that x is the nth power of n if x==x**n.\n2. Define a function is_simple_power that uses the above test to see if x is a simple power.\n3. Define a function is_product_of_sums that uses the above test to see if x is a product of n positive integers.\n4. Define a function is_product_of_multiples that uses the above test to see if x is a product of n non-negative integers.\n5. Define a function is_product_of_integers that uses the above test to see if x is a product of n positive integers.\n6. Define a function is_product_of_integers that uses the above test to see if x is a product of n non-negative integers.\n7. Define a function is", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x ** (n-1) == x\n    def is_simple_power(x, n):\n    return n**int==x\n    print is_simple_power(1, 4), is_simple_power(2, 2)\n    print is_simple_power(8, 2), is_simple_power(3, 2)\n\nOutput\n\n1\n2\n8\n3\n\nThe is_simple_power function is O(n)\n\nis_simple_power(1, 4) is O(4) because it is comparing each power of 4 with 1.\n\nis_simple_power(2, 2) is O(2) because it is comparing each power of 2 with 2.\n\nis_simple_power(8, 2) is O(2) because it is comparing each power of 8 with 2.\n\nis_simple_power(3, 2) is O(n) because it is comparing each power of 3 with 2.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**(n**2) == x**n", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    return n**int == x\n\nMy version:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\n\nAnd this is the simplest solution I could come up with in C:\nint power(int x, int n) {\n    return ((n & 0x7f) << x) & 0xffff;\n}\n\nThe function assumes that the number to be tested is a multiple of n and then uses the bitwise and (|) operator to move the high-order bits of n into the least significant bits of x. If the result is zero, the number is a power of n and the function returns true. Otherwise it returns false.\n\nTo get a feeling for how the function works, consider the following example:\nn = 4, x = 3, and the binary representation of their product is 1110001101. Then, the following will print:\npower(4, 3)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (is_simple_power(n, x))", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x ** n == x ** (n+1)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    if n**int == x:\n       return True\n    else:\n       return False\n\n    def is_prime(n):\n    \"\"\"Your task is to write a function that returns True if n is a prime number and\n    false in other cases.\n    For example:\n    is_prime(3) => True\n    is_prime(6) => False\n    is_prime(0) => False\n    is_prime(5) => False\n    is_prime(1) => True\n    \"\"\"\n\n    if n % 2 == 1:\n       return True\n    else:\n       return False", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    return n**int==x\n\nDoes Python allow this?</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x in range(1, n):\n       return true\n    else:\n       return false", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x == 0**n || x == 1**n || x == 2**n || x == 3**n\n\nHere's a more complete Python implementation using the Python module numpy for number-crunching, for those who are interested:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\n    # simple_power_test.py\n    test_simple_power(1, 4)\n    # test_simple_power.py\n\nIt looks like the following code is needed to do this.\nimport math", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return not n**int in x for x in xrange(1, n)\n\nNote that the implementation is not correct - the function should probably be\ninvariant under the assumption that the function is_simple_power(x, n) ==\nx**n for x in xrange(1, n).\nThe reason for this is that there are more than two cases, see\n.\n\nThe function is_simple_power is correct when using the Python interpreter, but\nnot when using Python byte code.\n\nThe reason for this is that the algorithm is incorrect for Python byte code.\nThe following implementation is correct:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\n\nI mean, it's not that hard and will just require some basic knowledge of arithmetic and logic. You'll have to prove that that is_simple_power(x, n) will return true for x = n**int (n^(1/x)), and false for x = n**(1/x) (n^(1/x)).\nThis is an exercise you could do by yourself, but with that said, if you really need help, let me know.\n\nIt's not difficult, but it does require a bit of practice. I recommend reading a few chapters of _How to Prove It_ by Velleman. It will take you through the basic thought process for this kind of problem.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**n%2==x\n\nI think it's supposed to be is_simple_power(x, n), and the author's answer (which I don't have) is very interesting.\n\nIs that a joke? Or is the poster really that bad at proofreading?</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    def is_simple_power(x, n):\n    if x % n == 0:\n       return False\n    return True\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))\n\nPython:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int % int == int\n\nThis is a silly example. It is also probably not very useful in practice (as pointed out in the article), but it makes the point I wanted to make very nicely:\nis_simple_power(3, 2) => True\nis_simple_power(5, 3) => False\n\nThis would be equivalent to saying that (x**2) + (x**2) = x + x, which is of course false.\n\nIt would be equivalent to saying that x^2 = 2x + x.\n\nTrue, but that would result in a divide-by-zero.\n\nNo it wouldn't.\n\nIn general, I agree with the article that tricks like this are only useful for brain teasers.\nBut I do have a rule of thumb for when to use such tricks: when the desired behavior cannot be expressed as a function.\nFor example, if I want to write a program that draws a circle, and the only way to express the desired behavior is a sequence of instructions such as:\n1\\. get the X coordinate of the center of the circle\n2\\. get the radius of the circle\n3\\. if (", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\nThis works, but is pretty slow.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n**int<0:\n        return False\n    return n**int==x\nThat's great! If it works for your problem, you can always keep it, but you might want to consider some other approaches.  For example, consider using the function **int for testing.  Also, how about using itertools.count() to count how many times n**int occurs?  You can do all sorts of fancy number theoretic stuff, but I think if you spend more time thinking about this than it takes to write the code, you're probably over-thinking it.  Don't get caught up in trying to find the \"right\" solution.\nFor Python, n**int is defined in the math module.  In fact, the Python interpreter is a great way to test your functions.  Try:      def is_simple_power(x, n):         print 'x is a simple power of n'         print 'n**int=x'         print n**int(x)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x%n == 0\nThis is terrible for multiple reasons. If you're going to use Python, use its idioms. Also, don't return True or False, return a value.\n> def is_simple_power(x, n):\n>    \"\"\"Your task is to write a function that returns true if a number x is a simple\n>    power of n and false in other cases.\n>    x is a simple power of n if n**int=x\n>    For example:\n>    is_simple_power(1, 4) => true\n>    is_simple_power(2, 2) => true\n>    is_simple_power(8, 2) => true\n>    is_simple_power(3, 2) => false\n>    is_simple_power(3, 1) => false\n>    is_simple_power(5, 3) => false\n>    \"\"\"\n>    return x%n == 0\nYou missed my \"return a value\" comment, which is very important. As", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x%n == 0 and n**int%x == 0", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    return (n**int(n)==x for n in range(n**2) for n in range(n**2) for n in range(n**2))\n\nThat's not so bad if you're writing that in one go, but if you're trying to come up with an algorithm to do that it's not so trivial.\n\nThis is my goto test for non-triviality, but it has not been too helpful when dealing with cases such as the following:\nfor i in range(10):\n    print i\n    is_simple_power(i, 2)\nYou have to come up with some other algorithm that's easy to write down, but hard to come up with.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n        return n**int == x\n        # your function definition", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    n = int(x)\n    return not(n**(x**(x**n)))", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x in n**int for x in range(0, n+1)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    def __ne__(self, other):\n    return not isinstance(other, list)\n    return not isinstance(other, tuple)\n    return not isinstance(other, set)\n    return not isinstance(other, dict)\n    return not isinstance(other, str)\n    return not isinstance(other, float)\n    return not isinstance(other, int)\n    return not isinstance(other, long)\n    return not isinstance(other, float)\n    return not isinstance(other, double)\n    return not isinstance(other, datetime)\n    return not isinstance(other, tuple)\n    return not isinstance(other, list)\n    return not isinstance(other, dict)\n    return not isinstance(other, str)\n    return not isinstance(other, float)\n    return not isinstance(other, int)\n    return not isinstance(other, long)\n    return not isinstance", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x == 0 or x == 1:\n       return False\n    return x % n == 0\n\nYeah, I have that one. I thought I had that in my list, but I guess not.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return not int(x)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x in math.sqrt(n**int)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\n\nHow would you write that in Python?\n\nx is_simple_power(n) if n%2 == 1 and x % 2 == 0 else False\nI would also write it in C or C++ but that's probably not what you're asking for.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return False\n\nI think you should return True and False.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    def is_simple_power_if_pow(x, n):\n    \"\"\"Your task is to write a function that returns true if x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_if_pow(1, 4) => true\n    is_simple_power_if_pow(2, 2) => false\n    is_simple_power_if_pow(8, 2) => true\n    is_simple_power_if_pow(3, 2) => true\n    is_simple_power_if_pow(3, 1) => true\n    is_simple_power_if_pow(5, 3) => true\n    \"\"\"\n    def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x > 0 and x < n:\n       return x is a simple power of n\n    return False", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n**int<x:\n        return False\n    return x % n == 0\n\nThat function is a joke, right?\n\nYes.\n\nIt's a joke because it's so trivial. If n = 1, then the condition is that int(n) == x.\n\nI wonder if there are any programming tests/challenges which are not trivially solved by a computer.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return True\n\nNow I'm wondering why you didn't just write it without an explanation?  The explanations on the tests are just a bit annoying to me, because they break my flow.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(n**x)!= x\n\nThis is trivial for n==1 but fails for n==2. This is because the function is \"simple\" in the sense that the only values it considers are ones that can be defined using \"powers of 2\".\n\nTo fix this, you can apply the following transformations:\n\n  def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return is_simple_power(", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return math.sqrt(n**int)==x\n\nOne might assume that if the question doesn't mention that the numbers are floating point values, then it would be a good assumption that the numbers are being considered as integer values.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x % n == 0\nThat's not so simple...</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n**int == x:\n       return True\n    return False\n\nCan be trivially reduced to:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if (x % n == 0) and (n == 0 or n == 1):\n        return False\n    else:\n        return x == 1\nI don't understand why you wouldn't just do this:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    def __len__(self):\n    \"\"\"Return the length of the sequence.\n    e.g. for (int i = 0; i < self.length(); i++) {\n        print(\"%d\" % i)\n    }\n    \"\"\"\n    return len(self)\n    def __eq__(self, other):\n    \"\"\"Compare two sequences.\n    e.g. for (int i = 0; i < other.length(); i++) {\n        if self[i] == other[i]:\n           return True\n        else:\n            return False\n        }\n    \"\"\"\n    return self == other\n    def __hash__(self):\n    \"\"\"Return a hash code for the sequence.\n    E.g. for (int i = 0; i < self.length(); i++) {", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x == int(n) == 0:\n        return true\n    else:\n        return not n**x == n\n\nIt doesn't have to be in Python. This problem can be solved by using the same algorithm as the base case of the simple_power() function.\n\nIt's nice that it's not in Python, because it allows us to test and understand the algorithm, without the usual Python wrappers.\n\nYou could always test the Python version using py.test or something.\n\n\"When in doubt, use brute force.\"\n\nThis solution isn't brute force. It's a clever solution that requires the use of some simple math and logic.\n\nRight. I wasn't trying to be disparaging. It's the first algorithm I would have tried.\n\ni would have gone for a bfs.\n\nYour solution is brute force.\n\nIt's not even brute force - it's just a clever algorithm.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    if __name__ == \"__main__\":\n        import operator\n        print(is_simple_power(1, 4))\n        print(is_simple_power(2, 2))\n        print(is_simple_power(8, 2))\n        print(is_simple_power(3, 2))\n        print(is_simple_power(3, 1))\n        print(is_simple_power(5, 3))\n\nAs you can see the n**int can be computed easily by calculating the logarithm of n, then multiplying the result with the base.\n\nSo the only problem you should solve is to figure out how to calculate the logarithm of the n.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if not x % n == 0:\n        return False\n    else:\n        return True\n    if __name__ == \"__main__\":\n        is_simple_power(4, 2)\n        is_simple_power(3, 8)\n        is_simple_power(5, 2)\n\nPython:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x == 1\n    and n**int==x\n\nHere's another way to do this in Python:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x % n == 0:\n       return False\n    return n**x == x % n", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    return int(n**x) == x\n\nThat's not terribly different from the real answer, except you should be\nlooking at the code to see why it's faster.\n\nThe \"real\" answer is a bit more general: it only works for integers.\n\nA common mistake. Just replace \"int\" with \"int, long, float,...\" and it's\nfine.\n\nIf you are using a language where you can't overload operators, then sure.\n\nEven in a language without operator overloading, you can accomplish the same thing with a more standard solution, using casts:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int % x == x % n\nThe reason we use '%' is that Python treats the power operation as a relational one, which it isn't.\nBy the way, you can make it a bit faster by just using a lookup table for 'n' and using '=='.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int==x", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return len(int(x**n)) == n\n\nI didn't need any function. I just wrote out the exponentiation, then replaced the n by the actual value of n. Works perfectly, but maybe I'm missing something?\n\nAnd my solution to the problem:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n        return n == int(x)", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x == n:\n        return True\n    if x == n % 2:\n        return True\n    if x > n:\n        return False\n    return False\n\nThanks!\n\nThe one that gave me the most trouble:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n ** x < 0\n\nI was hoping for something more complicated, something like this:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n ** int % x == x % n\n\nI'm wondering if this is a mistake?\n\nNot necessarily. The power function is defined in terms of exponentiation, which is commutative, so you can swap exponents with no loss of meaning.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n\n    return n**int == x\n\nis_simple_power(1, 4)\nis_simple_power(2, 2)\nis_simple_power(3, 2)\nis_simple_power(5, 3)\nis_simple_power(6, 4)\nis_simple_power(2, 7)\nis_simple_power(8, 2)\nis_simple_power(7, 2)\nis_simple_power(4, 7)\nis_simple_power(8, 7)\nis_simple_power(5, 3)\nis_simple_power(4, 2)\nis_simple_power(8, 1)\nis_simple_power(6, 0)\n\nThis is the correct answer.\n\nFor others: the problem is not to do the above, it's to figure out what the code is doing.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**n == int(x)\n\nThanks for the tip, but that's not what I'm looking for. I'm looking for a function that returns whether or not a given number is a simple power of another given number, not the other way around.\n\nOh, I thought you meant a function that determined whether or not a number is a simple power of another number. In that case, I don't think there's a way to determine if a number is a simple power of another number without having a way to determine if one is a simple power of the other.\n\nI'd just use factorials. If n is a simple power of m, then m! is a multiple of n.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(x**n) == int(n)\nI've read this before in some other post, but I don't know how to use it.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**int==n\n\nNote that Python does not have a standard library function is_power for reasons stated in the PEP:\n\nPEP 342, the Python statement:\nIf Python had an is_power function, it would be very easy to implement the Fibonacci\nsequence in Python, which is a mistake.\n\nThis is a good example of the difference between power and recursion.\n\nThe comment on that PEP is also interesting:\n\nI don't understand why this function is so important to the author. Can't you just", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if x % n == 0:\n        return True\n    return False\n\nThis is one of my favourite problems, and the most important part of it is that the function is not intended to be used to do any work.\nThe idea is to create the function so that it can be proved that it can never return True. If you have the patience to do this, it's quite an enlightening exercise.\n\nThis is like the function which always returns True when you ask if it always returns True.\n(if (always (return True))) => True\n\nI don't think so. The problem is not about how many times it returns true but that it always returns true.\nI've always wondered about the last clause of the following function:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return n**int == x\n\nI don't know if it was just me, but I was expecting an actual test case with the explanation of the example.\n\nThe test cases are on the next page:\n\nSo the solution is:", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n**int == 1:\n       return True\n    else:\n       return False\nI wish I had thought of that solution. It is as simple as it is elegant.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x**n == x\nYou could have just used `x**n!= x` in Python 2.x, but this would work too.\nAlso, `x**n!= x` has a symmetric negation, whereas `x**n == x` does not.</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x%n==0\nIt's a little mean to post this as an exercise.  If you're not familiar with the term, \"simplifying a fraction\" is a bit of a misleading name for this task, as it's really just about integer division.  It's a pretty fundamental operation, so it's fine to use your calculator, but it's not going to be obvious to everyone what the answer should be.  It's a cute exercise if you are familiar with it though.\n\nI think there is a simple solution.\nx=1\nn=2\nx=x/n\nreturn False\n\nWhat's the point of this?\n\nThe question is\nis_simple_power(x, n)\nIf I set x = 1, n = 2, then x/n = 0, so the answer is True.\nThe point of the question is to show that one can solve the problem if one is given the right x and n, which is what the definition of'simple power' is.\n\nI understand that, but why return False?\n\nI don't know. I was making a joke.\n\nI was hoping for a matrix solution...</s>", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return int(math.sqrt(n**x))<=n", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return x % n == 0\n\nThis is a classic \"find the bug\" exercise.\n\nThis is a classic \"substitute 2\" exercise.", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    if n**int = x:\n        return True\n    else:\n        return False\n\nThe problem with this is that it's not very useful. A simple power of a number n is another number n for which\n n**int == x,\nand there are 2^n such numbers. If n is a multiple of 2^n, then x is a simple power of n. So, if n is a multiple of 2^n, then the predicate true, so the function will always return True.\n\nNow, the question that's asked in the article is a generalization of this one: \"Given a number x and a number n, find the smallest n such that x**n is a simple power of n.\" This is a slightly more interesting problem.\n\nOne way to solve this problem is to use brute force. For every n, multiply x by n and see if x**n is a multiple of n**int. The problem with this is that it's exponential. It will take n**int operations to check if x**n is a simple power of n, and the number of possible values for n is 2^", "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\" \"\"\"\n    return (x**int)**(int**n)==n**int\n\nOne of my favorite algorithms for this is the Knuth-Morris-Pratt algorithm. It's fast, efficient, and very elegant.\n(defun kmp(n, m)\n         (if (<= n 1) 1\n          (if (<= m 1) 1\n                                    (apply #'mod m n)\n                                      (apply #'mod n m)))\n)\n\nSo there's some interesting stuff here.\nThe main idea of the algorithm is that it's really easy to see if a number is a multiple of the base, so you have a shortcut for that.\nFor example, to see if 3 is a multiple of 4, you can just apply it to 4 and then check"]]