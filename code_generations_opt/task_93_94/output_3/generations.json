[["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for char in message:\n        if char not in 'a'...'z':\n            if char not in 'A'...'Z':", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for letter in message:\n        letter = letter.lower()\n        if letter!= u'a' or letter!= u'e':\n           letter = letter.upper()\n           if letter!= u'a' and letter!= u'e':\n               letter = letter.capitalize()\n              if letter!= u'a' and letter!= u'e':\n                 letter = letter.lower()\n                if letter!= u'l' or letter!= u'r':\n                  letter = letter.upper()\n                 if letter!= u'l' and letter!= u'r':", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nreturn msg.replace('e', u'e').replace('a', u'A').replace('i', u'I').replace('o', u'O').replace('s', u'S').replace('l', u'l').replace('u', u'U').replace('a', u'A').replace('e', u'e').replace('a', u'A').replace('i', u'I').replace('o', u'O').replace('s', u'S').replace('l', u'l').replace('u', u'U').replace('a', u'A').replace('e', u'e').replace('a', u'A').replace('i', u'I').replace('o', u'O').replace('s', u'S').replace('l', u'l').replace('u', u'U').replace('a', u'A').replace('e', u'e').replace('a', u'A').replace('i', u'I').replace('o', u'O').replace('s', u'S').replace('l', u'l').replace('u', u'U').replace('a", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nThe following code would also work, though it's not as readable.", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nfor i in range(len(message)):\n    s = message[i]\n    try:\n        for j in range(len(s)):\n            if s[i][j]=='(':\n                s[i][j] = '_'\n                s[i][j] = s[i][j] % 26\n                s[i][j] = s[i][j] ^ 26\n                else:\n                s[i][j] = s[i][j] ^ 26\n                 s[i][j] = s[i][j] % 26\n    except ValueError:\n         s", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI wish I'd known this when I was using codecademy.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\n1 - \\\n2 - t\n3 - h\n4 - k\n5 - s\n6 - C\n7 - g\n8 - s\n9 - C\n10 - G\n11 - s\n12 - C\n13 - g\n14 - s\n15 - C\n16 - G\n17 - s\n18 - C\n19 - G\n20 - s\n21 - C\n22 - G\n23 - s\n24 - C\n25 - G\n26 - s\n27 - C\n28 - G\n29 - s\n30 - C\n31 - G\n32 - s\n33 - C\n34 - G\n35 - s\n36 - C\n37 - G\n38 - s\n39 - C\n40 - G\n41 - s\n42 - C\n43 - G\n44 - s\n45 - C\n46 - G\n47 - s\n48 - C\n49 - G\n50 - s\n51 - C\n52 - G\n53 - s\n54 - C\n55 - G\n56 - s\n57 - C\n58 - G\n59 - s\n60 - C\n61 - G\n62 - s\n63 - C\n64 -", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    n = len(message)\n    v = 0\n    while n > 0:\n        v = str(ord(chr(i) - ord(i + 2)) + n)\n        v = str(ord(chr(i + 2)) + n)\n        if v == 'A':\n           v = chr(ord(chr(i) + n) - ord(i)) + v\n           v = chr(ord(chr(i + 2) + n) - ord(i)) + v\n          v = chr(ord(chr(i + 3) + n) - ord(i)) + v\n          v = chr(ord(chr(i + 4) + n) - ord(i)) + v\n          v = chr(ord(chr(i + 5) + n)", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\nreturn map(ord, message)", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nwhile True:\n    letter = input()\n    if letter[1] == 'a' and letter[2] == 'a' and letter[3] == 'a':\n        letter[1] = letter[3]\n    if letter[0] == 'a':\n         letter[0] = letter[2]\n    if letter[3] == 'e':\n         letter[3] = letter[2]\n    if letter[1] == 'o':\n         letter[1] = letter[2]\n    if letter[2] == 'o':\n         letter[2] = letter[1]\n    if letter[0] == 'i':\n         letter[0] = letter[1]\n    if letter[1] =='s':\n         letter[1] = letter[0]\n    if letter[0]", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return message.replace('A', 'A').replace('a', 'A').replace('B', 'B').replace('c', 'C').replace('e', 'E').replace('e', 'E').replace('I', 'I').replace('l', 'l').replace('O', 'O').replace('O', 'O').replace('s', 'S').replace('s', 'S').replace('t', 'T').replace('u', 'U').replace('u', 'U').replace('y', 'Y').replace('y', 'Y').replace('y', 'Y').replace('I', 'I').replace('i', 'I').replace('l', 'l').replace('o', 'O').replace('O', 'O').replace('T', 'T').replace('T', 'T').replace('T', 'T').replace('U', 'U').replace('U', 'U').replace('V', 'V').replace('V', 'V').replace('V', 'V').replace('V', 'V').replace('W', 'W').replace('W', 'W').replace('W', 'W').replace('X',", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return message.replace(letter)\n\nI think the correct answer is not to use letter but rather a more general replacement function", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for i in range(len(message)):\n        message = message[i] + '\\0'\n        for i in range(len(message) - 1, 2):\n           if i!= message[i - 1]:\n                   message[i] = message[i - 1]\n    return message\n\nI'd love to know more about how this works!\n\nIt uses the method of Japanese hiragana, katakana, and kanji encoding, where each letter of the alphabet is represented by a combination of these three (at least in theory).\nThe result is that the message is sorted to account for case, and then each vowel is converted to a kana based on its position in the alphabet. For example, the a in 'test' becomes \u305f (ta).\nThen, each of the kana are converted to their corresponding kanji. For example, the \u305f in 'test' becomes \u305f\u3061 (tachi).\nFinally, the resulting kanji", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nWhat's this about a message? What do you mean \"encodes in such a way\"?\n\nPossibly he meant 'decodes' rather than 'encodes', and it's a test of your knowledge of how to decode text.\n\nYou're right. I'll change the code.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nThis is a function that takes a message, and encodes in such a way\nthat it swaps case of all letters, replaces all vowels in the message\nwith the letter that appears 2 places ahead of that vowel in the\nenglish alphabet.  Assume only letters.\n\n>>> encode('Test')\n'TGST'\n\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\nA string to encode.\n\n>>> message = \"Test\"\n\nA list of letters and numbers to be encoded.\n\n>>> letters = [t, e, s, t, h, e, t, s]\n>>> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIf not specified, the return string will be terminated by the\nsequence '\\n'.  If not specified, the return string will not be\nquoted.\n\n>>> return_string = 'Test'\n>>> return_string = 'Test'\n>>> return_string = 'This is a message'\n>>> return_string = 'tHKS KS C MGSSCGG'\n\nA string of characters to substitute for", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI'm surprised this is the first time I've seen this. Of course it's a silly exercise, but it's a nice way to explore the problem.\n\nthis is the first time I saw it too.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\n>>> message = 'This is a message'\n>>> encode(message)\n'tHKS KS C MGSSCGG'\n\n>>>\n\nPython 2.3", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nFor anyone confused by this:\n\n>>> encode(message)\n\n\"This is a message\"\n\nI love how the response to the question \"why are you writing code that is so wrong\" is \"I like it\".\n\nIt is not wrong.\nIt is a different, more concise, and still valid implementation of the same idea.\n\nAs the grandparent post points out, it is _wrong_, because it is not in any way equivalent to the requested output.\n\nNot _wrong_, but _more concise_.\n\nI like the idea, but I dislike the fact that people are still writing code in languages without built-in support for list comprehensions.\n\nI like the idea, but I dislike the fact that people are still writing code in languages without\nbuilt-in support for unicode.\n\nI thought that too, but I didn't want to be the first to bring it up. :)</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI think it would be much more elegant to do something along the lines of:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return message.upper().lower().upper().lower()\nCan't you just do:\nmessage = message.replace(r'\\w+','\\\\1').replace(r'[A-Z]','\\\\2')</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\nreturn ''.join(map(ord, message))\n\nThis one's my favorite. I wish someone would fork Python and just do this. It'd be so much cleaner.\n\nLanguages like Ruby and Perl have this kind of thing built in.\n\nPerl 5 does. Perl 6 does not.\n\nThe last two are silly, but not the first one.", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nIf you look at the output of this code, it works.\n\nHowever, the code I'm trying to use this on doesn't work.  It gives the\nfollowing error:\n\nTypeError: 'ascii' codec can't decode byte 0x90: ordinal not in range(128)\n\nI'm trying to encode the message \"Hi\", and I don't know why it's giving this\nerror.  Any help would be appreciated.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for letter in message:\n        if letter in 'a'..'z':\n           swap(letter)\n        else:\n           letter = 'A' + ord(letter)\n           letter = letter.upper()\n           if ord(letter) == 26:\n              letter = letter.lower()\n    return letter\n\nI am a bit confused. By \"replace\" you mean, swap the position of the character, right? Also, does the letter have to be in the set \"A-Z\", or could it be a symbol or a number? I can see that you are right about the uppercase/lowercase and the swapped case of the letters.\n\nI didn't really understand that well, but here is a solution:</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nFrom the OP, the posted solution doesn't work for his problem:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\nNot sure if it's a bug, but it seems like the wrong behavior.\n\nThis is a copy of the discussion of the bug on the official python-dev mailing list:\n\nIf you have to cheat to make a solution work, it's probably not a very good solution.\n\nI don't think this qualifies as cheating. The original problem description is ill-formed.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return message.encode('ascii')</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    \"\"\"\n    words = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    print(words)\n    print(message)\n    for word in words:\n         if word in message:\n              message = word.upper()\n               message = message.lower()\n               word = message.upper()\n    return message\n\nIt's not perfect, but it might be good enough for what you want.\n\nI just want to add that there are two alternative ways to do this that are faster than doing the comparisons yourself:\n1) Use itertools.tee. This means you don't have to worry about swapping the letters of the word or anything, the function is simple and fast:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG'\n\n>>> decode(encode(\"This is a message\"))\n'This is a message'\n\n\"This is a message\"\n\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\n>>> decode(encode(\"This is a message\"))\n'This is a message'\n\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\n>>> decode(encode('This is a message'))\n'This is a message'\n\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\n>>> decode(encode('This is a message'))\n'This is a message'\n\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n\n>>> decode(encode('This is a message'))\n'This is a message'</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return lambda c: ((c.lower() == 'a') or ('a' in c for c in ['A'..'Z'])\n    and\n       (c.upper() == 'A' and c.lower() not in ['Z'..'A']))\n       or\n       lambda c: (c in ['a'..'z'])\n\nI see.\nBut I don't understand the first condition. How does it even work?\n\nIt checks to see if a letter in the string matches one of the strings \"a\" through \"z\", which corresponds to the characters in the string. This is because a's and e's are identical in Python, so they would need to be replaced differently.\n\nThanks, I'm not used to Python's Unicode capabilities yet. I guess I'll just have to learn it.\n\nI also need to learn how to use Unicode.\n\nI've found this to be very useful: \n\nThat's a really cool article. Thanks.\n\nIf you're looking for a more pythonic way of doing this, you can take a look", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nYou can probably figure out how to do it from the code above.\n\nI think the purpose is to get you to think about what a function is and how to write it.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return ''.join(reversed(message.lower()))</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return re.sub(message, r'[A-Z]+', r'').encode('ascii')\n\n(indentation added)\n\nA're' is a regular expression, and is composed of non-capturing\nparentheses that define what will be matched, and capturing parentheses\nthat define what will be returned.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return replace(message, '', []).replace(message, '', []).join(' ')\n\ndecode = encode.decode()", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return ''''.join(re.sub('\\W+','\\U+','',message))\nWhat if the message has a vowel in the middle of a word?\n\nDoing it your way:\n>>> encode('This is a message')\n'tgks-ks-c-mgsscg'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n>>> encode('This is a message')\n'This is a message'\nUsing the proper \"words\" instead of letter tokens:\n>>> encode('This is a message')\n'This is a message'\nUsing lowercase vowels:\n>>> encode('This is a message')\n'this is a message'\n>>> encode('This is a message')\n'THiS iS a mESSAGE'\n\nIn python, it's better to use word tokens, since you have more control over the generated code. I didn't know how to do this without using a library, so I used the one I know best.\n\nGood catch, I hadn't thought of that. You could always add a \"lowercase vowels\" option to the library to make it", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI can't believe I am actually seeing this in the wild.\n\nIt's a fair introduction to parsing and I suspect that's the intended audience.\n\nOh, it's totally a fair introduction to parsing. I still can't believe that I'm seeing this in the wild.\n\nThis is why I am a fan of Python.\n\nI would be surprised if that was the only reason, since Python's syntax is far from being the best out there.\n\nIt's true, but I was just trying to make a joke.\n\nHow about we use some other symbols for the ASCII table? Like, say, the Cyrillic symbols?\n\nI never understood why Python uses uppercase letters to represent function arguments.\n\nThat's the same as the first example in the article, a one-liner...\n\nI don't see how that is related to the comment you replied to?\n\nBecause it's actually a one-liner.\n\nThat doesn't answer my question. I asked why they used uppercase for function arguments, and you replied with a function that used uppercase for its arguments.\n\nOh, sorry.\nIt's because the function is a class method. In", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nreturn message", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI'm not sure why you'd want to do that, but here's an implementation:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return ''\n\nThat is the most terse answer I've ever seen to a programming question.\n\nI don't think I understand what it does, but I'm interested in how it works, so I'm going to play around with it a little:\n>>> import re\n>>> letters = ['a', 'b', 'c']\n>>> print letters.encode('This is a message')\n'T H K S K S C M G S C G G'\n>>> print letters.encode('test')\n'T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S T G S", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    case m of\n         u when m[0] < 32 or m[0] == 'y':\n            return 'u'\n          _ when m[0] > 32:\n             return '_'\n          s when m[0] =='s':\n             return m[1]\n          e when m[0] == 'e':\n             return m[2]\n          r when m[0] == 'r':\n             return m[3]\n          t when m[0] == 't':\n             return m[4]\n          i when m[0] == 'i", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nNow here is the big issue. The author of the blog post doesn't explain why he went ahead and used a recursive solution for this problem. It's a pretty obvious case of the \"Recursion Problem\", which basically says: \"When you don't know how to solve a problem, write a recursive function. It'll either solve it, or it won't, but either way you'll learn something.\"\n\nI would disagree. The author actually starts with a loop and, if I'm reading it correctly, points out the problems with the loop. Then, he looks at an obvious recursive solution and proves that it's correct. Finally, he solves the problem with a lazy solution that is not recursive.\n\nYes, but I don't see any explanation of why he went down that path instead of just using a loop. I don't think the author (or I) understand why you would use a recursive solution for this problem.\n\nBecause there's nothing in the assignment that says the solution can't be recursive.\n\nThe recursive solution to this problem is not the best solution.\n\nI agree. I'm only saying that the author doesn't have any reason to believe the assignment is looking for an iterative solution.\n\nThe", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    # This function is recursive.\n    func encode(message):\n    if message.startswith('[', ']', ']', ']', '!'):\n        return message\n    return encode(message.replace(chr(ord(x) % 26) for x in message))\n    # It is recursive.\n\n\"\"\"A simple function that swaps the case of all letters, replacing all vowels\nin the message with the letter that appears two places ahead of that\nvowel in the English alphabet.\"\"\"\nimport sys", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for letter in message:\n       if letter is vowel:\n           vowel = letter.upper()\n           vowel = vowel + 1\n           if vowel == 'a':\n               vowel = 'e'\n             else:\n               vowel = 'i'", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    i = 0\n    while i < len(message):\n        for c in message:\n           if c == 'a':\n                i = i + 1\n               message = message[i:]\n          else:\n                i = i - 1\n                message = message[i:]\n                message = message[i:]\n    return message</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return msg.lower().replace('[a-zA-Z]','[A-Za-z]').lower().replace('[A-Za-z]','[a-zA-Z]').replace('[A-Za-z]','[a-zA-Z]')\nI like the fact that the solution is so short, but the result is pretty ugly.\n\nSee also the one-liner from the article:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for ch in message:\n        if ch in ['a', 'e', 'i', 'o', 'u']:\n            ch = ch.lower()\n            ch = ch.upper()\n            ch = ch.lower()\n            ch = ch.upper()\n    return ch.replace('','')\n\nIf you don't mind, I'd like to make one slight modification:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for i in range(len(message)):\n        try:\n           message = lower(message.upper())\n             message = replace(message.upper(), \" \", message.lower())\n             message = encode(message)\n         except ValueError:\n            print(\"Message is invalid\")\n         return message\n\nNow you can use this like so:\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n>>> encode('test')\n'TGST'\n>>> encode('tHKS KS C MGSSCGG')\n'This is a message'\n\nEncoding rules\nSwap case of all letters\nReplace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet.\n\nMessage is invalid\n\nThe message is invalid, i.e. has no valid encoding, e.g.", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nThat's not a correct solution.\n\nIt is a correct solution, if it was a requirement to replace all letters with upper case, and to change all uppercase letters to lower case.\n\nYou would have a lowercase message after encoding with your code.\n\nI'm not sure why you're saying that, since your original answer was correct: the solution was to swap all the letters.\n\nYes, but the task was to swap all letters _and_ replace all vowels with the letter that appears two places ahead.\n\nExactly. Your implementation does that, in one step: it swaps all the letters, and replaces all the vowels with the letter that appears 2 places ahead of it in the alphabet.\n\nPerhaps I'm not understanding you, but to my mind, there is a clear difference between replacing all letters in a string and replacing _some_ letters in a string.\nFor example, the string \"THIS\" in the lower case, is not the same as the string \"THIS\" in the upper case.\n\nThis is not part of the problem specification.\n\nI agree that the task was not as clear as it could have been, but the OP gave a rather detailed description of the task", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return re.sub('[^A-Za-z0-9.-]','',message)</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    if ''' in message:\n        return message\n    if len(message) == 0:\n        return ''\n    chars = ''\n    for c in message:\n        chars = chars + c\n    if not isalpha(chars):\n        chars = chars.encode(chars)\n    return chars", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    #The function should swap all letters, and replace vowels with  #the letter that appears 2 places ahead of that vowel in the alphabet.\n    letters = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,\\\n    0]\n    #The function should support both upper and lowercase\n    #letters\n    cases = [upper,lower]\n    #Letters that end up in both cases should be treated as uppercase.\n    letters_in_both_cases = []\n    #Letters that end up in both cases should be treated as lowercase.\n    letters_in_both_cases_lower = []\n    #Letters that end up in neither case should be treated as uppercase.\n    letters_in_neither_case_lower = []\n    #Since there are 26 letters, we can use a dictionary instead of a list", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\n>>> encode(message)\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return message.encode(charset)\nYou need to return the encoded string, not just the code.\nYou probably want to consider doing a one-off pass over the strings (to get rid of leading spaces), and then do your encoding.\n\nIs it a problem that they both return strings?\n\nNo, but you have to read the function a little differently. You have to read the return statement first, and then if the code looks like it's going to return a string, you have to read the rest of the code that is below it, to see what type of string it's going to return.\nThat said, I've seen this style of function declaration before, and it's not something I've ever thought to complain about.\n\nthanks\n\nI understand why it's useful, but I don't understand how the function works. Is it just a function which takes a string and returns a string?\n\nI guess so. But if the original string was in ASCII, the output is in Base64.\n\nThe only \"encoding\" that it actually does is to convert lowercase letters to uppercase and to replace every vowel with the one that is 2 characters ahead.", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return string.lowercase.replace(message,", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nencoding = [\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    'A',\n    '", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nYou could use a dictionary that maps each letter to a number, then do a lookup to get the letter's replacement, then concatenate.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return [w for w in message.split() if w[0] not in w.encode()]\n\nOne of the most popular submissions to this site. I wouldn't be surprised if it eventually got a wikipedia entry.\n\nI came across this while trying to figure out how to solve a variation on the classic puzzle of \"a number which is the sum of the digits in another number, but is not divisible by any of the digits in that other number\".\nThe solution in this case is to encode the \"other\" number using the above function.\n\nHere is a variation that lets you have multiple messages for the same alphabet:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return ''.join(chr(message.lower()))", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return message.encode()</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    # encode the message\n    return ''.join(map(int, message.split(' ')))\n\nI'd have a problem with this answer because it doesn't tell me how it handles punctuation. The solution I posted does, by splitting the string on whitespace and then \"grep\"ing out the punctuation.\n\nI have the same problem with the answer I posted. Punctuation is very difficult to handle correctly in such a task.\n\nI found this the other day, which in my opinion is much better:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\nreturn message.replace(r\"a\",\"A\",r\"e\",\"E\",r\"i\",\"I\",r\"o\",\"O\",r\"u\",\"U\",r\"y\",\"y\",r\"I\",\"I\",r\"s\",\"s\",r\"c\",\"c\",r\"g\",\"g\",r\"s\",\"s\",r\"i\",\"i\",r\"t\",\"t\",r\"h\",\"h\",r\"a\",\"a\",r\"u\",\"u\",r\"e\",\"e\",r\"i\",\"i\",r\"o\",\"o\",r\"a\",\"a\",r\"n\",\"n\",r\"a\",\"a\",r\"t\",\"t\",r\"o\",\"o\",r\"e\",\"e\",r\"e\",\"e\",r\"e\",\"e\",r\"o\",\"o\",r\"a\",\"a\",r\"u\",\"u\",r\"t\",\"t\",r\"o\",\"o\",r\"i\",\"i\",r\"e\",\"e\",r\"i\",\"i\",r\"o\",\"o\",r\"e\",\"e\",r\"e\",\"e\",r\"e\",\"e\",r\"e\",\"e\")</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return ''.join(\n    '<'.join(map(lambda x: ord(x[0]), x), message.lower())\n    for x in message.lower()\n    )\n\nI'm not sure why you need to swap case, since the code you posted appears to do that. What's the actual requirement?\n\nAs per the post, the requirement is to \"swap case of all letters\". The code in the post is a start, but it's not very elegant or readable (IMO). I'm guessing OP is trying to find an algorithm to do the encoding.\n\nReadable code is more important to me than elegance. I'd be perfectly happy with the code posted, but I also have a lot of experience with this kind of thing.\n\nI find the code in the post hard to read. I'd be interested in seeing a more readable implementation. If you can provide one, I'd be very happy to see it.\n\nReplace _ with [^A-Za-z0-9]\nReplace _ with _\n\nHere is a nice one line solution:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI have to admit that this is not the most elegant solution, but it works.\n\nThis is an interesting, but perhaps not entirely appropriate use of Python.\nAs a rule, you should try to solve a problem in the most general way possible.\nPython is a good language for doing this in.\nYou are solving the problem of encoding a message in a very specific way (swapping case and replacing vowels).\nYou are not going to use the solution you came up with for anything else.\nIt would be better to use a language like Perl or Javascript to solve this problem.\nPython should be used for generalizing a solution, not for solving a specific problem.\n\nYou are correct that python isn't the right tool for the job. However, I like to think that python is a good language for teaching, and this solution is a good example of that.\nThe student has to learn about the data types, learn about how to do string manipulation, and how to use the built in string functions. The student also has to learn about regular expressions and how to use them to do some string manipulation. And the student also has to learn about how to use the built in sorting functions, how to compare two strings, and", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nfinally:\n    return ''.join(message)\n\nAnd then, to run it:\n\n>>> from codecs import *\n>>> msg = 'Hi'\n>>> print encode(msg)\n'HtHi'\n>>> print decode(msg)\n'Hi'\n\nThat is a pretty good example of a regular expression.\n\nOn a serious note, the author is trying to communicate something about regular expressions. Instead of producing a cryptic cipher, perhaps the author should have written something about the regular expression syntax.\n\nBut how will the author impress the young ladies if they don't know he's a hacker?\n\nI am sorry that it came across that way, I am not trying to impress anyone, I am just trying to make a point.\n\nI am guessing that the author is trying to show the reader how regexes work. It is not obvious at first sight that is what you are doing, but after writing a few of your own, it becomes very clear.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI'll give you a hint:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for letter in message:\n        if letter in lowercase:\n             swap case of letter\n              letter = upper()\n              if letter in (a,e,i,o,u):", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for i in range(message.count( 'a' )):\n        if message[i] == 'a':\n             break\n              message[i] = message[i] + 1\n    for j in range(message.count( 'b' )):\n         if message[j] == 'b':\n             break\n              message[j] = message[j] + 1\n    for k in range(message.count( 'c' )):\n         if message[k] == 'c':\n             break\n              message[k] = message[k] + 1\n    for l in range(message.count( 'd' )):\n         if message[l]", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nimport re", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return [message]\nI like how it's actually a good approach to the problem.\n\nIt'd be even better if the letter was swapped with the letter directly ahead of it. That way we could have:\n'test' => 'teST'\n'This is a message' => 'TIS IS MESSEG'\n...\n\nI like to think of myself as a novice to coding, but I always like to see coding puzzles like this. I'm still looking for my first job, and I want to be a better programmer, so I like to find these puzzles.\nIs there a list of these kinds of puzzles somewhere?", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    import re\n    message = \"This is a message\"\n    encoding = re.compile(r'(\\w+)\\w+=(\\w+)\\2+')\n    for c in message:\n        encoding.findall(c)   # return the encodings for all letters\n        encoded = encoding.group(1)\n        if encoding.find('a') == 'abc':\n            encoded = encoding.sub(c, 1, 2)\n        else:\n             encoded = encoding.sub(c, 1, -2)\n    return encoded\n\nIt'd be faster if you swapped the order of your loops; the first loop could just iterate over the message and return the encoded version of each character.\n\nYou're right, but I wanted to keep the solution simple.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nreturn 'test'.lower().replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('d', 'D').replace('e', 'E').replace('f', 'F').replace('g', 'G').replace('h', 'H').replace('i', 'I').replace('j', 'J').replace('k', 'K').replace('l', 'L').replace('m', 'M').replace('n', 'N').replace('o', 'O').replace('p', 'P').replace('q', 'Q').replace('r', 'R').replace('s', 'S').replace('t', 'T').replace('u', 'U').replace('v', 'V').replace('w', 'W').replace('x', 'X').replace('y', 'Y').replace('z', 'Z').replace('&', '&').replace('*', '*').replace('/', '/').replace('\\', '\\').replace('_', '_').replace('!', '!').replace('-', '-').replace('=', '=').replace('&', '&').replace('?',", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nSo what's the solution?\n\n_So what's the solution?_\nI solved it, and it seems to me that this is a rather interesting exercise. However, it is not the topic of this discussion group.\nThe point of this discussion group is to share knowledge about _programming_, and the solution is to write a program that does what the question asks.\nIf someone happens to want to share their solution here, that's fine, but that's not what this group is for.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nOr you could just do:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nIf you want to swap case of all letters, you can just use this:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for letter in message:\n       if letter == 'a':\n          letter = next(letter)\n          case = 0\n          else:\n           case = 1\n           next(letter)\n           letter = next(letter)\n           case += 1\n    return letter", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    if letter in message:\n       case letter in\n         'a': letter\n          'b': 'a'\n          'c': 'b'\n          'd': 'c'\n          'e': 'b'\n          'f': 'd'\n          'g': 'c'\n          'h': 'd'\n          'i': 'e'\n          'j': 'e'\n          'k': 'e'\n          'l': 'e'\n         'm': 'e'\n          'n': 'e'\n          'o': 'e'", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nencoding = [\n          'a': 'A',\n         'b': 'B',\n         'c': 'C',\n         'd': 'D',\n         'e': 'E',\n         'f': 'F',\n         'g': 'G',\n         'h': 'H',\n         'i': 'I',\n         'j': 'J',\n         'k': 'K',\n         'l': 'L',\n        'm': 'M',\n         'n': 'N',\n         'o': 'O',\n         'p': 'P',", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return string.lower()\n\ncase class String(letter: Char)", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    encoded = lambda m: re.sub(r'\\w+', '').lower().replace(r'\\w+', '')\n    encoded(message)\n    return encoded", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nThe encoding function is the heart of an early version of the Newspeak programming language, which is a development of the earlier Lingo language, which was based on the earlier GIMP Toolkit language.\n\nThe initial Newspeak language, which dates back to 1991, was called Newspeak 1.x and was implemented on the original Macintosh platform.  It used the Macintosh Toolbox for its GUI and icon system.  It was an interpreted programming language.  The later versions were called Newspeak 2.x, and ran on Unix systems.  The newer version used the Tk toolkit for its GUI and icon system, and was also a compiled language.\n\nThe Newspeak language was developed by Steve Wittens, and was intended to be a practical, real-world programming language, rather than the toy-like language that often characterizes first-year language projects.\n\nThe Newspeak programming language was used in the development of the original Newspeak word processor, the Newspeak Writer.  It was also the foundation for the Newspeak Network, an early Internet service provider and ISP.  The Newspeak language was a popular choice for educational programming in the early 1990s.\n\nAn article about the Newspeak programming language is available", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nHmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm.\nThis is actually a nice way to see if you can think in Python.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return lambda w: [w[0] for w in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' if 'abcdefghijklmnopqrstuvwxyz' in w]", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI was hoping to see something a bit more complex.\n\nWhy?\n\nBecause he posted something that is a trivial exercise in programming language theory. I was hoping for something more interesting.\n\nIf you are interested in the theory, there's much more interesting things. And if you are interested in the implementation of something this trivial, you are probably a programmer.\n\nI'm a programmer and I find this interesting.\n\nThis isn't programming. It's just an exercise in Python syntax.\n\nSo are all programming exercises.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nOutput:\n\nTGST\nThis is a message\ntHKS KS C MGSSCGG</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    def decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a\n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of \n    that vowel in the english alphabet.  Assume only letters.\n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n\nwith open('message.txt', 'r') as f:\n\ntext = f.read()\n\nfor i in range(1, len(text)):\n\nfor c in text:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nThis makes the first letter of each word lower-case.", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nimport codecs\n\nfor letter in range(len(message)):\n    if letter == 'a':\n         letter = 'a'\n    elif letter == 'a':\n         letter = 'A'\n    elif letter == 'e':\n         letter = 'e'\n    elif letter == 'e':\n         letter = 'E'\n    elif letter == 'i':\n         letter = 'i'\n    elif letter == 'i':\n         letter = 'I'\n    elif letter == 'o':\n         letter = 'o'\n    elif letter == 'o':\n         letter = 'O'\n    elif letter == 'u':\n         letter = 'u'\n    elif letter == 'u':", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nNice! I was thinking about writing something like that. I'll take a look at this code!\n\nCool!</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    for i in range(len(message)):\n        case=i\n        letter=i*2 + letter\n         letter=letter[0]\n         case=case*2\n         if letter[1] in [a-z]:\n             case=case*2\n             letter=letter[1]\n             case=case*2\n              else:\n              case=case\n              letter=letter\n              case=case*2\n    return \"\".join(u\"%s%s%s\" % (case, letter, case))", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return [message for letter in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=' if letter in message]\nI don't know about that. I'd say it's a lot more readable without the nested for loops and nested assignment statements.\n\nI find the following to be easier to read, but I'm not sure if it's actually better:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\nreturn message.lower()", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nIn Python 2.4, the function works as expected, but in 2.5, the\noutput is nonsense.\n\nI've tried a few things to fix it, but nothing seems to work.\n\nAny ideas?\n\nThanks,\n\nMatt</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nencode = lambda x:\n    x.replace('A', 'B').swapcase()\n    x.replace('a', 'b').swapcase()\n    x.replace('e', 'i').swapcase()\n    x.replace('e', 'i').swapcase()\n    x.replace('e', 'i').swapcase()\n    x.replace('e', 'i').swapcase()\n    x.replace('e', 'i').swapcase()\n    x.replace('e', 'i').swapcase()\n    x.replace('e', 'i').swapcase()\n    x.replace('e', 'i').swapcase()\n\nx = encode('This is a message')", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI'm confused about this one.\nThe output is:       'tHKS KS C MGSSCGG'\nThe ASCII code for 'H' is 'H' and the ASCII code for 'K' is 'K', so why are the 'H' and 'K' reversed?\n\nI think it's supposed to be:\n>>> encode('test') 'TGST'\nBut I'm still confused about how that's the output.\n\nI think it's something to do with the regexp:\nre = re.compile(r'(\\w+)?').match(message)\nNote that the regexp is patterned off of \"all letters\" and not \"only letters\" (as the example states), so it matches the space character.\n\nThis is from the \"Efficient String Processing in Python\" book. \n\nThe encoding string 'test' ends up as 'TGST' (no capital 'T') because the regex matcher matches a space character.\nIt looks like a bug to me (but I haven't read the book or the Python spec in a while).\n\nThey must have a reason for doing it. I've been through the", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nTo me the only real problem is the fact that you swap case of all letters. This is not something that will make a regular substitution cipher, since the letters could be in any case.\n\nConsider a message that contains the word \"square\", followed by the word \"fish\". If your method gets applied to it, it will become \"fIsh\", which may not be what you want.\n\nThe method is not terrible, but it is not a good substitution cipher either.\n\nJust some constructive criticism.\n\nYou could also consider that'square' and 'fish' are at least 3 letters, and that your algorithm may not be able to cope with such a long word.\n\nJust some more constructive criticism.\n\nI don't know of any way to change the case of all letters. You can swap them, but not change their case.\n\nI didn't want to limit the method to regular letters.\n\nThen I have to revise my suggestion.\n\nAnother suggestion I have is to encode the whole message in a single function. It would make things simpler and more readable. I also suggest that you use a dictionary to encode the words, and encode the dictionary itself in the same way. That way you", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    encoded = ''\n    case class Char(letter):\n        if letter == 'A':\n           encoded += 'E'\n        elif letter == 'E':\n           encoded += 'E'\n        elif letter == 'I':\n           encoded += 'E'\n        elif letter == 'O':\n           encoded += 'E'\n        elif letter == 'U':\n           encoded += 'E'\n        elif letter == 'Y':\n           encoded += 'E'\n        elif letter == 'Y':\n           encoded += 'E'\n        elif letter == 'I':", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nIt's certainly correct, and very interesting. But I wouldn't call it \"very nice\", except maybe by the standards of the Hacker News audience.\nThere are several problems with it:\n\\- It's not _that_ much better than a regular Python dictionary lookup:\n>>> import codecs\n>>> print codecs.encode('test')\n'TGST'\n>>> print codecs.decode(codecs.encode('test'))\n'test'\n\\- It doesn't consider the length of the message at all.\n\\- It's much slower than a regular Python dictionary lookup.\n\\- It uses a dictionary, instead of a C-style array.\n\\- It uses the Python dictionary interface, which is less efficient than the C-style array interface.\n\\- It uses code repetition: it writes the same code for a single line of input multiple times.\nFor example, it writes the code for the first two letters in the message (\"TTST\") five times, and it writes the code for the last letter in the message (\"T\") four times.\n\\- It's missing a few common cases.\nFor example, \"SST\" doesn't get properly encoded.\n\\- It doesn't work", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    \"\"\"encoding=\"abcdefghijklmnopqrstuvwxyz\"\n    for letter in range(len(message)-1):\n         letter = letter.lower()\n         letter = letter.upper()\n\n    message = message.replace(letter, letter + 1)\n\n    if message[len(message)-1] == '.':\n         return message\n\n_\"This is a message\"_ becomes _\"tHKS KS C MGSSCGG\"_.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nThe correct answer to this problem is to re-write the problem as a function that takes two arguments: an input string and an output string. It's important to note that this is not the same as the dictionary definition of \"encoding\" (which is a one-to-many function).\nThe solution is very similar to the second solution presented here:", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n       for c in message:\n         case c:\n           if c == 'a':\n                return encode(c)\n           else:\n                if c == 'a' or c == 'e':\n                    return encode(c, 2)\n             else:\n                     return encode(c, 1)", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nThis was an exercise from the Coursera course \"Programming Languages:\nan introduction to computer science using Python\"\n\nThis was my first crack at Python.  If you see an error, please let me\nknow.\n\nThanks,\n\nErik</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return ''.join(map(ord,message.upper()) for ord in range(26))\nI don't understand why this is not more popular.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\n>>> encode('This is a test')\n'tHKS KS C MGSSCGG'\n>>> encode('This is a message')\n'This is a message'\n>>> encode('testing')\n'tHKS KS C MGSSCGG'\n>>> encode('test')\n'Tgst'\n\nHere's a little python script that encodes a string and then decodes it.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nI hate to say it, but this is a very poor solution.\nFirst of all, if you're using an alphabet, then why are you using\ncase changes at all? What is the point of writing \"case of all\nletters\" if you're not even using letters?\nSecond, the code you've written does not do what it says. It does\nnot change the case of all letters, it changes the case of only\ncertain letters (I think it does this by taking a pre-existing\nalphabet and then swapping all letters with another in the same\nposition). That is, if I was to do this:\nencoded = encode(\"TGST\")\nthen encoded would come out as \"tHKS KS C MGSSCGG\". However, if I\nwere to do this:\nencoded = encode(\"Test\")\nthen encoded would come out as \"test\".\nI would hope that you would not want the latter to happen.\nFinally, what if I was to pass you a string that had a 'Z' or an\n'A' in it? What would you do? I'm pretty sure you would crash.\n\nI would hope that you would not want the latter to happen", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    letter_index = [0]\n    for char in message:\n        # Convert to lower case\n        if char == 'a':\n            if char == 'a':\n               letter_index.append(char)\n              else:\n               letter_index.append(char)\n               elif char == 'e':\n               if char == 'e':\n                  letter_index.append(char)\n                else:\n                 letter_index.append(char)\n                el", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n\nEncoding is the name of the operation that changes the case of all letters of the input text.  The previous code to swap the case of all letters of the text and replace all vowels in the text with the letter that appears 2 places ahead of that vowel in the english alphabet.\n\nThis is the code that swaps the case of all letters of the text and replaces all vowels in the text with the letter that appears 2 places ahead of that vowel in the english alphabet.\n\nThis is the code that swaps the case of all letters of the text and replaces all vowels in the text with the letter that appears 2 places ahead of that vowel in the english alphabet.</s>", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    return re.sub('[^A-Z]', '', message)", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\"\n    case=[]\n    for c in message:\n       case.append(ord(c) ^ ord(ord(c)))\n    return case", "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\" \"\"\""]]