[["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    for i in range(0,len(S)):\n       if S[i] in ('.', '?', '!'):\n          return i\nThat works. I like it.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nand even though it's obvious, the official docs don't say it:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(set(word) for word in S.split('.'))\n    or\n    return len(set(word) for word in S.split('?'))\n    or\n    return len(set(word) for word in S.split('!')\nThat's it? No way that would actually be faster than `len(set(word) for word in S.split('.'))`\nIt's not faster, it's more readable.\nIt's more readable because it's less concise.\nIt's more readable because it's not a single line and just adds more lines with no improvement in readability.\n> It's more readable because it's not a single line and just adds more lines with no improvement in readability.  I suppose if you're in a hurry, you're right.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nWhat's wrong with this? Is it not \"good\" Python?\n\nSince it's a dict, a more pythonic version would be to use one of the built-in functions:\n>>> word_counts = dict()\n>>> word_counts.update({'the': 1})\n>>> word_counts.update({'sky': 2})\n>>> word_counts.update({'weather': 2})\n>>> word_counts.update({'world': 1})\n>>> word_counts.update({'!': 1})\n>>> word_counts.update({'?': 1})\n>>> word_counts.update({'!': 1})\n>>> word_counts.update({'.': 1})\n>>> word_counts.update({'!': 1})\n>>> word_counts.update({'I': 1})\n>>> word_counts.update({'love': 1})\n>>> word_counts.update({'love': 1})\n>>> word_counts.update({'weather': 1})\n>>> word_counts.update({'!': 1})\n>>> word_counts.update({'", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split('.'))\n\nWhen I see code like that, I wonder if the author has any experience with the real world.\n\nWhat's wrong with it?\n\nIt is a simple task that they wrote a program to do, which is a classic sign of someone who has not worked on a real world project.\n\nHaving a hobby project doesn't make you a real programmer?\n\nOf course it does, but that's not what I said. The issue is that the author of this library has no experience working on a project that uses their code.\n\nThis is probably the most hilarious thing I've read all day.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n   \n    return len(S) == 1\n    # output: 0\n    # 0\n\nHere's an extension that can work for any noun, with an example:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n I agree that's what it does, but it's a poor choice of name. It implies that it's a function to check for boredom when it's actually a function to count how many boredom-words there are.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_seen(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\". Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_seen(\"Hello world\")\n    0\n    >>> is_bored_seen(\"The sky is blue. The sun is shining. I love this\n    weather\")\n    1\n    \"\"\"\n    return 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nWhat an odd algorithm. \"I\" can be a noun, a verb or an adjective.\n\nI'm pretty sure it can't be a verb.\n\n\"I\" can be a gerund in the infinitive:\n\"I am running.\"\n\nYou are right, of course.\n\nI wrote this, and I still don't really get it. I've done quite a few other text classification algorithms (sentiment analysis, HMM-based ones, recursive approaches, etc.) but this one just doesn't seem to make much sense.\nIt appears to be a simple string classifier, but it produces a lot of false negatives, e.g. the word \"the\" was classified as a boredom.\n\nI don't see any false negatives. A boredom is a sentence that starts with the word \"I\", so the string \"I the sky is blue\" is not a boredom.\n\nI'm sorry, I must have misunderstood the definition. I was under the impression that a boredom is a string that starts with \"I\", has at least two words in it, and has no punctuation. The first sentence in the linked article is a boredom, but the second is not.\n\nI'm", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(words) == len(words[0])\nWhat's wrong with `len(words[0])==1`?\n\nIf you only want one occurrence, but aren't too bothered about the number of times the word appears.\n\nIt's pretty clear that the author is using this function as a joke. I would consider this the most un- pythonic code I have ever seen.\n\nIt's humorous, but it's also a legitimate version of a type of algorithm.\n\nI see two flaws with this code.\n\\- The line", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return sum(not(is_upper(), s.upper()))\nI thought the joke was that is_bored() does a bunch of shit when all you want is to count the number of boredoms.\n\nI thought it was just about the silliness of not just using the string's length.\n\nIf you wanted to use the string's length, you'd be looking for the length of the string of boredom words, and counting the number of them. This is more efficient, as it will also return the number of words in the string, and not just the number of boredoms.\n\nSee also\n\nI've seen a lot of people on Hacker News talk about how the \"joke\" was that the author used a ton of code to solve a simple problem, but it seems like it's just a joke about the fact that the author really thought the solution was elegant.\n\nIs it the same with these kind of joke that if you don't get it, you're the one that's missing something?\n\nThe point of the joke is that is_bored() is a very simple function, yet its author considered it to be elegant, and the code sample is deliberately trying to be as", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nfrom random import randint, random", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(word) == 1\n    pass\nI think that code might be wrong.  I'd expect \"I'm bored\" to be a boredom, but it's not, according to your code.\n\nIt only checks that the first word is \"I\" and returns a value of 1 if that's true.\n\nAnd this is where I'd put a comment, if there weren't one already.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nHow many \"I\"s does it take to make a \"boredom\"?\n\nWith this number, you can avoid the \"boredom\" by not including the first \"I\".\n\nI find it amusing that you're using one of the most common monads for this.\n\nI guess the author is a Java programmer.\n\nI was thinking about this yesterday, but I don't see why you would use a monad over a list.\n\nWhy not?\n\nI have no idea what this is for, or why you would use a monad here instead of a list.\n\nIt's a useful thought exercise.\n\nA more useful thought exercise would be to think about when you'd actually use this...\n\nI think this is a cute example.\n\nThis is the classic IO monad example.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_count(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_count(\"Hello world\")\n    0\n    >>> is_bored_count(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def is_word(S):\n    \"\"\"\n    You'll be given a string, and your task is to find out if it's a word.\n    For example:\n    >>> is_word(\"banana\")\n    True\n    >>> is_word(\"apple\")\n    False\n    \"\"\"\n    def is_word_count(S):\n    \"\"\"\n    You", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nIt looks like it would be impossible to get 1 as a result: \"The sky is blue. The sun is shining. I love this weather\" doesn't contain a sentence that begins with \"I\".\n\nThat's the joke :)\n\nI'm pretty sure it would have been better to just return 1.\n\nThat's not the point. The point is that it's a simple and amusing test that shows that the programmer _actually bothered_ to use the test suite.\n\nOf course, it's a very simple and very useless test.\n\nI think the point is to show that the programmer _actually bothered_ to write a test.\n\nAnd I think the point is that the test is useless and the programmer would have been better off not bothering to write it.\n\nSo what, it's a small test and a lot of people here got a laugh out of it.\n\nThis is a great way to ensure that you have tests. Some of the tests I write are like that, where they are more of a joke or a trick. I still write them though.\n\nThis reminds me of a somewhat related joke. I always tell my new programmer friends, \"Don't be afraid to run every test,", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if '?' in string:\n       return 1\n    else:\n       return 0\nDoesn't the English language contain more than one word that starts with \"I\"?\nNo it doesn't.  The word \"I\" is the only word that starts with \"I\" in English.\nPlease make this a feature request on the English language.\nActually the word I is just a contraction of the word me.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nfrom itertools import chain", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 1\nYou really shouldn't pass a string to an integer function like that.\n\nThis is not an integer function. It's a string to integer function.\n\nYes, and I should have been more explicit: passing a string to a function that returns an integer is generally a bad idea, because the function may not be written to handle strings.\nThat's why this function should be written like this:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    \"\"\"\n           def is_bored(S):", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def count_boredoms(S):\n    \"\"\"\n    Return the number of boredoms in the string S.\n    \"\"\"\n    count = 0\n    for word in S:\n       if word in ['I', 'am', 'bored']:\n          count += 1\n    return count\n\nIs this really so complicated?\n\nIt is not necessary to use a function for this. This is a very simple case of regular expression.\n\nIf you don't know regular expressions, they can be scary, so I don't blame you for thinking that.\n\nI know regular expressions. But in case of this problem, they are more complicated than a function.\n\nThat's not true. The regular expression is one line (count_boredoms), and the function is at least 4 lines long.\n\nThat's not the point. The point is that it's easier to read and understand a line of code than a regular expression.\n\nA function is not a line of code.\n\nI didn't say it was.\n\nI'm not trying", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    words = S.split('.')\n    for word in words:\n        if word not in list('I', 'it', 'is', 'was', 'were', 'that'):\n           return 0\n        return 1\n\nThis should return 1 for the first line, and 0 for the second line.\n\nAnother way to do this is to use nltk's stopwords module.\n\nimport nltk\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n        def is_bored(S):\n         if len(S) == 0:\n           return 0\n         return len(S) == 1 and S.startswith('I')\n\nI think we should just use the Unix line termination convention to enforce indentation.\n\nI'm not sure that's the best approach.\n\nI think it's a good approach, but it'd have to be done carefully.\nYou could argue that the point of indentation is to make it easier to visually scan code. But that's true of the code, not the source text.\nSo you'd have to make sure that indentation didn't interfere with the code you're trying to scan, which would probably require a hybrid approach: a hybrid of the line-based and the indentation-based approach.\n\nMy first language was C. I think that's a big part of why I hate indentation so much: it's so inconsistent, especially when it comes to code blocks. There's no good way to describe the rules for what goes in a function and what doesn't.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(filter(s, 'I')) == 0\n\nThat should be more readable as:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # A simple way to identify \"boredoms\".\n    # We have a list of keywords, and we search each word in the text.\n    # If a keyword is found, add 1 to the counter.\n    # The counter will be 0 for a blank text.\n    words = [ \"I\", \"am\", \"bored\", \"by\", \"this\", \"sentence\"]\n\n    counter = 0\n\n    for i, word in enumerate(words):\n        if word in sentence:\n           counter = counter + 1\n         break\n\n    return counter\n\nI've got to say, I'm not so sure that's much of a challenge. The challenge seems\nto be mostly just parsing the sentence. It's not much of a challenge to\nparse text, but the problem becomes far easier when the text is actually\nsimple.\n\nYou could add more difficult sentences, like \"The sky is blue. The sun is\nshining. I love this weather. I hate this weather.\", or \"I am", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI'd be bored if I had to read that boring algorithm.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) > 0\nThat's a nice and easy way to do it. I would have made a method with \"boredom\" as a parameter, but that's just me.\n\nWell, I did this a few years back, but it was a 3-day exercise.\n1) The classifier can be anything you want. The one I used was a decision tree.\n2) Don't use any learning algorithms. No neural nets, SVM, etc.\n3) No dictionary of any sort. That's cheating.\n4) Count the number of times each word occurs in a sentence.\n5) From that data, do some feature extraction, like removing numbers and symbols.\n6) Treat each word as a feature and feed them into the classifier. The classifier is a decision tree.\n7) The classifier can have multiple outputs. The one I used had output for \"boredom\" and \"not boredom\".\n8) For each output, define a function to count the number of times it occurs.\n9) Apply your classifier to the sentence and count the number of times it returns each of the outputs.\n\nWhat if the word being tested", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    count = 0\n    for i in S:\n       count += 1\n    return count\n\nis_bored should be is_bored_in_string</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(string.split(S[:-1], \"\\s+\")[:-1])\nWhat's the point of `string.split(S[:-1], \"\\s+\")[:-1]`?\n\nSince strings can contain control characters or newlines.\n\nI find myself doing a lot of work to do just that... It would be nice if the Python stdlib had a string type with all the extra character-handling that other languages have.\n\nThere's PyString_FromEncoded() and PyString_AsEncoded() that can be used.\n\nPython is a language for writing code, not for writing prose.\n\nThat's like saying C is a language for writing assembly. There's a layer of abstraction that can be skipped.\n\nIt was sort of a joke, but the joke is also based on a truth that Python is a language of many different languages.\n\nI can see where you're coming from, but I think it's a bit much to say that Python is a language of many languages.\n\nPython is a language of many programming paradigms.\n\nThat's a more accurate statement. Thanks.\n\nUn-boredom", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\nThat is really cool!  I would love to see the code you used to generate that output.\n\nI don't really have any code for it. I'm not a programmer or anything. I'm just trying to learn to program for fun. I thought this would be a good project to start with.\n\nI'm curious, what is this for?\n\nRight now, I'm just trying to learn how to program. I thought this would be a fun project to start with. I would like to make it a little better though, and maybe make it into a browser plugin so you can use it on any webpage.\n\nI would love to be able to write a script that says \"That was boring\" whenever someone starts talking about a boring subject.\n\nThat would be a good use for it. I'm hoping to make it a little more usable, and maybe make it into a browser plugin so you can use it on any webpage.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if len(S) > 0:\n        return len(S)\n    return 0\n    # remove punctuation\n    for word in S:\n        if word in ['.', '?', '!']:\n           yield None\n         else:\n            # a sentence\n              yield word\n\nIt's also possible to do this with regular expressions.\n\nI'm having trouble parsing the \"I\" in this sentence:\n\"The sky is blue. The sun is shining. I love this weather\"\n\n_The sky is blue._ is a sentence. _The sun is shining._ is a sentence.\n_I love this weather_ is a sentence.\n\nBut what about _I love this weather._?\n\nNo, because in that sentence \"I\" is not the first word. The first word must be \"I\", not \"love\", in order for the sentence to be boring.\n\nThis was an", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(set(word.lower() for word in wordlist.lower() if word in wordlist.lower()))\nI'm going to start using \"boredom\" as a unit of measurement.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI would be surprised if that was enough to produce a reliable result. For example, if I was doing something and bored I could say something like \"This is boring and slow\", or \"This is boring, I wish I could do something\". I'm not sure which of those two would be considered as boredom, if either.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    words = []\n    counts = []\n    counts += 1\n    words.append(\"I\")\n    while len(words)!= len(S):\n         if word in S:\n             words.append(word)\n            counts += 1\n            counts = counts + 1\n           else:\n             counts = counts + 1\n            if not isinstance(word, list):\n               word = word.lower()\n               if word in words:\n                  words.append(word)\n                else:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    pass\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    for word in S:\n       if word[0] == 'I':\n         return 1\n       pass\n      return 0\nBut what if the word is \"I'm\" or \"I'm sure\" or \"I'm thinking\"?</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\nThat should be           def is_bored(s):\nAlso, heh.\n\nIt's a bit surprising that the author didn't use this as a segway into some more interesting discussion of word counts. For example, with a bit of effort you can remove any stop words (like articles, prepositions, etc.), or do a stem-merge with a corpus to remove the one-letter words.\n\nFor anyone interested in looking into the statistical side of word counts, I highly recommend this lecture given by Paulos (author of \"Innumeracy\"). He goes into some detail about how to take word frequency counts and turn them into estimates of the probability of a word occurring.\n\nI find that I often use a similar function in my shell scripts.\nWhen checking in, I often use:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is very cool. It feels very much like the \"human factor\" of running a business.\n\nThanks! I wanted to have some fun with it. I'm also working on a \"zombie- apocalypse\" version of it: is_zombie(S).\n\nNeat idea! I love the fact that you're doing this with Python.\n\nThanks!</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    I don't get it. What is the point?\n\nIt's a joke.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    from collections import Counter\n    from functools import partial\n    def is_bored(S):\n    \"\"\"\n    Given a string, return the number of times the string starts with\n    'I' or 'I am' or 'I believe' or 'I think' or 'I would like' or\n    'I could' or 'I want' or 'I would' or 'I did' or 'I thought' or\n    'I wish' or 'I wonder' or 'I am going' or 'I want to' or 'I could\n    have' or 'I might' or 'I will' or 'I must' or 'I think I' or 'I see'\n    or 'I feel' or 'I doubt' or 'I am not sure' or 'I think that' or\n    'I would hate' or 'I could care less' or 'I am sorry' or 'I love\n    you'\n    \"\"\"\n    start = \"\"\n    while not S:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_boring(sentence):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boringnesses. A boringness is a sentence that is either boring or\n    contains the word \"I\".\n   \n    For example:\n    >>> is_boring(\"This is boring\")\n    0\n    >>> is_boring(\"I find this boring\")\n    0\n    >>> is_boring(\"I am bored\")\n    1\n    \"\"\"\n    def is_chilling(sentence):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of chillings. A chilling is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_chilling(\"Hello world\")\n    0\n    >>> is", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if S.startswith('I'):\n    # Disallow boring sentences starting with the letter \"I\"\n    return 0\n    else:\n    # Disallow boring sentences starting with the letter \"I\"\n    return len(S) - len(['.', '?', '!'])\n\nThis is not a good solution, because a single word like \"I\" can appear in many different kinds of sentences.\n\nI'm sorry for the poor presentation.\nWhat I was actually trying to do was count all the boring sentences.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\nJust kidding, I got it now. Thanks for your answer, I really appreciate it.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThe last line in the file is:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThank you for this. It really cheered up my morning.\n\nThank you for this. It really made me laugh.\n\nI think the definition of 'boredom' is a little off.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    words = set(set(word_list))\n    words = set(set(S.split()))\n    words = set(set(S.strip().split()))\n    words = set(set(S.strip().split(',')))\n    words = set(set(S.strip().split('.')))\n    words = set(set(S.strip().split('?', '?')))\n    words = set(set(S.strip().split('!', '!')))\n    words = set(set(S.strip().split('-', '-')))\n    words = set(set(S.strip().split(',')))\n    words = set(set(S.strip().split('!')))\n    words = set(set(S.strip().split('!', '!')))\n    words = set(set(S.strip().split('!', '!', '!', '!', '!', '!', '!', '!', '!')))\n    words = set(set(", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 1\n    #booyaa\nAs a non-programmer, I like this because it's a problem I have solved before with a combination of a counter and a dictionary.\n\nThis is not really a surprise.\n\nSomeone should write a script that writes is_bored() and then runs it on itself.\n\nIs there a way to get this to work on a list of words rather than a string of words?\n\nI'm also interested. The is_bored() function would be pretty trivial, but I'm more interested in the \"output every word in the dictionary\" function.\n\nI had an idea for a script that would look for any given phrase, but it wouldn't be as clean as this.\n\nNeat.\nI think this might also be a nice way of checking for plagiarism.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_x(x):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_x(\"Hello world\")\n    0\n    >>> is_bored_x(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(x) == 2\n\nI see what you did there.\n\nMy immediate thought upon reading the title was that this was another\niteration of the \"lol, Python has no boolean type\" joke.\n\nIt does, though. The problem is that booleans are unboxed and unpacked.\n\nThat's not a problem, that's just the way it is.\n\nActually, it is a problem for people trying to use it as a language for \"real", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n I call shenanigans.  There should be a \"The sky is blue. I love this\n weather\" to count two boredoms.\nI'm calling shenanigans on this comment, as it has a single \"I\" but no\n\"I love this weather\".</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI know that this is meant to be funny, but it's a very misleading description of the purpose of the function.\n\nDid you have to google to find out what the function did?\nIt's a joke.\n\nIf the joke is that it's a useless function, it's a pretty bad joke.\n\nThe joke is that it's a useless joke.\n\nWouldn't it be a little more useful if it used a dictionary of synonyms for \"I\", so \"I\" wouldn't be required at all?\n\nDepends on the purpose of the function. If it's for a language learning app or something, then it might be useful to keep \"I\" as a keyword.\n\nI used to do a lot of Text Processing in C/C++, and this is exactly how we counted for repetition. I usually ended up using an array of booleans and looping through it.\n\nThat's a really cool idea. Do you happen to have any code for that?\n\nI'm afraid not. It's been years, and I don't have any of the source code for it.\n\nThat's ok. I was just curious if it was something I could implement in PHP", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(set(x for x in S if x not in set('I'm', 'I', 'I'm','me', 'I'm','me'))\n    and set(x for x in S if x not in set(('I like', 'I'm happy', 'I'm sad', 'I'm tired'))))\nThis is, by far, the best comment I've read on Reddit.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    count = 0\n    for c in S:\n        if c == 'I':\n           count = count + 1\n    return count", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(sentence.split(\" \")) == len(set(sentence))\n    if set(sentence):\n        return len(set(sentence)) == len(sentence)\nI like this. It's a bit weird with the \"I love this weather\" since there's no I in it, but otherwise it works really well.\n\nI would probably use a (naive) regular expression to count instances of the word 'I'.\n\nI'd use a blacklist of words and then use one or two regexes to match the start and end of the sentence. If the sentence starts with one of the banned words, it's not boring. If it ends with one of the banned words, it's not boring.\n\nI used a similar idea to generate an entire book of fake but convincing Star Trek fan-fic.\nI got some of my friends to give me a short list of words that they associate with Star Trek, including things like \"artificial\", \"utopia\", \"transporter\", \"warp\", \"phaser\", \"Klingon\", \"Federation\", \"Vulcan\", etc. I then went through and", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def count(S):\n    \"\"\"\n    This function is the core of the solution, it will be called with\n    a string of boredom, and will return a count of how many boredom's\n    have been found.\n    \"\"\"\n    for line in S:\n         if line.startswith('I'):\n            # If a boredom found, return its count\n             # if not, then return 0\n          return count(line)\n    return 0\n    # ------------------------------------------------------\n    # The function that will build the string of words\n    def make_boredom_string(S):\n    \"\"\"\n    This function takes an input string and replaces the letters 'I' and\n   'm' with 'b', and the rest of the string with 'ing'.\n    \"\"\"\n    letters = [s.lower() for s in S]", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    def is_bored_2(S):\n    \"\"\"\n    Same as is_bored, but it also counts the number of sentences containing\n    a number.\n    \"\"\"\n\n    def is_bored_3(S):\n    \"\"\"\n    Same as is_bored, but it also counts the number of sentences containing\n    a logical operator.\n    \"\"\"\n\n    def is_bored_4(S):\n    \"\"\"\n    Same as is_bored, but it also counts the number of sentences containing\n    a question mark.\n    \"\"\"\n\n    def is_bored_5(S):\n    \"\"\"\n    Same as is_bored, but it also counts the number of sentences containing\n    a period.\n    \"\"\"\n\n    def is_bored_6(S):\n    \"\"\"\n    Same as is_bored, but it also counts the number of sentences containing\n    a hyphen.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_one_time_only(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms, and to keep track of whether you've seen them before.\n    Boredoms are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_one_time_only(\"Hello world\")\n    0\n    >>> is_bored_one_time_only(\"The sky is blue. The sun is shining. I love this weather\")\n    0\n    >>> is_bored_one_time_only(\"Hello world, I have seen you before\")\n    1\n    \"\"\"\n    def is_bored_twice_or_more(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms, and to keep track of whether you've seen them before.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI thought that was the one, but it was throwing off a non-zero error.\n\nI ended up doing it with a regular expression", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI love this weather.\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n1\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n1\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather.\").strip()\n\"The sky is blue. The sun is shining. I love this weather.\"\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather.\").strip().strip()\n\"The sky is blue. The sun is shining. I love this weather.\"\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather.\").strip().strip().strip()\n\"The sky is blue. The sun is shining. I love this weather.\"\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    def is_bored_s(S):\n    \"\"\"\n    Same as is_bored(), but for sentences.\n    \"\"\"\n    return S.replace('I', '')", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    count=0\n        for word in S:\n           if word in 'I':\n              count += 1\n             else:\n                count = count + 1\n           return count\n\nThis is the same problem as https://news.ycombinator.com/item?id=16883523\n\nYeah, I made it before I had seen that post.\n\nI find it a bit confusing that you're using 'x' for multiplication. Not a big deal, but I'd make it a little more clear what you're doing.\nAlso, the comments in the last few lines aren't necessary.\n\nYeah, I was considering just removing those.\nx is a convention I use from when I used to program in other languages, and I don't really see a problem with it. I suppose I could use \"*\", or maybe even \"+\".\n\nI'd go with \"*\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI think you meant \"I am bored\", not \"I am boredoms\".</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) > 0\n\nIt's not clear to me if the author is using \"I\" as a keyword or not.\n\nMe either.\n\nAs a side note, anyone who is interested in Natural Language Processing should check out the book \"Machine Learning for Natural Language Processing\" by Terry Sejnowski and Francois Chollet. The book is excellent for getting you into the field and is packed with a ton of state of the art knowledge.\n\nThe last version of this post was a bit more interesting.\n\nThis is a classic example of why text classification is much harder than it sounds.\n\nI tried it on the first few sentences of the book 'The God Delusion' and it came up with this result:\n\n_The God Delusion: The God Delusion_\nThe God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God Delusion: The God", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\nreturn len(set(s.split() for s in s.split(\".\")[1:])) > 0\n\nOn further consideration, this doesn't seem to work if the first word of a sentence is \"The\", as in:\n\"The sky is blue. The sun is shining. I love this weather.\"\nThe script returns 1.\n\nAre you sure? It shouldn't work that way.\n\nYes, I'm sure.\n\nMore seriously, I just realised that the OP's function should really be written:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # An example of a boredom.\n    # Outputs: \"I am bored\"\n    is_bored(\"I am bored.\")\n    # Outputs: \"Hello world\"\n    is_bored(\"Hello world.\")\n    # Outputs: \"The sky is blue. The sun is shining. I love this weather\"\n    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n\nThe source code is on GitHub: https://github.com/cstump/boredom\n\nNice!\n\nthe source code is so simple\n\nYeah, but it's also funny!</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(str):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    if len(str) == 1:\n       return 0\n    else:\n       return len(str) - 1\nThis can be useful when you don't have a proper range or need to parse a string with variable length.\nI don't understand this. Why wouldn't you just return len(str) - 1?\n\nBecause it's not always valid to do so.\nIf it's an empty string, it'll throw an exception. If it's a", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n        def is_bored(self, text):\n          \"\"\"\n          A word is counted as bored only if it starts with 'I'.\n           Delimited by '.', '?' or '!'\n           \"\"\"\n          count = 0\n          if self.test_fail(\".\"):\n            count = 1\n            return \"Boredom found.\"\n          else:\n            count = 0\n           for token in text:\n              if token == \"I\":\n                 count += 1\n                return \"B", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\nreturn len(words) - len(words[0:])\nFor the paranoid out there:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(sentence) == 0\n    def is_happy(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of happines. A happiness is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_happy(\"Hello world\")\n    0\n    >>> is_happy(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(sentence) == 0\n\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\n>>> is_happy(\"The sky is blue. The sun is shining. I love this weather\")\n0\n\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n0\n\n>>> is_happy(\"The sky is blue. The sun is shining. I love", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_count(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_count(\"Hello world\")\n    0\n    >>> is_bored_count(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    from collections import Counter\n    s = ['']\n    for w in S:\n       s += w.replace(\"I\", \"!\", \"?\")\n       Counter().increment(s)\n    return s\n    def is_bored_count_regex(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 2 and S[0]!= 'I'\n\nThe author missed the opportunity to make this a recursive function:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return (len(sentences) > 0) or (sentences[0] in ['I', 'am', 'it', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being', 'are', 'am', 'is', 'was', 'were', 'be', 'being',", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI'd like to see the version of this program that finds the number of \"I am\"s, \"I have\"s, \"I like\"s, \"I don't like\"s, \"I go\"s, \"I say\"s, \"I am going to\"s, \"I might\"s, \"I should\"s, \"I might have to\"s, \"I could\"s, \"I might have to\"s, \"I have to\"s, \"I don't know\"s, \"I can't\"s, \"I can't get\"s, \"I can't go\"s, \"I can't go back\"s, \"I can't speak\"s, \"I can't think\"s, \"I can't hear\"s, \"I can't see\"s, \"I can't hear you\"s, \"I can't see you\"s, \"I can't see you\"s, \"I can't hear you\"s, \"I can't hear you\"s, \"I can't see you\"s, \"I can't see you\"s, \"I can't hear you\"s, \"I can't hear you\"s", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_not_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of not-boredoms. A not-boredom is a sentence that starts with the word\n    \"not\". Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_not_bored(\"I am not bored.\")\n    0\n    >>> is_not_bored(\"Hello world!\")\n    0\n    >>> is_not_bored(\"The sky is blue. The sun is shining. I love this weather!\")\n    1\n    \"\"\"\n    return 0 if not is_bored(S) or not is_not_bored(S)\n\nYou can tell by the comments that it's going to be fun...\nI guess this sort of thing might have been useful in the context of a logic class. I've never seen it used in a practical problem.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == len(boredoms(s))\nWhat's a boredom?\n\nA sentence starting with \"I\" in Python is a block, in which the \"I\" is the \"self\" argument of the block. For example:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is a bad example: \"The sky is blue. The sun is shining. I love this weather\" isn't a boredom. If it were, then \"The sky is blue\" would also be a boredom. It isn't.\nAlso, it is very easy to write a script which will count the number of Boredoms. You can do it with a regex, or with a dictionary and a for loop.\n\nIf it were, then \"The sky is blue\" would also be a boredom.\nNo, because \"The sky is blue\" doesn't start with \"I\". It does end with one, though. So it's just a regular boring sentence.\n\nPeeve: in the examples, the '.', '?' and '!' are used to delimit sentences. But they are also part of words.\nFor example:\n\"The '!' moon!\"\n\"The '!'!!\"\nshould have both been marked as boring.\n\nMy intuition says that boringness is more than just an exact string match. Otherwise, you'd be able to find the first occurrence of \"I\" in the input and just use that, which would be boring.\n\nYou could make it more interesting by", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    n = int(input(\"Please enter the number of boredoms you wish to count\"))\n    for word in S:\n       if word.startswith(n):\n         print(\"Boredom detected at position %s\" % word)\n         n -= 1\n    return n\n\nIt's not perfect. For example, \"I am bored\" returns 0, \"The sky is blue. The sun is shining. I love this weather\" returns 1.\n\nI was hoping to make it a bit more complex, but my brain was getting tired. :)\n\nWhat would be the use of this?\n\nI just think it's a fun exercise. And it's a good way to start learning python.\n\nNo, I mean, what is the use of the program? How does this help anybody? I don't get it.\n\nTheoretically, you could put it in front of a search engine and it would pick out pages that contained the word \"bored\" and the word \"I\".\n\nI think this would be much more interesting if it counted the number", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n`is_bored` looks like a good name to me. It's on-topic, a known quantity, and not a pure function name.\n\nIt's a verb.\n\nI think you should always do this. I'm guilty of not doing it myself at times, but I always regret it.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(set(s.strip().split('.')[0]))", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    for word in S:\n       if word in \"I\":\n         return 1\n      else:\n         return 0\n    return len(S) - 1\n\nThis is probably a very stupid question, but what is the advantage of a variation on this code over a for-loop?\n\nA for-loop would work, but it would be less readable. Also, this code makes it easy to", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nYou misspelled \"boredom\".\n\nI also would have expected some kind of sanity check to make sure that I wasn't inputting something completely insane and expecting it to return sane values.\n\nIt's unlikely to ever return sane values, I think that's the joke.\n\nSo there's a one in two chance of getting a valid result and a one in two chance of getting a hilariously wrong result. I think that's a feature, not a bug.\n\nAnd to get a hilariously wrong result, you must first get a valid result, and then you must try to abuse the result.\n\nNo, the program is buggy. You can give it valid input and it still generates garbage.\n\nI think this is a good example of how one can take a simple idea and make it a lot more complicated than necessary.\n\nMy first reaction to the title was \"I'm not sure that's a good idea\", but after actually reading the code I was delighted. I'm sure I've done the same thing myself!\n\nThat's pretty cool. It also makes me think about how a boredom detector could be implemented by a computer - what sorts of algorithms you'd use.\n\nHere's one", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is a very silly example, and it would be hard to write an algorithm that would correctly count boredoms. But the gist is this: you can take an input of any string and extract the parts that are similar to one another.\n\nWhat if we're given a sentence instead of a list of words?", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    return len(sentences(S))\n\nThis may be a nitpick, but if the language doesn't have a standard\nregex implementation, this function will be useless.\n\nAnd for those who don't know: Python's regex engine is not standard. It's\na third-party library called re.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    word = S.lower()\n    for word in word.lower():\n       if word == 'I':\n          return 1\n       else:\n          return 0\n    return 0\n\nI'm not sure why this is a thing, but it is interesting to see how many people have tried to write \"Hello World\" as a Python program.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\nI'm not sure if this is intended as a joke, but isn't this a terrible test of boredom? For one thing, the third sentence is a grammatically correct sentence.\n\n>The sun is shining.\nThe sun is a mass of incandescent gas, a gigantic nuclear furnace.\nIs that really grammatically correct? To me it sounds like it has a lot of noun-adjective agreement problems.\nI guess that's a matter of taste though.\n\nNo, it isn't. You're right, it has a lot of grammar problems. But the sentiment is fine.\n\nMight be a bad idea to name your project after a well known open source project.\nhttps://github.com/tensorflow/tensorflow\n\nIn that vein, I always liked the name for MongoDB.\n\nI am not a native speaker, but I am fairly certain that \"tensor\" is a common term in mathematics that predates the software project.\n\nIt is, but \"tensorflow\" isn't just a random word, it's a clever pun.\n\nWhen I first heard about Tensorflow I thought it was a play on \"tensor\", I was pretty disappointed to", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nIt's way too easy to add extra '!' and '?' characters. It would be fun if this actually worked as advertised.\n\nAre you sure? I just tried a bunch of things and it seems to work as advertised.\n\nI mean that you can make it return a wrong result by adding extra punctuation.\n\nI added a count and it seems to have fixed it.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\nI'm not sure if you're aware that this will not work for other languages.\nIf you're writing a code generator that is meant to be used on many different languages, you should probably be more specific.\n\nI've written code for several different languages, and the example sentence only works in English. I'm not sure it's a good idea to even test it with other languages.\n\nThis is true, but the comments in the code don't indicate that this is the case.\n\nFirst time I've seen the term 'grammar' used for this kind of thing. I've always known it as'syntax'.\n\nGrammar (in a programming sense) is actually a superset of syntax, in the sense that it's a description of the _form_ of the language. There are also analyses of the meaning of the language, in the form of semantics, which is also a superset of grammar, in the sense that it's a description of the _meaning_ of the language. The two are not mutually exclusive.\n\nThe root of the word is \"grammatical\", so it's fair to say it's about form.\n\nIt's also fair to say it's about meaning. In fact", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == 1\n\nwhy not just:\nfor word in s:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_str(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_str(\"Hello world\")\n    0\n    >>> is_bored_str(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    i = 0\n    for line in S:\n       if not line.startswith(\"I\"):\n         break\n       i += 1\n    return i\n\nSee also\nBoredom (psychology)</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s)", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI don't get it.\n\n\"Hello World\" is a statement.\n\"The sky is blue. The sun is shining. I love this weather\" is a question.\nThe Python script tests to see if the string starts with an \"I\" and if it does, it returns 1. If the string doesn't start with an \"I\", it returns 0.\n\nThen it should be called is_question() or is_statement()\n\nIt's called is_boredom() because the \"I\" means \"I am bored\" and the definition of \"boredom\" is a sentence that starts with \"I am\".\n\nBut the \"I\" also means \"I\" in a statement.\n\nYes, but Python code is not generally written with English grammar in mind. Python is a language designed by mathematicians, and the word \"I\" usually denotes a variable or function.\n\nBut that's confusing.\n\nProbably not for the people who wrote the code, as they're probably all used to the convention.\n\nI am bored with this conversation.\n\nThat's not a complete sentence, and therefore not a boredom.\n\nI see.\n\nIf you're curious about", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nimport sys\n    def is_bored(word_list):\n    #\n    while word_list:\n         if word in word_list:\n            return 1\n         else:\n            return 0\n    return 0\n\nI tried the following:\nis_bored(\"Hello world\")\nis_bored(\"The sky is blue. The sun is shining. I love this weather\")\nis_bored(\"How are you?\")\nAnd I got 0 on all three.\n\nTry the following:\nis_bored(\"Hello world\")", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(s):\n    \"\"\"\n    A boredom starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'\n    \"\"\"\n    n = len(s)\n    n += 1\n    for i in s:\n        if i in ['.', '?', '!']:\n           continue\n         if i == 'I':\n            return n\n    return n\n\nHave you tried it? Have you discovered anything else? Do you have an idea how this problem can be solved?\n\nIf you have an idea, please let us know about it.\n\nTo make your job easier, we have created a web service to solve this kind of task. Please see http://www.bored.kz/.\n\nFor example, if you have an email address like daniel.gromov@mail.ru, you can type in the address bar: http://www.bored", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if S.startswith('I'):\n    return S.count('.')\n    else:\n    return S.count('?')\n    else:\n    return S.count('!')</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    \"\"\"\n    def is_bored(S):\n    \"\"\"\n    Return True iff S is a boredom.\n    \"\"\"\n    return f\"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n       return len(s.split('.')) == 1\nNote: The correct answer is actually \"0\", since \"The sky is blue. The sun is shining.\" is not a sentence.\n\nI know that the correct answer is actually \"0\".\nBut since I am not a native speaker I didn't know how to say \"the sky is blue\" in one word.\n\nIt's still grammatically incorrect even if you do use one word.\n\nThe sky is blue is an acceptable sentence. The sky is blue is not a sentence.\n\nNo, that's still incorrect. The sky is blue is not a sentence because it does not constitute an independent clause.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) > 0\n     This one is easily found with \"grep bored\" and a little bit of quick typing\nNot bad.  Here's my attempt:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    from collections import Counter\n    from collections import OrderedDict\n    from collections import defaultdict\n    def count_boredoms(s):\n    s = s.lower().strip()\n    count_boredoms_words = Counter()\n    for w in s.lower().split(\":\"):\n        if not w in count_boredoms_words:\n           count_boredoms_words[w] = 1\n    return count_boredoms_words\n    def is_bored(wordlist):\n    counter = defaultdict(Counter)\n    for word in wordlist:\n        if is_bored(word):\n           count = count_boredoms(word)\n          count.update(0)\n    return count\n\nHow would you go about refactoring this?\n\nI would probably use some form of a monadic stream", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI don't get it.\n\n\"The sky is blue. The sun is shining. I love this weather.\" contains a boredom.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n       #total number of words\n       sum_len = len(S)\n       #number of boredoms\n       boredoms_found = 0\n       #initialize a counter to keep track of how many boredoms were found\n       boredoms_found_found = 0\n       #find the number of boredoms\n       for s in S", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is a terrible definition of \"boredom\".\n\nI know, I'm not exactly following the directions on this one. I'm just trying to get my feet wet with some code. This is my first Python program.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nWeirdly, it only counts the first boredoms for me.\n\nHmm, that's weird. I got 0 and 1 for those examples, but I am using Python 2.7.10.\nDid you try with the latest one?\n\nI am also using 2.7.10 (Linux/x86_64).\n\nLooks like it's a Python 2.7.9 bug. I'll try to fix it in the next version.\nThanks for letting me know.\n\nHow is that a bug? There's no guarantee that the input string is a list of boring sentences.\n\nIt's not a bug at all. The code is doing exactly what the author intended.\n\nIt's counting the first boredoms in each sentence, which is not what the author intended.\n\nThe point is that you can use this script to test if your function returns a list of boredoms:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n        def is_bored(wordlist):\n         for word in wordlist:\n            if word[0] == \"I\":\n               return 1\n          return 0\n          return 1\n\nOn the contrary, a modern PC is more of a \"decision maker\" than a \"decision taker\". It takes orders from you and executes them.\n\nThe author could have simply asked \"What's the most boring programming language you know?\" and got all the answers without any new programming languages.\n\nThe author could have simply asked \"What's the most boring programming language you know?\" and gotten all the answers without any new programming languages.\n\nOr \"What's the most boring programming language you know?\", and got all the answers without any new programming languages.\n\nYou could have asked \"What's the most boring programming language you know?\", and gotten all the answers without any new programming languages.\n\nTl;dr: You can't determine if a language", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # Start by checking if the input is empty\n    if len(S) <= 0:\n        return False\n    # Replace spaces with '.'\n    while not len(S) % 3 == 0:\n        S = S.rstrip(\" \")\n        return is_bored(S)\n\nIs this a joke?\n\nIt looks like the OP is just learning how to program, and maybe this is the\nfirst python program he/she wrote.\n\nI guess I can't figure out how to interpret the code. It is not obvious to me what the code does.\n\nIt's a simple dictionary counting the number of words that begin with I.\n\nI know that. What I don't know is how the program works. I don't see how S is passed to the function, how the dictionary is used, etc.\n\nYou're not the only one. It's not that obvious how the dictionary is used. I don't know if that's an issue of the formatting or the code itself.\n\nI'm glad to hear I'm not the", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n        def is_bored(S):\n          return S.split(\" \")\n          for subline in S.split(\": \"):\n               if subline[0] == \"I\":\n                  return len(subline)\n             return 0\n   \n    def translate(S):\n    \"\"\"\n    Translate sentence from English to Spanish, then translate from\n    Spanish to English.\n    \"\"\"\n    def is_spanish(S):\n        return S.lower().startswith('I')\n        def is_english(S):\n          return S.lower().startswith('Hello World')\n   \n    def translate(S):\n         return S", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S.strip()) == 0\nOr just return len(S.strip())\n\nNote: in Python, any non-empty string has length 1, so you don't have to check the length, just return len(S.strip())\n\nAlso, I find it very difficult to read, and possibly hard to write for people who are not native english speakers.\nThe usual style I use in my programs is this:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_sentence(s):\n    \"\"\"\n    A boredom sentence is a sentence that starts with the word \"I\".\n    For example:\n    >>> is_bored_sentence(\"I have never seen such a beautiful day\")\n    True\n    >>> is_bored_sentence(\"I have always wanted to go to the zoo\")\n    False\n    \"\"\"\n    if \"I\" in s:\n       return True\n    return False", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\nIs this supposed to be a joke?\n\nNot a joke but I don't know why I decided to post it here.\n\nI was bored and that's why I commented :)\n\nThis is a real funny way to make a joke\n\nSomeone needs to find a way to make a coroutine to decide if a sentence is boring or not.\n\nCoroutines are essentially a way to write a recursive function as a series of jump tables.\n\nThere is a product that I'm building which has this feature.\nI'll", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nMore readable and more idiomatic:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split(\".\") or s.split(\"?\" or s.split(\"!\"))):", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(word_list) == len(word_list[:])\nWhat about this:\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"Hello world\")\n0\n\nThe error is this: the first sentence is not a boredom. It's a sentence that happens to start with \"I\". It doesn't meet the definition:\n\"Sentences are delimited by '.', '?' or '!'. A boredom is a sentence that starts with the word 'I'\".\n\nit's not the first sentence it's the second.\n\nI think the parent is saying that the second sentence is not boring, so it should return 1.\n\nThe algorithm is in fact broken. It works if you feed it a few sentences at a time (for example, the first three in the article) but it's wrong if you feed it a big chunk, like the entire article. I don't know how much of the article's content is actually boring, but in any case I don't think the ratio of boring content to non-boring content is the point. It's the total number of boring sentences", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(filter(lambda x: x.startswith(\"I\"), S)) == 0\n\nYou can also tell it to ignore punctuation, which probably makes it easier to read.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    count = 0\n    for w in words:\n        if is_bored(w):\n           count += 1\n    return count\nThis seems to be working fine. I haven't tested it further.\n\nThere is a lot of useful Python syntax in there, but the code is unclear and hard to read. It's not idiomatic Python.\nThis is fine if you're writing code for yourself, but if you're writing code that you intend to share with other people, you should try to write idiomatic code.\n\nYou could also write this:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    counts = [0]\n    for word in S:\n        counts.append(1)\n    if word in [\"I\", \"me\", \"my\", \"myself\"]:\n        counts.append(2)\n    return counts.count(word)", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return 0 if s.startswith(\"I\") else 1\nBut:\n      >>> is_bored(\"I am bored.\")\n      1\n\nI think the example is:\n>>> is_bored(\"I am bored.\")\n1\n>>> is_bored(\"I am not bored.\")\n0\n>>> is_bored(\"The sky is blue.\")\n0\n>>> is_bored(\"I am not bored.\")\n0\n>>> is_bored(\"The sky is not blue.\")\n0\n>>> is_bored(\"The sky is not not blue.\")\n0\n>>> is_bored(\"The sky is not blue.\")\n0\n>>> is_bored(\"The sky is not not not blue.\")\n0\n>>> is_bored(\"The sky is not blue.\")\n0\n>>> is_bored(\"The sky is not not not not blue.\")\n0\n\nIt's returning 0 for the first one because it's not a boredom. Then it's just counting the number of \"I\"s until it hits a \"!\" (or \"?\"), and then it returns 1.\n\nThat's not so funny,", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0 or S == \"I\"\nI don't see how this is different from:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is absolutely the most useless thing I've seen on HN all week. It's absolutely useless for anything. It can't even be used to teach programming because it's so trivial and uses a single method. You can't even use it to teach logic because it's too trivial.\nIt's not even interesting.\nThere are no comments or descriptions.\nIt's not even _functional_.\nIt's a single line of python.\nPlease don't post this kind of junk. It's making HN worse.\n\nI think it is a small piece of code, that is meant to be an example, not a lesson in how to write code.\n\nIt's still meaningless. And it's making HN worse.\n\nIt's not making HN worse.\n\nI must disagree. A lot of people (myself included) come to HN to learn. That doesn't mean we want to see the equivalent of \"Hello World\" posted.\n\nI thought the \"hello world\" was a nice touch, but it would have been better if the example output were \"1\".\n\nIt seems to be down right now.\n\nThat's too bad, I wanted to check it out. :(</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI think there is a similar problem in Project Euler:\n\n_Boredom_ is a very subjective phenomenon.\nI think the criteria for boredom must be more strict to be of any use.\n\nIt's a joke, right?</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return [int(word) for word in words if word in ['I', 'Me', 'My']]\n\nThank you. I have a feeling I should have known that :)</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(s):\n    \"\"\"\n    If the string is a boredoms, return 1.\n    Otherwise, return 0.\n    \"\"\"\n    for i in range(s.count('.')):\n        if s.find('I') == 0:\n           return i\n    return 0\nAnd then it's too easy to find the boredoms.\n\nYou're right. I was trying to be cute, and this is the result. I think I was trying to think of a way to somehow make it \"harder\" to find the boredoms, but I guess there's no real way to do that.\n\nYou could simply use a dictionary instead of a string. You'd have to iterate over it using something like \"for d in boredoms: d.get('I')\"\n\nYeah, but you'd have to know about the I variable. I think it would be harder if you didn't know about the variable, but didn't know how many boredoms there were, and just had to try and figure it out by", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return 0 if not string in ['I', '?', '!', '.']\n    count_of_boredoms = 0\n    for w in word_list:\n        if word_list[w]!= 'I':\n           count_of_boredoms += 1\n        return count_of_boredoms\n\nWouldn't you also get bored?\n\nThe author mentions that he did get bored of it before publishing.\n\nThis is one of the reasons I prefer Python. What's with the redundant'return'? If you don't want to return, you can just not return.\n\nNo one is required to write Python.\n\n\"No one is required to write Python\"\nIt's not about writing Python, it's about not writing bad code.\n\"What's with the redundant'return'? If you don't want to return, you can just not return.\"\nA language designer shouldn't be wasting everyone's time by adding the overhead of a redundant return statement.\n\nI think the argument is that it's not bad code to", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n       def is_bored(S):\n         return count(isinstance(S, string)) > 0\n\nI am bored.\nYou are bored.\nHe is bored.\nIt is boring.\nShe is bored.\nThey are bored.\nIt is boring.\nThey are bored.\nIt is boring.\nHe is bored.\nThey are bored.\nIt is boring.\nHe is bored.\nThey are bored.\nIt is boring.\nThey are bored.\nIt is boring.\nThey are bored.\nIt is boring.\nHe is bored.\nThey are bored.\nIt is boring.\nIt is boring.\nIt is boring.\n\nThe sky is blue. The sun is shining. I love this weather.\n\nIt is boring.\n\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.\nIt is boring.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nAs much as I dislike python, I think that one of the most disappointing things to me about Java is the lack of a good standard library. I find myself using the python standard library so much that I end up with most of my code written in it.\n\nI don't think there's anything you can do in Java that you can't do in Python. Java is actually less expressive, because Python is dynamically typed, but the Java compiler can help you find bugs. I think that's the only advantage Java has.\n\nI agree, but a standard library is good for two reasons. It's good for learning, because it gives you a common set of tools to work with. I can write a program without a standard library, but it's not as useful to me as one.\nSecond, and perhaps more importantly, is that when you are coding for other people, you don't always want to have to reimplement commonly used functionality. So, even if you are using Python, you probably end up reimplementing a lot of stuff that you found in the standard library.\n\nI was looking for a library to parse URLs to a simple structure (eg. \"python.org/~username/\") and found a few libraries in", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI'm not sure if that's the best way to go about it. \"I\" is a perfectly valid word in English and removing it isn't necessarily the best way to filter out boredoms. The most obvious way is to look for the word \"am\".\n\nI'm not sure if \"I\" is a valid word in English. \"Me\", \"I\", \"myself\", and \"my\" are all valid words, but I don't know if they're considered separate words, or just parts of a word.\n\nWhat about \"I'm\"?\n\nIt depends. In informal English, \"I'm\" is usually not a separate word, but rather a contracted form of \"I am\".\n\nI would think that you need a better definition of \"boredom\" than \"a sentence that starts with the word 'I'\", but that's just me.\n\nWhile this is definitely true, I think that's a hard problem to solve.\nWhat is a boredom?\n\nI'm pretty sure that's a subjective question.\n\nNo, it's very objective.\n\nI'm not sure if this is a joke, but it is absolutely objective.\n\nLooks like the author found a bug", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def count_boredoms(S):\n    \"\"\"\n    Count the boredoms of the input string.\n   \n    If the input is not a string, raise an error.\n    \"\"\"\n    if S.startswith('I'):\n        boredoms = 0\n        for i in range(len(S)):\n           if S[i] == '.':\n               if S[i]!= '.':\n                  boredoms += 1\n                  if S[i]!= '?':\n                   if S[i]!= '!':\n                    boredoms += 1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI like to write a small python script that turns boring text into a fixed-width font.\n\"The sky is blue. The sun is shining. I love this weather\".out.txt\nIt's more like a post-processing effect.\n\nGood idea.\n\nI find this is a rather bizarre project, but I suppose it could be a useful pedagogical tool.\n\nI always thought the point of \"hello world\" was to get a program displaying something on the screen. This is just a class definition.\n\nIt's a class with a function. It's not just a class definition.\n\nThe comment is still not on the main script, which is the only part of the program which actually does something.\n\nYou should probably send this to the author so they can add it in as a comment.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI wonder how many boredoms are in this sentence.\n\nAnd that's exactly the point.\n\nThat is the point of a lot of programs.\n\nIt's also the point of most (if not all) of the programs that I write for the\nlove of programming. Not every program is meant to be a commercial product.\n\nYeah, but the point is that you can't evaluate it, and you don't want to run it.\nSo why bother?\n\nI can evaluate it and I did run it. There are only 5 boredoms in that sentence.\nYou don't want to run it because it's not part of your way of learning.\nThere are different ways of learning. Some people like to understand why something works.\n\nI like to understand why something works, but I like to _do_ something more.\n\nI know, I feel the same way.\n\n>>> len(s)\n10\n>>> is_bored(s)\n3\n\nThis is awesome! I'm going to use this to test my program for boredom.\n\na = \"The sky is blue. The sun is shining. I love this weather.\"\nb = \"The sky is", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return (count(set(word_list))) == 1\nPretty sure that's not it.  The original question is a bit ambiguous as to what is expected to be returned.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nSorry for the late reply.\n1. I wanted to use just one function for the simplicity of it.\n2. You're right. I'll make sure to use it in the next post.\n3. Thanks for the suggestion. I'll consider it and add it to the next post.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n_", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(sentences) \\\n    / count(boredom)\nThanks! I did know about this one but I was hoping to find something that could do it more programatically\nThe only other way I can think of is to parse the string into an array of words and then use a loop to look for the string \"I\" at each position in the array and then keep a counter for each one of those.  You could also start with the words from the string and remove the boring ones.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nTo clarify, this is a humorous attempt at writing a Python library (or, more accurately, a _language_ ) for detecting boredom in a person's speech.\n\nI think it should work if you just remove the parenthesis.\n\nI think you're right. I had to get rid of them in the submission here, and it still works fine.\nI've updated the gist to remove them, but for posterity I've left a note on the gist itself. Thanks.\n\nI'm still not seeing a change. Still:\nTraceback (most recent call last):\nFile \"\", line 1, in <module>\nis_bored(None)\nFile \"/home/carlos/code/gists/5a3534c0a5c0b77be9bbb12.py\", line 13, in is_bored\nreturn \"\".join(word_counts)\nFile \"/home/carlos/code/gists/5a3534c0a5c0b77be9bbb12.py\", line 4, in word_counts\nreturn word_counts[i:i+1]\nValueError: can", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nwhile is_bored(\"the sky is blue. the sun is shining. i love this weather\") == 1:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    num_boredoms = 0\n    for word in S:\n       if word.startswith(\":\") and word.endswith(\"!\"):\n          num_boredoms += 1\n    return num_boredoms\n\nIs this supposed to be a joke?\n\nI think it's a joke.\n\nI think the joke is that most of the code on this site could have been written in a shorter way, e.g. using a dictionary rather than a list of strings, but the programmer doesn't see the point in that.\n\nThis is like a lot of the other code I've seen posted here. I think a lot of the people who post things like this are not actually interested in programming, but rather in creating a snippet of code that looks \"neat\". And unfortunately, this is not a particularly interesting snippet of code.\n\nUnfortunately this is the same kind of thing my friends and I do when we get together to code. We've also taken to writing terrible code in languages we don't know for the sake of it.\n\nThe logic is wrong.\nThe very first", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    pass\nIs it really that simple?\n\nSure, that's the essence of it.\n\nI thought it would be much more difficult. Do you know of any more sophisticated tests? I know a lot of people have problems with boredom at work. It's very expensive to hire and train new programmers.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # count the number of boredoms\n    def count(str):\n    \"\"\"\n    Count the number of boredoms in a string.\n    >>> count(\"The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\n    n = len(str)\n    for x in str:\n       if x in [',', '?', '!']:\n           continue\n           if is_bored(x):\n             n -= 1\n    return n\n    return count", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI am amazed that you are not receiving more votes.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\nThe only problem with this is that you can make it say whatever you want.  It looks for the word \"I\" and calls it a boredom.  You could make the code much more robust by making it look for more than just the word \"I\", since a lot of sentences start with the word \"I\".\nIf it's a good exercise, go for it.  I'm just pointing out that this code is easy to hack, if you're just looking for practice.\n\nIt's a test of your ability to detect edge-cases, not a good example of robust code.\n\nNice, but:\nI don't like the '!' in the example.\nIt's a little too restrictive.\n\nShouldn't \"boredom\" be a list?\n\nWhat would that list look like?\n\nIt would look like a list of bo_* words. A bunch of rules that are bo_* words.\n\nI'm not sure if this is a language joke or not.\n\nFrom \n>>> bo_f* [ \"bo_f\", \"bo_f\", \"bo_f\", \"bo_f\" ]\n[ \"bo_f\", \"bo_f\",", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    return len(S.split()).count()==0\n\nThis is not the best function name.\n\nNo, it's not. It's just a placeholder for this exercise.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    if \"I\" in S:\n       return True\n    else:\n       return False\n    return S\nIs this the most accurate test?  It is missing \"I'm bored\" (True) and \"I'm not bored\" (False).       edit: Why the downvotes?  My test is more accurate.\n\nThis is the dumbest thing I've read in a while. I'm not sure if it's sarcasm, but if it's not, please leave.\n\nThis is a cool tool, but the article was confusing. There's no indication that the word \"I\" should be used to count the number of boredoms.\nIt also doesn't support \"I'm bored\" (true) and \"I'm not bored\" (false) which also would be valid.\n\nThe link points to a blog post that is just a link to an external tool.\nPlease add (2013) to the title.\n\nI'm not really impressed by the number of \"I\"s. There could be a number of other words that", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(self, text):\n    \"\"\"\n    Parse the text for boredoms.\n    \"\"\"\n    n = 0\n    i = 0\n    if text.find(\"I\")!= -1:\n       i += 1\n    else:\n       n += 1\n    return n\nThis function is a good example of a'spot check' function. The idea is to check for a certain condition, and if that condition is satisfied, perform some specific action.\n\nA'spot check' function is like a guard: it performs its work only if the condition is true.\n\nIf the condition is not true, the'spot check' function returns without performing any work.\n\nSpot check functions are useful for a number of situations:\n\nTesting a condition before performing some action\n\nLogging a message only if a condition is met\n\nChanging the behaviour of a program based on a condition\n\nIn the above function, if we give it a string like \"The sky is blue. The sun is shining. I love this weather\", it", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # The current version uses a hash-map to store the number of boredoms\n    def count_boredoms(S):\n    \"\"\"\n    Count the number of boredoms in the string S.\n    >>> count_boredoms(\"I'm bored.\")\n    1\n    >>> count_boredoms(\"I'm bored. I'm tired.\")\n    2\n    >>> count_boredoms(\"I'm bored. I'm hungry.\")\n    3\n    >>> count_boredoms(\"I'm bored. I'm sleepy.\")\n    4\n    >>> count_boredoms(\"I'm bored.\")\n    0\n    >>> count_boredoms(\"Hello world.\")\n    0\n    >>> count_boredoms(\"Hello world.\")\n    1\n    \"\"\"\n    # This function is only used internally.\n    def words_that_start_with(s):\n    \"\"\"\n    This function is only used internally.\n    >>>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    return len(set(S.split(' ')))\n\nWow, I always love this kind of examples. I'm going to add one more to the list:\n>>> is_bored(\"Hello world\", \"The sky is blue. The sun is shining. I love this weather\")\n2\nAnd now it makes me think, what is the purpose of this function? Why would someone want to do this?\n\nTo me, the purpose of this function is to use it to convert strings of words into lists of words, then to add the boredoms to that list.\n\nI'm not sure why you'd do that, though.\n\nLet's say you have a bunch of emails, each containing the same subject. Each email contains text from one or more people. Your goal is to extract the common text and ignore the common text. The 'common' text is often 'I'. This is one way to do it.\n\nI'm not sure that's a good goal, since if I want to \"ignore the common text\" I'd rather just search for \"I\".\n\nI'm not sure how you'd search for \"I\" without relying on the results of this function.\n\nI", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if word in S:\n       if word == \"I\":\n         return len(word)\n\nSimple, but not exactly correct. I bet it's faster than an FFT, though.\n\nYou need to normalize it, too:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    def is_distracted(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of distractedness. A distraction is a sentence that starts with the word\n    \"I\". Sentences are delimited by '.', '?' or '!'\n   \n    For example:\n    >>> is_distracted(\"Hello world\")\n    0\n    >>> is_distracted(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    def is_drunk(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of drunknesses. A drunkness is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'\n   \n    For example:\n    >>> is_drunk(\"Hello world\")\n    0\n    >>> is_dr", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThe \"Hello world\" example may be wrong. The test is not on the number of _boredoms_, but on the number of _I_ s. The example should be\n>>> is_bored(\"I am bored.\")\n\nor even better\n>>> is_bored(\"I am bored.\")\nTrue\n\nI've implemented this in Python. I guess it isn't surprising that the Python version is just as unreadable as the C version.\n\nIf you want to make the Python version more readable, here's a helpful hint:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n    def is_bored_more_than_once(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\". Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_more_than_once(\"Hello world\")\n    0\n    >>> is_bored_more_than_once(\"The sky is blue. The sun is shining. I love\n    this weather\")\n    1\n    \"\"\"\n\n    def is_bored_twice(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\". Sentences are delimited by '.', '?' or '!'.\n   \n    For example:"]]