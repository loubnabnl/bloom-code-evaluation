[["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    for word in S:\n       if word in \"I\":\n         return 1\n       return 0\n\nI wish someone would do this for English:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(words) > 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n2\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n3\n\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n2\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n3\n\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n2\n>>> is_bored(\"The sky is blue. The", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == len(s.split(\".\"))\nI don't get this. Why not just use the split() method?\n\nThere's no split() method in Python 3.\n\nI think this would be better as a library than a built-in.\n\nI don't understand why people use the built-in isinstance() and not the built-in is()?\n\nBecause isinstance() is more general.\n\nI'm not sure I agree. For example, you can pass a list of strings to is() and it will tell you if any of them are instances of the same class.\n\nThat's because the built-in is() is also a class, and a special one at that:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split('.')[1])\nI'm not sure I get it.  Why would a sentence start with \"I\" be a boredom?\n\nThe author explains that in the comments.\n\nI see, thanks.\nI was hoping for some sort of explanation of the algorithm, rather than the implementation.\n\nIt's a good exercise in parsing.\n\nI'm not sure I understand the point of this.\n\nIt's an example of a quick and dirty algorithm that does a job.\n\nI'm not sure I understand the point of the example.\n\nIt's an example of a quick and dirty algorithm that does a job.\n\nI'm not sure I understand the point of the job.\n\nIt's an example of a quick and dirty algorithm that does a job.\n\nI'm not sure I understand the point of the job.\n\nIt's an example of a quick and dirty algorithm that does a job.\n\nI'm not sure I understand the point of the example.\n\nIt's an example of a quick and dirty algorithm that does a job.\n\nI'm not sure I understand the point of the job.\n\nIt's an", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S.split()[0])\nYou're missing a lot of things.  What about sentences that start with \"I'm\"?  Or sentences that start with \"I'm bored\" (which you'll get a lot of)?  Or sentences that start with \"I\" but don't contain the word \"bored\"?\nI think the simplest way to do this is to use a regular expression that matches the word \"I\" and then split the string on whitespace.  Then you can check the first word for \"I'm\", \"I'm bored\", \"I'm bored of\", etc.\nI'm not sure if the word \"I'm\" is a valid word in Python.\nI don't think it is.  You'd have to do something like `re.search('I', s.split(' ') for s in s.split())`.  I think that's the right way to do it, but I'm not sure if that will work.  I haven't used Python's regular expression library.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S.split(\" \")) == 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis seems like a very interesting idea, but the code is very hard to read.\n\nI think it's a pretty neat idea. I think it would be even more interesting if the scoring system was more complex. For example, if it detected that the word \"I\" was used to start a sentence, but the word \"I\" was not used as the subject of the sentence, it would be scored as \"I am bored\".</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == 1\n    def is_bored_words(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_words(\"Hello world\")\n    0\n    >>> is_bored_words(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(s) == 1\n    def is_bored_words_words(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words\n    # the boring words", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) - len(set(S))\n> set(S)\n> len(set(S))\n>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 1\nSo you're going to have a hard time in the real world if you think that's how you write a real program.\n\nI think you're missing the point. It's just a toy.\n\nIt's not just a toy, it's a way of thinking.\n\nThe example is just a toy. You're reading too much into it.\n\nI think you're missing the point. It's just a toy.\n\nI think you're missing the point. It's just a toy.\n\nI think you're missing the point. It's just a toy.\n\nI think you're missing the point. It's just a toy.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    for line in open(\"input.txt\"):\n    if line.startswith('I'):\n        # A boredom starts with the word \"I\"\n        # Count the number of them\n        # and return the result\n        # in a tuple (number of boredoms, boredoms)\n        boredoms = 0\n        boredoms += 1\n        # Boredoms is a list of tuples (number of boredoms, boredoms)\n        print(boredoms)", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(self, text):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(text) == 1\n\nThis is a great example of the Zen of Python. It's so simple that it's hard to believe it works.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nfor i in range(len(S)):\n    for s in S:\n       if s.startswith('I'):\n         return i+1\n\nThis is a great example of how to write terrible code. I've seen a lot of terrible code but this is one of the worst.\n\nI don't think this is an example of terrible code. The code is concise and easy to understand. It's not the most efficient code, but the problem it solves is pretty simple.\n\nIt's an example of terrible code. The logic is very simple and the implementation is very simple. This is the kind of code you write when you're learning to program, not when you're a seasoned developer.\n\nI think the problem is that you're equating \"terrible code\" with \"inefficient code\".\n\nI'm not. I'm equating terrible code with bad code.\n\nSo what's bad about the code?\n\nIt's not even bad code. It's a simple solution to a simple problem.\n\nYou're right. I think I was thinking of the wrong definition of \"terrible\". I was", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI'm not sure I understand. What do you mean by \"start with the word 'I'\"?\n\nIt's a Python idiom. It's a way to say \"this is the first word of the sentence\".\n\nAh, ok, that makes sense.\n\nHow about:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) == 0\n\nI like this one. I have a hard time coming up with good ways of testing for boringness.\n\nI think this one is better:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI don't know what you're doing, but it looks like you're checking for an opening parenthesis? If you are, then you're checking for the wrong thing. If you're not, then you should.\n\nI'm not checking for opening parenthesis. I'm checking for the word \"I\".\n\nI don't know what you're doing, but it looks like you're checking for an opening parenthesis? If you are, then you're checking for the wrong thing. If you're not, then you should.\n\nI'm not checking for opening parenthesis. I'm checking for the word \"I\".\n\nAh, that makes a lot more sense.\n\nWhy not just check for the word \"I\" directly?\n\nWhy not just check for the word \"I\" directly?\n\nI'm not sure how to do that.\n\nHow about this:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.lower()) == 1\n    def is_dumb(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of dumbnesses. A dumbness is a sentence that ends with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_dumb(\"Hello world\")\n    0\n    >>> is_dumb(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(s.lower()) == 1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # For the first test, we'll use a list comprehension\n    for word in words:\n        # This is a list comprehension. It looks for the word \"I\"\n        # in the list of words.\n        if word in [\"I\", \"is\", \"bored\", \"am\", \"was\", \"are\", \"were\", \"be\", \"being\", \"been\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"been\", \"being\", \"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_by_word(word, S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_by_word(\"Hello world\")\n    0\n    >>> is_bored_by_word(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return (word in S) or (word in is_bored(S))", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    count = 0\n    for word in S:\n        if word.startswith('I'):\n           count += 1\n        else:\n            count += 1\n    return count", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 1\n    def is_bored_count(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_count(\"Hello world\")\n    0\n    >>> is_bored_count(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) == 1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # Find the first word\n    word_1 = S.find('.')\n    # If it is not a space, mark it as a boredom\n    if word_1!='':\n        is_bored(word_1)\n    # If it is a space, don't mark it as a boredom\n    if word_1 =='':\n        is_bored(word_1)\n    return len(is_bored(S))", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"I love this weather.\")\n0\n>>> is_bored(\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_from_string(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_from_string(\"Hello world\")\n    0\n    >>> is_bored_from_string(\"The sky is blue. The sun is shining. I love\n    this weather\")\n    1\n    \"\"\"\n    def is_bored_from_string_with_punctuation(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S.split()) == 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_exact(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_exact(\"Hello world\")\n    0\n    >>> is_bored_exact(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def is_bored_exact_exact(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_count(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_count(\"Hello world\")\n    1\n    >>> is_bored_count(\"The sky is blue. The sun is shining. I love this\n    weather\")\n    2\n    \"\"\"\n    return len(S)\n\nThis is a terrible example.\n\nI don't understand what's wrong with it.\n\nHe said it's a terrible example because you can't count the number of boredoms.\n\nI don't understand. Why can't you count the number of boredoms?\n\nBecause boredoms aren't a thing.\n\nI don't think they're a thing either, but I think that's not the point.\nThe", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S.lower()) == 0\nThis is the best one by far.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S.split('.'))\nI'm not sure why it's so hard to read, but it's definitely not clear what this function does.\n\nIt's pretty clear to me.\n\nA lot of the comments in this thread are pretty funny.\n\"I'm not sure why it's so hard to read\"\n\"It's pretty clear to me\"\nI guess the point is that we all have our own mental model of what code should look like, and we all have different preferences.\n\nI agree, but I think the point of the article is that there are better ways to write code, and that \"clever\" code can be harder to read and understand than simple code.\n\nI'm not sure how to interpret this. If you're saying that \"clever\" code is more difficult to read than \"simple\" code, then I agree. But I don't think the author is saying that. The author is saying that \"clever\" code is more difficult to read than _simple_ code, but that \"clever\" code is more fun to write than simple code.\n\nI think the author is saying that \"clever\" code is more difficult to read and", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split('.'))\n\nI think the OP meant \"boredoms\" as in \"boredoms of the mind\", not \"boredoms\" as in \"boredoms of the sentence\".\n\nIt's a programming joke.\n\nI'm not sure that's a joke. I'm pretty sure it's a serious suggestion that the OP was trying to use a dictionary word in place of a programming term.\n\nI think it's a joke because the author is making fun of the OP for not knowing the difference between a dictionary word and a programming term.\n\nOr maybe it was a joke on the fact that there is no such thing as \"boredoms\" in programming.\n\nIn my experience, there are always boredoms in programming.\n\nDoes anyone know of a good set of examples of these kinds of \"gotchas\" for Python? I've been learning Python for about a year now and I have a pretty good handle on the language, but I'd like to make sure I'm not missing anything.\n\nI don't know of any lists, but I've found the book \"Python for the Impatient\" to be an excellent resource for learning idiomatic", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(s):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return s.find(r'I')\nI'm not sure I like that approach. It doesn't seem to be able to tell when a sentence is a question or not.\n\nI'm not sure I like that approach. It doesn't seem to be able to tell when a sentence is a question or not.\n\nI think you can tell when a sentence is a question by the punctuation, though.\n\nI'm not sure I like that approach. It doesn't seem to be able to tell when a sentence is", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI'm not sure if the author is aware of the existence of the word \"boredom\" or not.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is pretty cool. Is it open source?\n\nThanks!\nIt is, though it's not on Github:\nhttps://github.com/peter-szabo/boredom-detector\n\nAww, I was hoping it would use a bag-of-words approach to identify boredoms.\n\nThe words in the sentence are the bag of words.\n\nI was hoping it would use the frequency of the words as the bag of words.\n\nIt's not clear to me what the benefit would be.\n\nIf you have a sentence that has one of each of the words, then the bag of words is just the frequency of each word. So if you know the frequency of the words, then you know how bored the sentence is.\n\nThis is great, but it needs a way to get a count of all boredoms per sentence.\n\nThere is a way to do that in the code, it's just not exposed.\n\nWhat's the point of the 1-100 scale? I can't think of a good use case for that.\n\nI think the point is to have a scale for people to use when they're evaluating their own boredom.\n\nThis", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    \"\"\"\n    return len(S) > 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is not a good test. A better one would be to count the number of words that are not the first word of a sentence.\n\nI think you are being a bit pedantic. I don't think the author was trying to make a comprehensive test of boredom, but rather a quick and dirty way to see if a string contains any boredoms.\n\nI think the author was trying to make a quick and dirty way to see if a string contains any boredoms.\n\nI think you are being a bit pedantic. I don't think the author was trying to make a comprehensive test of boredom, but rather a quick and dirty way to see if a string contains any boredoms.\n\nI think you are being a bit pedantic. I don't think the author was trying to make a comprehensive test of boredom, but rather a quick and dirty way to see if a string contains any boredoms.\n\nI think you are being a bit pedantic. I don't think the author was trying to make a comprehensive test of boredom, but rather a quick and dirty way to see if a string contains any boredoms.\n\nI think you are being a bit pedantic. I don't think the author was trying to", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI'd probably write it like this:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == len(set(s, 'I'))", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_word(word):\n    \"\"\"\n    Given a word, return True if it is a boredom.\n    \"\"\"\n    if word in word_list:\n       return True\n    return False", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(sentences)", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S.split()) == 0\n\nI'm not sure how to explain the joke here, but I found it funny.\n\nI would have expected \"I\" to be the most common word in English.\n\nI don't think this is what the author intended.\n\nI'm not sure I understand what this is about.\n\nIt's a joke on the fact that the author is using the word \"boredom\" to describe the concept of being bored.\n\nI'm not sure I understand the joke.\n\nThe author is making a joke about the fact that the word \"boredom\" is used to describe the concept of being bored.\n\nI'm not sure I understand the joke.\n\nThe author is making a joke about the fact that the word \"boredom\" is used to describe the concept of being bored.\n\nI'm not sure I understand the joke.\n\nThe author is making a joke about the fact that the word \"boredom\" is used to describe the concept of being bored.\n\nI'm not sure I understand the joke.\n\nThe author is making a joke about the fact that the word \"boredom\" is", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(sentence) > 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) == 2\n\nNo, that's wrong. A boredom is a sentence that starts with the word \"I\".\nA sentence is delimited by '.', '?' or '!'.\n\nIncorrect. A sentence is delimited by '.', '?' or '!'. A boredom is a\nsentence that starts with the word \"I\".\n\nNo, that's wrong. A boredom is a sentence that starts with the word \"I\".\nA sentence is delimited by '.',", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is a good example of how to implement a trivial function in Python.\n\nThe problem is that the function is not very useful. It's not useful because it's not very general. It's only useful for one particular type of input.\n\nFor example, it will not work for the following input:\n\n\"Hello world! The sky is blue. The sun is shining. I love this weather.\"\n\nThe author of the function didn't think about the possibility of a sentence starting with \"I\" that is not a boredom.\n\nThe author of the function didn't think about the possibility of sentences that start with \"I\" that are not a boredom.\n\nThe author of the function didn't think about the possibility of sentences that start with \"I\" that are not a boredom.\n\nThe author of the function didn't think about the possibility of sentences that start with \"I\" that are not a boredom.\n\nThe author of the function didn't think about the possibility of sentences that start with \"I\" that are not a boredom.\n\nThe author of the function didn't think about the possibility of sentences that start with \"I\" that are not a boredom.\n\nThe author of the function", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if not isinstance(S, list):\n        S = [S]\n    return len(S) == 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) > 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n       return len(S) == 1\n       else:\n          return 0\n          print \"You're not bored!\"\n          return 1\n          print \"You're bored!\"\nI would have used this:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nYou'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is a bad example. The first sentence is not a boredom, and the second sentence is a boredom.\n\nI think it's a good example. The first sentence _is_ a boredom, but the second sentence is _not_ a boredom.\n\nThis is a good example. The first sentence is not a boredom, and the second sentence is a boredom.\n\nThat's not what it says. It says the first sentence is a boredom, but the second sentence is not.\n\nIt's a bad example because it's wrong.\n\nI don't know if it's a bad example because it's wrong or if it's a bad example because it's right.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) == 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is great, but it is missing a lot of the fun.\nFor example, \"I am bored\" is not a boredom.\n\"I am bored\" is a sentence that starts with the word \"I\".\n\nI've implemented this in python, and here's the result:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0\n\nI'm not sure why this is here, but it's great.\n\nI think it's just a joke about how the blog post is short and to the point.\n\nI wonder if the author is familiar with the HN-popular \"is it a prime\" function\n\nI'm not sure if this is a joke or not, but it's great.\n\nI think it's just a joke about how the blog post is short and to the point.\n\nI wonder if the author is familiar with the HN-popular \"is it a prime\" function\n\nI'm not sure if this is a joke or not, but it's great.\n\nI think it's just a joke about how the blog post is short and to the point.\n\nI wonder if the author is familiar with the HN-popular \"is it a prime\" function\n\nI'm not sure if this is a joke or not, but it's great.\n\nI think it's just a joke about how the blog post is short and to the point.\n\nI wonder if the author is familiar with the HN-popular \"is it a prime\" function", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) == 0\n\nIn Python, the       return len(S) == 0\ncan be replaced with       return len(S) == 0\n\nThis is a good example of why you should always use a real programming language, like Python, instead of a toy language like Python.\n\nOr just use Perl.\n\nThe last time I wrote Perl was in the mid 90's.\nI've been writing Python for a couple of years now.\nI", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is a great example of why people should be careful about using the _ operator in their code. This code is extremely confusing.\n\nI think the _ operator is useful for a few things. In this case it's not the best option, but I've seen it used to great effect in other contexts.\n\n_ is great for conditional expressions, especially if you want to be able to use it in more than one place.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == 0\n\nI'm not sure if you're serious or not, but it's not hard to do better than this:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(word):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(word) == 1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(set(word.lower() for word in S.split()))\n    /^I/\n    def is_nonsensical(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of nonsensicals. A nonsensical is a sentence that makes no sense.\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_nonsensical(\"The sky is blue. The sun is shining. I love this weather\")\n    0\n    >>> is_nonsensical(\"I love this weather. The sky is blue. The sun is shining\")\n    1\n    \"\"\"\n    return len(set(word.lower() for word in S.split()))\n    /^I/\n    def is_irrelevant(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if \"I\" in S:\n       return 1\n    return 0\nI think it would be more clear if you used a for loop instead of a while loop.\n\nI'm not sure I understand your comment. I'm not sure how a for loop would make it clearer.\n\nA for loop is more explicit than a while loop. It's also more efficient.\n\nIt's more explicit in that you can see the loop, but it's not more efficient.\n\nIt's more efficient because the compiler can optimize it better.\n\nI think you're confusing efficiency with readability.\n\nA for loop is more readable.\n\nA for loop is more readable if you're familiar with it.\n\nI'm not familiar with it, but it's still more readable.\n\nI'm not sure what to make of this. If you're not familiar with it, then you don't know what it does. If you don't know what it does, then you can't really say whether it's more readable or not.\n\nI'm not sure what to make of this. If you're not familiar with it, then you don't know what it does", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(sentences) == len(words)\nI'm not sure what you're trying to do with this. Are you trying to count the number of sentences with a given word in them?\n\nYes, I'm trying to count the number of sentences with a given word in them.\n\nThat's not the problem you're trying to solve. The problem you're trying to solve is \"how do I count the number of sentences that have a particular word in them, where that word is a noun?\"\nThe answer is that you can't, without knowing what the noun is, because you don't know if it's a proper noun, a noun with a common plural, or a noun that's pluralized in some other way.\n\nI'm trying to count the number of sentences that have a particular word in them, where that word is a noun.\n\nThat's not what you want to do. You want to count the number of sentences that have a particular noun in them.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split('.')) == 1\nIt's not quite that simple.  You need to ignore the punctuation at the end of the line.\n\nI thought that was the whole point of the article.\n\nYes, I was pointing out that the code doesn't do that.\n\nThis is a good example of the difference between \"code\" and \"programming\".\n\nI was pretty bored.\n\nI'm not sure I would call this code.\n\ni am not sure if it is code or not but it is fun to do.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is one of the most entertaining things I've seen on HN in a while.\n\nIt's funny because I wrote that code in 5 minutes, then spent another 5 minutes coming up with a name.\n\nI think that's the best way to do it.\n\nI don't know.\nI'd say the best way to do it is to think up a good name, then write the code.\n\nI have a library that does this. I call it \"Boredom\".\n\nI'm bored of this joke.\n\nI'm bored of you.\n\nI'm bored of this thread.\n\nI'm bored of you being bored of this thread.\n\nI'm bored of you being bored of me being bored of this thread.\n\nI'm bored of you being bored of me being bored of you being bored of this thread.\n\nI'm bored of you being bored of me being bored of you being bored of me being bored of this thread.\n\nI'm bored of you being bored of me being bored of you being bored of me being bored of you being bored of this thread.\n\nI'm bored of you being bored of me being bored of you being bored of me", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # Take a string of words.\n    words = input(\"Enter a string of words: \")\n    # Print the number of boredoms.\n    print \"The number of boredoms is %d\" % is_bored(words)", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI'm getting a syntax error on this:\nis_bored(\"I like this language.\")\n\nSorry about that. I'm fixing it now.\n\nI'm getting the same error on \n\nFixed now.\n\nThis is a really fun idea! I've written a few similar things in the past, but I like how you've implemented it.\n\nThanks! I'm not sure if I'll keep it up, but I thought it was a fun idea.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    words = S.split()\n    words_with_boredoms = set()\n    for word in words:\n        if word in words_with_boredoms:\n           return 1\n           else:\n            return 0\n    return len(words_with_boredoms)\n\nThe above implementation is very naive, but I think it demonstrates the point.\n\nI don't think that's a good example at all. The author is not bored, but the reader is bored.\n\nThe author is bored of writing the same thing over and over again.\n\nThe author is bored of writing the same thing over and over again.\nThe author is bored of writing the same thing over and over again.\nThe author is bored of writing the same thing over and over again.\nThe author is bored of writing the same thing over and over again.\nThe author is bored of writing the same thing over and over again.\nThe author is bored of writing the same thing over and over again", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    for word in S:\n       if word.startswith('I'):\n         return 1\n       else:\n         return 0\n   \n\nI think you missed the point.\n\nYou're right, I did. I was thinking of a different problem.\n\nI guess it's interesting to count the number of sentences that begin with \"I\"\n\nI wonder how many of those are \"I'm bored\".\n\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.\nI'm bored.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if not S.startswith(\"I\"):\n    return 0\n    count = 0\n    for word in S:\n       if word not in \"?\" or \"!\" or \".\" or \".\" or \"!\" or \".\" or \".\" or \".\":\n          count = count + 1\n    return count", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThis is a really bad way to do this. You can't do a string search for \"I\" to find the \"boredoms\" because there's no such thing as a \"boredom\" in English.\n\n\"I am bored\" is a sentence. \"I am bored\" is not a boredom.\n\n\"The sky is blue. The sun is shining. I love this weather.\" is a sentence. \"I love this weather.\" is not a boredom.\n\n\"I am bored\" is not a boredom.\n\nYou might be able to make a list of sentences that start with \"I\" and count the number of those, but you can't use the word \"boredom\" in your search because there's no such thing.\n\nIf you want to find boredoms, you'll need to use a list of sentences that start with \"I\" and then search for \"I\" in each sentence.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_with_word(word):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_with_word(\"Hello world\")\n    0\n    >>> is_bored_with_word(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def is_bored_with_string(string):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == 1 and s.startswith('I')\n\nThe correct answer is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.\n\nNo, it is 1.\n\nI think the correct answer is 0.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0\n\nI'm a bit confused. Is it that it only counts the first I, or the first of every I?\n\nThe first one of every I.\n\nIt's funny. It's like a meta-I-am-boredom.\n\nThis reminds me of a joke from the Simpsons:\n_\"I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored.\nI'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm\nbored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm\nbored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm\nbored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm\nbored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored. I'm bored", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split()[0])\nThanks for the response, but I think you might have misunderstood what I was asking for.  I'm not looking to split the string at all, I'm looking to get the number of boredoms in a string as a whole.  I could do something like:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split()[1])==2\nI don't think it's very good to return the number of boredoms.  It should return the number of words that start with \"I\".  It's a subtle difference but it means that you can use the function to count the number of boredoms in a string without having to split it into words.  I think this is a good thing.\n\nAgreed.\nAlso, it should be `return len(s.split()[1]) == 2`.\n\nGood catch. I'm a little embarrassed that I missed that.\n\nI'm not sure I understand the use of this function. Why would I want to count how many times a word starts with \"I\"?\n\nI was going to ask the same thing.\n\nIt's a joke. It's a reference to the \"Hello world\" program in every programming language.\n\nI'm not sure I understand the reference.\n\nI'm not sure I understand the reference either.\n\nI've always wondered if there is a way to tell if a string is boring or not.\n\nI don't get it.\n\nI don't get it either.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) > 0\n\nI'm not sure what your point is. You can count the number of boredoms in a sentence using the same technique.\n\nI would argue that the \"technique\" is the problem.\n\nSure. I'm not saying the code is good. I'm saying that this isn't a good criticism of the code.\n\nI'm not sure why you think that.\nThis is a terrible way to count the number of boredoms in a sentence, and it's a terrible way to count the number of boredoms in a sentence.\n\nIt's a terrible way to count the number of boredoms in a sentence. It's also a terrible way to count the number of boredoms in a sentence.\n\nI find it somewhat sad that a lot of the comments here are about the code, and not about the actual idea.\n\nI think the idea is very interesting and the code is very readable.\n\nIt's not readable.\n\nI think it's readable.\n\nI think it's readable, too.\n\nI think it's readable, but I think it's a terrible way to count the number of boredoms in a sentence.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(s):\n       for word in s:\n          if word.startswith(\"I\"):\n             return 1\n          else:\n              return 0\n    return 0\n\nI'm not sure what you're trying to do, but I'd suggest:\nfor word in s:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nimport re\nimport itertools", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) - len(set(s))\nI like that it has a nice, clean, simple, obvious, and easy to understand interface.\n\nI feel like this could be an April fools joke.\n\nIt's a joke.\n\nI'd love to see a version of this that returns \"no\" if the string is not boring.\n\nNot sure if I'm missing a joke, but there's a `not_bored()` method.\n\nThat's a joke too.\n\nThis is a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split(\"I\"))\nI don't think this is correct, as the first example would return 0 as there are no boredoms.\n\nI think you're right. I think this is a case of the author thinking they're smarter than the compiler.\n\nThe author is smarter than the compiler, as it's a very simple function.\n\n\"The author is smarter than the compiler\" is a dangerous thing to say.\n\nIn this case, I think it's true.\n\nThat's a dangerous thing to say.\n\nNo, it's not. If you think it's true, it's true.\n\nWhy not just use the split() function?\n\nThat would require an extra pass over the string.\n\nWhy is this a bad thing?\n\nWhy is it a good thing?\n\nBecause you're not wasting time (or memory) on a function that's doing the same thing as a built-in.\n\nIf you have a function that does the same thing as a built-in, you're not wasting time or memory, because you're not using the built-in.\n\nYou're wasting time on the function, and the compiler wastes", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThe correct answer is 1.\n\nI'm not sure what you're trying to do. Are you trying to find the number of times that the word \"I\" appears in the string?\n\nI think what he's trying to do is to count the number of times the word \"I\" appears in a sentence.\n\nYes, thank you.\n\nI guess you can use the same technique as used in the article:\nThe article is about counting the number of words that start with \"I\", but you can apply the same idea to the number of times the word \"I\" appears.\n\nI tried that, but I'm having trouble with it. I think the problem is that it's not finding the word \"I\" in the sentence. I'm trying to figure out how to fix that.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0\nThat's a very clever way to do it.\n\nI think I'd prefer the version that checks for sentences that start with \"I\" and end with \"and\" instead. I'm not sure if that's any more accurate, but it seems to me to be more idiomatic.\n\nAnd then you'd be counting all the sentences that start with \"I\" but end in \"and\", which is not what the OP wanted.\n\nI'm not sure I understand what you mean by \"all the sentences that start with 'I' but end in 'and'\". I was referring to a specific sentence:\n\"Hello world\".\n\nThis is a terrible idea, and I'm surprised it's the top post on HN.\nThere's no reason to think that \"I\" is a good indicator of boredom. It's not a reliable indicator of anything.\n\nI think it's a good indicator of boredom in a text. I would be bored if I had to read that sentence.\n\nI think this is an interesting idea, and I'm surprised it's the top post on HN.\nThere's no reason to think that \"I\" is a good", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split(\".\"))", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    \"\"\"\n    return len(word_list)\n\nThis is an example of a comment that should be removed from the source.\n\nI have seen this type of comment in other open source code. Why? What is the benefit of this?\n\nWhen you come back to a project after a long time, it can be useful to see a quick summary of what the code does, and what the \"intended\" use of the code is.\n\nThat's the reason for this comment, but it's better to do it in a more specific way.\n\nI think it's a nice way of saying \"This is a comment, ignore it\".\n\nI agree. If it's a one-off comment, it's fine. If it's a pattern, then it's a problem.\n\nI find it's more helpful to write a comment that actually says something about what the code does, rather than just a blanket \"This is a comment, ignore it\".\n\nWhy? The code does exactly what it says on the tin.\n\nI don't want to read a comment that just says \"This is a comment, ignore it\". I want to read a comment that actually says something about", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(sentences) == 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n2\n>>> is_bored(\"Hello world\")\n1\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n>>> is_bored(\"Hello world\")\n2\n>>> is_bored(\"Hello world\")\n1\n>>> is_bored(\"Hello world\")\n2\n>>> is_bored(\"Hello world\")\n1\n>>> is_bored(\"Hello world\")\n2\n>>> is_bored(\"Hello world\")\n1\n>>> is_bored(\"Hello world\")\n2\n>>> is_bored(\"Hello world\")\n1\n>>> is_bored(\"Hello world\")\n2\n>>> is_bored(\"Hello world\")\n1\n>>> is_bored(\"Hello world\")\n2\n>>> is_bored(\"Hello world\")\n1\n>>> is_bored(\"Hello world\")\n2\n>>> is", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) > 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n        return len(s) - len(s[0])\n        def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n        return len(s) - len(s[0])\n        def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) == 0 or S.startswith(\"I\")\n\nIn Python, the following is equivalent to the code above:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(words) \\\n        or (len(words) == 1 \\\n        and not is_bored(words[0]))\n        or (len(words) == 1 \\\n        and not is_bored(words[-1]))\n        or (len(words) == 1 \\\n        and not is_bored(words[-2]))\n        or (len(words) == 1 \\\n        and not is_bored(words[-3]))\n        or (len(words) == 1 \\\n        and not is_bored(words[-4]))\n        or (len(words) == 1 \\\n        and not is_bored(words[-5]))\n        or (len(words) == 1 \\", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # A simple parser\n    def is_bored(s):\n    \"\"\"\n    Given a string of words, return the number of boredoms in the string.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # A simple parser\n    def is_bored(s):\n    \"\"\"\n    Given a string of words, return the number of boredoms in the string.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # A simple parser\n    def is_bored(s):\n    \"\"\"\n    Given a string of words, return the number of boredoms in the string.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0\n\nI think this is a very bad way of measuring boredom, because it is not measuring the number of boredom sentences, but the number of sentences in which the first word is \"I\".\n\nI'm not sure what the right way is, but I'm pretty sure this isn't it.\n\nThis is a good way to measure how many times the word \"I\" occurs in a given text.\n\nI think it's an excellent way to measure the number of times the word \"I\" occurs in a given text.\n\nIt's a good way to measure the number of times the word \"I\" occurs in a given text.\n\nIt's a good way to measure the number of times the word \"I\" occurs in a given text.\n\nIt's a good way to measure the number of times the word \"I\" occurs in a given text.\n\nIt's a good way to measure the number of times the word \"I\" occurs in a given text.\n\nIt's a good way to measure the number of times the word \"I\" occurs in a given text.\n\nIt's a good way to measure the number of times the word", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return sum(c for c in S if c.startswith('I') and c.endswith('.'))\n    /s\nI don't think that's correct.\n\nYou're right, it's not.\nIt should be:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == len(set(s))", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(set(S)) == 0\nI'd suggest the following:", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI just ran it on the first page of this thread and it's saying there are no boredoms, which seems wrong to me.\n\nI'm not sure it's a great idea to use the word boredoms in a tool that measures boredoms.\n\nThe test suite passes.\n\nI think this is one of the best examples of a simple, yet clever, use of Python I've seen in a while. Nice work.\n\nIt's not clever, it's just a string processing loop.\n\nI think the clever part is in the naming and the documentation.\n\nI don't think that is clever, just obvious.\n\nI think the clever part is that it was written in Python and not in some other language.\n\nI think the clever part is that it was written in Python and not in some other language.\n\nI think the clever part is that it was written in Python and not in some other language.\n\nI think the clever part is that it was written in Python and not in some other language.\n\nI think the clever part is that it was written in Python and not in some other language.\n\nI think the clever part is that it was written in Python and not", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == 0\n    def is_bored_and_alone(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms that are alone (i.e. not followed by a \"?\".\n   \n    For example:\n    >>> is_bored_and_alone(\"Hello world\")\n    0\n    >>> is_bored_and_alone(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(s) == 0\n    def is_bored_and_with_other(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms that are with other (i.e. not followed by a \"?\".\n   \n    For example:\n    >>> is_bored_and_with_other(\"Hello world\")", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored_by(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_by(\"Hello world\")\n    0\n    >>> is_bored_by(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def is_bored_by_count(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the\n    number of boredoms. A boredom is a sentence that starts with the\n    word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) > 0", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0\nThat's the same algorithm I used when I made my own. :)</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == len(set(s))", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == 1\nI have a feeling this would be more efficient than your regular expression:       def is_bored(s):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(s) == 1\n\nInteresting. That's one of those things where I thought \"there's got to be a better way\" but couldn't think of it.\n\nI don't think this is a good way to do it. It's not like a regular expression where you can start with the simplest case and then get more complex. You have to start with the most complex", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s.split(\".\")) == 1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) == 1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI think you'll find that's a bit more than one line, and it's also not very readable.</s>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI think this is a very nice example of a small program that does one thing, and does it well.\n\nI agree. I like the idea of a program that does one thing, and does it well.\n\nThis is a nice one-liner, but I think it's better to use a dictionary and have a function that takes a word and returns how many boredoms it has.\n\nI think the point is that it's a one liner.\n\nI'm not sure I follow. It's a one-liner regardless of the dictionary implementation.\n\nI like it. I will be using it.\n\nI'm not sure what I like about it, but I like it too.\n\nI like it.\n\nI think this is a very nice example of a small program that does one thing, and does it well.\n\nI agree. I like the idea of a program that does one thing, and does it well.\n\nI like it.\n\nI'm not sure I follow. It's a one-liner regardless of the dictionary implementation.\n\nI like it. I will be using it.\n\nI'm not sure what I like about it, but I like it too", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) == 0\nI know it's a joke, but I'm pretty sure this is the worst possible way of doing this.\n\nI'm not sure if it's worse than the regex used in the original article.\n\nI'm not sure if it's worse than the regex used in the original article.\nThe original article's regex is not a regular expression at all. It's just a string manipulation function.\n\nIt's a regular expression. It's not a very good regular expression, but it's still a regular expression.\n\nIt's not a regular expression.\nRegular expressions are defined as a finite state automata. The regex from the article doesn't have a finite state machine, it's just a string manipulation function.\n\nIt's a regular expression. It's not a very good regular expression, but it's still a regular expression.\n\nIt's not a regular expression.\nRegular expressions are defined as a finite state automata. The regex from the article doesn't have a finite state machine, it's just a string manipulation function.\n\nIt's a regular expression. It's not a very good regular expression, but it's still a regular expression.\n\nIt", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nThat's not really a useful definition of 'boredom'. For example, \"I am bored\" is a sentence that doesn't start with 'I'.\n\n\"I am bored\" is not a sentence, it is a word.\n\nI'm sorry, but you're just wrong. I'm not sure how else to put it.\n\n\"I'm sorry, but you're just wrong.\" is a sentence that doesn't start with \"I\".\n\nYou could say it's the subject of the sentence, but I don't know if that would make it a sentence.\n\nIt's a sentence. The subject is 'you'.\n\nI am not a programmer, but I am bored.\n\nI am not a programmer, but I am bored. is a sentence that doesn't start with \"I\".\n\nThe sentence is \"I am not a programmer\" and the subject is \"I\".\n\nThis is a really neat idea. I've been looking for a good way to learn Python, and I think this is just the thing.\nI just have one question. Where did you get the idea for this? I'm assuming this is your own project, and I'm wondering if you've seen anything", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(s) == len(s.strip())\nI think you mean \"the number of 'I's'\", not \"the number of boredoms\".\n\nI don't know, I think it's better to keep it as \"boredoms\"\n\nYeah, it's a fun word to say.\n\nI think the word \"boring\" should be in the title.\n\nThe word \"bored\" is in the title.\n\nI'm not bored.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not bored either.\n\nI'm not", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(S) > 0\n    def is_bored_and_a_question(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_and_a_question(\"Hello world\")\n    0\n    >>> is_bored_and_a_question(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(S) > 0 and S.startswith('I')\n\nI think the above is pretty clear. But I have a doubt about the last line, which is:\n\nreturn len(S) > 0 and S.startswith('I')\n\nThe above code works fine, but I don't understand why it is required to have a 'I' in", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    return len(set(sentence.split(\",\"))) == 0\n>What is this doing?\nIt's counting the number of words in the string and then checking to see if any of them are \"I\".\n\nI don't think this is correct. I think it's checking if the first character is a lowercase \"i\".\n\nYou are right. I think the author meant \"i\" not \"I\"\n\nI think it's checking for the first non-space character.\n\nIt's not. I think it's checking for the first character that isn't a space or a punctuation character.\n\nIt's not. I think it's checking for the first character that isn't a space, a punctuation character, or a lowercase \"i\".\n\nI think it's checking for the first character that isn't a space, a punctuation character, or a lowercase \"i\", and then checking to see if it is a lowercase \"i\".\n\nI think it's checking for the first character that isn't a space, a punctuation character, or a lowercase \"i\", and then checking to see if it is a lowercase \"i\", and then checking", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if len(S) > 0:\n        return 0\n    for x in S:\n        if S[x] == 'I':\n           return 1\n    return 0\n\nI'm not sure what this program is meant to do, but the above code has a bug:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n\nI think the program is supposed to count the number of boredoms in the string.\n\nIt's a bit more complicated than that. It's supposed to count the number of sentences that start with \"I\". The \"I\" can be any character, but it must be the first character in the sentence.\n\nThanks for the clarification. I'm not sure if I would have ever figured that out.\n\nI don't know if this is a good example of the problem, but I like it.\n\nI think it's a great example. It's a lot more interesting than just counting the number of \"I\"", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    if len(S) == 0:\n        return 0\n    for s in S:\n        if s.startswith(\"I\"):\n           return 1\n         else:\n           return 0\n    return len(S)\nI'm a bit confused by the semantics of this code. I'm assuming that \"The sky is blue. The sun is shining. I love this weather\" would be counted as one boredom, and \"Hello world\" would be counted as zero. But what if the string is \"Hello world! The sky is blue. The sun is shining. I love this weather\"?\n\nYes, you're right.\nIn the first example, \"Hello world\" would be counted as a boredom, because it starts with \"I\".\nIn the second example, \"Hello world\" would not be counted, because it doesn't start with \"I\".\n\nThat's a really cool idea. I'm not sure if it's a good idea to have it in the standard library though.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    \"\"\"\n    def is_bored(sentence):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    for word in sentence:\n       if word in \"I\":\n         return 1\n       return 0\n\nThis is awesome.\n\nI wonder what the count would be for:\n\"Hello world. The sky is blue. The sun is shining. I love this weather.\"\n\n0, because the first word isn't \"I\".\n\n\"Hello world. The sky is blue. The sun is shining.", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n    # a boredom is a sentence that starts with 'I'\n    # sentences are delimited by '.', '?' or '!'.\n    # a sentence is a string of words\n    def is_bored_word(word):\n    \"\"\"\n    This function returns True if the word is in the vocabulary, and\n    False otherwise.\n   \n    The vocabulary is a list of words.\n   \n    >>> from collections import defaultdict\n    >>> from collections import Counter\n    >>> from collections import OrderedDict\n    >>> from collections import String\n    >>> from collections import set\n    >>>\n    >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>>", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\"\n\nI don't see how this is a good test of boredom.\n\nIt's not. It's a test of a certain kind of boredom.\n\nI would have to agree with the poster who said it's not a good test. It's not a good test of boredom in general, but it's a good test of a certain kind of boredom. I'd like to see a test of a different kind of boredom.\n\nI would have to agree with the poster who said it's not a good test. It's not a good test of boredom in general, but it's a good test of a certain kind of boredom. I'd like to see a test of a different kind of boredom.\n\nYou mean like this?", "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\" \"\"\""]]