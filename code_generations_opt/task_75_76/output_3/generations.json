[["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for i in range(3):\n       if a[i] is a multiple of 3:\n          return True\n    return False\n\nIt's hard to tell what's going on here without knowing anything about how Python is implemented.\nIt is certainly not a straightforward example of \"how to write a language\".</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a == 0:\n        return False\n    else:\n        return a % (3 ** 2) == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    a = int(input(\"Enter a number, for example: \"))\n    if a == 0:\n       print(\"The input is 0\")\n    return False\n    while a!= 0:\n       if a % 3 == 0:\n          return True\n       print(a)\n    return False\nI don't think this is the most elegant way, but it will do the job.\n\nI don't understand the need for Python in this case, unless you want to show off how cool Python is.\nI think this does the job in Ruby:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    if isinstance(a, int):\n        return True\n    else:\n        return False\n    else:\n        return False\nI don't know why I found this so funny, but I did.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    #Example\n    try:\n       return True\n    except Exception:\n       print(\"Error: {}\".format(exception))\n    return False\nIt might be a bit simpler to use a dictionary.\n>>> from operator import is_multiply_prime\n>>> True = {'30': [2, 3, 5]}\n>>> False = {'7': False}\n>>> print(True[30])\n30\n>>> print(False[7])\nFalse\nI know that your code works, but I think that it's a bit weird to use a tuple as a return value.\n\nOf course, you could just use a dictionary:\n>>> from operator import is_multiply_prime\n>>> True = {'3': True, '5': True, '7': False}\n>>> False = {'5': False, '3': True, '7': False}\n>>> print(True[30])\n30\n>>> print(False[7])\nFalse\n\nI wrote something similar for testing if numbers are divisible by 3. I think it's more readable and faster,", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    a = a.upper()\n    if a.startswith('3'):\n       return a.startswith('3')\n    return false\n\nIs that it?\n\nYou're overthinking it. All you need is a simple loop.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\nis_prime = lambda n: n%3==0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for i in range(1,100):\n        if a[i] == 3:\n           return True\n       else:\n           return False\n\nAs you can see, the language is \"Python 3\", meaning the indentation is significant.\n\nYou can run the program by executing \"python3 is_multiply_prime.py\".\n\nReferences\n\nExternal links\nhttp://www.python.org/dev/peps/pep-3148/\nhttp://docs.python.org/3.3/library/string.html\nhttp://docs.python.org/3.3/library/iter.html\nhttp://docs.python.org/3.3/library/re.html\nhttps://docs.python.org/3.4/library/itertools.html</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    # Only allow the user to enter an integer\n    maxint=int(input('Enter a number: '))\n    for i in range(1, maxint):\n        a=input(i)\n        if a % 3 == 0:\n            return True\n    return False\n\nOutput:\n\n$ python is_multiply_prime.py\nEnter a number: 10\nTrue\nEnter a number: 11\nFalse\nEnter a number: 12\nFalse\nEnter a number: 13\nFalse\nEnter a number: 14\nFalse\nEnter a number: 15\nTrue\nEnter a number: 16\nTrue\nEnter a number: 17\nTrue\nEnter a number: 18\nFalse\nEnter a number: 19\nFalse\nEnter a number: 20\nFalse</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_prime(n):\n    if n < 1:\n       return True\n    else:\n       if (n % 2 == 1):\n           return False\n       return True\n    def is_prime(n):\n    if n < 1:\n       return True\n    else:\n       if (n % 2 == 1):\n           return False\n       return True\n    # List of prime numbers\n    primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 211, 233, 239, 241", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (3*a*a + 2*a*a*a + 5) % 2 == 0\n\n>>> is_multiply_prime(4)\n\nTrue\n>>> is_multiply_prime(17)\n\nFalse\n>>> is_multiply_prime(31)\n\nFalse\n>>> is_multiply_prime(43)\n\nTrue\n>>> is_multiply_prime(2)\n\nFalse\n>>>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(n):\n    \"\"\"Write a function that returns true if the given number is the\n    multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (n) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    print n\n    if n % 2 == 0:\n       return True\n    return False", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return(\n    a % 3 == 0 and\n    a % 5 == 0 and\n    a % 7 == 0 and\n    a % 11 == 0 and\n    a % 13 == 0 and\n    a % 17 == 0 and\n    a % 19 == 0 and\n    a % 23 == 0 and\n    a % 29 == 0 and\n    a % 31 == 0 and\n    a % 33 == 0 and\n    a % 37 == 0 and\n    a % 41 == 0 and\n    a % 43 == 0 and\n    a % 47 == 0 and\n    a % 53 == 0 and\n    a % 59 == 0 and\n    a % 61 == 0 and\n    a % 67 == 0 and\n    a % 71 == 0 and\n    a % 73 == 0 and\n    a % 79 == 0 and\n    a % 83 == 0 and\n    a % 89 == 0 and\n    a % 97 == 0 and", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    assert len(a) == 3\n    assert len(a[0]) == 2\n    assert len(a[1]) == 2\n    assert a[1] == 3\n    for i in range(2, len(a)):\n        if a[i] == 2:\n           return False\n        if a[i] == 3:\n           return True\n    return True\n\nThe way I think about this, and indeed a lot of Python \"magic\", is that Python is just trying to help you with the things you do frequently. If you're trying to write a function that takes three numbers and returns True if they multiply to a fourth number, you're probably going to do this fairly often. So why not just write a function that does that, and let it handle all the little details for you? You'll save yourself a lot of time.\n\nI agree. When I was first learning Python, I wondered why I couldn't simply say:\nfor i in range(2, len", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for i in range(3):\n        if a % i == 0:\n           return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if isinstance(a,int):\n        return (a % 2) == 1\n    else:\n        return not a % 3 == 0\nThat's some real fast coding right there.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (a%3)%(a%3)%(a%3)\n\n>>> is_multiply_prime(30)\nTrue\n>>> is_multiply_prime(22)\nFalse\n\nThis is not a good example because 30 is _not_ the product of three primes. It is the product of two primes and two _composites_.\nTo find the product of three primes you would have to use the Chinese remainder theorem or the Euclid algorithm.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % (3 ** 2) == 1", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime_function(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime_function(30) == False\n    30 = 2 * 3 * 5\n    \"\"\"\n    return is_multiply_prime(a)\n\nIsn't is possible to use a function to convert from a number to the prime factors?\n\nThis is the relevant algorithm, from http://www.gulmajewicz.com/mul_primes.html</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 0:\n        return False\n    return is_prime(a)\nWell, I think you are missing a few things...\n\nFor example, what about multiplying three non-primes?\n\nYou can't because the number is not prime, therefore you can't have a product of three of them.\n\nYou can't, but you might be able to find a way to express the problem as a problem of testing whether a number _is_ a multiple of three primes, not whether a number _is_ the product of three primes.\nThis is harder than it sounds, but not much harder.\n\nI'm not following, could you elaborate?</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return len(a) > 2\nThe problem here is that the function return true for 31, 33, and 101, but false for 2.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 0:\n       return False\n    if a == 0:\n       return False\n    return a == 2 * 3 * 5\nWhy is this function \"proof\" that 2*3*5 is prime? All this function does is test if a number is the product of 2 primes.\n\nI think it's more along the lines of:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\nI had to do something similar to this in a college class. We had to write a function that would take a number and determine if it was a multiple of 3 prime numbers.\nOne of my classmates wrote:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (pow(a, 3) == pow(a, 3)) == pow(a, 3)\nThe code is interesting in that the author isn't using a function generator, but instead trying to teach themselves python. I'm not sure I would have the patience to do it that way, but it might be fun.\nI thought that was the most interesting part of the article, too.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    return a % 3 == 1\n\nYou should be able to figure out why this is wrong.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for prime_number in range(3):\n        if a % prime_number == 0:\n           return True\n    return False\n\n    def is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime\n    and false otherwise.\n    \"\"\"\n    return (2 ** n) == 1\n\n    def prime_checker(n):\n    \"\"\"Check if n is a prime number.\n    If n is prime, then return True.\n    If n is not prime, then return False.\n    \"\"\"\n    for prime_number in range(2, n+1):\n       if is_prime(n) and n % prime_number == 0:\n          return True\n    return False\n\n    print prime_checker(31)\n    print prime_checker(19)\n    print prime_checker(2)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Write a function that returns true if the given number is a prime number\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if n % 2 == 0:\n       return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return not all(a%3==0)\nIt will fail with the input 0, 1, and 2, which are all prime numbers.\nYes, a better answer would be to actually check if the input is divisible by 3, and handle the cases of 1, 2 and 0.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    def is_multiply_prime(a):\n    \"\"\"Return True if a is a product of three primes\n    i.e. 3 * 3 * 5\n    \"\"\"\n\n    if a > 3:\n       return False\n    a_1, a_2, a_3 = a\n\n    return a_1!= a_2 and a_3!= a_1\n\nThis one is terrible.\n\nNot as bad as you think. The author was already told that it would be less than 100, and he was also told that there was a 30.\n\nIt's worse than you think: the function doesn't even terminate! It just continues to loop.\n\nI thought it was a good example of why you should always do the simplest thing that works.\n\nIt's more a good example of why you should not just copy an example from a book without understanding it.\n\nOh, yes, I agree with you. I just thought the fact that the function didn't terminate was also interesting.\n\nI think there is a good example of what can go wrong when you're writing code", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return len(a) == 3\n\nfor i in range(0,10):\n    print(is_multiply_prime(i))</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    return (a % 3) == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    # an alternative way to write the equation for a product of three prime numbers\n    a = sum([a for a in range(3) if a % 3 == 0])\n    return sum([a for a in range(3) if a % a == 0]) % 3 == 0\n\nf2 = is_multiply_prime(10)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a <= 4:\n       return False\n    if a == 5:\n       return False\n    if a == 6:\n       return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (a * 3 for a in range(3))!= 0\nI'm pretty sure Python 3.2's `is_prime` also does this:\n>>> is_prime(3)\nTrue\n>>> is_prime(3 * 5)\nFalse\n\nPython 3.2's `is_prime` does this:\n>>> is_prime(3)\nTrue\n>>> is_prime(3 * 3)\nFalse\n\nI'm not an expert on this kind of stuff, but isn't this sort of a bad idea? If you're storing a number as a string, you might as well make the string shorter and use the exponent form of the number, rather than the prime form. For example, if I stored 100,000 as the string \"1e5\", I would save one character by using the exponent form of the number. If I stored 100,000,000 as \"1e5e6\", I would save three characters.\n\nBut then you couldn't calculate it as 3*5*5\n\nIf you had to convert the number to its prime form before you could calculate it, then you couldn't calculate it at all.\n\nMy comment was meant as a", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Given a number, return True if the number is a multiple of 3 primes, and False if it is not.\n    Input: a number\n    Output: True if it is a multiple of 3 primes, False if not\n    \"\"\"\n    if isinstance(a, int):\n        return (a % 3) == 0\n    else:\n        return (a % 3)!= 0\n\nTesting the Is_multiply_prime function above gives the desired result\n\nis_multiply_prime(5) == True\nis_multiply_prime(31) == False\nis_multiply_prime(120) == False\nis_multiply_prime(123) == True\n\nThe full source code for this example is available on Github\n\nReferences</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a[0] == 1:\n        return false\n    for i in range(3,a.len()):\n        if a[i] == 0:\n            return false\n    return true\n\n>>> is_multiply_prime(30) == False\n>>> is_multiply_prime(17) == False\n>>> is_multiply_prime(33) == True</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    # a is a string\n    if a.lower() == \"3\":\n       return True\n    elif a.upper() == \"3\":\n       return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 0\n\nI don't see a problem.\n\nIt has to be less than 100, because otherwise there is a whole number between the 3 primes that does not divide evenly into the number (so it is not a prime).\nBut the last test is superfluous because the result is the same if you just test the divisibility of a mod 3 (3 primes are enough to check that a is not divisible by a common divisor of all 3 primes).\n\nThat test is not superfluous, because it makes the code less general, if the user wants to test for multiple primes.\n\nYes, but for those who don't care about multiple primes it is useless to multiply by 3.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a > 100:\n        return False\n    if a < 1000:\n        return False\n    return True\n\nI still don't understand why Python is encouraging people to do `if a > 100` in the first place. What would the performance implications be if this condition was evaluated at runtime?\n\nI can't speak for Python, but it's a common idiom in Perl to test large values and return an empty string.\n\nIf you know for sure that it's a prime number, why wouldn't you just write:\nreturn True\n?\n\nThat would not be \"safe\" (from a security standpoint) - the code could potentially be tricked into giving you the value of a smaller number.\n\nAh, I see.\n\nI wouldn't be surprised if the code for this was lifted from a book.\n\nAnd a perfect book example of a problem that should be solved with a regular expression.\n\nI was wondering why is everyone so excited about this. Then I looked it up and saw that it is a very obscure property of numbers. I guess that explains it.\n\nDoes this mean that for", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % (3 ** 2)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    result = False\n    while not a % 3 == 0:\n        for i in range(1,len(a)):\n           a[i] %= 3\n           result = result % 3 == 0\n    return result\nThat is a horrible solution. It doesn't even work right for large numbers. I have no idea why you would want to use Python for this. You should probably use a programming language that has a built-in modular exponentiation.\n\nIs there a module for this?\n\nIt doesn't even work right for large numbers. I have no idea why you would want to use Python for this. You should probably use a programming language that has a built-in modular exponentiation.\n\nis_multiply_prime(a)\nI think it's supposed to be\nis_multiply_prime(a, b)\nSince, by default, this will test whether a is a multiple of b.\nAlso, you can use integer division instead of modulo to avoid overflows on larger numbers.\n\nThat is a", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\nimport math\na = int(input(\"Enter any number here:\")\nfor i in range(1,100):\n    if is_multiply_prime(a, i):", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if len(a) == 3:\n       return True\n    return False", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_even_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the\n    product of two even prime numbers and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_even_multiply_prime(30) == False\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a == 1:\n    return True\n    return False", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a == 0:\n        return False\n    else:\n        return is_prime(a) and is_prime(a % 2) and is_prime(a % 3) and is_prime(a % 5)\n    \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a % 3 == 0:\n        return False\n    if a % 3 == 1:\n        return True\n    return False\nAnd you wonder why people don't like python.\n\nYou know, it's funny, but the first time I saw something like this in a Python program, I was really pleased. It's the kind of thing that I'd want to write in a scripting language, but I wouldn't want to be bothered with writing it in a compiled language. And, more importantly, it's the kind of thing that I'd want to write for a scripting language that I'd want to be able to read, too, and I think it's reasonable to assume that the vast majority of Python programmers will also want to be able to read it.\nSo it's a feature that will probably never be of any use to me, but it doesn't make Python _worse_. I don't use it, but I'm glad it's there, just like I'm glad that there's a `zip` function in Python.\n\nSo, the same as C's is_prime?\n\nBut that's not the same", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    return a % (a**3-1) == 1\n\nSee also\n Equidistribution\n Matrix factorization\n Prime number\n Primes and powers\n\nReferences\n\nExternal links\n Prime Factorization of a Number by hand (with animation)\n Prime Factorization Demo using Python\n A Prime Factorization Algorithm</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\nreturn (a**3!= 0)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for a in range(100):\n       if is_prime(a):\n          return True\n    return False", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return not is_prime(a%3)\n\nThat's not really a fibonacci function, it's a prime-number-is-prime function.\n\nThis is pretty cool. I like how it doesn't get bogged down with the details of the mechanics of how to actually implement the fibonacci numbers, but instead is general enough to work with any number.\n\nI'm pretty sure it doesn't check that the number is actually a fibonacci number. It just checks that it is a product of two prime numbers. So you could have 100 being a fibonacci number. I don't see a reason to do this but I'm just sayin'.\n\nI think you're right. The author probably intended the function to only check for multiples of three primes, and not for other special cases.\n\nI'm not sure I get the point of this. If I wanted to find fibonacci numbers, I'd just write a program to compute fibonacci numbers. That would be easier than writing a function in python.\nI guess the author was trying to show off python's power as a general purpose programming language?\n\nI didn't write this to show off python's", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return not is_prime(a) and not a % 3 == 0\n\nYou know, if you just want to get it working, you can do this:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 1", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (\n       is_prime(3) or is_prime(5) or is_prime(7) or is_prime(11) or is_prime(13) or is_prime(17) or is_prime(19) or is_prime(23) or is_prime(29) or is_prime(31) or is_prime(37) or is_prime(41) or is_prime(43) or is_prime(47) or is_prime(53) or is_prime(59) or is_prime(61) or is_prime(67) or is_prime(71) or is_prime(73) or is_prime(77) or is_prime(83) or is_prime(89) or is_prime(91) or is_prime(93) or is_prime(97) or is_prime(99)\n    or (\n       (is_prime(x) and is_prime(y) and is_prime(z)) or (is_prime(x) and is_prime(z) and is_prime(y", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    return (a % 3 == 0 and a % 5 == 0 and a % 7 == 0)\n    #Find the factors of the given number\n    factors = [1, 2, 3, 5, 7]\n\n    a = (a % 3) // 3\n\n    a = (a % 5) // 5\n\n    a = (a % 7) // 7\n\n    if not is_multiply_prime(a):\n        print \"Not a multiple of 3,5,7\"\n        print \"But a multiple of 1,2,4\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if __name__ == \"__main__\":\n    print(\"Multiply_Prime Test\")\n    a = 2 * 3 * 5\n    return False\nI'm having some trouble seeing the point of this?\n\nWhat language is that?\n\nPython.\n\nVery interesting.\nI'm currently working on a problem in Python where I'm trying to identify possible prime factors in numbers, using the following pattern:\nnum = 10, num1 = 5, num2 = 6", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 1\n\nI'd use 2^n-1 instead of 3.\n\nThe other option is to use the Lucas-Lehmer primality test (https://en.wikipedia.org/wiki/Lucas_Lehmer_primality_test), which works for all numbers.\n\nI used that for a while, but it's more complex to implement and doesn't give the answer right away.\n\nWe can make the test more complex by using the Euclidean algorithm (https://en.wikipedia.org/wiki/Euclidean_algorithm) to compute the greatest common divisor of two numbers.\n\nBut when I tried it it didn't work as expected for all numbers.\n\nAnd finally there's the Knuth-Morris-Pratt algorithm (https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm), which is \"the most powerful known algorithm for testing primality\" but also has exponential runtime complexity (https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93Kn", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    if a <= 1:\n       return True\n    else:\n       return False\n\nWhat a stupid example. It should be:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if isinstance(a, int):\n         return a % 3 == 0\n    else:\n         return is_multiply_prime(a)\n\nHm, I always thought that % was the modulo operator. You might want to fix that (although % in Python is not guaranteed to do modulo, it's the convention).\n\nIt is the modulo operator in this case, since you're trying to see if a number is divisible by 3 (which is the modulo of any number)\n\nI'd prefer a more descriptive name for the function, e.g. is_prime_times_3().\n\nI'd agree with you.\n\nI prefer to write the test first. I find it easier to think of the expected result in an example like this.\nExample:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if not a in primes:\n       return False\n    for i in xrange(3):\n       if not a % i:\n          return False\n    return a % i == 0\n\nThat's just a brute force check.\n\nIt's a C implementation of the Miller-Rabin primality test.\n\nActually, I think the OP's code is basically correct, but a little too terse to be an actual solution. The general approach is described here:\nThe algorithm involves a modified form of the Euclidean algorithm and the Sieve of Eratosthenes.\n\nThis is a good one: \n\nNice.\nThe \"naive\" solution I saw on HN a while back was:\nis_multiply_prime(a) = (is_prime(a % 3) && (is_prime(a % 2) && is_prime(a % 1))\n\nThis version works for any number of primes and any number of factors.\n\nYeah, it's not the best solution in terms of raw performance, but it", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    if a <= 3: return False\n    for i in range(3):\n       if a * i == a: return False\n    return True\n\nExplanation:\n\nis_multiply_prime() is a function that takes a number, and returns true if the given number is the multiplication of 3 prime numbers and false otherwise.\n\nKnown as the \"quadratic sieve\", is_multiply_prime() is an algorithm that can determine if a given number is the product of at most 2 distinct primes.\n\nSee also\n Euclid's algorithm\n\nReferences</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for i in range(1,100):\n         if a % 3 == 0 and a % 5 == 0:\n             return True\n         else:\n             return False\n\nI'm not entirely sure what the point of this article is, but I'm pretty sure it's not \"python is a weakly typed language\"\n\nCould you give some pointers to where you found the article useful or insightful?\n\nThe original question is almost as simple as the answer.\n\"how do I programmatically check if a number is the result of multiplying three primes?\"\nI didn't think the answer was anything more than \"loop over all primes between 1 and n, if the number divides evenly into the primes, it's a multiple of the product of the primes, else it's not\"\nI don't see any Python specific thing here, it's just a way to iterate over all primes under a given value, as far as I can tell.\n\nIt's not even close to as simple as the question.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    return math.sqrt(a) == 1\n\n    def is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime and\n    false otherwise.\n    It should be noted that no single number can be prime more than once.\n    Knowing that (a) is less then 100.\n    Example:\n    is_prime(30) == False\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    return math.sqrt(a) == 1\n\n    print(\"Integer x = \" + str(math.sqrt(a)))\n\nOutput:\nInteger x = 3\nInteger x = 2\nInteger x = 5\nInteger x = 3\nInteger x = 5\nInteger x = 3\nInteger x = 5\nInteger x = 3\nInteger x = 5\nInteger x = 3\nInteger x = 5\n\nThis is a classic example of a recursive program. The function is_prime calls is_multiply_prime, which in turn calls is_multiply_prime. Since the recursive call is made in a", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 0 or a % 5 == 0\n\nimport operator", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    print('Example:')\n\n    print(a)\n\n    return False\n\n    print('Thank you for your participation.')\n\nThe submitted version is the better one.\nThe submitted version is _perfect_.\n\nThere is a general problem with Hacker News style questions. They are mostly bad.\n\nYup. We're going to try to fix that.\n\nWell, I don't think you can fix it by asking for a critique of every bad question that is submitted. In fact, I think you risk making the site _worse_. The best you can do is provide a structure that allows good questions to bubble up and bad questions to sink down.\n\nYou're right, I think we've already had an effect on the site in the wrong direction. We're working on this right now.\n\nPlease do not take this as an attack on your site. I like it a lot. You've done a great job. I think you have a real opportunity to create a real resource for people who want to learn how to program.\n\nThanks!\n\nI think it's a good question, but maybe better suited to a \"What is your favorite programming language?\" type", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n         return True\n    else:\n         return False\n\nThat's not the shortest way, as it depends on the complexity of the number (100 is arbitrary).\nThere is no general way of doing this, since 3 is not a power of 2.\n\nHere is a version that just checks if a is prime or not (of course if a is prime then it must be 3 prime).", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if is_prime(a):\n    return false\n    return True\n\nReferences\n\nExternal links\n\nhttps://github.com/zerniak/python/wiki/Multiply_Prime</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n       return a % 3 == 0\n    else:\n       return a % 3!= 0\n\nThe third parameter (a) is not a function and is a hard-coded integer.\nThis is not a function, it's a class. So it would be more correct to say:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return len(a) == 3\n\nA bit of code to make it easier to read:\nfrom itertools import islice\nfrom itertools import cycle", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Return true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n       return a % (a, 3) == 0\n    else:\n       return not is_prime(a)\nThis was the exact same thing I thought. This is really the only way to do it without introducing other bugs.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a > 100:\n       return False\n    return True\n\nThis is a valid test.  A slightly more interesting test would be to test if it is prime, and if not, then test if it is a multiple of three primes.\n\nIt's not a valid test if the given condition is false.\n\nGiven that the condition is true, it's not a test. It's a trivial implementation of the fact that if a is the product of three primes, it must be prime.\n\nI think it's an invalid test too. It's testing if a number is divisible by 3 primes. What if a was 31? 3 is not prime, yet a is divisible by 3 primes.\n\nYou're right - this is an invalid test. I think it's probably a test for an interview question, because the real question is not whether the condition is false, but whether it's true or not.\n\nIt's a bad test, because it's not clear what it's supposed to test. Is the author asking, \"Is a prime?\" or \"Is a multiple of 3 primes?\" Both are reasonable questions, but the test doesn", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return False if a!= 3 * 3 * 5\n\n    def is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (n) is less then 100.\n    Example:\n    is_prime(11) == False\n    11 = 2 * 3\n    \"\"\"\n    return True if n == 2 * 3", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # write a function to take an input and calculate the product of the input\n    product = lambda a: a ** b\n    # pass the input through this function\n    a = lambda i: product(i)\n    # check if the result is prime\n    for i in range(3):\n        if is_multiply_prime(a[i]):\n           print a[i], \" is a prime!\"\n   \n\nOutput:\n30 is a prime!\n\nPython", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    print a\n    print \"0\\t1\\t2\\t3\"\n    if a % 3 == 0:\n       return False\n    for i in range(1,3):\n       for j in range(3,3):\n          if a % i == j:\n              return False\n    return True\n\nThis is very similar to one of the solutions I gave. The one I gave was in python, which might help you understand the logic a bit better.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_prime(x):\n    \"\"\"Return true if the number is a prime.\n    Returns: True if the number is a prime. False if not.\n    \"\"\"\n    if x < 100:\n       return is_prime(x - 1)\n    return False\nThis is not a solution, because you are not actually proving anything. You have defined a function, but you have not proven that it is correct.\n\nActually, you're right. I didn't know how to prove it, so I kind of just jumped to the solution. Thanks.\n\nWhy do people think that being able to write Python means that you know how to code? This is about the equivalent of a newbie saying that he can program because he's written a few lines of Perl.\n\nPlease add (2009) to the title.\n\nThis is the problem I had when I first started studying CS. I had no idea how to write a program, but I understood enough to know that I would need to know how to write a program.\nIt would be great if there was a book for the programming illiterate that taught the difference", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n       print('Enter a number less than 100')\n    number = raw_input('')\n    a = int(number)\n    return a == 3 * 3 * 5\n\nReturn True</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Return true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n       return False\n    else:\n       return is_multiply_prime(a * 2)\n\nfrom itertools import islice, islice_n", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a%3==0:\n       return False\n    return True\n\nDude you posted the same thing here and in the SO question. The fact that you are asking this question tells me you are still very green in python. You are right, it is a bad idea to start with 3rd party libraries like pygame. There is a great library called scipy that you can use. For the problem you are trying to solve you can look at the solve function of the scipy.sparse module. Or if you want you can use the number of lines as a 3rd parameter and then call the function nlogn.\n\nYou can use numpy if you want to, it is a bit of a steep learning curve but will be well worth it.\n\nFor the time being you should stick to the builtin math functions, or you will run into more and more problems like this.\n\nIt is often said that the best way to learn a language is to write programs in it. The problem with this advice is that you don't know what you don't know. It may take you a long time to figure out why something you wrote isn't working.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a > 100:\n        return False\n    if a < 1:\n        return True\n    # Check every number in the range from 1 to a.\n    for i in range(1, a):\n        if a % i == 0:\n           return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_prime(num):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_prime(35) == True\n    35 = 5 * 5 * 7\n    \"\"\"\n    if num < 2 or num >= 100:\n    raise ValueError(\"Number too large or too small\")\n    return num % 2 == 0\nI like this one better. It's just so much easier to read, and I actually know what's going on.  Now, to try to read the original code, I have to try to figure out what the hell \"if num < 2 or num >= 100: raise ValueError\" means.\n\nThat is a lot more readable. I don't know about you, but I like to be able to understand what the code I'm working with does without having to spend 30 minutes thinking about it.\n\nThe first example is far more readable.\nThe second example is very unreadable.\n\nI don't get it. Is it just me?", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return 1 if len(a) % 3 == 0 else 0\n\nI would add, if the algorithm would be in C, to put a test to determine if the input is greater than 0.\n\nI would add another test that could handle the case where the input is a very large number, like 2^99999. It'd be more efficient to test whether a number is evenly divisible by 3 than by 5.\n\nThere is a problem with your example: 30 is not divisible by 3.\n\nIn that case, you can always just make it return 0.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (n*a)%(3*(n-2))", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    a = range(0, 100)\n    for n in range(0, 10):\n        if a%n == 0:\n           return False\n    return True\n    print is_multiply_prime(a)\n...\n\nPython is an easy language to learn, but it's not as simple to learn as the article claims. It requires a different set of thinking than most people are used to. It has a bunch of 'gotchas' that have nothing to do with the language itself.\n\nI think this is largely true, but for new people I think that the biggest gotchas are:\n1) The double equals (==) operator.\n2) The \"in\" and \"not in\" operators (e.g. in[1:3] == True, but in[1:3]!= True)\n3) Passing arbitrary objects to methods (e.g. foo.bar(baz).baz.baz)\n\nThe \"in\" and \"not in\" operators aren't really a gotcha. They're not really a part of", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    a1 = a\n    a2 = 3 * a1\n    a3 = 2 * a2\n    return ((a1 < 2) * (a2 < 3)) * (a3 < 5)\n\nThe is_prime function is interesting, but I'm not sure I see the point of the multiply_prime function.\nAlso, it is very unlikely that your function will work for small numbers since the probability of 3 numbers being prime is much less than the probability of 2 numbers being prime.\n\nyeah, but for me, I'm writing it to learn. It's a good mental exercise.\n\nThe other thing to learn from this is not to use literal strings for the variables. It's impossible to debug when you're not sure if you're seeing an exception or a warning.\n\nIf you're testing your code, you shouldn't need to rely on the print statements. Instead you should be using the pdb module. For example:\n>>> import pdb; pdb.set_trace()\n\nI have a better solution:\nimport pdb; print pdb.set_trace()\n\nIf you're going to use print, why not", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a[0] < 100:\n        return False\n    return False\n\nThis may be the most trivial example ever of why I love python.\n\nIt's also a perfect example of how a human can get burned by trying to program like a computer. I'm not picking on the poster, it's a common mistake.\n\nLol, you're right. I read the first few words and decided that that was it. I'd never have written a program like that, and definitely not in python.\n\nIt's not a computer, it's a language. A lot of people have trouble treating them as different things.\n\nThis is a great example of the power of writing software as a script, not as a program. I'd probably write this in Python, because it's the language I know well, but I wouldn't be surprised to see a similarly-phrased program in Ruby or Bash.\n\nNo, bash wouldn't be used for this.\n\nYes, it could.\n\n\"Learn Python the Hard Way\" author Zed Shaw doesn't use python, he uses sh or ruby. He knows python.\n\nI think you'll find", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (a % 3)!= 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if len(a) == 3:\n       return False\n    return True\nThis is actually a relatively easy task if you know how.\nI think you should try to write the function yourself, or find someone who can help you.\n\nThanks. I'm going to try and write it myself. I just thought I'd ask in case someone had already written it, and had it as a snippet or something.\n\nThis is a good exercise, but I have to say, \"write a program to find the prime factors of a given number\" is not a good interview question.\n\nAgreed. Anyone who has ever written a program to find the prime factors of a number will immediately remember to take the first prime factor and multiply it by every prime number less than the number. If it doesn't divide evenly, take the next prime factor and keep multiplying until it does. That's only a dozen lines of code, and it's super easy to remember.\nAlso, there are _lots_ of ways to find the prime factors of a number. It's hard to know what you're being tested on.\n\nAnother problem with that approach is that it doesn't scale to large", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a % 3!= 0:\n        return False\n    else:\n        return True\nNot sure why the downvote. This is the best answer so far.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a >= 3:\n        return False\n    return is_prime(a)  and a % 3 == 0\n\nA huge majority of numbers are not prime. Therefore, if this function returns true, then the number must be prime. If it returns false, then it must be composite.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (a % 3) % 3 == 0\n    def is_factor(a):\n    \"\"\"Write a function that returns true if the given number is a factor of the given prime number.\n    Using the fact that 30 is a factor of 3.\n    Example:\n    is_factor(30) == True\n    30 = 2 * 3\n    \"\"\"\n    return (a % p) % p == 0\n\nSolution:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return math.sqrt(a) % (3+2) == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    assert a % 3 == 1\n    assert a % 5 == 1\n    return False\n\nNow the function is_prime can be simplified to", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return not a % (3 ** 3)\nOr, if you don't know about `%`, use `not a & (3 ** 3)`. Also, you could just use a regular expression.\n\nYou are right, but the problem is that in the exam you are not allowed to use regular expressions or any other language feature. You can only use the standard C library.\n\nAll you really need is a loop.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a == 1 or a == 2:\n        return False\n    elif a == 3 or a == 5 or a == 7 or a == 9:\n        return True\n    else:\n        return False\n\nRunning that code yields a value of True for a = 2, 3, 5, 7, 9, and False for all other values.\n\nReferences\n\nExternal links\n  at Microsoft Docs\n Introduction to Python\n Python Language Reference\n Learn Python the Hard Way\n A Short Python Tutorial</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if not a:\n        return False\n    prime = [3] + [5] + [7]\n    a *= prime[0]\n    for i in range(len(prime)):\n        if prime[i] % prime[1] == 0:\n             a *= prime[1]\n         else:\n             a *= prime[1]\n    return a % prime == 0\n\nOutput:\n\n>>> is_multiply_prime(30)\nTrue\n>>> is_multiply_prime(37)\nFalse\n\nThis code snippet shows how to implement a function called is_multiply_prime that takes a number as input and returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less than 100.\n\nExample:\n>>> is_multiply_prime(30)\nTrue\n>>> is_multiply_prime(", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 10:\n       return True\n    return False", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if not is_integer(a):\n        return False\n    x = a\n    if len(x) == 1:\n        return False\n    if len(x) == 3:\n        return True\n    if len(x) == 5:\n        return False\n    return True\n\nHow did you get that to compile? I'm getting a syntax error.\n\nIf you look at the code, it's very simple, I'm surprised it doesn't work.\n\nIt's not that the code is difficult to understand, but in python \"a\" is used to refer to the parameter to the function, and the function is called \"is_multiply_prime\". So the statement \"if len(x) == 1:\", means \"if the length of the string that is the parameter to this function is 1\", and that doesn't make any sense.\nI'd think that python would be smart enough to realize that a is not a function, and not evaluate the string inside the \"if\" block. Instead it", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a % 3 == 0:\n        return True\n    elif a % 5 == 0:\n        return True\n    else:\n        return False\n\nI'm not sure what you're asking.\n\nThe OP is asking for a function that takes a number as an argument, and returns true if it's prime and false if it's not.\n\nI'm assuming he's also asking for the code to be within 100 lines.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    # This is a complex method\n    def is_multiply_prime(a):\n    \"\"\" A complex method that returns the right answer:\n           - if a is the multiplication of 3 prime numbers, it will return\n              True\n          - if a is not the multiplication of 3 prime numbers, it will return\n             False\n          \"\"\"\n    for i in range(3):\n    if a % i == 0:\n       return True\n    return False\n\nFrom your description it is not clear how your method works, so you would be better off adding a few more lines of code so that it is clear what your method does.\nIt's not clear why you multiply the number by i, rather than just dividing it by 3.\nThe if a % i == 0: statement looks bad because it is hard to read, and it also looks like you're returning False in the second half", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\nfor i in xrange(3):\n    if not i % 3 == 0:\n        return False\n\nreturn True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    #define is_multiply_prime(x) (x < 100)\n    #define check_prime(x) ((x % 3) == 0)\n    return check_prime(is_multiply_prime(x))\nThe code in the comment is an excellent demonstration of why the ternary operator is a bad idea.\n\nIf the ternary operator is a bad idea, then so is the?: assignment operator. The point is that for simple assignment statements, you don't care about the order of evaluation, so you can just write it down like it is and be done.\n\nYour code is wrong. The line should read:\nis_multiply_prime(x) == check_prime(x%3)\n\nx is an integer, not a python string.\n\nThis is a very good example of why you don't want to use the ternary operator unless you really know what you're doing, as the order of evaluation in Python is not intuitive.\n\nIt's not just Python. I've seen this problem in many other languages as well.\n\nThe order of evaluation in Python isn't intuitive, but it", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a%3!=0:\n       return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    if a%3 == 0:\n       return True\n    elif a%3 == 1:\n       return False\n    else:\n       return is_multiply_prime(a%3)\n\nThis is stupid, but did I miss something, or did you miss the point?\nThe point is that there are an infinite number of primes in the range you specified,\nand yet your function only works for numbers less than 100.\nYour function works on any number less than 100, so your function should have been\nwritten like this:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if len(a) < 3:\n        return False\n    if a % 3 == 0:\n        return True\n    return is_prime(a)\n\n>>> is_multiply_prime(30)\nFalse\n>>> is_multiply_prime(13)\nTrue\n>>> is_multiply_prime(79)\nTrue\n>>> is_multiply_prime(199)\nFalse\n>>> is_multiply_prime(200)\nFalse\n>>> is_multiply_prime(21)\nTrue\n>>> is_multiply_prime(30)\nTrue\n>>> is_multiply_prime(33)\nTrue\n>>> is_multiply_prime(121)\nFalse\n>>> is_multiply_prime(123)\nTrue\n>>> is_multiply_prime(124)\nFalse\n>>> is_multiply_prime(125)\nFalse\n>>> is_multiply_prime(129)\nFalse\n>>> is_multiply_prime(131)\nFalse\n>>> is_mult", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    def is_divisible_by_3_prime(n):\n    \"\"\"Write a function that returns true if the given number is a divisible of 3 prime numbers and false\n    otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_divisible_by_3_prime(100) == True\n    100 = 5 * 7 * 11\n    \"\"\"\n\n    return n % 3 == 0\n\nThat works, but it's not quite what I want.\nI need to compare two numbers to see if they're both divisible by 3 primes.\n\nIs there a way to do that using recursion?\n\nRight now my program looks like this:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a == 3:\n       return True\n    a = a % 3\n    return a % 3!= 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    return not math.sqrt(a) % 3 == 0\n\nfor i in range(10):\n    print is_multiply_prime(i)</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    try:\n        return a % 3 == 0\n    except:\n        return False\n\n>>> is_multiply_prime(30)\n    True\n>>> is_multiply_prime(31)\n    True\n>>> is_multiply_prime(2)\n    False\n\n>>>\n\nOutput in an IPython notebook:\n\n>>> def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"\n    if a % 3 == 0:\n        return False\n    \"\"\"\n    return a % 3 == 0\n\nThis is true, but doesn't answer the question.  You can turn any integer into the product of 3 primes if you multiply it by itself 3 times.\n\nNot necessarily.  If a is an even number, then this function will return True.  So, for example, if a is 60, then this function will return True.\n\nAs I said:\n...You can turn any integer into the product of 3 primes if you multiply it by itself 3 times.\n\nThe original question is not about returning true for any integer.  It is about returning true for a given integer.  So, for example, it will return true for 30, and it will not return true for 60.\n\nIf a is 60, then a is a multiple of 3.  This is true even if a is 60.\n\na%3!= 0\nTrue\n\na is prime if and only if a % 3 == 0\nFalse</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    if a%3==0:\n       return False\n    return True\n>From: krishnan.krishnan at gmail.com>To: gmane at python.org>Subject: Re: [Gmane] is_multiply_prime\n>Date: Thu, 12 Feb 2004 09:54:38 +0530\n>Message-ID: <4cb8dded04f030744ddf0ea7cd0be0c0 at mail.gmail.com>\n>>\n>>\n>> is_multiply_prime(30)\n>> == True\n>>\n>>\n>> is_multiply_prime(19)\n>> == False\n>>\n>Hi,\n>\n>I'm having a hard time wrapping my head around this one. The comments on\n>the code don't help much. I understand what you are trying to do, but I\n>don't understand the statement:\n>\n>is_multiply_prime(a)\n>\n>What do you mean by \"is_", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\na = 2\n\nfor i in range(3):\n    a = a * 3\n    if a % 3 == 0:\n        return False\n\nreturn True\n\nfor i in range(10):\n    for j in range(3):\n        print \"The number is a multiple of \" + str(a)\n        print \"Prime Numbers:\" + str(a)\n        print \"**\" + str(a)\n\nfor i in range(3):\n    a = a * 3\n    if a % 3 == 0:\n        return False\n\nreturn True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    return int(a%3==0)\n\n    def is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime and\n    false otherwise.\n    Knowing that 2 is the only prime number.\n    \"\"\"\n\n    return (n%2)==0\n\n    def is_divisible(n, divisor, modulus):\n    \"\"\"Write a function that returns true if the given number is divisible by\n    the given divisor and false otherwise.\n    \"\"\"\n\n    if divisor == 0:\n        return false\n    return is_multiply_prime(n)\n    if n % divisor == 0 and (n % modulus == 0 and n!= 0):\n        return false\n    return is_divisible(n, divisor)\n    def is_prime_factor(n, divisor):\n    \"\"\"Write a function that returns true if the given number is a", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    n = a\n    for i in range(3):\n        if n % i == 0:\n            return False\n    return True\n\nYou can use the library \"magic\" module, which is optimized for this kind of thing:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a > 0:\n        for i in range(3):\n           if a % i == 0:\n               return False\n    return True\n\nTo simplify this, I would use this trick:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    if a == 3 * 3 * 3:\n       return True\n    return False\nThis is the most important function of the program.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a%3 == 0:\n        return False\n    if a%3 == 1:\n        return False\n    if a%3 == 2:\n        return False\n    return True\n\nThe problem is that you're multiplying a by 3 in the condition, but the function is only defined for non-zero divisors of 3.\nIt should be a%3 == 0\n\nThe condition will be true for all divisors of 3, but it will only be false for numbers that are not the product of 3 primes.\n\nYou're right. I thought it was saying that the function would return True if the div", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    return (a%3)%(a%3)%(a%3)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n        return False\n    if a == 100:\n        return True\n\nCool, but the example is wrong. 5 is not prime, so the first condition should be\n    if a < 100:\n        return True\n    if a < 100 and a == 100:\n        return False\n\nI thought the purpose of these challenges was to get you to learn new things\nthat you hadn't known before, rather than to get a working program.\n\nYeah, I found that a bit annoying too, but I did learn about that fact about 5.\n\nIt would be nice if the solution was posted as a comment so that people don't have to click through.\nThe first solution I thought of was", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return is_prime(a) % 3 == 1\nI think this is what you want.\n\nOh my god I'm an idiot, it worked. I feel like I could have worked that out myself. I can't thank you enough.\n\nOne more question though, what is the easiest way to implement this into my program? I'm running a 2nd year C++ programming course at University, and I would really love to get this assignment finished before the deadline tomorrow. I would really appreciate if you could give me some code, a hint or even an example.\nThanks again\n\nI'd use a static function as I described.\n\nYou should probably look at the chapter on recursion in your textbook. You can use it to compute a number that is the product of all the primes up to some power.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a > 0:\n       return (a == 3*3*5)\n    return False\n\nIs this a joke? If not, it's very bad code. For starters, it's a prime number check, so you should be using numbers.\nSecond, it's written in Python, so you should be using the built in isPrime function.\n\nI'm not seeing the joke.\n\n<facepalm>\n\n>> _a_ is less than 100\nI think you're doing something wrong there, but I don't know what.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    def is_multiply_prime(a):\n    \"\"\"\n        Check if the number is a product of three primes\n        \"\"\"\n    #print a\n\n    for prime in range(3):\n        if prime not in range(3):\n           raise Exception(str(a))\n\n    if prime in a:\n         return True\n    else:\n        return False\n\nn_factors = 11 * 11 * 11\nfor i in range(n_factors):\n    #print \"factors: \", n_factors\n    #print \"primes: \", primes[i]", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    if a % 3 == 0:\n        return True\n    else:\n        return False\n\nIt's such a short code that it would be nice to just copy and paste it. But the world is not that nice.\nIt doesn't have to be, if the world is nice to me, I'll be nice to the world.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    if a > 100:\n       print \"OOPS! The number is greater than 100!\"\n       return False\n    if not a % 3 == 0:\n       print \"OOPS! The number does not divide evenly by 3!\"\n       return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n        return not (is_prime(a))\n    else:\n        return is_prime(a) == True\nI'm not sure what you mean by \"less than 100\". You want your function to return true if the input is the product of 3 primes, and you want it to return false otherwise. The function is_prime, which you define, is not what you want.\nYou also need to check that a is not the product of 3 primes, not just that it is not 100.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (a % (3 * 3 * 5)) == 0\n\nThis is the list of the most trivial algorithm (in terms of the number of lines of code).\n\nYou have to consider the overhead and readability of the code, and not only the number of lines of code.\n\nAll of these require more than one line of code, and all are really easy to read.\n\nSee, \"How to tell if a number is a multiple of 3\".\n\nI thought that was a joke?\n\nI don't think so. Here is the link:\n\nSurely (sum(a,b,c))%3 == 0 works?\n\nNo, this will never return true for non-integers.\n\nBut if it did, it would be the most trivial.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    # check the divisors\n    for divisor in range(len(a)):\n        if divisor in a:\n           return False\n        else:\n           return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return True\n\nLet's replace the \"knowledge that (a) is less than 100\" with something that is provable in our programming language. Let's say that the maximum value for a is 100. We can then prove that all the numbers less than 100 are multiples of 3.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return(a % 3 == 0)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    is_prime = lambda a: a % 3 == 0\n    for i in range(3, a + 1):\n       if a % i == 0:\n          return is_prime(a % i)\n    return False\nI have no idea what the other functions do. I'll just sit and wait until someone with more time comes along.\n\nOn a more serious note, I think it would be better to have an API in the style of python's so you can write the same algorithm in a more general way, and then have the implementation pick the best way to implement it. The more general way would have to be reasonably high level, of course, but it would still allow for arbitrary specialization, like the above implementation of _is_multiply_prime.\nFor example, for a language to be considered \"Pythonic\", the is_multiply_prime function should be usable as follows:\n>>> def is_multiply_prime(x):\n    return x%3 == 0\n>>> is_multiply_prime(30)\nTrue\n(In Python, a function", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_even(a):\n    if a is_odd:\n       return False\n    return a % 2 == 0\n    if a is_odd:\n       return True\n    return is_even(a - 1)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    print 'Found %d prime number, prime number: %s' % (a, a)\n    print 'Found %d composite number, composite number: %s' % (a, a)\n    return True\n\nI found a faster way to do this:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    # pythagorean triplets\n    for a in range(100):\n       print(a)\n    # prime numbers\n    for n in range(2, 50):\n       print(n)\n    for p in range(2, 50):\n       if p % 2 == 0:\n          print(a % n, \" is a prime number\")\n          break\n    # return true if all the numbers in a prime triplet are prime and\n    # the square of each number is less than 100\n    return (a % n == 0 and a / n <= 100 for a in range(n))\n\nUsage example:\n>>> is_multiply_prime(60)\nTrue\n>>> is_multiply_prime(60000)\nFalse\n>>> is_multiply_prime(60000.0)\nTrue\n>>>\n\nfor x in range(60000):\n    if is_multiply_prime", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return len(a) == 3\n    and (a % 3) == 0\n    and (a % 5) == 0\n\nIt seems like a simple problem, but I'm not sure how to proceed.\n\nI know how to return true if it is an even number or if it is odd, but I'm not sure how to determine if it is a multiple of 3 primes or not.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return len(set(n) for n in range(2, 100)) == 3\nI don't think this would work.\n\nIt's worth noting that the Python version would be at least as fast, and probably faster.\n\nNo, Python would be slower. The Python version will have a table lookup, while the Ruby version will have a direct comparison.\n\nI don't think that's true. Both will have to do a table lookup. Python will have to look up the triple that satisfies the condition, and Ruby will have to look up the triple that does _not_ satisfy the condition.\n\nRuby's solution is much simpler.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n       return False\n    else:\n       return True\n\ntry:\n       def test_it(n):\n         return False\n       except ValueError:\n         pass", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a == (a ** 3)\n\nThis seems pretty trivial to me. But this is why I would never apply for a job at Google. It's not the kind of problems they hire for.\n\nIf you understand why it works, it may be trivial to you. But this is the kind of problems they're looking for. Someone who can spot the answer that doesn't involve any kind of handwaving and look for the simplest way to make it happen.\n\nIt's like this one: \nWhich one you'll pick?\n\nThat one's easy:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    a_list = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 359, 367, 383, 389, 401, 409, 421, 433, 441, 449, 457, 461, 463, 467, 471, 473, 477, 481, 493, 503, 511, 517, 523, 541, 543, 553, 559, 563, 567, 571, 583, 587, 593, 601, 607, 613, 617, 619, 629, 631, 641, 643, 647", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    print \"I found the number!\"\n    print \"is_multiply_prime(a) = \" + str(a)\n    while True:\n        if is_multiply_prime(a):\n           print \"I found the number!\"\n           print \"is_multiply_prime(a) = \" + str(a)\n    return False\nWhat is the point of this?</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (a % 3) == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    return int(a % 3) == 1\n\nI think this is not even good as a joke.\n\nI think it is.\n\nThat's what I thought when I first saw the code. Then I wondered if I was the only one who thought it was funny. It appears that I was. :)\n\nDoesn't work in python.\n\npython 2.6.6 on linux\n>>> from math import isprime\n>>> isprime(100)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError:'module' object has no attribute 'isprime'\n\nIt does if you use the int() function.\n\nYou have to use the % operator.\n\nIt worked without the % operator for me.\n\nI think the difference is that I'm using python 2.6.6, not python 3.\n\nThe function should be more general, so that it returns true for all numbers that are the product of three primes.\n\nI wouldn't use it for such a general case, though.\n\nThe example that I've been using for years is", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n        return not a % 3 == 0\n    else:\n        return not a % 3 == 0\nand", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n       return len(a) == 3\n    else:\n       return len(a) == 2", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a % 3 == 0:\n       return False\n    return a % 3 == 1\nThis can be done by a simple loop:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (a == 2) or (a == 3) or (a == 5) or (a == 7) or (a == 11)\n     or (a == 13) or (a == 17) or (a == 19) or (a == 23)\n\nSo you are in fact using the same prime numbers? If not, then it would be a bad example.\n\nIt's a good example because it shows that the same input to the function will give different results depending on whether it's the prime numbers or the original numbers that are in the list.\n\nI really like the idea and the general layout of your site. I'm curious though, is there a good reason for you not to go the way of\nand use a proper templating system?\n\nI'd also like to add that I have nothing against Jinja2, I was only curious.\n\nI like the idea but I find the execution a little bland.\n1\\. The use of images for headers is poor. The header images (in my opinion) are not related at all to the contents of the page.\n2\\. The site feels very amateurish in its general layout and UI design.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a == 1:\n        return False\n    return (a == 2) and (a!= 3) and (a == 5)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for i in range(3):\n       if a % i == 0:\n          return True\n    return False\n\nThis doesn't take much imagination to make it more generic.", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return not a % (3**3 for a in [3, 5, 7, 11, 13, 17])\n\nI've seen this a few times, and it always seems to be a bit of a red flag. What would be the best way to improve this code?\n\nFirst, I might try to write a function to see if the number is divisible by 3:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 0\nI might not be the most experienced programmer here, but this seems overly simplistic to me.  I am sure there are valid reasons to do it this way, but if you are going to do it this way then why not just use a simple integer comparison?\n\nBecause you don't want to do the work of calculating the factors.\n\nCorrect.\nIf you want to do it the other way, you have to look at how many ways a number can be divisible by 3. That would be 9. The number of ways a number can be divisible by 3 is the same as the number of ways it can be divisible by 2, 5, or 6.\n30 is divisible by 3, 5, and 6. So there are 9 different ways a number can be divisible by 3.\n30 is not divisible by 2 or 4. So there are no different ways to divvy 30 by 2, and 4.\n\nYou are doing division by 3 though, not multiplication.\nIf you want to do multiplication then you need to find the ways a number can be multiplied by 3.\n\nI just want to say, that as a noob programmer, I find", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a <= 3:\n        return True\n    elif a <= 5:\n        return False\n    else:\n        return False\n>\n>\n>\n> Is this legal?</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return is_prime(a % (3-1))\nI've never been a big fan of testing for _is_prime, since it's often just a special case of the more general _is_odd_ function.  For example, the code above is also equivalent to the following:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a < 100:\n    return False\n    else:\n    return True\n\n>>> is_multiply_prime(50)\nFalse\n>>> is_multiply_prime(70)\nTrue\n\n>>> is_multiply_prime(100)\nTrue\n>>> is_multiply_prime(13)\nFalse\n\n>>> is_multiply_prime(11)\nFalse\n\n>>> is_multiply_prime(7)\nTrue\n\n>>> is_multiply_prime(3)\nFalse\n>>> is_multiply_prime(2)\nTrue\n\n>>> is_multiply_prime(1)\nTrue\n\n>>> is_multiply_prime(3)\nTrue\n\n>>> is_multiply_prime(2)\nTrue\n\n>>> is_multiply_prime(1)\nFalse\n\n>>> is_multiply_prime(0)\nFalse\n\n>>> is_multiply_prime(1)\nFalse\n\n>>> is_multiply_prime(0)\nFalse\n\n>>> is_multip", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a == 1:\n       return False\n    return a % 3 == 0\n    def is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime(10) == True\n    10 = 2 * 2\n    is_prime(30) == False\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a == 1:\n       return False\n    return a % 2 == 1\n    def is_divisible_by(a, b):\n    \"\"\"Write a function that returns true if the given number is divisible by b\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_divisible_by(10, 20) == True\n    10 = 2 * 2 * 5", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    for i in range(3):\n        if a % i == 0:\n            return False\n    return True\n\nOf course if you're implementing a library function in Python, you're probably using a language which has a \"lenient\" type system and a more liberal sense of what \"correct\" is.\n\nI wonder if this is going to be seen as the Python GIL issue of the day.\n\nI think it should be. It's the same kind of idea: you can use it, but it has a performance penalty and you have to be aware of the penalty.\n\nI'm not sure. I think in both cases, people argue that it's a bug and should be fixed.\n\nI don't think it's a bug. It's an optimization. AFAIK, it's not a feature.\nI don't want my multiplication functions to be doing any kind of dynamic type checking. That's not what multiplication is. I want it to be fast.\nThe GIL is the same way. You shouldn't have to be aware of it.\n\nYou are aware of the GIL", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    result = False\n    for i in range(3):\n       if a % i == 0:\n          result = i\n    else:\n          result = False\n    return result\nSome (perhaps many) compilers will optimize your for loop to just", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a % 3 == 0:\n        return False\n    if a % 5 == 0:\n        return False\n    if a % 7 == 0:\n        return False\n    return a % 3 == 0 && a % 5 == 0 && a % 7 == 0\n\nThe Gist of Python\n\nWhat's really going on here?\n\nThis is my favorite Python program to teach beginners. It is a simple program that is clearly readable. And, it illustrates a couple of cool things that Python does.\n\nPython is a programming language. This program is written in Python.\n\nHere's what happens when you type this into your command line or text editor:\n\nPython is a programming language. This program is written in Python.\n\nThe Python interpreter reads the program from the file you typed it into and executes it.\n\nThe interpreter \"executes\" the program by running the code in the file.\n\nThe interpreter then displays the result of running the code.\n\nThis is a pretty awesome trick, because it means that you can use your command line as a very", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if len(a)!= 3:\n       return False\n    return is_prime(a)", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a == 1:\n        return True\n    a, a = a * 3\n    return a % 3 == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    a1 = 3\n    a2 = 5\n    a3 = 5\n    if a1 % a2 == 0 and a1 % a3 == 0:\n        return False\n    if a1 % a3 == 0:\n        return True\nreturn a1 % a2 % a3 == 1", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return (is_prime(a) and\n    (is_prime(b) and\n    (is_prime(c) and\n    is_prime(d)))", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if a is None:\n       return True\n    if a is not int:\n       return False\n    return is_multiply_prime(a % 3 for a in a % 3 for a in a % 3 for a in a % 3 for a in a % 3 for a in a % 3 for a in a % 3 for a in a % 3 for a in a % 3 for a in a)</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n\n    return not(a % 3) == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 0\n>Can't you just use the primality test?  (Unless I misunderstood the problem.)\nAs it stands it won't work for (3), for example.</s>", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_multiply_prime(a):\n    if not a * 3 in [2,3,5]:\n       return False\n    return True", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return(a % 3) % 3 == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return len(a[0:2]) == len(a[2:3])\nIs this the most efficient way to do this? \n\nI'd use a binary search instead of this one-liner.\n\nYou could also use Knuth's up-arrow notation:\n\nI guess I should have mentioned I am using python.\n\nJust to be complete, in python 3.x the equivalent would be:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % 3 == 0", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    if is_prime(a):\n       return True\n    return False\nTo be clear, is_prime() returns True if a is prime, and False if a is not prime.  So, in order to check if a is a multiple of 3 prime numbers, you need to check if a is prime, and if it is prime, check if it is a multiple of 3, and if it is a multiple of 3, check if it is a multiple of 3 prime numbers.\n\nI'm assuming you meant to say \"and if it is a prime, check if it is a multiple of 3,...\"\n\nIt's always good to post a test case. This is a reasonable example:\n>>> is_multiply_prime(30)\nTrue\n>>> is_multiply_prime(2*3*5)\nFalse\n\nI'm not sure if I'm understanding the question correctly, but here's my\nshot at it:", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_prime(43) == True\n    43 = 3 * 43\n    \"\"\"\n    if (n % 2 == 0):\n        return True\n    else:\n        return False\nI don't get it. Could someone explain?\n\nThe logic of the function is that it first checks if a number can be expressed as a sum of 3 primes (e.g., 30 = 2 * 3 * 5), and returns True if this is the case.\nThen it checks if the number is prime, and returns True if the number is prime (e.g., 43 = 3 * 43).\n\nOhh, I get it now, thank you.\n\nI believe this is actually a modified version of the following, by Knuth:\n\nBut Knuth used much smaller numbers.\n\nAnd his algorithm doesn't just test for being the", "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\" \"\"\"\n    return a % (1 + sqrt(3)) == 1"]]