[["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix == i:\n            strings[i] = prefix\n    return strings\n\nAs a side note, I recently discovered the 'pep8' tool. It's a free/open-source python code reviewer that follows python style guidelines, much like 'jslint' follows java style guidelines.\nA couple of neat things I've found it useful for:\n- Alerting when you use single letters (i.e. x, y, z) in your code where they're not needed.\n- Alerting when you use the same variable name twice in a single function.\n- Alerting when you call a function with the same name as a class.\n\nYou could do the same thing with \"pyflakes\".\n\nI did try pyflakes, but I found it to be rather buggy.\n\nI've been doing this for years, although I use:\nfrom typing import List\nfrom itertools import islice", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n          return s\n\nI like to use this to avoid a lot of repetition when working with dicts:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n       if prefix == i:\n          return i", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n          return string\n    return []\n\nNow, if I understand correctly, the author wants this code to work in an arbitrary language. What if I want to use it in Haskell?\n\nIt would not be hard to adapt this code to work in Haskell:\nimport Data.List\nimport Data.Monoid", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n           return s\n\nbtw, I find that the best way to go about python 3 is to use only 2.x style, and when it doesn't work, use pyth2to3 to convert. it gets you up to speed with the new style in no time.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for str in strings:\n       if str.startswith(prefix):\n           return str\n\nShouldn't it be\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for string in strings:\n        if string.startswith(prefix):\n           yield string", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings\n\nThe author (me) just wants to point out that `filter_by_prefix` is not used in any real world application, and that the article is not meant as an actual guide on how to use Python.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(String.starts_with(prefix))\n\ncan't you just do strings.filter(string.startswith(\"a\"))?\n\n_\" Can't you just do strings.filter(string.startswith(\"a\"))?\nYou can, but that version of filter() will accept strings starting with\na non-alphanumeric character (even one that doesn't begin with a letter,\nsuch as an underscore).\nOne might write a function that does exactly what filter() does, but\nonly when called with a prefix argument:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n       return strings\n    return None\n\nThere's a similar one-liner to do a similar thing on lists, but with a predicate, e.g.:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    prefix = prefix.lower()\n    for string in strings:\n       if string.startswith(prefix):\n          return string\n       return strings\n\nI can't see a problem with this code, but it's a bit too clever.\nI'd prefer to see the simplest possible implementation that works in all cases, and maybe a bit of inline documentation.\n\nI think in the case of simple string manipulation, it's more elegant to write code that has a clear purpose.\nIt's a bit like a bitmask for strings, which is more readable than 'if True:' and 'if False:'.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    \"\"\" Defined in <built-in module 'builtins'>\n\nYou can also do:\nfrom typing import List\nfilter_by_prefix = lambda s: s in s[:3] == 'a'", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nThe reason this works is that the \"from typing import List\" part of the code causes the Python interpreter to know that strings is a type (i.e., a type of object) and that the method \"filter\" is a method defined on a type. This is not possible in C++ or Java.\n\nIt's also possible in OCaml, where the difference between a language and a library are a lot more blurred (OCaml is a language that compiles to machine code, but it also comes with a standard library, and it's possible to write your own libraries) and where the compiler is a lot more permissive.\n\nThere is also MLton () which is an extension of OCaml to allow it to be compiled to C. I've tried it out and it works really well, though it doesn't have a library as comprehensive as the standard library in OCaml, but it can use the standard library of OCaml.\n\nI think it's important to note that there is no compiler involved in the Python example. Python is a bytecode-compiled language, and it's interpreted at runtime.\n\nI find this kind of thing to", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str=prefix)\n\nfrom typing import Set", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n       if prefix.startswith(i):\n           return strings.index(i, prefix)\n\nIs this supposed to be a big deal?\n\nI don't think so. It's not hard to implement a single function.\n\nNot hard, but a beginner (like myself) would probably not think of this. I guess it's useful for those of us who aren't experts yet.\n\nOne reason I like Python is that I can look at code and learn from it. This was a great example of that.\n\nI think the title is slightly misleading.\n\nI read it as \"from typing import List\". Then I was confused.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    new_strings = strings[prefix: prefix]\n    return new_strings\n\nThis is not really a \"pythonic\" way to do this. You can instead:\nstrings.filter(s => s.startswith('a'))\nHowever, this is a little more difficult to use:\nstrings.filter(s => s.startswith('a'))\n\nIn python3, which I use, you can just use the built-in String.startswith:\nstrings.filter(s = String.startswith('a'))\n\nI like the first example better.\ns = [1, 2, 3, 4, 5, 6]\nfor key in s.keys():", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix.startswith)\n\nPython's lists are mutable. So in your solution you're modifying strings.\n\nThere is a new list type called slices that is immutable:\n\nfrom typing import List\nfrom typing import Slice", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:\n         return strings\n    prefix_string = prefix.upper()\n    for string in strings:\n        if prefix_string in string:\n             return string\n    return []\n\nI have to say, I love Python.\n\nThere's only one problem with Python: It's a programming language that doesn't solve any problems.\n\nYou have to be joking, right?\n\nNo, I'm not. It's a fantastic language, and I've spent a lot of time with it.\nBut it's not a language that makes me go \"Wow, that's a great idea!\" when I see it. It's not a language that I can't live without.\nIt's a language that makes me go \"Hey, I like that. I could do that in Perl, but why would I?\"\n(And that's a big compliment to Perl, since I love Perl.)\n\nOh, I thought you were being sarcastic.\n\nI'd give the same answer for Java as well, but I didn't want to get into", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix).reverse()\n\nI don't understand the point of this blog.\n\"From math import sqrt\"\n\"From html import div\"\n\nIt is for fun and to show the silliness of the language. But also to show the elegance of Python and how little code is needed to do many things.\n\nI would say \"the elegance of list comprehensions\".\n\nIt's also a little silly to claim that this shows the elegance of python.\nOne of the real strengths of python is the standard library, and the code snippet shown here would be significantly shorter with the built in functions'string.startswith' and'reverse'.\n\nHere is the real elegance:\n>>> import re\n>>> re.sub(r'([^\\t])', r'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', ignore_case=False)\n'cde'", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings: contains(prefix, strings) == True:\n        return strings\n    else:\n        return []\n\nThis reminds me of the \"unzip\" function in Haskell:\n\nI don't see how this is much different than a list comprehension in Python or a filter in Perl.\n\nWell, you can't use list comprehension in Python in place of a function call, so there's that. But yeah, it's kind of a weak example.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[str.lower()]\n\nAlthough this is a great exercise in Python, it's not very useful.\n\nIt's not useful but it's not a big deal.\nHowever, \"from typing import List\" is.\n\nWell, there are some reasons why Python is still the most-popular scripting language.\n\nThis is silly. I can write the same thing in C and have it be a lot faster.\n\nPlease do it in C, it's easy to port.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n       for item in strings:\n         if item.startswith(prefix):\n            return item\n      return []\n\nAnd then, in the same file:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    prefix = prefix.rstrip()\n    for s in strings:\n        if s.startswith(prefix):\n            return s\n    return []</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nThat's cool.\n\nI like python, and I'm glad it's getting more popular, but its not very pretty code, is it?\nAnd it's not only because it's an interpreted language. Perl and Ruby have their fair share of ugly code too, but they aren't interpreted.\nI don't mean to offend anyone, I'm just curious.\n\nIf you see the examples in the article as ugly code, you probably need to learn more python.\nI find it a much nicer language than perl and ruby, and much more readable than any of the other ones I've seen.\n\nI've been using Python for years, and I still think it looks ugly. It's an awkward mix of indented and unindented lines, and they don't even have a consistent style.\n\nThat's a matter of taste, really. I like Python's coding style and I dislike that of Perl, Ruby, and Haskell. I also dislike the Python 2/3 split because it's a mess.\n\nOne thing I've always liked about Python is", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix)).tolist()\n\nfun fact:</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in range(len(strings) - 1):\n        if strings[i:len(prefix)] == prefix:\n            return strings\n\nThe \"for i in range(len(strings) - 1):\" part is an unnecessary for loop.\nI thought the point of using Python was to be succinct.\n\nYes, but you're not the only one using the Python interpreter. Some people will want a for loop, and that's fine.\n\nAnother way to do this is to pass the list of strings into the filter function and then return it. It's a little more code but it's a little less confusing:\n>>> filter_by_prefix = lambda s: s in [r for r in s if r.startswith('a')] >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array']\n\nI prefer the map() style:\n>>> filter_by_prefix = lambda s: s[::-1]\n>>> filter_by", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(s: string for s in strings if s.startswith(prefix))\n\nThis code is pointless, because it is easily implemented using the built-in string.startswith() function.\n\nThis is less about \"this code is pointless\" and more about \"this code is _beautiful_ \". The beauty is not in the code itself, but in the way it illustrates the idiomatic way to use Python's built-in types and functions.\n\nI can't say that the code is useless, but I can say that the code is very simple. For a real-world example of this, please see my other comment:</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix:prefix.find(strings)]\nI have to admit that the code above is a bit long, but it is definitely worth reading it in order to understand the Python way of writing code.\nThe above code can be written in a much shorter way. First, we can define a function and pass to it a list of strings.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str, prefix)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if prefix == string:\n          return string\n    return []\n\nEasier to read:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\nThe naming style seems to be the same as python, but it seems to be missing the print function. How do I print in this language?</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(String.startswith(''.join(prefix)))\n\nI see this used a lot ( _e.g._, it's in Django's string module), but I don't understand why:\nfor the purposes of the code I'm writing, I'll accept that it's easier to type \"from typing import List\" than \"from typing import String\" (the latter is what I'd do), but it's still harder to type \"from typing import List\" than \"list = []\" and \"x = list[0]\". What am I missing?\n\nYou might not be missing anything, but rather that you've already internalized the pattern.\n\n(I don't mean to be snarky, but I really don't get it.)\nThe code in the blog post looks like this:\n>>> x = list[0] >>> list[0] = x >>> x [0]\nand it doesn't look like this:\n>>> x = list[0] >>> x = [] >>> list[0] = x >>> x [0]\nWhat's the advantage of the former?\n\nI'm not the parent, but a guess would be that the former can", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix].filter(s => s.startswith('a'))\n\nWhat's the advantage over this?\n\nI would have used an iterator. The general point is that you should not use built-in stuff for a task that is easily written in the language itself.\n\nWhat about ?\n\nJust used it for the first time, nice!\n\nSure.\n\nThis will get a lot of use in the coming days, if not weeks...\n\nMy bad. I should have checked the date on the article first.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s[0]:\n           return s\n    return []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s, prefix)\n\nSee also:\n\nCan't resist:\n>>> from typing import List\n>>> from typing import List\n>>> import itertools\n>>> a = [1, 2, 3]\n>>> b = [1, 2, 3]\n>>> c = [1, 2, 3]\n>>> print(a + b)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: 'int' object is not callable\n\nYes, but you can now\n>>> import this_is_not_a_typing_error\n>>> a = [1, 2, 3]\n>>> b = [1, 2, 3]\n>>> c = [1, 2, 3]\n>>> print(a + b)\n[1, 2, 3, 4]\n\nNote: Python is not a pure language, so the interpreter will not prevent you from using a list that doesn't have a type that is a list.\n\nI see.\nBut I don't understand why the interpreter would accept a type error in the first place.\n\nIt's a common", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s[:prefix] == prefix:\n          return s\n\nYou can use \"from itertools import islice\" to make it prettier:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, strings.index)\n\nNot terribly long but not terribly readable either.\n\nNot that bad, it's just that I would have used a lambda instead of a function call.\n\nOr \"def filter_by_prefix(strings: List[str], prefix: str): List[str]\".\n\nI don't think you can use \":\" with a function name in Python.\n\nYou can't.\n\nA small comment on the article. The author states,\n_\" This approach is not suitable for all types of data. For example, in\nHTML, the character '&' is a special character, so a filter that is\ndependent on the existence of the character will not work. Also, in Python,\nthe characters '<' and '>' cannot be used to denote the beginning and\nend of a string; they are special characters, too.\"_\nThis is not true. In HTML, the '&' character is not a special character. It is a (modifier) character. The '<' and '>' characters can be used as delimiters as well, but are not as commonly used.\n\nI think you", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s[0]:\n          return s\n    return []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings[prefix] in strings:\n       return strings\n    return []\n\nI always find it strange that Python's `[]` is not a list type.\n\nIt is a list type. It is a list of zero elements. The empty list is also a list, and a list of one element, and so on.\n\nI think the GP meant that it's a list that's not a list type.\n\nWhy is it that the length is 0?\n\nIt doesn't make sense to have a list with one element. Python\ndoesn't use \"length\" for the empty list.\n\nDoesn't this fall apart if you have a mix of strings that start with \"a\" and strings that start with \"b\" for example?\n\nYes. It should be rewritten to use a regular expression and the count function.\n\nTrue, but it's a good reminder that you need to be very careful with your filters. They need to be idempotent, or else you end up with a very fragile program.\n\nOh, it's also much faster than the naive regex filter.\n\nIf you have that kind of performance requirement,", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix[s] == s:\n          return s\n\nI didn't see this in the article, but I thought that some of you would get a kick out of this.\n\nYour comment is now the best thing on the page.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n           return s\n\nActually, the first example should use \"r\" for \"repeat\". \"r\" is short for \"repeat while not None\".</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nIn python the empty list is not a list, but it is a type. So you have to use list('a')\n\nThis is a great example of what Python is about: clear and concise syntax.\n\nfor those wondering what the for loop does, the OP omitted the explanation of what it's doing:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix)).s\n\nWow, I'm learning python, and I didn't know there was such a thing as a list of strings.\n\nThat's because they aren't. The string type is immutable and there are no lists in Python. There is a list like type called a \"list-like\" type that you can get from the built-in collections module. For example the String type can be turned into a list-like type by using the split() function:\n>>> s = \"some text\"\n>>> s.split()\n['some', 'text']\nThat's a list-like type of the string \"some text\". But it's not a list. It has a different API and a different set of rules.\n\nThis is actually the biggest reason why I can't stand Python. It's not just that there is no list but that the language is entirely based on list like objects.\n\nThere are two parts to this. The first is that the list like objects in Python are (almost) as good as lists. They are iterable (but not by index), have an efficient indexing operator, are not copyable, etc.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i, s in enumerate(strings):\n        if prefix == i:\n           yield s\n    return strings", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix).map(lambda s: s)\n\nIt's often useful to be able to do this in Python (or JavaScript, or whatever).</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    result = []\n    for string in strings:\n        result.append(string if string.startswith(prefix) else None)\n    return result\n\nSo, you'd want a function like", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n       return strings\n    else:\n       return strings.filter(prefix)\n\nThis is a lot like the _any_ function of Python.\n\nPython also has the equivalent builtin of the builtin builtin `filter()`:\nfor i in strings:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n       return strings\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n       if prefix in i:\n          return i\n\nActually, he uses a for loop that iterates over the input list, and only returns the first element that satisfies the test (i.e. the prefix).\nI would recommend using an iterable object instead, since in Python you can iterate over an iterable object in a single line:\nfor prefix in [str(x) for x in iterable_of_strings]:\n\nI think you mean\nfor prefix in iterable_of_strings[x]:\n\nYes, thanks for the correction. I always get those two mixed up.\n\nI don't think the python version is actually shorter. It's a lot more verbose since it's more explicit.\n\nIt's not, but it's more readable, at least to me.\n\nThat's one of the things I like about Python. It's more explicit and more readable. It's a very tradeoff, though. Sometimes brevity is more important than readability.\n\nIt's more readable to me because it is shorter. A more verbose version would have been", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n        return strings\n    else:\n        return []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n         return s\n\nfrom typing import Tuple", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))\n\nand just what is the point?</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n       if prefix[x]!= x:\n          return []\n\nThis is not a great example of the idioms you want to use in Python. It's much more idiomatic to use a generator and then something like yield next().\n\nIt's not idiomatic to use a generator for everything, though. This is a fine example of a for loop, and generators would be a total overkill.\n\nPython has generators for a reason - they're more efficient and sometimes more convenient than loops.\n\nJust for the record: I use Python since 2007 and I know about generators, I've just never seen a generator used for this particular task.\n\nYou're welcome to explain how a loop is better suited to this task.\n\nHow about this?\nfor x in strings:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:\n        for i in strings:\n           if strings[i] == prefix:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    filtered = []\n    prefix = prefix\n    for k, v in strings.items():\n        if k in prefix:\n           filtered.append(v)\n    return filtered\n\nYes, this is a good start, but it doesn't solve the problem in the article, namely, that you want to be able to do this with a large list, not just a small one.\n\nI think you might be taking issue with the example (a list of one item). I could see a case where you want to use this on a large list, if you've already determined that the first N items in the list all start with a given prefix. The example was just to illustrate the idea.\n\nOh, ok. I didn't think of that use case. That does seem to be a pretty good idea. I just think it's a bad example.\n\nReminds me of the new Russian language-specific package [1], where you can write:\nfrom lru_package import \u043e\u0434\u0438\u043d\nfor strings that start with 'o'.\n\nI'm not a python guru,", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return filter(str, prefix, strings)\nThis is very simple, but very cool. In my opinion, the code itself is the most important thing to write about.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(s: strings, prefix: prefix).sort()\n\n    # Just to make sure you get it.\n    print \"The filter_by_prefix() method on strings is %s\" % filter_by_prefix</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix == i:\n           return strings\n\n[filter_by_prefix(['a', 'b', 'c', 'd'], 'c') for _ in range(10)]\n[filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'd') for _ in range(10)]\n[filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'f') for _ in range(10)]\n\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\n[filter_by_prefix(['a', 'b', 'c', 'd'], 'c') for _ in range(10)]\n[filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'd') for _ in range(10)]\n[filter_", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for string in strings:\n        if prefix == string:\n           return string\n\n    return List(string)\n\nThis is a very nice little function.\nThe only reason I dislike the name is that it's not obvious what it does.\nI would suggest renaming it to something like \"string_prefix\" or \"string_filter\".\n\nIt would be clearer if it was named filter_by_suffix:\n\nI think the problem is that he's trying to do _too_ much in a single line.\nThis could be written much more clearly as:\nfrom typing import List, str", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix)).filter(str.endswith(prefix))\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s[0:len(prefix)-1]:\n           s = s[len(prefix)-1:]\n    return s\n\nThe article doesn't mention the Python way of implementing this -", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nTo understand the mechanics, you need to get away from the imperative programming mindset, which is most naturally expressed in Python. You'll understand much better if you think of the program as a process that takes an input and produces an output, rather than as a sequence of instructions to a computer.\n\nI've seen this before and I still don't understand. Could you elaborate a little bit?\n\nI found the most useful way to think about list comprehensions is as a way to compose functions together to get a result, e.g.\n[a,b,c] = [a+b, c]\n\nWell, sure, you could write that in one line in a functional programming language.\nThe advantage of Python list comprehensions is that they're syntactic sugar for a sequence of list assignments, so that you can write them in one line in a imperative language.\n\nThis is the way I think about them.\n\nI like this better:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nThis is, I think, a bad example.\nThe code is long, unreadable and impossible to verify (what happens if the list of strings is empty?). It also doesn't handle the case where a string does _not_ start with the prefix.\nIn order to make the code readable and verifiable, I would do something like this:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(lambda s: s.startswith(prefix)).extend(s)\n\nOr:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    prefix_array = []\n    for s in strings:\n        prefix = s[:prefix]\n        if prefix in prefix_array:\n            prefix_array.append(s)\n    return prefix_array</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for k, v in strings:\n        if v[0] == prefix:\n           yield v\n\nIt's not clear what the use case is here. It's a bit surprising that the docs\ndon't give an example.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n          return string\n    return []\n\nthis is amazing.\n\nnow if only I could get over the fact that \"from typing import *\" is banned from being in standard library.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n       if prefix in x:\n          return x\n\nThis is an example of why you shouldn't mix imperative and functional programming in the same program. In general, the imperative approach is more concise.\n\nNo, it's not. You can't count on being able to tell when a function is pure.\nThis code is not pure:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix]", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    # If a string doesn't start with the prefix, return it unchanged.\n    # If a string starts with the prefix, return the prefix.\n    if strings:find(prefix, strings)!= 0:\n        return prefix.replace(' ','_').join(strings)\n    return strings\n\nThis should be fun to play with</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix:filter_string(strings, prefix)]\n\nThis is much better than the original submission.\n\nYeah, I just copied the \"from string import *\" from the HN guidelines in the hopes that it would be an example of a bad import, but a lot of the responses are about the bad code instead of the bad import.\n\nThe thing about imports in python is that you can import the module as \"string\" and it will be fine.\nEven the example from the guidelines is not bad because it only imports one thing and the function called is simple enough.\n\nI suppose it depends on what you consider bad.\nIt's the first thing I look at when reading code:\nimport string\nis better than\nfrom string import *\n\nAh, I misunderstood you.\nYes, I agree it's better. But it's not bad in my book.\n\nI still think that the example in the guidelines is not bad. It's one line of code and the function is really simple.\nThe example given by the article is a lot more complex.\n\nPython import list, filter is shorter and faster. The author probably thinks import list, filter is too simple for Python", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    l = []\n    for str in strings:\n       if prefix == str.lower():\n          l.append(str)\n    return l\n\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n\nYeah. You _could_ have used:\n>>> from itertools import chain\n>>> filter_by_prefix = lambda strings: [].chain(lambda", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings\n[...for _, string in zip(prefix, strings)]\n\nNicely done, but I think the recursive version (from\n) is better.\n\nNow with a Python 3 version:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for i in strings:\n        if strings[i] == prefix:\n            return strings[i]\n\nThis is great for standard string searching, but I'd like to see something like this but for JSON.\n\nList[str] in Python is just a sequence of bytes. If the JSON is well-formed, you should be able to do:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          yield s\n\nOther than the fact that it doesn't work if the input list contains multiple prefixes, it seems to work pretty well.\n\nHere is a non-trivial modification of the above that doesn't have the shortcoming of being unable to filter on multiple prefixes:\nfrom typing import List\nfrom typing import isupper", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\nNote that \"from typing import List\" has a similar problem -- it's inefficient because it imports the function \"List\" twice, once in the module scope (for the function definition) and again in the top-level scope, where the function will be used.\nI don't know enough about Python internals to say whether this is a bug in Python or in some other library that is imported with \"from typing import List\".\n\nAlso, I don't understand why he's importing a module when he wants to import a function. Is there a reason to do this, other than the code being difficult to read?\n\nI don't know if this is a standard python idiom, but it's how you'd do it in Ruby, so maybe he's coming from that background?\n\nCorrect. Ruby has these handy things called blocks. Blocks are just\nfunctions that get run in the scope in which they're defined, and then exit.\nSo this:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nIt's not very hard to make a quicksort-like function. The code is not hard to read. And it's not hard to modify the code to make it different from quicksort.\nThe C++ style is essentially the same. You would use std::sort or std::sort_algorithm to do the sort. It might be harder to read the algorithm if you didn't know C++, but it's not hard to modify the algorithm to make it different from quicksort.\nAnd you can also change the sorting algorithm.\n\nThat's actually a pretty cool way to do it.\n\nWhy is it so weird? You can do it in C# with LINQ too:\nvar List = from x in xs select x;\n\nAlso, in Ruby:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str(prefix).startswith(strings))\n\n>>> filter_by_prefix(['a', 'ab', 'b', 'bc', 'c', 'cd', 'ae', 'bf', 'bfc'], 'a')\n['a', 'ab', 'b', 'bc', 'c', 'cd', 'ae', 'bf']\n>>> filter_by_prefix(['a', 'ab', 'b', 'bc', 'c', 'cd', 'ae', 'bf', 'bfc'], 'b')\n['a', 'ab', 'bc']\n>>> filter_by_prefix(['a', 'ab', 'b', 'bc', 'c', 'cd', 'ae', 'bf', 'bfc'], 'c')\n['a', 'ab']\n>>> filter_by_prefix(['a', 'ab', 'b', 'bc', 'c', 'cd', 'ae', 'bf', 'bfc'], 'd')\n['a', 'b', 'c', 'd']\n>>> filter_by_prefix(['a', 'ab', 'b', 'bc', '", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n             return strings.append(string)\n    return strings\n\nPretty cool.\nAlthough I think it would be nicer if it was a decorator instead of a built-in:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    prefix_set = []\n    for i in strings:\n        if strings[i].startswith(prefix):\n            prefix_set.append(i)\n    return prefix_set</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for str in strings:\n        if str.startswith(prefix):\n            return str\n    return []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\nI'd have used a regular expression to do that. It's more readable.\n\nYeah, I used a regex and thought the solution was a little bit too verbose.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    results = []\n    for string in strings:\n       if prefix == string.startswith(prefix):\n         results.append(string)\n    return results", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(lambdax: x.startswith(prefix))\nThe problem with this code is that you end up with a lot of useless lists. The real point of this code is to create a list of all strings that start with a given prefix. Instead of creating a list of all strings in the input that start with the prefix, it creates a list of all strings in the input that don't start with the prefix.\n\nThe problem with this code is that you end up with a lot of useless lists. The real point of this code is to create a list of all strings that start with a given prefix. Instead of creating a list of all strings in the input that start with the prefix, it creates a list of all strings in the input that don't start with the prefix.\n\nNot quite: It creates a list of all strings in the input that start with the prefix, and a list of all strings in the input that do not start with the prefix. The latter is (technically) redundant, but the former is not.\n\nIt creates a list of all strings in the input that start with the prefix, and a list of all strings in the input that do not start with the", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str, prefix)</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n         return s\n    return []</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return filter(strings, prefix)\nI'm not a python expert, but shouldn't it be:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        prefix = str.find(s)\n\n    return s.replace(prefix, '')", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings\n\nThanks, but that's not what I mean.\nI am looking for a function that will take an input list of strings and a start character, and will output a list of strings that contain only the given start character.\nSo I should write:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix:\n           return s\n\nAs I understand it, this is because it is basically syntactic sugar for\nlist(filter(lambda x: x[0], prefix)))\n\nI thought it was syntactic sugar for list(filter(lambda x: x[0]==prefix), prefix))</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(lambda s: prefix in s.startswith(prefix)).toList\n\nThis is a very bad example. I'm not saying that your code is bad, but your example is so simple that it doesn't really demonstrate anything.\nI like the \"filter_by_prefix\" function.\nIt would be useful if it had a \"prefixes\" argument so that it could be passed a list of prefixes, and then it would return the list of prefixes as the resulting list of strings, with all of the strings that match any of the prefixes in the list.\nAnother useful function would be one that does the same thing, but returns all of the strings that do not match any of the given prefixes.\n\nI like your idea. You can do that.\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], ['a', 'b', 'c', 'd'])\n['abc', 'b', 'c', 'd']\n\nBut, again, this is not a very good example.\n\nThe reason is that it's more useful to see what it does with real data.\n\nThe", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n           s = s[1:]\n    return s\n\nI'm not sure about the full power of Python and what it's capable of, but I was really underwhelmed by the list comprehension syntax. It looked like something that would have been useful in Perl in the late 90s, but really, it's just imperative code with some syntax sugar (e.g. the parenthesis are optional, but it's not very readable).\n\nThe best thing about Python is that you can do whatever you want to do with it. There are many ways to do the same things and you can chose the one you like the best.\n\nThe syntax that I wrote wasn't the best example, admittedly, but I find the idea of calling functions with the arguments and the return value hard to read.\n\nI find it much easier to read and write than the usual for or while loop. When I was introduced to list comprehensions, I was amazed by the elegance of the concept.\n\nCould you give some example, please? I just tried to implement a filter by prefix in", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nI prefer this:\n[['a', 'abcd', 'acde', 'adfef'], ['abc', 'bcd', 'cde', 'array']]\n\nI prefer this:\n[['a', 'abcd', 'acde', 'adfef'], ['abc', 'bcd', 'cde', 'array']]\n\nFrom the PEP:\n\"\"\"\nFrom typing import List\n\"\"\"\nList is a class.\n\nFrom the PEP:\n\"\"\"\nimport <list>\n\"\"\"\nlist is an importable name.\n\nA classical Python quirk is that all the built-in functions that take a string as an argument are actually implemented as classes, not functions. It's not possible to have a function that returns a string. It's not even possible to have a function that takes a function as an argument.\n\nSee also:\n\nIn my opinion, this is one of the worst Python features. You can't subclass a function, and the only way to define a function with a _name_ is to use the '__call__' method. Which", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    prefix = prefix.lower()\n    for s in strings:\n       if prefix in s:\n            return s\n    return strings", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str, lambda s: prefix.startswith(s[0]))\n\nThis doesn't really fit the 'from' pattern of the article, but it's a good example of what is possible.\n\nI think it's a nice example of how you can use the \"from typing import *\" statement to import a whole module.\n\nThe article misses a couple of important parts of Python.\n1\\. You can also import a function from a module. For example,\nfrom string import lowercase\nand then use it.\n2\\. You can import names, and not just modules, such as\nfrom string import alphabet\nor\nfrom math import pi\nI think this is a nice way to organize code, especially when you want to group things together.\n\nI really like the use of __slots__ in Ruby. It's like import scoped variables.\n\nThis article would have been more interesting if it had mentioned __slots__.\n\nfrom threading import Queue\nor\nfrom concurrent.futures import ThreadPoolExecutor\n\nI prefer:\nimport threading\n\nThis is very cool. You can even take it a step further", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n        if x[0] == prefix:\n           return x\n    return strings\n\nThis is neat, but it would be nice if you could set up the prefix to be a regexp.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if len(strings) == 0:\n        return []\n    return strings.filter(str.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, strings)\nThat function only works with strings.\n\nWell, yes, but I think the point was to show that the Python type system is so weak that you have to write functions that work on lists of objects to filter them.\n\nI don't think it shows the Python type system is weak. It seems perfectly reasonable to me for a filter() method to accept any iterable. If it were a set() method, then it would be a different story.\n\nWell, you might as well make it a built-in function, then. The benefit of having the type system is that it prevents you from doing silly stuff like this.\n\nI do that all the time, in fact I've implemented almost all the built-in functions I use.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n            if len(s) > 1:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return List(filter(lambdas: strings.keys(), lambda n: n.startswith(prefix), strings))\n\nAs long as you can remember that it is a list function, it's great.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return filter(strings, prefix)\n\nWhy are people afraid to use the built-in dicts and lists? Is it a Python thing?\n\nIt's a common way to make your code run faster.\n\nDid you know that if you take a list and you have a function like list[i]\nthen Python has to make a copy of the entire list, and then invoke the function on the copy?\nIf you write your list[i] as list[i:j] then Python can invoke the function on a reference.\nSo if you have a list of 1 million integers, and you only want to get the 5th element of the list, then with list[i] you will get the entire list copied 5 times, whereas with list[i:5] you will only get the list copied once.\n\nBut this doesn't have to be done. Python 2.7 actually has a built-in function that lets you do this:\n>>> list.index(5)[0]\n[0]\n>>> list.index([0, 1, 2, 3])\n[1, 2, 3]\n\nA List is not a dictionary!\n\nNeither is a dict a", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if strings[i].startswith(prefix):\n           return strings[i]\n\nI used the same technique recently (to filter a list of hashes based on a prefix):", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n       if strings[i] == prefix:\n          return strings\n\nThere's nothing inherently wrong with the code per se, but it's not at all idiomatic Python.\n\nTo be fair, the examples in the \"Idiomatic Python\" section are not particularly idiomatic either:\n\nThey are _terribly_ idiomatic.\nThey do the job with the minimum of fuss, and are self-documenting.\n\nFor a newbie, that might be true. However, I think the point of the \"Idiomatic Python\" section is to show ways of doing things that are generally more useful than the alternative.\nI've certainly seen plenty of examples of the \"Wrong Way\" that were self-documenting.\n\nthe way i learned about list.filter was from the same book, the \"3 mistakes every Python programmer makes\" section.\nit's a good book, but it's not always good to blindly follow its advice.\n\nI had an idea of making a module where functions would be named things like \"foo\", \"bar\", and \"list.filter\".\n\"foo\"", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix in i:\n           return i\n\nYou can do this with Python's built-in filter() function.\n\nYeah, but that one's much more obtuse to use.\n\nI was thinking more for the sake of brevity.\n\nThis is a classic example of why I love python. You could do this with ruby as well, but you would need to import an extra library or two.\n\nThis is a classic example of a bad example. The title is misleading, and it's really a matter of preference. You might prefer the pseudo-code to the equivalent Ruby code, but that's not a fair comparison because Ruby's a much more expressive language.\n\nI was a little confused about this until I realized it had nothing to do with the Python programming language.\n\nFrom the title, I though it was about string literals.\n\nI'm still not sure what the point of this is. Couldn't you just import the List class?\n\nI don't like the import keyword, so I try to avoid it as much as possible.\n\nThis is", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    list = []\n    for string in strings:\n       if string.startswith(prefix):\n           list.append(string)\n    return list\n\nA similar function in Python:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix)).map(str).join('')\n\nThis is a pretty poor example. It's something that can be done trivially in most languages.\n\nPython has a builtin filter_by_prefix, and the example is pretty concise too.\n[edit]\nWhat I find quite interesting about this is that most of the time, you would just want to do \"filter\" followed by \"map\". The need for \"map\" and \"filter\" are mostly orthogonal, and the fact that Python has them both built-in to the language (among a whole bunch of other goodies, like list comprehensions) is very cool.\n\nThe problem with that is that you're not operating on the resulting list. You're operating on the filter list, which is a list of lists. What you want is `map(filter(prefix), input_list)`. This is not a problem in Python.\n\nI'm not sure I follow.\nThe OP's code is a one-liner:\nfilter_by_prefix([], 'a')\nThe equivalent in Python would be\nfilter(prefix = 'a', input_list)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(s, prefix)</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix: prefix]\n\nWhat a great example of how a bad API can hide the usefulness of a language.\nSo what is the Python way to do this? I want to do the same thing but don't want to memorize all of the annoying library methods.\n\nUse the standard library?\n\nIn that case, how do you do it?\n\nWell, I don't know Python, but the \"from typing import List\" part is a dead giveaway that the syntax is different from what I'm used to.\n\nIt's a syntax called \"generator expressions\".\n\nAh, I should have looked into that before I posted.\n\nI'm confused. What's the point of this example? It seems to illustrate the exact opposite of the point the article is trying to make.\nIt's way easier to read in Python.\n\nI was confused as well. I don't see how the original example is \"better\". There's so much noise in that code.\n\nHe's not saying it's better, he's saying it's easier to write.\n\nExactly. I like that the original is shorter, but it requires a lot more attention.\n\nI think in", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(prefix)\n\nIt's not too hard to get this right if you have a non-trivial type for strings, and you're using Python 2.5 or later.\n\nI'm not entirely sure what you're saying here, but it's not true. Python's string type is _not_ a real type. It is a dynamic type that has some of the properties of a real type, and the rest is hand-waved. This leads to some strange behaviour, like the one shown by the OP.\n\nTrue, but the same applies to most language string types. What I was getting at is that Python is better at this than other languages. The reason is that the string type is implemented in a way that reflects the real string type of CPython. This means that the operations on strings that are implemented in CPython also work on the type defined in Python.\nFor example,\nis a string comparison operator defined in Python. It works with strings defined in Python as well as strings defined in CPython.\nThis means that you can write your own types that have the same string operations as CPython (or other languages) have.\n\nYeah, that's what I'm", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return list(filter(lambda s: s[prefix:], strings))\n\nfrom typing import Type\n\n    def filter_by_str(strings: List[str], s: str) -> List[str]:\n    \"\"\" Filter a list of strings only for ones that are `s`.\n    >>> filter_by_str(['abc', 'bcd', 'cde', 'array', 'a'], 'a')\n    ['a']\n    >>> filter_by_str(['abc', 'bcd', 'cde', 'array', 'aa'], 'aa')\n    ['aa']\n    >>> filter_by_str(['abc', 'bcd', 'cde', 'array', 'aaab'], 'aaab')\n    ['aaab']\n    >>> filter_by_str(['abc', 'bcd', 'cde', 'array', 'aaabaaab'], 'aaabaaab')\n    ['aaabaaab']\n    >>> filter_by_str(['abc', 'bcd', '", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n        if x.startswith(prefix):\n            return x\n    return []\n\np.s. The title is in reference to this classic:</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i, v in enumerate(strings):\n       if strings[i] == prefix:\n          return v\n\nPretty, but not terribly efficient. In Python 2.6, it uses an open recursion. In Python 3.1, it uses a closed recursion (i.e. the function calls itself).\n\nI think it's supposed to be a joke, in that the code is obviously not Pythonic.\n\nWhy would you want to use this?\n\nThis is pretty much why I have this in my.vimrc\n\"", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s[0] or prefix == s[len(s)-1]:\n            return s\n\nI prefer to add an empty string as the default prefix.\n\nI prefer the default being None.\n\n`None` is not a type, so it can't be a default prefix.\n\nI like using a dict (or some other default-constructible object) as a default.\n\nThat's pretty much what Guido's suggestion was: \n\nI always thought it was a mistake to have such a fundamental class as List be an object, not a type.\n\nWhy is it a mistake? If anything it's an object that _should_ be a type.\n\nBecause it breaks the principle of least surprise. You don't expect a list of integers to be an object.\n\nWhat's the principle of least surprise?\n\nThe principle of least surprise (in my experience) is not using any object in a way that will confuse the reader.\nAn example: if you have a class and the class has a method named \"getClass\", it's not", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix.startswith('a'))\n\nDoesn't using \"filter\" as the name of the function violate the python style guide?\n\nYou may be confusing it with the fact that filter is a keyword in Perl.\n\nThis is a slightly better approach than a string.filter function:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for prefix, string in strings.items():\n       if string[1] == prefix:\n          return string\n\nIt's not that easy.\n\nIt's not that easy because it's a contrived example.\n\nHow is this different from a tuple, or a dictionary, or a list comprehension?\n\nThe article is in response to the recent announcement that Python is getting \"list comprehensions\", which is another name for Haskell's \"do notation\", which is a much nicer way to express lists of things. I'd say Python has been missing that feature for a while now.\n\nYeah, I'd say that list comprehensions are the best way to express lists.\n\nIt's nice that Python has type-based generic programming.\n\nI'd be interested to see how this compares to Ruby's Enumerable module.\n\nI like it. I think it's a good thing that languages are borrowing features from each other.\n\nWouldn't it be a bit more pythonic to do:\nfrom typing import List\nfrom string import escape\nfilter_by_prefix(strings=list(escape('a'))[0],", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => prefix in s)\n\nJust a thought, but it looks like you could use len(s) instead of prefix in the filter function.\n\nIt's true, but a bad idea. This is why:\n>>> len(filter_by_prefix([], 'a'))\n3\n>>> len(filter_by_prefix([['a', 'b', 'c'], 'b'])\n2\n\nSo the first will give you the first three strings that start with 'a', the second will give you the first two strings that start with 'b'?\n\nExactly.\nIn the first example, len(filter_by_prefix([], 'a')) is 3, so the first element in the resulting list will be the first element in the input list that starts with 'a'.\nIn the second example, len(filter_by_prefix([['a', 'b', 'c'], 'b']) is 2, so the first element in the resulting list will be the second element in the input list that starts with 'b'.\n\nAhh. I see. Thanks for the explanation.\n\nLooks neat. I've been looking", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nIn Python 2, we just need a class called 'List'.\n\nAnd in Python 3, we can't use the \"filter\" function anyway.\n\nThis is not really about python, but if you ever want to use a non-pythonic, but more efficient, way to do string processing, you should check out the C implementation of str. It can be really nice if you have a hard problem, but don't want to write it in C, and don't want to use a library.\nThe implementation is in str.h.\n\nSee also:\n\nAlso worth a mention is this:\n\nPEP 3107 has a few alternatives, and allows you to mix them. This is the official new way of doing it in Python 3.\n\nTIL that Python has a \"filter\" function. I've been using a helper function that works as a last resort.\n\nI really like this.\nI had a quick look and I think this is a much more intuitive syntax for a list filter than what is currently used in python.\n\nI know that the intent of the article was to demonstrate the use of the new string type, but I", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s -> s.startswith(prefix))\n\nWhy isn't this the default?\n\nJust for kicks, I went to try it. If you run \"python3\", this is the default behavior. However, if you run \"python2\", it's not.\n\nI think it's because in Python 2.7, the type system is pretty much an implementation detail, since it's optional. It's not a good idea to change the behavior of a language feature based on something that isn't turned on by default.\n\nI always get the impression that the Python 2/3 split is the equivalent of Lisp 1 and Lisp 2.\n\nIt's not. Common Lisp, and Scheme (which Python is heavily influenced by) have had a long history of being the same language. Python has diverged so much that it's really two different languages.\n\nGuido explicitly wanted to do that with Python 3, though. The name was meant to make it clear that there was going to be a \"python 2\" that would remain the same, and a new \"python 3\" that would diverge.\n\n\"In other words, it makes it look like Python is a copy of", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if len(strings) > len(prefix):\n         return []\n    prefix = prefix[0:len(prefix)]\n    while strings:\n         if strings[prefix]!= str:\n             strings = strings[prefix:]\n         prefix = prefix[len(prefix):]\n    return strings\n\nOh, I don't know why I didn't see that one. I wonder why it's more common to do it this way.\n\nProbably because it's shorter.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(prefix)\n\nIsn't the second line backwards?\n\nPossibly, but it doesn't really matter. The important part is that they give you the option of adding an arbitrary function to your string type, which you can use to manipulate the string type without using the class itself.\nI could imagine it being useful for processing XML or html.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(lambda x: x[prefix:])\n\nWhat is the purpose of this?\n\nMy first thought was to create a filter function that accepts a list of strings and a string to filter out. Then you could call it like:\nlist = [ 'abc', '123', '456']\nlist.filter(filter_by_prefix)\nand it would return a list of strings that start with 'a' or 'b', or whatever.\nI agree it's pretty useless to do that in a blog post, but I don't see anything wrong with it per se.\n\nI don't think this is useless at all. It's a good way of getting a list of something like:\n['a', 'b', 'c', 'd']\nfrom a list of strings like:\n['abc', 'def', 'ghi', 'xyz']\n\nIf you just want to get a list of something like that, you can use `filter(lambda x: x.startswith('a'))`\n\nI agree that this is pretty trivial to do in Python.\n\nCan I ask what the point of this post is? I'm not sure", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for strings in strings:\n       if prefix == strings[0]:\n          raise StopIteration()\n    return strings\n\nOkay, so there's an example that, when executed, produces an empty list. That's bad. It should raise an exception.\nI don't know what the correct exception is. But it shouldn't be StopIteration().\n\nIt's trivial to modify the function so it raises an exception. I just wanted to show how simple it is to write an iterator.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for str in strings:\n        if prefix in str:\n           return str\n\nSo I'm reading \"filter_by_prefix\" and I'm thinking \"oh, what a nice way to use my favorite Python list comprehension\". Then I read \"from typing import List\" and I'm thinking \"oh, he's using a library that does list comprehensions for him\", then I see \"def filter_by_prefix(strings: List[str], prefix: str) -> List[str]\" and I'm thinking \"wait, what? His code is longer and more complicated than my code. Why is this an improvement?\"\nEdit: Ah, I see the point of the article now. Yes, the library he is using is something that the Python core developers don't want in the language. That's all I needed to know.\n\nThe point of the article is that the list comprehension is not Pythonic. The \"from typing import List\" was to demonstrate that.\n\nHow is that Pythonic?\n\nThat's a good question. The idea is that if you want to create a new data type, you should create it in a", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix) is not None:\n        return strings\n\nI had to read that three times before I understood it. Why not:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    # only return items with a starting prefix\n    return strings[prefix: strings.index(prefix, strings.len())]\n\nThis is sort of like saying:\nfrom typing import List\nfrom string import str", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.count(prefix) == 0:\n        return strings\n    for k, v in strings.items():\n        if strings.index(prefix, v) == 1:\n           return k\n    return []\n\nIsn't it more pythonic to use `from itertools import islice`?\n\nYou're right, I'm updating the blog post now to use itertools.islice() instead.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if prefix in string:\n            return string\n    return strings", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nIn this case, it's a difference of taste. In my example, I would have chosen a filter that _accepts_ prefixes and filters out the rest.\n\nThis is a good example of why you shouldn't use a name like \"filter_by_prefix\", which suggests that you're _removing_ everything that doesn't start with \"a\". The code could as well have been named \"filter_by_prefix_with_a_catch\".\n\nI think it's a bad example of why you shouldn't use a name like \"filter_by_prefix\", because the name is not the only issue.\nIf the author had chosen a different name, the code would still be the same.\n\nThere are better examples of poor naming that are much more prevalent, but I was hoping to grab the attention of the author to this common pitfall. (I agree it's a bad example in hindsight.)\n\nI don't see the benefit of the new \"from typing import List\" syntax.\nFrom the article:\n\"Without that import, you'd need to type \"from collections import deque\". That takes away from the readability of your code", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n       if string(prefix) == i:\n            return i\n    return strings\n\nI'm not sure why this was submitted to HN?\n\nBecause it demonstrates the fact that the Python type system is not only useful but _expressive_, in a way that most OO programmers are not used to. In particular, it shows that the Python type system allows you to express a type which is only partially specified.\n(In other words, this is an example of a \"polymorphic type\".)</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for string in strings:\n       if string[prefix] == prefix:\n          return string\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nThis is probably better suited as a function decorator, something like:\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str, prefix)\n\nAnd the python version using dictionaries:\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s for s in strings if s.startswith(prefix))\n\nThank you. I always have to google stuff like that.\n\nOne of my pet peeves is when I have to Google something that should be in a standard library.\n\nI always start with the standard library documentation to see if it's there. In this case, it's there.\nBut even if it wasn't, it doesn't really bother me. I'm glad the standard library is free of cruft.\n\nI agree it's nice that the standard library has a solid core that can be relied on.\nI guess I'm just not a fan of having to Google simple things like this. It would be like if the basic math functions in Python's standard library were not available (which they're not, I think), or if all of the standard library was in a non-Python language.\n\nThe Python standard library does have some non-Python bits. The standard decimal module, for instance, is implemented in C.\n\n\"Standard\" should be in quotes. The decimal module is only \"standard\" in the sense that the Python devs decided to give it a prominent spot in the stdlib.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix)).tolist()\n\nIn Python 3, the standard library provides this method as isFilter, and you can do this:\n>>> isFilter(['abc', 'bcd', 'cde', 'array'], 'a')\n[False]\n>>> isFilter('abc', 'a')\n[False]\n>>> isFilter('abcde', 'a')\n[False]\n>>> isFilter('abcd', 'a')\n[False]\n>>> isFilter('abcde', 'a')\n[False]\n>>> isFilter('abcd', 'a')\n[True]\n>>> isFilter('abcde', 'a')\n[True]\n\nThis works just fine in Python 2 too, it's just not in the stdlib (but it's in the standard library, so there's no need for a third-party module).\n\nThis is a good example of why Python 3 is a good idea: the standard library is better, but it doesn't break compatibility with the old Python. (Python 2 does break compatibility with old Python, but there's no need to because it's not the only Python)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n            yield s\n    return []\n\nThis is a common pattern in Python. Using the built-in `List` module can be more readable and make your code more maintainable.\n\nUnless you're using PEP8, in which case you should have a function named 'filter_by_prefix' that takes a single argument, not a list.\n\nI think that's more of an opinionated style guide than a requirement.\n\nHaving a function named \"filter_by_prefix\" with a one argument list is more flexible. You can then take that function and pass it lists of different lengths.\n\nRight, but then you need to go change every call site. Also, Python's list comprehensions do allow you to write the filter_by_prefix function as a one-argument function.\n\nThe only change needed is to the calling site, which is usually just the call to filter. The call site can remain the same even if the function gets longer.\n\nI had an interview with Google a few weeks ago and they asked this question.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for x in strings:\n        if strings[x] == prefix:\n           continue\n        elif strings[x] in prefix:\n            strings[x] = strings[x] + strings[x]\n    return strings\n\nThis is really kind of a cute way to do it. That said, this wouldn't be my first choice for a programming task, but it's a great little exercise to see how people would go about it, and why.\n\nA more elegant way would be to use the isinstance() method and the builtin type class List:\nimport collections", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:find('a'):\n        return strings\n    else:\n        return None\n\nThe correct way to do it would be:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\nI'm not sure I see what the point of the article is. What's the problem with this?\n\nIt's a classical example of the sort of code that doesn't cause any problems until you actually have to modify it.\nAlso, this is a rather basic and obvious example, but I think it makes a good starting point. I know I've had to maintain code that looked very similar to this at one point or another.\n\nThis is the sort of thing that should be part of the \"awesome\" intro chapter.\n\nI don't know what you're talking about, but I like it! :)\n\nI've written a few toy scripts in python and have started to see that Python is a pretty cool language. My issue with it is that I'm using a mac and cannot figure out how to get it to work with my default python. I've been googling around and can't find a solid answer on this.\nI tried this as well:\n(sudo) python /usr/bin/python -c \"import sys; sys.executable = '/usr/bin/env python'\"\nbut still get the same", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    # Returns a list of all strings in the input list that start with\n    # the given prefix.\n    return strings.filter(prefix).sort()\n\n    from typing import List\n    # Returns a list of all strings in the input list that start with\n    # the given prefix.\n    def filter_by_prefix2(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix2(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    >>> filter_by_prefix2(['abc', 'bcd', 'cde', 'array', 'test'], 'test')\n    []\n    \"\"\"\n    # Returns a list of all strings in the input list that start with\n    # the given prefix.\n    return strings.filter(prefix).reverse()\n\n    from typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s for s in strings if prefix.startswith(s) and s!= prefix.endswith(s))\n\nI wonder how this differs from other things like String.split()?\n\nFor one, this implementation is probably faster than the Python built-in.\n\nIt seems similar to string.index in Java</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings is not None:\n        return strings\n    else:\n        return []\n\nI wonder why this code was posted.\n\nWell, I don't know if it was, but I'm glad it was.\nI've never seen this before, and it's a pretty simple and clever solution.\n\nIsn't this just a different way of saying what's been around for ages?</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n       if i.startswith(prefix):\n           return strings[i]\n\nOr you can do the same in Python:\n>>> string.startswith('a')\n['a', 'ab', 'aab', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb', 'acb", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s.lower() or prefix == s.lower():\n           return s\n    return []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n    return []\n\nI think you mean \"from typing import List, [\".]\n\nIt's a little odd that the author mentions filter() as a built-in function, since it's actually a builtin function that takes an iterable as an argument (in Python 2.x). It's one of those things that's strange for people coming from other languages.\n\nI've found that the Python community is not very good at sharing code or techniques. When I do share, it gets downvoted.\n\nThat's too bad, and I've found the same. Fortunately, there's some great code and techniques available in libraries: check out the stuff on the Python Packaging Authority site (\n) or the Django source tree (\n).\n\nMost of this is obvious if you've already used Python for a while. For those who have, this is probably worth skimming, but not worth reading entirely.\n\nNot sure if the author was trying to be funny, but you can use [] as the argument to filter, not a list:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for _ in strings:\n        if prefix in strings:\n            return strings\n\nHow is that any better than the Python \"filter()\" function?\n\nHN is a news site. I don't think it was posted because it was a better way of doing something in Python. It was posted because it was a new library.\n\nI agree. I think \"new library\" is better than \"better way of doing something\" in this context.\n\nIt is indeed a new library, and it is indeed a better way to do something in Python.\nThe thing is, filter is a standard function in Python (no need to import it) and it's the obvious way to do it. So, it's not a better way to do something in Python, it's just a new library.\n\nAnd I don't think most people here know filter exists, in any form.\n\nI think it's great that the Python community is looking for new, original ways to do things.\nHowever, as you said, I don't think most people know of this function, and I don't think it's very useful. In", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string[0] == prefix:\n          return string", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:\n        # A list of strings, not the empty list\n           return strings\n    else:\n        # A single string (or empty list)\n           return strings[0]\nI like this better:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\n    return []</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(s, prefix)\n\n         def filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'e')\n    []\n    >>> filter_by_suffix(['abcd', 'cde', 'cdf'], 'ef')\n    ['abcd']\n    >>> filter_by_suffix(['a', 'b', 'c', 'd'], 'f')\n    ['abcdef']\n    \"\"\"\n\n    return strings.filter(s, suffix)\n\nThanks! I'm going to try and use this in my (admittedly in-progress) text editor for a \"find in files\" feature. It's a bit silly to have to type in \"find all\" for each file when there's a list of them on the left.\n\nAha! I've been looking for this for a while.\nEDIT: Please", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix.startswith(strings))\n\nI would use the str.findall() method. It's usually as efficient as a C implementation, while being much more Pythonic.\n\nI wrote a pretty similar implementation to this in my Django tutorial ()\nI do use str.findall() for efficiency reasons, but I don't think it's as \"Pythonic\" as one might think. It's certainly more consistent with the standard library than filter_by_prefix() is, but I don't think it is more natural.\n\nI'm happy to see that one of the example uses for filter_by_prefix() is to clean up an input string for conversion to a number, as this is how I was taught to do it in the Perl I learned way back when.\n\nGood one. I wrote a very similar function for Python beginners, too:\n\nI just have:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, string.startswith(prefix))\n\n\"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde\", \"abcd\", \"abcde", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for prefix in strings:\n       if strings[prefix] == str:\n           return strings\n    return []\n\nI usually name it map_by_prefix. (Also, I'd use map instead of list.)\nI think this is a good example of \"don't use the same variable name for different things\".\n\nI am always torn on the \"don't use the same variable name for different things\" rule. I personally use a lot of global variables that are used for many different things.\n_shrug_\n\nI think that's a different issue.\nWhat I'm talking about is when you have a function with a single purpose and you want to change its behavior. In that case, you can end up with two different functions with the same name that are doing very different things.\n\nI tend to not name my functions with a prefix (map, filter, reduce, etc) and instead use the actual function name. It's good practice to define the function in one line and be done with it. If you're writing reusable code, you probably want to avoid that.\n\nYou might want to consider using a", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\n\nYou don't need to import List unless you're importing a module that uses it.\n\nThat's cool, but the code should be shorter and more idiomatic:\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    # Return the indices of the strings that start with the prefix.\n    indices = strings.index(prefix)\n    # If no strings start with the prefix, return None.\n    if len(indices)!= 1:\n        return None\n    return indices\n\nI would suggest to import datetime instead of time.datetime, as the latter is really a C-API and is only available on Python 2.\n\nThanks. Fixed.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    l = []\n    for s in strings:\n       if prefix == s[0]:\n          l.append(s)\n    return l\n\nCan someone explain the thinking behind this type of interface?\nThis seems to me to be an API designed by someone who is afraid of having too many\nmethods in the API.\nI would have expected:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n          return string\n    else:\n          return []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix.startswith)\n\nIf the author wants a \"more pythonic\" version of this, I would recommend:\n\nfrom typing import List\nfrom functools import partial", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    s = ''.join([str[0] for str in strings if str.startswith(prefix)])\n    if len(s) == 0:\n       return s\n    return List(s)\n\nThis version is much shorter, uses fewer characters, and is easier to read.\nBut it's a bit less efficient.\n\n_\"List.filter() is O(N), and so is filter_by_prefix(). filter_by_prefix() is much faster than filter(), but not nearly as fast as Python's builtin method filter.  So if you want to filter a long string or a large list, you're much better off using filter() than filter_by_prefix().\"_\n\nI think it's a bit misleading to say that filter is O(N) while filter_by_prefix is O(1). Both are O(N), but only one of them requires all the comparisons to be done at once.\n\nI agree.\nI think the author meant to say that filter() is O(N) and filter_by_prefix() is O(log N).\n\nI don't see that either", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:\n        return List(strings[prefix])\n    if strings[0].startswith(prefix):\n        return List(strings[1:])\n    return None", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings == [] or prefix == \"\":\n        return []\n    for i in strings:\n        if strings[i].startswith(prefix):\n           return strings[i]\n    return []</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for prefix in strings:\n        if prefix in prefix:\n            return strings\n\nIf you don't want to write your own filter, you can also use:\nfrom collections import namedtuple\nfrom itertools import chain", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(subs(strings, prefix.split(' '))\n    )\n\nThis is a really cool example of a very common pattern in Python that is hard to translate into another language.\n\nI'm not sure I follow, I was able to write a pretty similar function in C# in a few minutes.\n\nIt's not so much the function, but the way you write Python. You can use the more standard C-like syntax, but for clarity and readability the Pythonic style is much better.\n\nI see, that makes a lot of sense.\n\nI'm not sure I see the advantage of the pythonic version. It looks like it's making the same function slightly more verbose, by wrapping the filter with a list comprehension.\n\nI suppose it's one of those things that you have to be used to to appreciate. I find that Python's list comprehension syntax is so much more readable than the alternatives, especially when nested.\n\nI think the advantage is in the comprehension, not the wrapping.\n\nNot really. A nice alternative would be:\nfrom functools import partial", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    prefix_length = prefix.length()\n    return prefix: prefix_length[-1] + strings\n\nThis is one of the most commonly cited examples of how you can use the type system to avoid runtime checks (this is one of Python's design goals). This is not a good example, however, because Python is dynamic and requires you to do runtime checks anyway.\n\nWell, yes. The only thing that makes that code useful is Python's dynamic nature. In Python, you can't do things like this in a static language because you can't prove any of the bounds, and even if you could you would have to at runtime.\nI'm a fan of Python's dynamic nature. This is one of the reasons I keep coming back to it. I find that it helps me write less code, and since it's a lot more dynamic than dynamic languages, it feels like writing fewer lines of code.\n\nI find this post a bit odd, because it's really the same as saying:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    # A couple tricks to make this work\n    return strings.filter(x for x in strings if x.startswith(prefix))\n\nThis is why people love Python. It's like C without the C.\n\nI love Python, but this is more like:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str=prefix)\n\nI'd be interested to see what this is meant to do.\n\nYeah, it's meant to do exactly what it says. The example shows how to filter a list of strings only for ones that start with a given prefix.\n\nNot quite. The example shows how to filter a list of strings only for ones that start with a given prefix _and that don't start with a given suffix_. The input strings are ['abc', 'bcd', 'cde', 'array'], the output strings are ['abc', 'array'].\nThe correct version of this program would be:\nfilter_by_prefix('[' + prefix + ']' + strings)\n\nHa, I was just about to post this same thing.\nThe issue is that the way you have it written right now, your filter function will return any item where the prefix is equal to the string that you pass in. For instance, if you just pass in the string \"abcd\" then your filter function will return the string \"abcde\" if such an item exists in the list.\nTo fix this, you have to use a string that doesn't match the prefix to filter the", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings == [] or prefix == '':\n       return []\n    else:\n       return filter_by_prefix(strings, prefix)\n\nI think you meant:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\nI can't tell if the code snippet is a joke or not.\n\nI think it is.\n\nThis is just what I needed to learn Python. Thanks.\n\nYou might like this\n\nThis was my response to someone's question about how to filter a list in Python. I thought it was worth submitting here.\n\nthanks - I've been looking for an example like this!\n\nFor a good example, I like:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if len(strings)!= len(prefix):\n       return strings\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nDoesn't work for the empty string.\n\nDoesn't work for the null string either.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string in prefix:\n           return string\n      return []\n\nAs a note, that doesn't do prefix matching. For that, you want:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i, s in enumerate(strings):\n        if s[prefix]!= '':\n            return s\n\nDid anyone else notice that this is a _filter_ function, not a _filter_ function?\n\nThe function _filter_ takes one argument (the function to be run on the input) and the result is a list. The function _filter_ takes a list of strings as input and the result is a list.\n\nOh, of course. My mistake.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s:\n             return s\n    return strings\n\nYou can also use _ in place of a list to do the same thing.\n\nAlso from the same package, the aptly named filter_by_contains()\n\nIt's a pity that Python's pattern matching operator is so restrictive, because it makes it difficult to write code like this.\nI'm sure there's a good reason for it, but I can't figure out what it might be.\n\nThere is a good reason, and you can see it in the implementation of the filter_by_prefix() function. There's no way to pattern match on a list of strings and do something different depending on what you match.\nThe only way to do that is to do the comparison yourself and return the appropriate value. That's what filter_by_prefix() is doing.\n\nHow about a list comprehension:\nfilter_by_prefix(strings, prefix='a')\n\nThat's one way to do it. I don't think it's any more readable than the original.\n\nIt is", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\nThis function is a great example of a function that is simple and effective, yet under-used.\n\nI haven't seen that function before, but the problem is not that hard to solve. You can write it like this in Python 3:\n```python", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix]\n\nfrom typing import List, Dict\n\n    def filter_by_key(strings: List[str], key: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have a given key.\n    >>> filter_by_key([], 'c')\n    ['c'", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix)).reverse()", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(s: strings, prefix: prefix).reverse()\n\nI'm pretty sure this is the best Python code I've seen in a while.\n\nI'm also sure it's the best Python code I've ever seen (and I've been using Python for ~7 years now).\n\nIf you like that, you'll love this:\nfrom __future__ import braces\n\nThis is the first time I've seen a comment on HN that actually made me laugh out loud.\n\na more accurate title would be \"from typing import _list_ \", but it wouldn't be nearly as funny\n\nThis is awesome.\n\nYes, it is.\n\nGood article.\n\nNot only is this incredibly funny, it's actually the best answer to the question posed in the title.\n\nI'm still waiting for someone to use\nfrom typing import *\n\nI had some fun a while back by using\nfrom typing import __everything\nin a large amount of code. It didn't cause any trouble because I was writing a standalone script, but it was fun to see the program take forever to load (it had to read in the whole standard library).\n\nI have a", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    return strings.filter(str, prefix).reverse()\n\nIs there any purpose to this? There are plenty of solutions to this problem in Python. If you're curious what it looks like when the functions are imported into the namespace, then you should really look at the import statement in the Python standard library.\n\nI agree with you on the second paragraph, but I think the import statement in the standard library is a bit different:\nfrom collections import Counter\nfrom string import String\nfrom itertools import count, islice, reverse\n(I'm not sure about islice, but I know the other two are imported separately)\n\nI've seen people do similar things in C, where you have to import the standard library in order to use the language's name (which can be used to build up a namespace).\n\nThis would be a useful convention in Java.\n\nA cleaner way to do this in Python is to use the List class, like so:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for prefix in prefixes:\n         for string in strings:\n             if string.startswith(prefix):\n                return string\n\nWow, it's been a long time since I've seen Python code that isn't overly verbose.\n\nI'm not sure this is something to be proud of.\n\nSure it is. If you had to write a Python script to filter by a prefix, you'd be doing it like this. You'd be doing it a lot of other things like this too, and all of it would be verbose.\nCompare that to Lisp where you can do something like this in one line:\n(filter-all (lambda (s) (member s '(a b c)))\n(map'string-to-list '(\"a\" \"b\" \"c\"))\n[1 2 3])\nand you can do something like this in three lines in Python:\nstrings = [1,2,3]\nprefixes = ['a', 'b', 'c']", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for str in strings:\n       if str.startswith(prefix):\n          return str\n\nWhat's so bad about this code?\n\nIt's not clear what the function does just by reading it. It's not clear if the prefix has to be provided as a parameter, or if it's computed from the current input. Also, the entire function is inside a loop, and it is not immediately clear what is the loop doing.\n\nI have to admit, I'm not totally clear on this either.\nCan someone explain what's wrong with it? I'm guessing it has something to do with the fact that it's being used inside of a loop.\n\nWell, for one, a list comprehension would be much easier to read:\n[str for str in strings if str.startswith(prefix)]:\n\nBut this doesn't handle prefixes longer than one character, and it also doesn't handle mixed case.\n\nYeah, but both of those are issues with the problem at hand, not the code itself.\n\nI see it now. It's not a problem with the code per se, it's just not", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s[0]:\n           return s\n    return []\n\nThis is pretty cool. I'm just starting to get into Python and I'm excited to see this stuff.\nI feel like a lot of the Python community are very smug about the language, which I would rather it not be. I come from the Java community and my first experiences with Python and Django were very good.\nThat being said, I would rather this code be written in Python:\nfor s in strings:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for name in strings:\n       if name.startswith(prefix):\n          return strings.get(name)\n    return strings</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n           yield s\n    return []\n\nSo you can't use it to sort lists, for example:\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n['abc', 'array']\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c')\n['abc', 'bcd']\n\nIn Python 3, you can do this:\n>>> sort(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b'), [])\n['cde', 'bcd', 'array']\n>>>\n\nThis is because, in Python 3, the'sort' function sorts elements of a list based on a custom comparison function that you pass to it.\n\nThat's cool!</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if prefix in string:\n           yield string\n\nAlso, you could do:\n>>> for a in ['b', 'c']:\n... print(a)\n... print(a[1:])\n...\n\nAs the author says, this version is faster than the one I had originally posted.\nIt's also less code, but it's not type-safe in the same way.\n\nThe example you give is not type-safe, since it allows \"a\" to be of type object. But it's probably not a big deal in this case.\n\nIn Python, the solution in the original post works only because the method 'filter' is defined in the module 'types', which declares a new type object with this method:\n>>> types.filter\n<type 'types.filter'>\nThe method then uses the current type to decide what to do.\nIn my solution, the same thing happens, but I explicitly tell the method what type to use:\n>>> filter_by_prefix(['b', 'c'], type(a))\n<type'str'>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n         return s\n    return []\n\nAck, the author fixed it in the comments.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    for c in strings:\n        if prefix in c:\n           return c\n\n    return List(c)\n\nThe description:\n\nthe only explanation is \"from typing import List\"\n\nAnd the funny thing is that the first time I saw this, I thought it was a joke, because \"from typing import list\" makes perfect sense to me, but this other one is a total nonsense. I can't imagine what could possibly be the author's thinking about.\n\nI think I understand what the author was going for with this.\nThey're not saying, \"implement this in Python.\" They're saying, \"implement this in Lisp. Here's what the Python code would look like.\" It's a programming-language-to-programming-language tutorial.\n\nBut the python code is not like the lisp code. It's not even a port. It's like doing an example in a book, using a Python program as an example, and then writing down \"from Python import Program\".\n\nNo, it's like writing a Python program, then finding the pieces of the Python program that you want to", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n            return s\n\nThis is actually a really nice example of what Python is good for. It has no easy built-in way to do a \"filter by prefix\" operation, so you just roll your own in three lines of code.\nIt's also a nice example of why Python is often called \"duck typing\".\n\nPython's built in library contains a lot of useful functions, I think the Python community is a lot more conscious of this than most other language communities. The Python community regularly produces things like this:\n\nIt's still easy to add features that are considered core to the language. If you look at the source of Python, you'll see that a lot of things that are considered standard in other languages are implemented by hand in Python.\n\nI'm not sure I understand your point. It's easy to add features that are considered core to the language to every language, not just Python.\n\nThe point I was trying to make is that Python doesn't have a lot of built in features.\nFor example, you can't write\na = 1", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return strings.filter(str.startswith(prefix) for _ in strings)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    prefixes = set(strings.keys())\n    for string in strings:\n        for prefix in prefixes:\n           if prefix == string:\n                string = string[prefix:]\n        else:\n                return string\n\nAm I missing something, or is this the slowest possible way to do this?\nIt's a neat trick, but I don't think it's that practical.\n\nFrom the description:\nBut yeah, a set would be faster.\n\nThis is the only case in which a set would be faster. And it doesn't seem like it'd be that much faster.\n\nWhy not use a hash?\n\nIn Python, a list comprehension is a one-liner that returns a list, while a hash is a bunch of code.\n\nAh, I missed the \"from typing import List\" line.\n\nAnd this, my friends, is why python is slow.\n\nThis is a terrible example of why Python", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(String.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix) == False:\n        return strings\n    return []\n\nThis is so Pythonic.\n\nThis is my new favorite Python trick, as far as I'm concerned, it's just such a great trick.\n\nThis is probably going to be a frequently-asked question, so I'll save everyone some time:\n_Why doesn't Python have a preprocessor?_\n_Because it's slow, and it's a horrible idea._\n\nYou know, sometimes I wonder why doesn't Python have a pre-processor.\nI know that it's slow, and there are huge problems with it, but I can't help to think that it would be a great tool to have.\nIf it was built into the language in a very good way, so that it was as fast as the built-in string manipulation, I think it would be great.\n\nYou don't understand: It would be _horrible_, and I mean really _horrible_.\nIn order to use a preprocessor, you have to:\n1\\. Decompile the code using the preprocessor.\n2\\. Find the error.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n            yield string\n    return strings</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n       for string in strings:\n         if string[0] == prefix:\n             return string\n    return []\nThis has been on HN like 3 times, already.\n\nThis is a great example of how much of a novice I am to Python. I've read, I've written little programs, but I still don't know the best ways to do many things.\nI came across this on the \"You Might Like\" page at the bottom. I was impressed that the article had such a clean explanation of the problem and the solution. I didn't notice that it had been submitted before. I apologize for the re-submission.\nI don't have any experience with Reddit, but I'll try to avoid the reposts in the future.\n\nNo need to apologize. I wasn't trying to be a jerk, just letting you know.\n\nNo worries, I didn't think you were being a jerk :)</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return filter(lambdax: x[1], strings, prefix)\n\nSee also  for a longer discussion.\n\n_For those who want to read the actual code, I put it here:_\n\nBut please use PEP8. It's the least you can do after taking the time to write the code up.\n\nI'll take a look at it, but I'm not a Python programmer. I just used it for this one task.\n\nThis is one of those times when I wish someone would have told me, \"Don't use list comprehensions to do string manipulation.\"\n\nAgreed. They are much easier to read than the equivalent code using for loops, though.\n\nThere are times when it makes sense.\nImagine you want to take a list of user ids, and compare them with a list of usernames to see if they're valid.\nThis is a common task, and you can use a list comprehension to do it:\nUserIds = [\"bob\", \"foo\", \"bar\"]\nUserNames = [\"bob\", \"foo\"]\nfor userId in UserIds:"]]