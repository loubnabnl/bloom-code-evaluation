[["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix == i:\n           return strings[i]\n\n>>> import itertools\n>>> l = ['a', 'b', 'c']\n>>> l = filter_by_prefix(l, 'a')\n>>> l\n['b', 'c']\n>>> l = filter_by_prefix(l, 'b')\n>>> l\n['a', 'b']\n>>> l = filter_by_prefix(l, 'c')\n>>> l\n['a', 'b', 'c']\n>>> l = filter_by_prefix(l, 'a')\n>>> l\n['a', 'b', 'c']\n>>> l = filter_by_prefix(l, 'a')\n>>> l\n['a', 'b', 'c']\n>>> l = filter_by_prefix(l, 'a')\n>>> l\n['a', 'b', 'c']\n>>> l = filter_by_prefix(l, 'a')\n>>> l\n['a', 'b', 'c']\n>>> l = filter_by_", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n           s = s[1:]\n    return s\n\nIt's not even a good example. For a better one, consider a list of strings, each of which is either an integer or a non-integer number. The goal is to get a list of integers.\n>>> filter_by_prefix([1, 2, 3, 4, 5, 6, 7, 8, 9], '1')\n[2, 3, 4, 5, 6, 7, 8, 9]\n>>> filter_by_prefix([1, 2, 3, 4, 5, 6, 7, 8, 9], '2')\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> filter_by_prefix([1, 2, 3, 4, 5, 6, 7, 8, 9], '3')\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> filter_by_prefix([1, 2, 3, 4, 5, 6, 7", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix == i:\n           return strings[i]\n\nI like it, it's nice and short and to the point.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nThis is not a pythonic way to do it.\n\nHow would you do it?\n\nI would use a function like this:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix).filter(s.startswith(prefix)).filter(s.endswith(prefix))\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nI've always been a fan of the \"from typing import *\" pattern.\n\nI've always been a fan of the \"from typing import *\" pattern, but I don't think it's a good idea to use it in production code. It makes it too easy to accidentally import a module that you don't want to use.\n\nI'm not sure I understand. How is it different from just typing 'import *'?\n\nYou don't have to type `import *` to import everything.\n\nI would like to add that \"from typing import *\" is a pretty good way to make your code more readable.\n\nI used to do this. I don't anymore. It makes it too easy to accidentally import a module that you don't want to use.\n\nI was always under the impression that \"from typing import *\" was a bad practice.\n\nYou're right.\n\nI don't get it. Why is \"from typing import *\" bad?\n\nIt's a bad practice because it makes it easy to accidentally import a module that you don't want to use.\n\nWhat's the", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s[0] and s[1:] == prefix:\n            return s\n\nI wonder if this is a better approach:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n           return string\n    return []\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s[0]:\n          return s\n\nI'm not sure what the point of this is. Is it just an exercise?\n\nYes, it's an exercise.\n\nI'm sorry, I must be missing something. What is the point of this exercise?\n\nIt's just a way to practice using the built-in list/dict/set classes, and some of their methods.\n\nI'm not sure what the point of this is. Is it just an exercise?\n\nYes, it's an exercise.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nI think this is a good example of how Python's syntax can lead to a bit of a mess.\n\nI don't think this is a good example of that at all.\n\nWell, the problem is that it's not clear what's happening.\nI think it's a good example of how Python's syntax can lead to a bit of a mess.\n\nI think it's a great example of how Python's syntax can lead to a bit of a mess.\n\nI think it's a great example of how Python's syntax can lead to a bit of a mess.\n\nI think it's a great example of how Python's syntax can lead to a bit of a mess.\n\nI think it's a great example of how Python's syntax can lead to a bit of a mess.\n\nI think it's a great example of how Python's syntax can lead to a bit of a mess.\n\nI think it's a great example of how Python's syntax can lead to a bit of a mess.\n\nI think", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n            return s\n\nYou're missing the point. The point is not that you can implement a filter() function, but that you can implement it using the same interface as the rest of the Python language.\n\nI think the point is that you can do it using a single function call.\n\nThat's the point of the article. The comment I was replying to said \"You're missing the point\". I was pointing out that the person I was replying to was the one missing the point.\n\nIt's interesting that the Python language is so powerful that you can implement a filter() function in the same way that you can implement the whole language.\n\nI'm a little confused by this article. The whole point of Python is that you can do stuff like this. I guess it's cool that you can implement a filter() function using only the Python language, but I don't see why you would want to do that.\n\nI think you're missing the point. The point is not that you can implement a filter() function, but that you can implement it using", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n         return s\n\nI'm not sure what the point of the post is. I see lots of code that uses type annotations in Python.\n\nThe point is that the type annotation is redundant and could have been eliminated.\n\nThe post is not about whether the annotation is redundant, but about whether the language should support it.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nThis is a very good example of why you should always use a language's standard library whenever you can.\n\nThis is a very good example of why you should always use a language's standard library whenever you can.\n\nI would say this is a very good example of why you should never use a language's standard library when you can.\n\nI'm not sure I understand. The standard library is a good idea, but not always applicable. When is it not applicable?\n\nWhen you have a more efficient way of doing it.\n\nYeah, that's what I meant by \"not applicable.\"\n\nI was thinking of a case where you're doing something that the standard library already does, but you have a better way of doing it.\n\nI'm not sure I understand. The standard library is a good idea, but not always applicable. When is it not applicable?\n\nWhen you have a more efficient way of doing it.\n\nYeah, that's what I meant by \"not applicable.\"\n\nI was thinking of a case where you're doing something that the standard library already does, but you have a better way of doing it.\n\nI", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nThis isn't a bad idea, but I think you're better off using a list comprehension. It's clearer and more concise.\n\nIt's more concise, but not clearer.\n\nI would argue that it is.\n\nI'd rather use this:\nfrom itertools import chain", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for prefix, string in strings.items():\n       if string[prefix] == prefix:\n          return string\n    return []\n\nThis is really neat. I'd never thought of using a function like this.\n\nThanks! It was actually just a little utility function I came up with while writing some code that used a lot of list operations. I had a bunch of functions that were like:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nThat's a little too literal.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix)).map(s)\n\nI like to use this one:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n       else:\n          return []\n\nThis is a nice example of the \"Python Way\", but I'm not sure it's a good example of \"Pythonic\" code.\nI think it's a great example of \"Pythonic\" code, and I think it's a great example of the \"Python Way\".\n\nIt's a great example of the \"Pythonic\" code, but not the \"Pythonic\" way.\n\nI don't think you know what \"Pythonic\" means.\n\nIt's a great example of \"Pythonic\" code, but not the \"Pythonic\" way.\n\nI don't think you know what \"Pythonic\" means.\n\nIt's a great example of \"Pythonic\" code, but not the \"Pythonic\" way.\n\nI don't think you know what \"Pythonic\" means.\n\nIt's a great example of \"Pythonic\" code, but not the \"Pythonic\" way.\n\nI don't", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nI'm not sure if this is a joke or not, but it's a neat demonstration of the fact that Python's built-in string methods are just functions, not magic.\n\nI think it's a joke. I'm not sure why, though.\n\nIt's a joke. It's a parody of the many posts on HN that are like \"I made a library for doing X in Y. It's just a wrapper around Z.\"\n\nIs there a good way to do this in Ruby?\n\nIt's not quite as terse, but it's pretty close:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i, s in enumerate(strings):\n       if s[prefix] == 'a':\n          return s\n\nWow, this is a great example of how easy it is to write something that seems like a good idea at the time, but that will bite you later on.\nI'd like to point out that the only thing this does is filter out the first character of the string. It doesn't filter out anything else, and it doesn't filter out duplicate strings.\nIt's a great example of how easy it is to write something that seems like a good idea at the time, but that will bite you later on.\n\nI think this is more of a case of how easy it is to write something that seems like a good idea at the time, and then you come back to it later and think \"Hm, this is stupid. I should fix that.\"\n\nI'm not sure if you're being sarcastic, but I don't think this is a good way to design your code. It's better to write it correctly the first time.\n\nI am being sarcastic.\n\nI'm not sure if you're being sarcastic", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i, s in enumerate(strings):\n       if s[0] == prefix:\n           return s\n\n>>> filter_by_prefix('ab', ['a', 'b', 'c']).\n['a', 'b', 'c']\n>>> filter_by_prefix('ab', ['a', 'b', 'c', 'd', 'e', 'f'])\n['a', 'b', 'c', 'd', 'e', 'f']\n>>> filter_by_prefix('ab', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> filter_by_prefix('ab', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> filter_by_prefix('ab', ['a', 'b', 'c', 'd", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n          return string\n\nI'm still not sure what the benefit of this is over:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\n\nI think this is the point where Python's lack of type checking becomes a problem.\n\nYou can't really write that in any language without type checking.\n\nBut you could in languages where you can declare types at runtime.\n\nI don't think that's the case. If you could, I'd expect a C-style type cast to be valid.\n\nIt's a little off-topic, but I was just thinking about the best way to get a list of strings that start with a given string. In python, I might write something like this:\n>>> words = ['a', 'b', 'c']\n>>> words[:2]  # start with 'b'\n['b', 'c']\n>>> words[3:5]  # start with 'c'\n['c', 'b', 'a']\n>>> words[2:5]  # start with 'a'\n['a', 'c', 'b']\nI'm not a big fan of the syntax, so I was trying to think of a better way to do it. My first thought was to do a reverse slice, but", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nI was going to say that the code is just fine, but then I noticed that you\ncan't use it as is.\nYou can't use it because it doesn't work for empty lists, and you can't\nuse it because it doesn't work for lists with a single element.\n\nIt's not a bug in the code. It's a bug in the requirements.\n\n\"Filter an input list of strings only for ones that start with a given prefix.\"\nThe problem is that the code doesn't do that. It filters the input list of\nstrings for ones that start with the given prefix.\n\nYou are correct. The code is not doing what was asked. However, the code is not the problem. The problem is in the requirements.\n\nI think the point is that the code should be written to be correct, not to satisfy some fuzzy requirements.\n\nThe code is correct. The requirements are not.\n\nI guess this is an example of the problem of translating between a language of the mind and a language of the keyboard.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))\n\nThis is not the same as \"from typing import List\", it is a wrapper function.\n\nI like the idea of the wrapper, but it's a bit silly to call it \"from typing import List\" since it's not importing the list type from the standard library.\n\nI'm pretty sure it's a joke.\n\nIt's not. I just noticed that the standard library doesn't have a filter method on lists.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n       if prefix in i:\n          return i\n    return []\n\nI'm not sure I get it. Could you elaborate?\n\nIt's a joke.\n\nThis is not a joke, it's a real library.\n\nI'm not sure I get it. Could you elaborate?\n\nIt's a joke.\n\nThis is not a joke, it's a real library.\n\nI'm not sure I get it. Could you elaborate?\n\nIt's a joke.\n\nThis is not a joke, it's a real library.\n\nI'm not sure I get it. Could you elaborate?\n\nIt's a joke.\n\nThis is not a joke, it's a real library.\n\nI'm not sure I get it. Could you elaborate?\n\nIt's a joke.\n\nThis is not a joke, it's a real library.\n\nI'm not sure I get it. Could you elaborate?\n\nIt's a joke.\n\nThis is not a joke, it's a real library.\n\nI'm not sure I", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for str in strings:\n        if prefix in str:\n           return str\n    return []\n\nThis is the worst example you could have possibly picked.\n\nWhy?\n\nBecause it's a fairly common idiom in Python. I don't know if it's\n\"idiomatic\" or not, but it's definitely common.\n\nAnd it's the kind of idiom that looks good on a first glance, but is\nhard to maintain, and is easy to make bugs in.\n\nThe same applies to the for loop in the linked article.\n\nNo, it's not.\n\nThe point is that the code looks simple on a first glance, but is hard\nto maintain and easy to make bugs in.\n\nThe difference is that the for loop is actually a pretty good idiom,\nand is used by experienced programmers.\n\nThe problem with the code in the article is that it's not idiomatic\nPython. It looks like a combination of Java-style string manipulation\nand C-style string functions.\n\nThe first two lines are fine. But the second two are a bit unusual", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string[0] == prefix:\n           return string\n\nSee also:\n\nI'm not sure if the article author is aware, but the Python standard library has a function called \"filter\" that does exactly this.\n\nYes, I'm aware of that. The problem is that \"filter\" isn't a built-in function in Python 2.x.\n\nAh, yes. I'm used to having to specify the version in my imports so I didn't think about that.\n\nI like this approach, but I don't like the fact that it's not part of the standard library.\n\nWhat would you call it?\n\nfilter_by_prefix\n\nIn Python 2.x, \"filter\" is a built-in function, but \"filter_by_prefix\" is not.\n\nI think you missed my point. I like the idea of the function, but I don't like the fact that it's not part of the standard library.\n\nAh, sorry. I thought you were saying that you didn't like the name.\n\nI like this,", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return filter(lambda x: x[prefix], strings)\n\nFor Python 2.6 and earlier, this is a list comprehension.\n\nThis is also the way to do it in Ruby:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n       if strings[x].startswith(prefix):\n           return x\n    return []\n\nfrom typing import List, Ord", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nSee also:\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if s.startswith(prefix):\n           return s\n    return List()\nI'm not sure what this is supposed to demonstrate. I suspect that it's not\nthat useful as a function.\n\nI'm not sure if you're being serious or not. It's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not. That's a joke.\n\nI'm not sure if you're being serious or not.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string[prefix] == prefix:\n            yield string", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for prefix in strings:\n        if strings[prefix].startswith(prefix):\n            return strings\n    return []\n\nThis is a very common idiom in Python. The for loop is a common way to create a recursive function, which is used in this case to filter the list. The filter_by_prefix function is only called once, and each call returns a new, filtered list.\n\nSee also\nList comprehension\n\nReferences</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.has_key('prefix'):\n        return strings.filter(str.startswith('prefix'))\n    else:\n        return strings.filter(str.ends_with(prefix))\n\nfrom typing import List\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix)).collect()\n\nI've been using this for years, and it's a great way to avoid the overhead of a dict.\n\nI use this a lot when I'm filtering something in a loop.\n\nI just use the builtin filter() method.\n\nI use this a lot. It's a great way to avoid the overhead of a dict.\n\nI use this a lot when I'm filtering something in a loop.\n\nI just use the builtin filter() method.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n    return []\n\nI don't understand the need for this.\n\nThis is not a very good example, but if you have a list of strings and you want to only include those that start with a specific prefix, you can use this.\n\nHow about this, then:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nfrom typing import OrderedDict\n\n    def filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'y')\n    []\n    >>> filter_by_suffix(['abc', 'xyz', 'zwxyz', 'abcxyz', 'xyzwxyz'], 'y')\n    ['abc', 'xyz']\n    \"\"\"\n    for s in strings:\n       if suffix in s:\n          return s\n\nfrom typing import OrderedDict\n\n    def filter_by_start_of_string(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if s.startswith(prefix):\n           return s\n\nThis isn't a good example. This is just a one-liner.\n\nIt's a good example of why Python's typing system is broken.\n\nHow so?\n\nI agree with him. Python's type system is broken. There's no way to express that a function takes an integer and returns a string, for example.\n\nThat's not true. You can do exactly that.\n>>> def f(x):\n... print x\n...\n>>> f(1)\n1\n>>> f('abc')\nabc\n>>> f(1)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: f() takes exactly 1 argument (1 given)\n\nIn that case you're not using the type system at all, you're just using an explicit cast. The type system should be able to enforce this automatically.\n\nThis is the sort of thing that is pretty easy to do in a statically typed language, but is hard to do", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string[0] == prefix:\n           return string\n    return strings\n\nThis is an example of a bad habit, and one I see a lot. People are trying to be clever, and they're not.\nThey're not clever because it's almost always better to be explicit. This code is a lot more readable, and more importantly, more maintainable, if you write it this way:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s[0]:\n          return s\n\nI don't understand this. What's the difference between this and a regular list comprehension?\n\nThe \"for\" loop is not needed. The \"filter_by_prefix\" function does the exact same thing as the list comprehension.\n\nThat's right, but I thought the point of the article was to show how to use a single statement to do something that would normally take several statements.\n\nIt's interesting that this example is not even valid Python code.\n\nIt's valid Python code. The only thing it lacks is a semi-colon at the end of the line.\n\nI guess you're right, I thought it was only valid if it was inside a function definition.\n\nI thought that too, until I realized that function definitions can also contain statements.\n\nI think you can get even more concise if you use a generator expression:\nfilter_by_prefix = (prefix for s in strings if prefix == s[0])\n\nI think that's actually less concise, because the 'for' loop is a lot more", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i, s in enumerate(strings):\n        if prefix == s[0]:\n           return s\n\nI don't see the point. This is not more readable than just using the built-in filter method.\n\nIt's more readable if you're familiar with the Python filter syntax, which is similar to the C-style for loop syntax.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix[s] == prefix:\n            return s\n    return []\n\nThere is also a very nice trick you can do with it:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n           return s\n\nI think you mean\nfrom typing import List\nfrom string import String\n\nOh yeah, I think you're right.\n\nI'm not sure what the point of this is.\n\nIt's a simple example of how to use Python's built-in list-comprehension syntax for defining a function.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str, prefix)\n\nI think this is a pretty good example of \"pythonic\" code. It's just a few lines, but it's clear and concise. It also shows that python is a \"functional\" language.\n\nI'm not sure what you mean by \"functional\".\n\nI think the poster means that the language allows you to define a function that returns a list.\n\nWell, you can do that in C too.\n\nAnd Ruby, and PHP, and Perl, and Java, and C#, and...\n\nYes, but it's a _core_ feature of Python, not a \"feature\" you have to download and install.\n\nRuby has _loads_ of core features that you don't have to download and install.\n\nYes, but none of them are the ability to define a function that returns a list.\n\nI was replying to your comment:\n_It also shows that python is a \"functional\" language._\nWhich is why I mentioned the ability to define functions that return lists.\n\nI don't know, but I've been programming in Python for a few years now and I've never needed to do that.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:\n        return strings\n    if prefix:\n        return List(strings.filter(s => s.startswith(prefix))\n    else:\n        return []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nThis is a bad example. You should use the filter function rather than list comprehensions.\n\nIt's an example from the Python docs.\n\nI know, but it's a bad example.\n\nThis is a bad example. You should use the filter function rather than list comprehensions.\n\nIt's an example from the Python docs.\n\nI know, but it's a bad example.\n\nThis is a bad example. You should use the filter function rather than list comprehensions.\n\nIt's an example from the Python docs.\n\nI know, but it's a bad example.\n\nThis is a bad example. You should use the filter function rather than list comprehensions.\n\nIt's an example from the Python docs.\n\nI know, but it's a bad example.\n\nThis is a bad example. You should use the filter function rather than list comprehensions.\n\nIt's an example from the Python docs.\n\nI know, but it's a bad example.\n\nThis is a bad example. You should use the filter function rather than list comprehensions.\n\nIt's an example from the Python docs", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix[i] in strings:\n             return strings[i]\n    return strings", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, items)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if s.startswith(prefix):\n            return s", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if strings[i] == prefix:\n            return strings[i]\n    return strings\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    for i in strings:\n        if strings[i] == prefix:\n            return strings[i]\n    return strings\n\nI think this is the most concise.\n\nI'm a fan of the \"one-liner\" approach to coding.\n\nI'm a fan of the \"one-liner\" approach to coding", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, lambda x: x in strings)\n\nThis is a good example of a Python program that is a bad idea.\n\nI'm not sure I follow. It's an example of a trivial Python program that's a bad idea, or a good example of a bad idea in Python?\n\nPython is a dynamic language, and the code is bad because it is static.\n\nI don't think this is a fair criticism. It's a trivial example, and as such, it's not really intended to be used in a practical context. It's merely intended to illustrate the syntax.\n\nI think it is fair. It's not a criticism of the syntax, it's a criticism of the code.\nIn a dynamic language, you'd have to specify the behavior of filter_by_prefix() at runtime. In a static language, you specify it at compile time. The latter is a bad idea because it can be a lot of work to change.\n\nIt's not even that.\nThe code is bad because it doesn't take advantage of Python's dynamic features.\nFor instance, you could make filter_by_prefix() a decorator.\n\nI don't", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))\n\nI'd rather have this:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix in i:\n           return i\n\nI'm not sure I see the point.\nIf you want a list of the strings that start with the same prefix as the list, just do this:\n>>> prefixes = [ 'a', 'ab', 'abcd', 'abc' ]\n>>> list_of_strings = [ 'abc', 'abcde', 'abcde', 'abc', 'abcd', 'abcd' ]\n>>> prefixes_in_list_of_strings = filter_by_prefix(list_of_strings, prefixes)\n>>> prefixes_in_list_of_strings\n['a', 'ab', 'abcd', 'abc', 'abcde', 'abc', 'abcd', 'abcd']\n\nI think the point is to make it more idiomatic.\n\nI don't think it's idiomatic at all.\nIn fact, I think it's a pretty bad idea.\n\nI'm not sure I understand why. I think it's a great idea.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s:\n           return s\n    return strings\n\nI think this is a nice example of a simple pythonic function.\nThe only thing I would add is a docstring with a brief explanation of the function.\n\nThanks! I'm still new to Python, so I appreciate the feedback.\n\nI'm not sure I understand the point of this article. The article itself is an example of a function that uses list comprehension. The function is not particularly well named, but it's not very bad either.\n\nI agree. It doesn't have to be perfect, it just has to work.\n\nI think you can write shorter and more readable code using the built-in list comprehension syntax:\n[x for x in string if x.startswith('a')]\n\nIt's not shorter, but it is more readable.\n\nI think it's shorter. The 'from typing import List' is not needed.\n\nIt is shorter, but the 'from typing import List' is necessary.\n\nIt's not necessary.\n\nI think it's", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix).tolist()\n\nThis is a little bit of a cheat, but I like it.\n\nThe real cheat is the fact that it's using the built-in List class instead of a custom one.\n\nI've seen a lot of code that uses built-in classes, but I think they are often a good idea. If you're working with a lot of standard data types, it can be a pain to define your own. I think the real cheat is using the built-in list class for something that is not a list.\n\nI agree. The built in list class is very useful, and I use it all the time.\n\nI like it.\nIt's not a bad idea to have a function that does the same thing as the built in list.filter(), but with the ability to use a different function (e.g. to use the built in map() function instead).\n\nWhat is the purpose of this?\n\nI guess it's just a way of avoiding the use of the list class.\n\nI think it's just a way of avoiding the use of the built-in list class.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n            return string\n    return strings\n\nVery nice. I think the syntax is a little bit weird, though. What about:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str, prefix)\n\nI don't see how that is more readable than:\nfiltered_list = []\nfor s in strings:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n           yield string\n\nThis code is a good example of why Python is a terrible language.\n\nWhy? Because it's concise, readable, and doesn't require a pile of imports and imports of imports?\n\nBecause it's a lot easier to type \"from string import str\" than \"from typing import List\".\n\nBut it's not easier to type \"filter_by_prefix([], 'a')\" than \"filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\"\n\nWhy would you type that?\n\nBecause that's how you write Python?\n\nI don't think that's how you write Python.\n\nIt's not, I was just pointing out the absurdity of the GP's claim.\n\nI've heard that there are some things about Python that are not intuitive, and this is one of them. The way I understand it, the `from typing import List` is the equivalent of `from string import str`. It's a way to say \"I don't", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\n\"str.startswith\" is a function in the string module. You can't import modules into python code, but you can import the functions in modules.\n\nYes, this is a good point. I used the wrong word.\n\nYou can import modules into python code, but you can't import the functions in modules.\n\nI think you mean you can't import a module's namespace, but you can import its functions.\n\nYeah, that's what I meant.\n\nHow about this:\nfrom typing import List, str\n\nThis is the same as:\nfrom typing import List, str, unicode\n\nI think the point is that you can import all the functions of the module, not just the ones you need.\n\nI think you can do that with the new-style classes, too.\n\nI'm not sure what you mean.\n\nThe new-style classes have a __dict__ attribute, which can be used to import the whole namespace of the class.\n\nYou can import the whole namespace of the module, too.\n\nI think you can do that with the new-", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))\n\nThat's a really bad example.\n\nIt's an example that demonstrates the problem with the built-in \"from typing import\" syntax. It's not very good for teaching, but it's a good example to show why \"from typing import\" is bad.\n\nI can't imagine why anyone would want to use \"from typing import\". The only thing I can think of is to use the \"typing\" module to define a custom type, and even then, you could just use \"from typing import *\".\n\nI've seen it used when the programmer is using a particular language's standard library and wants to use the \"from typing import\" syntax to call it, even though he/she is not importing the module.\nIt's a silly idea, but I've seen it.\n\nI've never seen it, but that makes sense.\n\nI have seen this style used in some C++ code. It's not very common, but it does happen.\n\nI think it's a bad example because it's too trivial.\n\nThe problem with the example is that it's trivial. It's not a good", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n         return s\n    return []\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nThis is not Pythonic.\nPython is not Perl.\n\nI've never used Perl. What is the unPythonic way to do this?", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n            return s\n    return []\n\nI've always been a big fan of the \"from __future__ import print_function\" joke.\n\nI was going to comment on the same thing. This is a very clever joke.\n\nI don't get it.\n\nIt's a joke.\n\nIs there a list of all these somewhere? I've seen this one and a few others.\n\nI've seen a few on the web, but I don't think there's a list anywhere.\n\nThe list is here:\n\nI have a hard time believing that this is a coincidence.\n\nI've been using Python for over 5 years, and I've never seen this before.\n\nI've been using Python for more than 5 years, and I've never seen this before.\n\nI've been using Python for more than 5 years, and I've never seen this before.\n\nI've been using Python for more than 5 years, and I've never seen this before.\n\nI've been using Python for more than", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nI'm not sure why it's not possible to do this in Python:\ns = [\"abc\", \"def\", \"ghi\"]\ns = filter_by_prefix(s, \"a\")\nIs there a reason for this?\n\nI think that's the point: this is a hack, and a not very good one at that.\n\nI don't see how this is a hack. It's a very simple way to do what the OP wants, and it's something that can be used in a variety of situations.\n\nA better way is to use the string.find() method:\ns = [\"abc\", \"def\", \"ghi\"]\ns = s.find(\"a\")\n\nThat's exactly what I was thinking.\n\nI have a lot of trouble with Python's built in functions and modules. I don't know why, but I find it very hard to get my head around them. I wish I did.\n\nI think it's because you're not used to them. I had the same problem when I first started using Python. It took me a couple of months to get used to", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix[i] == 'a':\n           return strings[i]\n    return strings\n\nI always thought this was pretty cool.\n\nIf you like this, you may also enjoy the `zip` function, which is similar:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nThis is a great example of what the Python community does right, and why the Python community is so awesome.\n\nWhy?\n\nBecause it is a very simple, small, and clean solution to a very common problem.\n\nIt's also a good example of a \"micro-library\" that is more useful than the standard library's implementation.\n\nI like the idea of a micro-library, but I don't think this is one.\nThere are several things that are wrong with this code:\n1) The function is called filter_by_prefix, but it doesn't actually filter anything. It returns a list of the same length as the original list.\n2) It returns a list of the same length as the original list.\n3) It's a list, not a tuple.\n4) It's not documented.\n5) It's not tested.\n6) It's not tested.\n7) It's not tested.\n8) It's not tested.\n9) It's not tested.\n10) It's not tested.\n11) It's not tested.\n12) It's not", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n        if prefix == x:\n            return x\n    return strings\n\nThis is a great example of why people who have only used Python for a little while should not be posting tutorials.\nThe code is fine, but the explanation is bad.\nThe explanation is bad because it doesn't explain why you would want to use filter_by_prefix.\nYou want to use filter_by_prefix when you have a list of strings and you want to find all the ones that start with a given prefix.\nFor example, if you have a list of strings that look like this:\n'abc', 'def', 'ghi', 'jkl','mno', 'pqr', 'tuv'\nYou can find all the ones that start with 'a' by using filter_by_prefix.\nYou can find all the ones that start with 'a' and 'b' by using filter_by_prefix('a', 'b').\nYou can find all the ones that start with 'a' and 'b' and 'c' by using filter_by_prefix", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n          yield string\n\nAnd that's the problem with Python.\n\nYou can do that with Ruby as well:\nirb(main):001:0> [a]\n[]\nirb(main):002:0> [a,b,c,d]\n[a,b,c,d]\nirb(main):003:0> [a,b,c,d,e]\n[a,b,c,d,e]\nirb(main):004:0> [a,b,c,d,e,f]\n[a,b,c,d,e,f]\nirb(main):005:0> [a,b,c,d,e,f,g]\n[a,b,c,d,e,f,g]\nirb(main):006:0> [a,b,c,d,e,f,g,h]\n[a,b,c,d,e,f,g,", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n         if prefix[i] == prefix:\n               return strings\n    return []\n\nThis is a _really_ bad example of how to use Python's typing.\nThe example is better as:\n>>> import types\n>>> types.filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'd')\n['d']\n>>> types.filter_by_prefix('a', ['a', 'b', 'c', 'd'])\n['a', 'b', 'c', 'd']\n\nI think the second example is a _really_ bad example of using types.\n\nI don't get why.\n\nBecause the type system is not meant to be used to validate the input, but to validate the output.\nIn the second example, you're using the type system to validate the input, which is not what the type system is for.\n\nI'm not sure I understand your point.\n\nThe type system is not meant to be used to validate the input, but to validate the", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(x: x.startswith(prefix))\n\nI don't see the point of this.\nThe Python version is very readable, and this one is not.\nI'd rather write a regular expression.\n\nYou're right. I just wanted to show how to do it in Python.\n\nI'm not sure what the point of this is.\nIn Python,", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s[0]:\n            return s\n    return List()\n\nThat's a pretty interesting use of type classes. I'm not sure I'd use it in a real program, but it's definitely a cool way to show off the capabilities of the type system.\n\nIt's not really a good example of type classes, but it's a good example of the type system.\n\nIt's not really a good example of the type system either.\n\nIt's not really a good example of anything.\n\nIt's a good example of something that isn't a good example of anything.\n\nThat's a pretty interesting use of type classes. I'm not sure I'd use it in a real program, but it's definitely a cool way to show off the capabilities of the type system.\n\nIt's not really a good example of type classes, but it's a good example of the type system.\n\nIt's not really a good example of the type system either.\n\nIt's not really a good example of anything.\n\nIt's a good example", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if prefix == string:\n          return string\n\nOh, this is just a silly little joke.\n\nThis is a very old joke, and is probably not what the OP had in mind.\n\nIf you're interested in this sort of thing, you might enjoy this:\n\nI think this is a very good idea, but I think it would be more useful if it were a function, rather than a class.\n\nWhy?\n\nBecause it would be easier to use in a program.\n\nYou mean like:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n         return s\n    return []\n\nThis is interesting, but not a very good example. The correct answer would be:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s[0]:\n          return s\n\nThis is a neat trick, but I'm not sure it's worth the effort. I'd probably just use a dictionary:\n{'abc': ['a', 'b', 'c'], 'bcd': ['a', 'b', 'c'], 'cde': ['a', 'b', 'c'], 'array': ['a', 'b', 'c']}\n\nI think it's nice because it is very clear and readable. I don't think I'd ever use it, but I like it.\n\nIt's a bit too clever for its own good.\n\nI think it's a neat trick. It's not worth the effort, but it's a neat trick.\n\nIn Python, there are no \"lists\". Lists are not objects, but rather a built-in function.\n\nAre you sure? I can't find anything that says that.\n\nI'm sure. I can't find anything that says that either.\n\nI think it's a neat trick.\n\nI think it's", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix.startswith)\n\nI'm not sure if I'm missing something, but it seems to me that the second example should be:\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\nYou're right. Fixed.\n\nI like this, but I think it would be more useful if the standard library had a function to do this.\n\nIf you're using Python 2.6 or later, it does:\n>>> import string >>> string.startswith('a') 'a' >>> string.startswith('a') 'b' >>> string.startswith('a') 'c' >>> string.startswith('a') 'd' >>> string.startswith('a') 'e' >>> string.startswith('a') 'f' >>> string.startswith('a') 'g' >>> string.startswith('a') 'h' >>> string.startswith('a') 'i' >>> string.startswith('a') 'j' >>> string.startswith('a') 'k' >>> string.startswith('", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s.startswith(prefix):\n            return s\n    return []\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nI'm not sure this is the best way to do it, but it's the only way I know how.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix)).tolist()\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n           return s\n    return []\n\nIt is a shame that this is Python. A simple C++ implementation would be more readable.\n\nC++ is a language for systems programming, not for writing code that is easy to read.\n\nI would say that it is a language for writing code that is easy to write. The fact that it is also easy to read is a side effect.\n\nYou can write code that is easy to read in C++, but it is not the default.\n\nThe problem with that code is that it's a list comprehension.\nThis is the code I use for a similar task:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, lambda s: s in strings)</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str, prefix)\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return strings.filter(prefix)\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n          return s\n    return []\n\nimport string", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n          return s\n    return []\n\nI think this is a better version:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings[0] == prefix:\n       return strings\n    else:\n       return []\n\nI've seen this a few times, and I don't really understand it. Why is it\nbetter than:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nI'm not sure what you're trying to do here.\n\nI believe the author was trying to demonstrate the use of the \"from typing import List\" idiom.\n\nYes, I know. I'm not sure what the point of the code is, though. It's just a pointless example.\n\nIt's to show the use of the \"from typing import List\" idiom.\n\nI know. I don't see the point of the example.\n\nThe point is to show the use of the \"from typing import List\" idiom.\n\nI know. I don't see the point of the example.\n\nThe point is to show the use of the \"from typing import List\" idiom.\n\nI know. I don't see the point of the example.\n\nThe point is to show the use of the \"from typing import List\" idiom.\n\nI know. I don't see the point of the example.\n\nThe point is to show the use of the \"from typing import List\" idiom.\n\nI know. I don't see the point of the example.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nI like how the author has gone out of his way to make it clear that he doesn't know how to use the module he's importing.\n\nI think it's pretty clear that he does, and is just trying to make an example for the benefit of people who don't.\n\nI think it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it's pretty clear that he doesn't.\n\nI think it's pretty clear that it", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nYou may want to consider a more idiomatic name, like \"filter_by_prefix_and_ suffix\" or \"filter_by_prefix_and_suffix\".\n\nI like 'filter_by_prefix_and_suffix', but it's too long for a Python function name.\n\nIt's longer than \"filter_by_prefix\"?\n\nYes.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI think that's a good thing.\n\nI think it's a bad thing.\n\nI", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nThis is so much better than the Python version.\nI don't know about the language, but at least I can say that this snippet is much more readable.\n\nI think the Python version is more readable. It's not just about the syntax, but also about the idioms.\nfilter_by_prefix(strings, prefix)\nis a common idiom in Python, which means that the reader can skim over the first part of the function and figure out what it does.\nThe equivalent idiom in Javascript is a bit more obscure:\nfunction filter_by_prefix(strings, prefix) {\nfor (var s in strings) {", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s[0]:\n           return s\n\nJust a note: you don't have to use the `from typing import List` line if you don't need to. You can just write:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nI don't understand why this is getting upvotes.\n\nBecause it is funny.\n\nI was under the impression that the community here was more serious than that.\n\nThis is reddit.com, not comp.lang.python.\n\nI can't believe I'm going to defend the \"import\" joke, but it's not really a joke.\nThe \"import\" statement is the only way to get a module into the current namespace, and is a fundamental part of the language.\n\nIt's not just a joke. It's a joke that's been made a million times before, and it's a joke that's been made a million times before with a million different languages.\n\nAnd yet, it's still funny.\n\nI don't think it's funny. I think it's lame, and I think it's a waste of time and space.\n\nWhat about the time and space wasted by your comment?\n\nI'm not the one that made the joke.\n\nIt's a joke. A joke is not supposed to be", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(lambda s: s.startswith(prefix))\n\nfrom typing import List, str\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return strings.filter(lambda s: s.startswith(prefix))\n\nfrom typing import List, str\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde',", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s -> s.startswith(prefix))\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n        return strings\n    else:\n        return []</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nThat's nice and all, but it's not really an example of \"pythonic\" code.\n\nI think it is, it's a simple one-liner that is easy to understand.\n\nI think he meant that it's not pythonic because it imports the whole typing module.\n\nI don't think the \"import typing\" line is too bad. The only thing that would make it better would be a comment explaining what the function does.\n\nI'm not sure I would call that pythonic. It's one line, but it's not a clear one-liner.\n\nIt's not a one liner. It's a one line _function_, but it's not a one line _program_.\n\nI'd call that a one-liner. The 'def' keyword is just a syntactic formality.\n\nIf you're willing to be that loose with the term, then it's not a one-liner. I'm willing to be that loose with the term, and I think it's not a one-", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n         if prefix in i:\n              return strings[i]\n\nI know Python isn't a strict language, but what the hell?\n\nYou can do this in C++:\nfilter_by_prefix(strings, \"a\") == strings\n\nAnd C#:\nfilter_by_prefix(strings, \"a\") == strings\n\nAnd Haskell:\nfilter_by_prefix(strings, \"a\") == strings\n\nAnd Ruby:\nfilter_by_prefix(strings, \"a\") == strings\n\nAnd Lisp:\n(filter-by-prefix strings \"a\") == strings\n\nAnd Perl:\nfilter_by_prefix(\"a\") == strings\n\nAnd PHP:\nfilter_by_prefix(\"a\") == strings\n\nAnd Lua:\nfilter_by_prefix(\"a\") == strings\n\nAnd Javascript:\nfilter_by_prefix(\"a\") == strings\n\nAnd Ruby:\nfilter_by_prefix(\"a\") == strings\n\nAnd Erlang:\nfilter_by_prefix(\"a\") == strings", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))\n\nThis is a really great example of how Python is a language for people. I don't know a thing about Python, but I can read this and understand it. I can even guess at how it works, and I think I'm right.\nI'm sure I could look at a C++ implementation of this and understand it, but I'm not sure I'd have the same reaction.\n\nI think that's a good point.\nThe one thing I find annoying about Python is that it's not always clear which things are \"features\" and which things are \"bugs\".\nFor example, when you're learning Python, you're taught to use \"from x import y\" because it's more readable than \"y = x.y\".\nBut it turns out that \"y = x.y\" is actually a feature.\nAnd there are lots of other things like that. It's not always clear which things are \"features\" and which things are \"bugs\".\n\n\"y = x.y\" is not a feature, it's a bug.\nThe \"from x import y\" idiom is a feature, and it's", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n          return s\n\nThe code is from the article:\n\nThanks for the link. It's a great article.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\nI think it should be:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(lambda s: s.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for prefix, s in strings.items():\n        if prefix == s:\n           return s", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))\n\nI think the code is too verbose.\n\nIt's a good exercise for the reader. I think it's a good lesson for new programmers that the same thing can be done in different ways.\n\nI have to agree. I think it's great that it's not just a single line of code. It's a good lesson for new programmers that the same thing can be done in different ways.\n\nI agree, it's a good lesson for new programmers that the same thing can be done in different ways.\n\nI agree, it's a good lesson for new programmers that the same thing can be done in different ways.\n\nI agree, it's a good lesson for new programmers that the same thing can be done in different ways.\n\nI agree, it's a good lesson for new programmers that the same thing can be done in different ways.\n\nI agree, it's a good lesson for new programmers that the same thing can be done in different ways.\n\nI agree, it's a good lesson for new programmers that the same thing can be done in different ways.\n\nI agree, it's a", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:\n        return []\n    else:\n        return strings\n\n(I wrote this as a joke, but I think it might be useful for a real project. I couldn't find a good way to do it with the built-in list type, but this is a reasonable solution.)</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nThis is a good example of the power of Python. The amount of code needed to achieve this in another language would be much more.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nThe fact that the example uses a list comprehension instead of a lambda is not really relevant to the discussion of the article.\n\nI think it's relevant, because list comprehensions are a common idiom in Python, but lambdas are not.\n\nI would expect list comprehensions to be a common idiom in any language with list comprehensions.\n\nThe point is that list comprehensions are a common idiom in Python, but lambdas are not.\n\nIt's interesting to see how many languages have this idiom.\nIn Haskell it's called a \"do-block\" and the syntax is as follows:\ndo\n[ <test> | <action> | <test> ]\nwhere <test> and <action> are functions that take a test and an action and return a test.\n\nLisp has a similar idiom:\n(do ((test. body)...)...)\nwhere test and body are expressions.\n\nI think the difference between list comprehensions and lambdas is that list comprehensions are an O(n) operation, while lambdas are an O(1) operation.\nIn Python,", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\nI think the title is more a comment on how easy it is to add an import to a file than on the quality of the code.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n           return string\n\nThat's one way to do it. It's not the idiomatic Python way, though.\n\nI don't know why you were downvoted. The idiomatic way to do it would be to use a string slice:\nfilter_by_prefix(strings, prefix)\n\nI think the reason for the downvotes is that the idiomatic way is not always the most efficient way.\n\nI've found it's a good rule of thumb to use the idiomatic way, but to be aware of the non-idiomatic way and be able to use it when necessary.\n\nI think that's a good rule of thumb, but I think it's a bad rule of thumb to use the idiomatic way all the time.\nI've used Python for a long time and I've been doing a lot of C# recently. I've found that Python has a lot of idioms that aren't very efficient. For example, I would not use Python's list comprehensions to iterate over an array. I'd use a for", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n         return s\n    return []\n\nI'm going to have to try this out.\n\nI'm a fan of the \"from typing import List\" convention.\n\nI'm not sure I understand what's going on here.\n\nI think it's an example of the \"from typing import *\" convention.\n\nYes.\n\nI think I'll have to try this out.\n\nI'm not sure I understand what's going on here.\n\nI think it's an example of the \"from typing import *\" convention.\n\nYes.\n\nI think I'll have to try this out.\n\nI'm not sure I understand what's going on here.\n\nI think it's an example of the \"from typing import *\" convention.\n\nYes.\n\nI think I'll have to try this out.\n\nI'm not sure I understand what's going on here.\n\nI think it's an example of the \"from typing import *\" convention.\n\nYes.\n\nI think I'll have to try this", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s[0]:\n          return s\n\nI am not a python programmer, but I think it is interesting to see the C++/Python code comparison.\nThe C++ code is more concise, and the Python code is more readable.\n\nI don't know, I think the C++ version is a lot more readable.\n\nI'm curious: why?\n\nThe C++ version is more readable because it is more concise.\n\nThis is a good example of why I think Python is a terrible language for beginners to learn. The language is so easy to write that it's tempting to write it in a way that's more concise than it should be.\n\nI think the bigger issue is that Python is a terrible language for beginners to learn _because_ it's so easy to write. There's no real structure to the language, so it's easy to write something that works, but is totally unreadable.\n\nYes, that's a good point.\n\nI think this is a good example of why I think C++ is a terrible language for beginners to learn. The language is", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nThat's a pretty terrible example.\nI mean, sure, it's clear, but it's not a good example of the power of Python.\nIt's a trivial example in any language that supports lists.\n\nI'm not sure what the point of the example was.\nI'm not even sure it was a Python example.\n\nI think the point was that it's a trivial example of a common operation, but that the Python syntax makes it even more trivial.\n\nI'm not sure that's true.\nI think the point of the example was that it's a trivial example of a common operation, but that the Python syntax makes it even more trivial.\n\nI'm not sure that's true.\nI think the point of the example was that it's a trivial example of a common operation, but that the Python syntax makes it even more trivial.\n\nI'm not sure that's true.\nI think the point of the example was that it's a trivial example of a common operation, but that the Python syntax makes it even more trivial.\n\nI'm not sure that's true.\nI think the point of", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nThis is not very Pythonic. The Pythonic way would be to use a list comprehension:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(x for x in strings if x.startswith(prefix)).\n\nI don't know how I've lived without this.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s:\n           return s\n    return []\n\nI don't understand the significance of this. Could someone explain?\n\nIt's a terrible example of the list comprehension syntax. It's a list comprehension that returns a list of strings, so it's equivalent to:\nfor s in strings:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n        return strings\n    else:\n        return []\n\nThis is a lot like \"map\".\n\nThe syntax is more Pythonic, though.\n\nI'm not sure I see the point.\n\nWhat's the point of map?\n\nTo map over a list and return a new list.\n\nI think the point is that map returns a new list, and filter_by_ prefix returns the same list but with a subset of the original list.\n\nThe point of map is to map over a list and return a new list.\n\nYes, but why does that make map more useful than filter_by_prefix?\n\nmap is more useful because it's more general.\n\nIt's only more general if you need to map over a list and return a new list.\n\nA lot of the time you do.\n\nSure, but that doesn't make filter_by_prefix useless.\n\nI never said it was.\n\nThen why are you arguing with me?\n\nBecause I don't understand your point.\n\nI'm saying that", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nHow is that a bad idea?\n\nIt's not.\n\nI think it is. It's the classic case of premature optimisation.\n\nI'm not sure I understand what you mean.\n\nA better approach would be to use a list comprehension:\nfilter_by_prefix = (s for s in strings if s.startswith('a'))\n\nI think the point was to show that you can use type inference to do something like this.\n\nI know, but I think the point of the article is that you should write your code with readability in mind.\n\nI'm not sure I understand what you mean.\n\nI think the point was to show that you can use type inference to do something like this.\n\nI know, but I think the point of the article is that you should write your code with readability in mind.\n\nI'm not sure I understand what you mean.\n\nI think the point was to show that you can use type inference to do something like this.\n\nI know", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n            return string\n    return []\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n            return string\n    return []\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\n\nThe first one is so much better.\n\nWhy? It's more verbose, it's more confusing, it's not obvious that it's an operation on strings, and it's not obvious that it's an operation on a list of strings.\n\nIt's a function, not a method, so it's not meant to be used in a list comprehension. If you have a list of strings and want to filter it for strings that start with a certain character, the first one is a lot more readable.\n\nI'm not sure I agree with the article. I've written a lot of code that I've had to maintain, and I've never had to go back and make sure that I had used the right 'from' statement.\nI think the article's example is a bit contrived. Why would you ever want to have a list of lists of lists of lists?\n\nYou wouldn't. The point is that you can't tell the difference between that and:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s for s in strings if s.startswith(prefix))\n\nI don't know if this is a Python-ism, but I think it would be better to use\nfilter(s for s in strings if s.startswith(prefix))\n\nYou're right, that is a better way to do it. I was just being lazy.\n\nThis is not a pythonism, but a bad habit.\n\nI'm not sure if this is a good habit, but I like to use the _ operator to do this:\nfilter_by_prefix(strings, prefix) ==> filter(s for s in strings if s.startswith(prefix))\n\nI would do this in bash, but not in python.\n\nI don't see why not. The _ operator is a built-in, and it is a simple matter to use it to do the same thing as the built-in filter.\n\nThe _ operator is a built-in, but it's not what I would consider idiomatic python.\n\nThe _ operator is idiomatic python for string operations.\n\nI guess I'm just not a fan of it.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, lambda s: s[0] == prefix)\n\nI've always wondered why the Python standard library doesn't have a \"from typing import List\".\n\nIt's been a while since I've done any python, but if I remember correctly, the list type is defined in the language specification, so you can't have a \"from typing import List\".\n\nI know that, but I've always thought it would be nice to have a single module that contains the \"standard\" types (e.g. List, dict, set, etc.) so that you don't have to import a bunch of modules just to get the types you need.\n\nThe standard library is quite small and most of the things you need are in it.\n\nI'm not saying it's not small, but if you're writing a library that uses Python types, you still need to import the types module. Why not just put the types in one module?\n\nBecause that module is part of the language and you can't import a part of the language.\n\nI'm not suggesting that the module be imported. I'm suggesting that the module be written as a library and not part of the language.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nI'm not sure why this is interesting. You can do this in Python with a map (or dict, or set, or whatever) without importing a module.\n\nIt's interesting because it's a quick way to write a function that does something that you might want to use a lot, but which isn't part of Python's standard library.\n\nBut it's not a new idea. It's a pretty common idiom in many languages.\n\nI don't see how that's relevant.\n\nYou don't see how it's relevant that this is not a new idea?\n\nYes, I don't see how it's relevant to the OP, who is interested in a module that does something that Python doesn't provide out of the box.\n\nPython provides it out of the box.\n\nIt does? I don't see it in the standard library.\n\nYou don't see it in the standard library because it's not part of the standard library. You can do it with a dictionary.\n\nI'm not sure why this is interesting.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nHow would you implement this in Python 3?\n\nimport string", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n        return strings\n    else:\n        return []\n\nThat's really neat!\n\nAnd it's also very easy to do with a regular expression.\n\nI don't know why this is being downvoted. It's an interesting point.\nOf course, regular expressions are not as readable as the code above, but they are a lot more powerful.\n\nI think the point is that this is a simple example of what the language is capable of.\n\nI think you're right, but I think it's also worth pointing out that it's easy to do with regexes.\n\nSure, but this is python, and regexes are a pain to use.\n\nI don't think it's a pain to use regexes in Python. It's actually quite nice.\n\nThis is why I use Python.\n\nI don't think that's what the downvoters are saying. They're saying that you can do this in Python, but you can do this in most languages.\n\nI think it's a pretty good example of how powerful Python is.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, strings.index)\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for str in strings:\n       if str.startswith(prefix):\n          return str\n\nI don't get it. Is this a joke?\n\nI think it's a joke, but it's not very funny.\n\nI'm not sure if this is a joke, but if it is, I don't think it's very funny.\n\nI don't get it. Is this a joke?\n\nI think it's a joke, but it's not very funny.\n\nI'm not sure if this is a joke, but if it is, I don't think it's very funny.\n\nI don't get it. Is this a joke?\n\nI think it's a joke, but it's not very funny.\n\nI'm not sure if this is a joke, but if it is, I don't think it's very funny.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix)).filter(str.endswith(prefix))\n\nI don't think it's a good idea to use the same name as a builtin function from the standard library, even if it's not a standard function.\n\nI'm not sure I follow. This is a Python function, not a C function. It's not like he's using the same name as a builtin C function.\n\nI think the GP is suggesting that this should be called filter_by_prefix_string rather than filter_by_prefix.\n\nI'd like to see a version that doesn't require the prefix to be a string.\n\nI guess this is what you want:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string.startswith(prefix):\n           return string\n\nI wonder how many people here would be willing to type \"from typing import List\" to write a one-liner.\n\nI'd rather do:\nfrom typing import List\n\nI'm not sure this is a fair comparison.\n\nI'm not sure why not.\n\nFrom the article:\n\"I'm not sure why not\" is a perfectly valid response to \"I wonder how many people here would be willing to type \"from typing import List\" to write a one-liner.\"\n\nI'm not sure why you would think that's a valid response to \"I'm not sure why not.\"\n\nI'm not sure why you would think that's a valid response to \"I'm not sure why not.\"\n\nI'm not sure why you would think that's a valid response to \"I'm not sure why not.\"\n\nI'm not sure why you would think that's a valid response to \"I'm not sure why not.\"\n\nI'm not sure why you would think that's a valid response to", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n        return strings\n    return []\n\nI was expecting something like:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s[0]:\n          return s\n\nI find this to be more readable and more concise:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix: prefix]\n\nI don't know Python, but I would expect:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n       if x[0] == prefix:\n          return x\n    return strings\n\nI use this in my code all the time, but I never knew it had a name.\n\nIt's not a standard python module, but it is a standard unix utility:\n\nAh, thanks. I'm surprised I didn't know about this.\n\nIt's also worth noting that you can use the `re` module to do the same thing.\n\nI've never heard of this before. I looked at the docs, and it looks like it's a nice module, but it seems to be more geared toward manipulating regular expressions.\n\nIt's very handy for doing stuff like this, though.\n\nI have a question about the __repr__ method in Python.\nIn the example, the function returns a list of strings.\nThe __repr__ method of the function returns a string, but it's a string that contains the list of strings returned by the function.\nSo the __repr__ method is returning the list of strings, but in a format that makes it look like a", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n    return []\n\n>>> import random\n>>> random.shuffle(filter_by_prefix(['a', 'b', 'c', 'd'], 'a') for _ in range(5))\n>>> random.shuffle(filter_by_prefix(['a', 'b', 'c', 'd'], 'b') for _ in range(5))\n>>> random.shuffle(filter_by_prefix(['a', 'b', 'c', 'd'], 'c') for _ in range(5))\n>>> random.shuffle(filter_by_prefix(['a', 'b', 'c', 'd'], 'd') for _ in range(5))\n>>> random.shuffle(filter_by_prefix(['a', 'b', 'c', 'd'], 'e') for _ in range(5))\n>>> random.shuffle(filter_by_prefix(['a', 'b', 'c', 'd'], 'f') for _ in", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if strings[i] == prefix:\n           return strings\n\nThis is great, but it doesn't work on Python 3.\n\nIt's not that great. I'd like to see the code for the \"from typing import List\" line.\n\nI was just kidding.\n\nI didn't get it.\n\nI guess that's because you're a Python 2.x user.\n\nI don't see the point.\n\nI guess the point is that it's a Python 2.x-only feature.\n\nIt's also a feature that doesn't work in Python 3.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string[prefix] == prefix:\n           return string\n    return []\n\nI think I like this better:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return strings.filter(prefix)\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings:\n        return strings\n    prefix = strings[0]\n    for s in strings:\n        if prefix in s:\n            return s\n    return []\n\nThis is a good example of how Python is not a good language for implementing algorithms.\n\nWhy not?\n\nBecause it's a dynamic language.\n\nAnd this is a bad thing?\n\nYes.\n\nWhy?\n\nBecause it means that the language is not able to enforce certain constraints that are necessary for algorithms.\n\nLike?\n\nLike for example, the language is not able to guarantee that a function will be called with the same arguments every time it is invoked.\n\nYou mean like how this works in Python?", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n         return s\n    return []\n\nI see that you can use the `[]` method to create an empty list. I was wondering why the author used the `return []` in the function above.\n\nI think it's because the author is using Python 2.x and not Python 3.x. In Python 3.x, `[]` is the list constructor, so the `return []` is redundant.\n\nAh, that makes sense. I've been using python 2.x for a while, so I didn't know that.\n\nThat's not really a Python feature; it's just a feature of the standard library. You can write:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s: strings.startswith(prefix))\n\nfrom typing import List\n\n    def filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'bcd', 'cde']\n    \"\"\"\n    return strings.filter(s: strings.endswith(suffix))\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', '", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if string[prefix] == prefix:\n            return string\n    return strings\n\nI'm not sure what you're trying to show with that. The first example is a more succinct version of the second.\n\nI've never used Python, but I'm guessing that the first example is shorter because it's not using the built-in list type?\n\nThe second one is not using a built-in list type. It's using a function, which is in fact a built-in Python function.\n\nThe second one is using a built-in Python function, but it's not using the built-in list type.\n\nI'm not sure what the distinction is.\n\nThe built-in list type is a class, so it's possible to create new instances of it. The built-in filter_by_prefix function is not a class.\n\nI'm still not sure what the difference is.\n\nPython has a built-in list type, and it has a built-in function filter_by_prefix. The built-in list type is a class,", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str(prefix), list)\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return strings.filter(str(prefix), list)\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc',", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n          return string\n    return []\n\nI'd rather see a function that allows you to filter out substrings:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nIf you're going to write a library, you might want to make it a little more general, so that you can write\nfilter_by_prefix([], 'a')\nand not\nfilter_by_prefix([], 'a')\n\nI think the original author was only interested in the case where the input list is empty, in which case it's just a simple matter of adding a single line to the code:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if strings[i] == prefix:\n            return strings\n\nI'm not sure what the point of this is. It's not much different than just using a list comprehension, except it's less readable.\n\nI think the point is that it is more readable.\n\nI think the point is that it's not.\n\nYou are both right.\n\nI'm not sure what the point is.\n\nThe point is that it is more readable.\n\nI think the point is that it's not.\n\nYou are both right.\n\nI'm not sure what the point is.\n\nThe point is that it is more readable.\n\nI think the point is that it's not.\n\nYou are both right.\n\nI'm not sure what the point is.\n\nThe point is that it is more readable.\n\nI think the point is that it's not.\n\nYou are both right.\n\nI'm not sure what the point is.\n\nThe point is that it is more readable.\n\nI think the point is that it", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n         return string\n    return []\n\nI'm not sure I get it. What's the advantage over the builtin filter()?\n\nIt's a Python 3.0 feature.\n\nI'm not sure I get it. What's the advantage over the builtin filter()?\n\nIt's a Python 3.0 feature.\n\nI'm not sure I get it. What's the advantage over the builtin filter()?\n\nIt's a Python 3.0 feature.\n\nI'm not sure I get it. What's the advantage over the builtin filter()?\n\nIt's a Python 3.0 feature.\n\nI'm not sure I get it. What's the advantage over the builtin filter()?\n\nIt's a Python 3.0 feature.\n\nI'm not sure I get it. What's the advantage over the builtin filter()?\n\nIt's a Python 3.0 feature.\n\nI'm not sure I get it. What's the advantage over the builtin filter()?", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nI'm not sure that's a good example of a \"bad\" import. The code is pretty clear, and the import is the only way to get access to the List class.\n\nThis is a great example of a bad import. It's not the only way to get access to the List class. You can just write\nfrom typing import List\nand then use List.filter_by_prefix()\n\nWell, I wouldn't call it a \"bad\" import. It's just a \"bad\" example.\n\nPython imports are bad because they are not first-class objects.\nYou can't:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n       if string.startswith(prefix):\n          yield string\n\nThis is really a bad example. It's trivial to write a short function that will do the same thing (and more) in Python:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.startswith(prefix):\n        return strings\n    else:\n        return []\n\nI'm not sure what the point of this is.\n\nI think it's supposed to be a joke.\n\nMaybe it is, but the reason I posted it was because it's a really elegant way of implementing a filter in python.\n\nIt's also an extremely inefficient way of implementing a filter.\n\nYes, it's a joke.\n\nI think it's a bad joke.\n\nI like it. I think it's a good joke.\n\nI think it's a good joke, but it's not the best way to do it.\n\nIt's also a very common way to do it in Python, for obvious reasons.\n\nNo it's not.\n\nI like it.\n\nI don't get it.\n\nI like it.\n\nI don't get it.\n\nI like it.\n\nI don't get it.\n\nI like it.\n\nI don't get it.\n\nI like it.\n\nI don't get it.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if len(prefix) == 0:\n        return strings\n    for s in strings:\n        if s.startswith(prefix):\n           return s\n\nThis is a good example of why I don't like Python's use of `if` to conditionally return a value. The only reason the code is doing anything is because `len(prefix) == 0` is false. There is no reason to ever do this if `len(prefix) == 0`, so the conditional is useless.\n\nBut it's not useless. It allows you to write it as a function without using the return keyword.\n\nI don't think it does. It's just a bad way to write a function.\n\nIt does, and it's not.\n\nThe only case where it's not useless is when you have a function that takes a single argument and returns a single value.\nIn this case, however, you have a function that takes a list of arguments and returns a list of values. So it's not a function.\n\nI think you're right that it's not a function", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(lambdax: x.startswith(prefix))\n\nThe usual way to do this is to use a dictionary (or a list of dictionaries) for the keys and a list of functions for the values.\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\n\n>>> import collections\n>>> a = ['a', 'b', 'c', 'd']\n>>> b = ['b', 'c', 'd']\n>>> c = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n>>> d = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n>>> e = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n>>> f = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q',", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix, lambda s: s[0] == prefix)\n\nI think it would be more readable as:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings[prefix]\n\nYou're using a non-standard extension to the module system.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for i in strings:\n        if prefix in i:\n           return i", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n          return s\n    return []\n\nThis is a good example of a good Pythonic API. It is short, simple and to the point.\nThe problem with it is that it's a lot of work to write this kind of code by hand.\nThis is where Python's built-in string methods become useful.\nThe first thing we do is import the built-in string methods.\n\nfrom typing import List\nfrom string import join", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix.startswith(strings[0]))\n\nI prefer:\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nThis is a good example of why I dislike the \"from typing import *\" convention. It's not that I think it's bad, but rather that it's a convention that's not as useful as it could be.\nIn this case, the variable `strings` is not being used as a list, but as a function. Therefore, it's not necessary to import the `List` module.\nAnother example is the `str` function. It's not necessary to import the `string` module because `str` is a function, not a type.\n\nIn this case, though, I think it's a good convention to import the `List` module for readability. The function `filter_by_prefix` is just a wrapper for `filter`, and it's good to be explicit about that.\n\nThe function filter_by_prefix is not a wrapper for filter. It's a wrapper for the function filter_by_prefix, which is a wrapper for filter.\n\nOops, you're right. I meant to write", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s.startswith(prefix))\n\nThis is a much better solution.\n\nWhy is this better?\n\nThe reason is that the original code is more difficult to understand, and is more likely to be buggy.\nFor example, what happens if the input string is 'abcdefgh'?\n\nIt's not really.\n\nHow do you get the list of strings?\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s, prefix)\n\nI find it interesting that the Python community has a lot of the same complaints about Python that the Ruby community has about Ruby.\n\nThe complaint that Ruby is a little too friendly and forgiving?\n\nNot so much that, as much as the complaint that the language was designed to make it easy to write bad code.\n\nI don't think that's a complaint about Ruby, it's a complaint about the community.\n\nI've been using Python for years now and I still have to look up the order of arguments for the filter() method every time.\n\nI agree with the author. I don't like the way Python does things.\n\nThe argument order is consistent with the order of the arguments in the lambda:\n\nThe argument order of filter() is not consistent with the order of the arguments in the lambda.\n\nThe order of the arguments in filter() is consistent with the order of the arguments in the lambda, but the order of the arguments in the lambda is not consistent with the order of the arguments in the filter() method.\n\nI don't think it's a big deal, but it's worth pointing out that the order of the arguments", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s:\n           return s\n\nYou can also use the itertools.groupby() function, which is a bit more flexible and allows you to specify the separator and the number of elements to keep:\nimport itertools", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          s = s[0:len(s)-1]\n    return s", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for string in strings:\n        if prefix in string:\n           return string\n    return []\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    for string in strings:\n        if prefix in string:\n           return string\n    return []\n\nI don't know much about python, but I'm pretty sure that `filter_by_prefix` is a more pythonic way to write the code.\n\nI don't know much about python, but I'm pretty sure that `filter_by_prefix`", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix in s:\n           s = s.replace(prefix, '')\n    return s\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    for s in strings:\n        if prefix in s:\n            s = s.replace(prefix, '')\n    return s\n\nfrom typing import List\n\n    def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n    return []\n\nThis is a pretty common pattern, but the syntax is a little bit confusing. The syntax is a little bit like a lambda function, but not quite.\n\nThe function takes a list of strings and a string to filter on. The function then filters the list for all strings that start with the given prefix.\n\nThe function returns a list of strings. The return value is not a function. The function is not anonymous.\n\nThe function is not a lambda. Lambda functions are anonymous, but this function is not.\n\nIt is a bit of a hybrid. It is a function with one argument. The function is not anonymous, so it is not a lambda. The function is not a lambda, but it is a function with one argument.\n\nThe function is not a lambda, but it is a function with one argument.\n\nThe function is not a lambda, but it is a function with one argument.\n\nThe function is not a lambda, but it is a function with one argument.\n\nThe function is not", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nand a similar one for suffixes:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nI'm not a python programmer, but I'm not sure why this is downvoted. Isn't this a fairly common idiom?\n\nIt's a fairly common idiom, but it's not idiomatic. The code is not written in the style of the language, it's written in the style of C.\nPython is very different from C, and the way you write code in it is very different as well.\n\nThis is exactly the kind of thing I'm talking about.\nPython is a dynamic language with a very powerful metaprogramming system. It is not a \"C-like\" language.\n\nAnd this is exactly the kind of thing I'm talking about.\nIn a dynamic language, it's generally considered idiomatic to write code that's easy to read and understand. This code is neither.\n\nThis is a little harsh. I agree that it's not the most readable code, but it's not _that_ bad.\n\nIt's not _that_ bad, but it's still not idiomatic.\n\nI", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix)\n\nI'm not sure why you'd use this over a dictionary.\n\nDictionaries are not lists.\n\nWhat I meant was why would you use this instead of a dict?\n\nBecause dictionaries are not lists.\n\nSure, but you don't need a list to implement a dictionary.\n\nThe article is about writing a filter function.\n\nWhat I mean is that you don't need to use a list to implement a dictionary.\n\nYou don't need to use a dictionary to implement a filter function either.\n\nI'm not sure what you're trying to say.\n\nI'm not sure what you're trying to say.\n\nI'm not sure what you're trying to say.\n\nI'm not sure what you're trying to say.</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n          return s\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n    return []\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for x in strings:\n       if prefix in x:\n          return x\n\nI think you're missing the point of the exercise.\n\nThe point is to have a program that implements a well-known algorithm.\nThe point is not to have a program that implements a well-known algorithm that is not O(n) in the worst case.\n\nThe point of the exercise is to learn how to use the library.\n\nI am not sure why this is getting downvoted.\nThe point of this exercise is to teach the students how to use the standard library.\n\nI think people are downvoting because the point of the exercise is to get students to understand the power of the standard library. If you're going to teach them that, you should at least have them implement the algorithm correctly.\n\nI think you're missing the point of the exercise.\n\nThe point of the exercise is to learn how to use the library.\n\nThe point of the exercise is to teach the students how to use the standard library.\n\nI think you're missing the point of the exercise.\n\nThe point of the exercise is", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if s.startswith(prefix):\n          return s\n\nThis is the equivalent of:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix == s:\n          return s\n    return List()</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(prefix).filter(s.startswith(prefix))\n\nI would have expected it to be:", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n        if prefix == s.startswith(prefix):\n           return s\n    return []\n\nI'm not sure why this is called filter_by_prefix when it's really a filter_by_startswith.\n\nI'm not sure why the article is called \"from typing import List\". It's a really silly example.\n\nIt's an article about Python, not about programming. I'd say the title is appropriate.\n\nThe title is misleading and the article is a very poor introduction to Python. I'm not sure why it's on the front page.\n\nBecause it's on the front page.\n\nThis is a very confusing article. What is the author trying to say?\n\nI agree. What's the point of the article?\n\nThis article is a joke, right?\n\nThe title is a joke. The article is a tutorial.\n\nI've been programming for 10 years and I have never, ever seen anyone use \"from typing import List\" before.\n\nIt's a common joke.\n\nPython is a joke.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nI am not sure I understand what this is supposed to be doing.\n\nI think it's supposed to be like this:\n>>> filter_by_prefix('a', ['abc', 'bcd', 'cde', 'array']).\n['abc', 'array']\n\nI see. I guess I was expecting something more like a regexp.\n\nI don't know if this is common, but I always write my own list-comprehension functions. The built-in list functions are not very good.\n\nI agree. I wrote my own list comprehension implementation in Python a while back:\n\nI use a variation of this in my code, but I use a dict instead of a list, so I can use it as a dictionary too.", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s for s in strings if s.startswith(prefix) and len(s) > 0)", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\nI'm not sure if this is a problem with the syntax of the example, or the function, but I can't seem to get it to work.\n\nI think it's the syntax. The function should be", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => prefix.startswith(s[0]))</s>", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s => s.startswith(prefix))\n\nfrom typing import List", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    for s in strings:\n       if prefix in s:\n          return s\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic way of doing it. But it's not the Pythonic way of doing it.\n\nThis is the Pythonic", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(s: strings, prefix: prefix)\n\nThis is a really neat idea. I like the way it's a concise way to do something that's normally a little more verbose.\nI've seen this style of coding before, but never really understood it. Is it more idiomatic to use this style of coding?\n\nIt's a Pythonic idiom, and I'd say it's fairly common. I find it much easier to read than the equivalent \"from functools import reduce\" style, but that's just my opinion.\n\nI've seen the \"from functools import reduce\" style before, but I think it's a bit too verbose for my taste. I'll have to give this style a try.\n\nIt's a lot more common in other languages, but I've found it a great way to abstract over the concept of a function that takes a function as an argument.\n\nI'm not sure I understand how this is any more concise than just using the built in list comprehension syntax. I'm sure I'm missing something.\n\nThe built-in list comprehension syntax doesn't support the 'in' and 'not in' operators.\n\nI", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    if strings.has_key(prefix):\n        return strings.filter(prefix=prefix)\n    else:\n        return strings\n\nI'm a little confused. What is the point of this function? Is it to find the unique strings that start with a given prefix?\n\nI believe it's to find the prefixes of the strings in the list.\n\nThat's what I thought at first, but then I read the code.\n\nI've noticed that a lot of Python code is written with the assumption that the reader is familiar with the code, and often doesn't explain itself very well.\n\nIt's not just Python code.\n\nThe worst offender in the Java world is probably Apache Commons.\n\nI'd say the worst offender in the Java world is the entire Java standard library.\n\nI'd say that's the best example of \"self documenting code\".\n\nI've seen a lot of self-documenting code, but never any self-documenting standard library.\n\nI'm sorry, but I really don't see the point of this.\n\nIt's a joke, I believe. The function", "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\" \"\"\"\n    return strings.filter(str.startswith(prefix))\n\nI don't get it.\n\nIt's a filter that returns a new list with all the strings that start with the given prefix.\n\nWhy would you want that?\n\nBecause the problem of finding all the strings that start with a given prefix is a common one.\n\nI think the confusion is that the title says \"from typing import List\", but the code doesn't actually import List.\n\nYes, I was wondering what was meant by \"from typing import List\"\n\nFrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List\nfrom typing import List"]]