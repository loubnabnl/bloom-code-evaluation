[["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n        if i[0] > 0:\n           return i\n\n>>> count_nums(['a', 'b', 'c', 'd']) == 2\n>>> count_nums(['a', 'b', 'c', 'd', 'e']) == 4", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr) > 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    nums = 0\n    for n in arr:\n        nums += n\n    return nums", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[:]) > 0\n\nThis is a great exercise to do for yourself.\n\nIf you're looking for something a little more challenging, here's a more complicated one.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[0:i]) > 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x > 0)\nThis is a bit more concise than your solution.\n\nWell, if you want to get pedantic, then yeah, yours is more concise. But it's also more verbose.\n\nI would say it's a tradeoff.\n\nI agree with the OP's sentiment.\n\nSo you think that the amount of code that is in a program should be the same as the amount of code that is in a solution to a problem?\n\nI think that code that is longer than necessary is worse than code that is shorter than necessary.\n\nI think that code that is shorter than necessary is worse than code that is longer than necessary.\n\nThis is a great example of how you can use a programming language to make something more concise, but it's a bad example of how to use a programming language to make something more readable.\n\nWell, I think that the code in the article is pretty readable, especially if you're used to Python.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # Python: only numbers >= 0\n    if not all(isinstance(arr, type(int)):):\n        raise ValueError(\"Only integers are allowed.\")\n    # Python: only numbers >= 0\n    for i, num in enumerate(arr):\n        if num > 0 and num[0] > 0:\n           raise ValueError(\"Only positive numbers are allowed.\")\n           return num\n    return 0\n\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\nSee also\n\nPython list comprehensions\nPython generator expressions\n\nReferences</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[:-1])\n    def count_nums_with_zeros(arr):\n    \"\"\"\n    Write a function count_nums_with_zeros which takes an array of integers and\n    returns the number of elements which has a sum of digits > 0 and has\n    no zeros in it.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_with_zeros([]) == 0\n    >>> count_nums_with_zeros([-1, 11, -11]) == 1\n    >>> count_nums_with_zeros([1, 1, 2]) == 3\n    \"\"\"\n    return sum(arr[:-1])\n    def count_nums_with_zeros_with_sign(arr):\n    \"\"\"\n    Write a function count_nums_with_zeros_with_sign which", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(map(int, arr))", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr) == 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    if arr[0] == -1:\n       return 1\n    if arr[0]!= 0:\n       return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    return 0\n\nI am not sure what you're trying to do, but I think this is the wrong way to do it.\nI think you want", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] < 0:\n        return 0\n    return sum(arr[0:]) > 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[0:1]) > 0\n\nI think I'd get a lot of use out of this:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] > 0:\n        return count_nums(arr[1:] + arr[0])\n\nThis is really easy.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # loop over the array\n    for i in arr:\n        if sum(i) > 0:\n            return sum(i)\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n        if sum(i) > 0:\n           return i\n\nI'm not sure what the point of this is.\n\nThe point is to demonstrate that it's not always obvious that a language is doing what you think it is doing.\n\nThe example is not very good because it can be easily confused with a different language, Python. The Python example would be:\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\nIt's not obvious that Python would do this.\n\nIt's not obvious that Python would do what?\n\nI'm guessing he means it's not obvious that Python would return the number of elements with a sum of digits > 0, rather than the number of elements with a sum of digits > 1.\n\nPython has a built-in sum() function.\n>>> sum([-1, 11, -11])\n1\n>>> sum([1, 1, 2])\n3\n\nYes, but that's not", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def __iter__(self):\n    \"\"\"\n    Return an iterator over the elements of the array.\n    >>> count_nums([1, 2, 3])\n    >>> for i in count_nums(range(10)):\n       print(i)\n       print(\"\n        \" + i)\n       print(\"\n        \" + i)\n       print(\"\n        \" + i)\n       print(\"\n        \" + i)\n       print(\"\n        \" + i)\n       print(\"\n        \" + i)\n       print(\"\n        \" + i)\n       print(\"\n        \" + i)\n       print(\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    a, b = 0, len(arr)\n    for i in range(len(arr)):\n        a, b = sum(arr[i], 0)\n        if a + b > 0:\n            a, b = a + b\n            if a > b:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr.count(0) > 0:\n        return arr.count(1)\n    elif arr[0] > 0 and arr[1] > 0:\n        return arr[0]\n    elif arr[0] > 0 and arr[1] > 0:\n        return arr[1]\n    elif arr[0] > 0 and arr[1] < 0:\n        return arr[0]\n    elif arr[0] > 0 and arr[1] == 0:\n        return arr.count(1)\n    elif arr[0] > 0:\n        return 0\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(nums > 0)\n\n[-1, 11, -11] == 1\n\nWell, that's one way to solve it.\n\nI prefer to use the modulus operator:\n>>> count_nums(range(1, 10))\n1\n>>> count_nums(range(1, 10) % 10)\n0\n\nThat doesn't work for negative numbers, though.\n\nNo it doesn't, but it's still a valid solution.\n\nThis is a good example of why you should not use Python's built-in functions for complex tasks.\n\nThis is a good example of why you should not write functions that do complex tasks using a single function.\n\nThis is a good example of why you should not write functions that do complex tasks using a single function.\n\nThis is a good example of why you should not write functions that do complex tasks using a single function.\n\nThis is a good example of why you should not write functions that do complex tasks using a single function.\n\nThis is a good example of why you should not write functions that do complex tasks using a single function.\n\nThis is a good example of why you", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return len(arr) + 1\nI don't get it. The function is supposed to return the number of elements with a sum of digits > 0, but the number of elements with a sum of digits > 0 is not the same as the number of elements in the array. The function should return the number of elements in the array, and then it should be multiplied by the number of elements in the array.\n\nThe function is supposed to return the number of elements with a sum of digits > 0, but the number of elements with a sum of digits > 0 is not the same as the number of elements in the array.\nThat's the point. It's not the same as the number of elements in the array, because the function is returning the number of elements with a sum of digits > 0.\n\nIt should have been something like:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x > 0)\n\nI'm not sure what your point is.\n\nHe's saying that the example in the article is a bad example.\n\nI'm not sure what the point of that is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.\n\nI'm not sure what the point of this is.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[0:0]) > 0\n\nThe Python 2.x version is a bit more verbose:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) > 0:\n        if sum(arr[i]) > 0:\n           return sum(arr[i])\n        else:\n           return 0\n\n>>> count_nums([1, 2, 3])\n3\n>>> count_nums([1, -1, 2])\n1\n>>> count_nums([1, -1, -1])\n0\n>>> count_nums([1, -1, -2])\n0\n>>> count_nums([1, -1, -3])\n1\n>>> count_nums([1, -1, -3])\n1\n\n>>> count_nums([1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n\nThis code is written for python 2.7, but it should work on all python versions.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[0:1])\n\nI don't think that's right.\n\nI think it is right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.\n\nI think it's wrong.\n\nI think it's right.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[i] for i in range(0, len(arr)-1))", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    a = 0\n    while len(arr) > 0:\n       if a == 0:\n          return len(arr)\n       else:\n          a = sum(arr[i:i+len(arr)-1])\n          if a > 0:\n              return a\n    return 0\n\nfor i in range(len(arr)):\n    a = count_nums(arr[i])\n    print \"%d out of %d elements have sum of digits > 0\" % (len(arr), a)</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if sum(i) > 0:\n           return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr) > 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if sum(i) > 0:\n           return i\n\nI've been working with Python for a while now, and I know what the\nabove code does, but I have no idea what the purpose of it is. It\nlooks like it's supposed to count the number of numbers that have a\nsum of digits that are greater than 0, but I don't understand the\npoint.\n\nI've been working with Python for a while now, and I know what the\nabove code does, but I have no idea what the purpose of it is. It\nlooks like it's supposed to count the number of numbers that have a\nsum of digits that are greater than 0, but I don't understand the\npoint.\n\nIt's a simple exercise in programming. It's not supposed to be useful\nin any way.\n\nI've been working with Python for a while now, and I know what the\nabove code does, but I have no idea what the purpose of it is. It\nlooks like it's supposed to count the number of numbers", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for x in arr:\n        if x[0] < 0:\n           # Make sure that the first digit is non-zero\n            x[0] = x[0] + 1\n            x[0] = x[0] - 1\n            if x[0] == 0:\n                return 0\n                return len(x) - 1\n    return len(arr) - 1\n\nI don't see how this is a better solution than the original?\n\nThe original solution isn't bad, but it doesn't handle negative numbers.\n\nI'm pretty sure it does.\n\nYes, it does. The first digit is negative, so the sum is 0.\n\nI think the original solution handles negative numbers.\n\nIt doesn't. The first digit is negative, so the sum is 0.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(i) for i in arr if i >= 0)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x % 10 == 0)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(set(arr, 0))\n\nI don't think this is the correct answer.\n\nThe question is not clear, but this is a plausible answer.\n\nIt's not a plausible answer. The OP wants the number of _positive_ numbers.\n\nThe question is not clear.\n\nIt's pretty clear that he wants the number of positive numbers.\n\nNot really, if you read the whole question.\n\nThe OP doesn't even know what he wants. He just wants to know how to count the number of positive numbers.\n\nYeah, but the question is still not clear.\n\nYou can't make a decision on that, because the question is not clear.\n\nThe question is clear.\n\nNo, it is not.\n\nThe question is clear.\n\nNo, it is not.\n\nThe question is clear.\n\nNo, it is not.\n\nThe question is clear.\n\nNo, it is not.\n\nThe question is clear.\n\nNo, it is not.\n\nThe question is clear.\n\nNo, it is not.\n\nThe question is clear.\n\nNo, it is not.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if i[0] > 0:\n           sum = sum + i[0]\n           if sum > 0:\n               return sum\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if i >= 0:\n            # Positive numbers\n               # If the number is negative, then the first signed digit is negative\n                # and the number of digits > 0 is the number of negative digits\n                 # (signed digit)\n                 # (negative digit)\n                  # (positive digit)\n                  # (signed digit)\n                   # (positive digit)\n                   # (negative digit)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(set(arr[:i] for i in range(len(arr))))\n\nI can't see any problem with the code in this problem. I don't understand why they are asking for a solution.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr.count('0'):\n       return 0\n    else:\n       return sum(arr[:]) > 0\n       print count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    # prints 3\n\nYou can also do this with a list comprehension:\n>>> count_nums(list(range(10))) == 5\n>>> count_nums(list(range(10), range(10))) == 6\n\nThat's a good solution but it doesn't work with negative numbers.\n\nIt does, just need to change the summation to a min() instead of a sum().\n\nIt's a nice idea, but it's not quite right.\nConsider the following example:\n>>> count_nums(range(10)) == 0\n>>> count_nums(range(10), range(10)) == 1\nYou'd expect the second call to count_nums() to return 0, since the result of the first call was 0. But it returns 1.\n\nIn", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return len(arr) > 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if isinstance(arr, tuple):\n        return len(arr)\n    else:\n        return len(arr) - 1\n\nI've never understood why people prefer the '-1' version. The '-1' version will fail for negative numbers.\n\nBecause the return value is not a boolean, but a number.\n\nSo you're saying that the '-1' version is better because the number is larger?\n\nNo, I'm saying the -1 version is better because it's more correct.\n\nMore correct than what? The version with -1? It's not correct.\n\nMore correct than the version with len(arr) - 1.\n\nThe only reason to use the -1 version is because it's easier to read. If you have to write the code to fix it later, it's not worth it.\n\nYou shouldn't need to write any code to fix it later.\n\nI've never understood why people prefer the '-1' version. The '-1' version will fail for negative numbers.\n\nBecause the return value is not a boolean, but a number", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if not len(arr) > 0:\n       return 0\n    for x in arr:\n       if x[0]!= 0:\n          return 1\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        sum = 0\n        if sum % 10 == 0:\n            sum += arr[i]\n            sum %= 10\n            if sum % 10 == 0:\n               sum += arr[i]\n              sum %= 10\n             return sum\n\nThe code is correct but the code is not idiomatic Python.\nThe idiomatic Python solution is to use a dictionary.\n>>> def count_nums(arr):\n...", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    result = 0\n    for i in arr:\n       if sum(i) > 0:\n          result += i\n    return result", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr)):\n        sum = 0\n        for j in range(0, len(arr)):\n           sum += arr[j]\n           if sum > 0:\n              return sum", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if sum(i) > 0:\n           return sum(i)\n    return 0\n    # count_nums", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n        sum = 0\n        for j in i:\n           if j > 0:\n               sum += j\n               if sum > 0:\n                  return sum\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    a, b = arr\n    for i in range(len(a)):\n       if a[i] > 0:\n          count_nums(a[i], b)\n    return len(a)\n\nThis is a great example of a simple algorithm that can be used to solve a lot of problems.\n\nThe Python equivalent is:\n>>> sum(a.index(x) for x in range(len(a) - 1))\n\nThe C++ equivalent is:\ntemplate <typename T>\nint count_nums(const T& a, const T& b)\n{\nreturn (a.size() + b.size()) > 0;\n}\n\nThe Java equivalent is:\nint countNums(int[] a, int[] b)\n{\nreturn (a.size() + b.size()) > 0;\n}\n\nThis is a great example of a simple algorithm that can be used to solve a lot of problems.\n\nThe Python equivalent is:\n>>> sum(a.index(x) for x in range(len", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    nums = [0]\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n           nums.append(arr[i])\n    return nums", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # Count the number of elements which has a sum of digits > 0\n    for i in range(len(arr)):\n        if sum(i) > 0:\n            return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x[0] >= 0)\n\nThis is a good example of what you want to avoid. It's easy to write but it's not very readable.\nI would use a regular expression. You can find a lot of regular expression tutorials online.\n\nIs this a homework question?\n\nIt's not, I just want to know how to do it.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr.has_key('sum'):\n        return sum(arr[0:len(arr)])\n    else:\n        return len(arr)\nI'm not sure what the point of this is. It's not even a correct solution.\n\nI think the point is that it is a trivial exercise to write a function that does the desired task, but it is not obvious how to write a function that will correctly handle the edge case of an empty array.\n\nI'm not sure I understand the question. It's trivial to write a function that will correctly handle the edge case of an empty array.\n\nIt's trivial to write a function that handles the edge case, but it's not trivial to write a function that handles the edge case and _returns the correct result_.\n\nI still don't understand what the point is.\n\nThe point is that the question is a trick question.\n\nIs the point that it's easy to write a function that does the wrong thing?\n\nThe point is that it's easy to write a function that does the wrong thing, and hard to write a function that does", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n        if i[0] >= 0:\n           if i[1] >= 0 and i[2] >= 0:\n                return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr) > 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    count_nums = lambda arr:\n         if sum(x for x in arr if x >= 0) > 0:\n             return sum(x for x in arr if x >= 0)\n         else:\n             return 0\n    return count_nums", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(str(x) - str(y)) for x, y in arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x >= 0)\nI really liked this, but I'm not sure how to make it more concise.\n\nThe code is pretty verbose, but I think it's the way it should be.\nI wouldn't want to change it.\n\nI didn't like the python version, but the ruby one is nice.\n\nThe ruby version is much better, I agree.\n\nThe python version is pretty bad.\n\nI think the python version is ok.\n\nThe python version is very bad.\n\nI like the Python version.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # We assume that the first element is 0.\n    # If we need to, we can use the fact that the first element is 0 to\n    # speed up the algorithm.\n    if arr[0] == 0:\n    return len(arr)\n    # Test if the number is positive.\n    if arr[1] < 0:\n    return 0\n    # Test if the number is negative.\n    if arr[-1] == 0:\n    return 1\n    # Test if the number is negative.\n    if arr[-2] == 0:\n    return 2\n    # Test if the number is negative.\n    if arr[-3] == 0:\n    return 3\n    # Test if the number is negative.\n    if arr[-4] == 0:\n    return 4\n    # Test if the number is negative.\n    if arr[-5] == 0:\n    return 5", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(i) for i in arr if int(i) >= 0)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # We use the same technique as count_digits, but instead of\n    # using a list of digits, we use a list of integers.\n    # We start with the number of digits in the array\n    # and then subtract the number of negative digits.\n    # Negative digits are counted as 1/2 a digit.\n    # The result is the number of positive digits.\n    # Note that negative numbers have a", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # Given an array of integers, print the number of elements that have\n    # a sum of digits > 0.\n    for i in arr:\n       if i % 2 == 0:\n          print(\"%d has a sum of digits > 0: \" % i)\n          print(i)\n    return len(arr)\n\nThe following is a Python implementation of the count_nums function.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n       sum = sum(arr[i])\n       if sum > 0:\n          return sum\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] < 0:\n       return 0\n    return len(arr) - len(arr[0])", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[::-1]) > 0\n\nFor some reason, I'm having a hard time understanding this. I guess I'm not used to Python. I'm used to thinking of numbers as 1, 2, 3, and so on. When I see [1, -1, -1, -1], I think that the answer is -2, not 1. Is this a problem with my thinking, or is there something I'm missing?\n\nYour intuition is correct.\nThe reason this works is because the sum function is defined as:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n           count += 1\n    return count\n    return count_nums", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    result = []\n    for i in range(0, len(arr)):\n        result.append(arr[i])\n    if sum(arr[i]) > 0:\n        result.append(1)\n    return result", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    n = 0\n    for i in range(len(arr)):\n       n += arr[i]\n    return n", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(int(num) for num in arr if num > 0)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == 0:\n        return 0\n    else:\n        for x in range(0, len(arr) - 1):\n           if arr[x] > 0:\n               return x\n    return 0\n\n>>> count_nums([1, 1, 2])\n3\n>>> count_nums([1, -1, -11])\n1\n>>> count_nums([1, 1, 2, 1])\n3\n\ncount_nums is a function which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\n\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\n>>> count_nums([])\n0\n>>> count_nums([-1, 11, -11])\n1\n>>> count_nums([1, 1, 2])\n3\n\ncount_n", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n       if sum(i) > 0:\n          return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    nums = [0]\n    for i in range(len(arr)):\n        if arr[i] > 0:\n           nums.append(arr[i])\n           return nums\n    return 0\n\nOutput:\n\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, 3]) == 4", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0]!= 0:\n       return 0\n    for n in arr[1:]:\n       if n == 0:\n          return 0\n          return sum(n) > 0\n    return count_nums(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(sum(digits[i] > 0 for i in arr))\n\nI am really new to python and I was wondering why the author did not use \"sum(digits[i] > 0 for i in arr)\" as the return value.\n\nBecause that would be a different function, which is not what the author asked for. The author asked for a function to return the number of elements which has a sum of digits > 0, and that is what the function does.\n\nThis is a good example of a function that's more readable and maintainable when written as a generator.\n\nWhat is the advantage of that? I've seen generators used in a couple of places where it seemed like they were being used as a replacement for a list. Is that the case?\n\nNo, that's not the case.\nThe advantage of generators is that they are easy to read and understand. The advantage of a list is that it can be used as a generator, and it can be used as a list.\nThe advantage of a generator is that it can be used as a list, but it can be used as a generator.\nThe advantage of a generator is that it can be used as", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(digits > 0 for x in arr)\n    if x[0] == 0:\n       return sum(digits > 0 for x in arr)\n    else:\n       return x[0]\n\nNice.\n\nI think it's too trivial to be interesting.\n\nI thought the point was that the test suite is more interesting than the code.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(set(arr)) > 0\n\nThis is just a toy example, but I've seen it in real code.\n\nIt's not a bad idea, but it's not a good idea either.\nThe problem with the code above is that the test for sum(set(arr)) > 0 will always evaluate to True.\nFor example, if you have an array of numbers that add up to -1, then the sum(set(arr)) > 0 test will always evaluate to True.\nSo the count_nums() function will always return the number of elements in the array, which is not what you want.\n\nThe solution to this problem is to add a second test.\nThe second test should check to make sure that the sum of the first element and the last element is greater than zero.\nFor example, if the first element in the array is -1, and the last element is -2, then the sum of the first element and the last element is -3, which is not greater than zero.\nSo the second test should evaluate to False, and the count_nums() function will return the number of elements in the array, which is what you want.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # (1) Sum of digits > 0\n    for i in arr:\n        if sum(i) > 0:\n           return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr)-1):\n        if arr[i] % 2 == 0:\n            return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] < 0:\n       return 0\n    else:\n       return arr[0] + arr[1:] + arr[2:] + arr[3:]\n\nTo be more precise:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # The input array.\n    arr = np.array([[-2, 0, 1],\n         [0, -1, 0],\n         [0, 1, 1],\n         [1, 0, 1],\n         [0, 1, 1],\n         [2, 0, 1]])\n    # The index of the array element to test.\n    i = 0\n    # The sum of digits > 0.\n    s = 0\n    # The index of the array element to test.\n    j = 0\n    # If the number is negative, then the first signed digit is negative.\n    if arr[i] > 0:\n         if arr[i] > 0:\n              i = arr[i] - 1\n              s +=", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == 0:\n        return 0\n    else:\n        return count_nums(arr[1:] + 1)\n    print count_nums([1, 2, 3, 4])\n\nOutput:\n1\n2\n3\n4\n\nExplanation:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n       if sum(arr[i], 0) > 0:\n          return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] < 0:\n        return 0\n    return arr[1:] + arr[2:] + arr[3:] + arr[4:] + arr[5:] + arr[6:]", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] > 0:\n         return len(arr)\n    else:\n         return 0\n    def count_digits(n):\n    \"\"\"\n    Write a function count_digits which takes a number and returns the\n    number of digits it has.\n    >>> count_digits(5) == 5\n    >>> count_digits(2.0) == 2\n    >>> count_digits(0.1) == 1\n    >>> count_digits(0.01) == 1\n    >>> count_digits(-2.0) == 1\n    >>> count_digits(-1.0) == 1\n    >>> count_digits(-0.1) == 1\n    >>> count_digits(-0.01) == 1\n    >>> count_digits(0.0) == 1\n    >>> count_digits(0.10000000000000004) == 4\n    >>> count_", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for num in arr:\n       if num > 0:\n          print('Sum of digits > 0: {}'.format(num))\n          return num", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(0, len(arr)-1):\n            if sum + j > 0:\n                sum += j\n               if sum + j < len(arr):\n                  break\n                 j = 0\n          return sum\n\nThis is a great example of a contrived problem.\nFor those who don't know what a contrived problem is:\nA contrived problem is one that is created with the sole purpose of demonstrating a language feature.\nThe problem is contrived because it's very artificial and is unlikely to occur in real life.\n\nI'm not sure I agree. I see contrived problems as problems that are deliberately created to be solved using a particular technique, but which", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr)):\n        if sum(arr[i], 0) > 0:\n           return i\n    return 0\n\n>>> count_nums([-1, 11, -11])\n3\n>>> count_nums([1, 1, 2])\n3\n>>> count_nums([-1, 1, 1])\n0\n>>> count_nums([-1, -1, -1])\n-1\n>>> count_nums([1, -1, 1])\n-1\n>>> count_nums([-1, -1, -1, 1, -1, 1])\n0\n>>> count_nums([-1, -1, -1, 1, 1, 1, 1])\n3\n>>> count_nums([-1, -1, -1, 1, 1, 1, 1, -1])\n3\n>>> count_nums([-1, -1, -1, 1, 1, 1, 1, -1, -1])\n3\n>>> count_", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(numerator) > 0 for num in arr", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == 0:\n       return 0\n    else:\n       return len(arr) - 1", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == 0:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return i\n            return 1\n    return len(arr)\n\nI feel like I'm missing something, but this is the only way I've found so far.\n\nI'm not sure what you're asking. You're trying to count how many numbers have a sum of digits > 0, and then you're saying that you only want to count numbers that are positive.\n\nI'm not sure if there is a way to return the number of numbers in the array that have a sum of digits > 0, without including negative numbers.\n\nThere is, because you're not actually counting the number of elements that have a sum of digits > 0. You're counting the number of elements that have a sum of digits > 0, and the number of elements that are positive.\n\nI'm sorry, I don't follow. I'm trying to count how many numbers", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr)):\n       sum = 0\n       for j in range(0, len(arr)):\n          if sum > 0:\n             sum += arr[j]\n    return sum", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[::-1])\n\nI don't get it.\n\nI think it's trying to say that you should write a function that takes an array of integers and returns the number of elements in the array which has a sum of digits > 0.\n\nWhy would you write a function to do that?\n\nI think it's a programming exercise.\n\nThis is a great exercise. It helps you learn the language and how to think about problems in terms of the language. It's also a great way to practice your programming skills.\n\nThis is a great exercise. It helps you learn the language and how to think about problems in terms of the language. It's also a great way to practice your programming skills.\n\nI don't get it.\n\nI think it's trying to say that you should write a function that takes an array of integers and returns the number of elements in the array which has a sum of digits > 0.\n\nWhy would you write a function to do that?\n\nI think it's a programming exercise.\n\nThis is a great exercise. It helps you learn the language and how to think about problems in terms of the language. It's also", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[::-1] for i in range(0, len(arr) - 1))\nYou're using range, which is a built-in function. You need to use a function definition.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == -1:\n        return -1\n    if arr[0] == 1:\n        return 1\n    if arr[0] == 2:\n        return 2\n    if arr[0] == 3:\n        return 3\n    if arr[0] == 4:\n        return 4\n    return sum(arr[1:])\n\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 1, 2, 3]) == 4\n>>> count_nums([1, 2, 3]) == 5\n>>> count_nums([1, 2, 3, 4]) == 5\n>>> count_nums([-1, 2, 3]) == 4\n>>> count_nums([1, -1, 2]) == 2\n>>> count_nums([1, 1, -1]) == 1\n>>>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr) == 0\n\nI'm not sure what the point of this is. It's a well known problem that the problem of counting positive numbers is NP-complete. So, even if you can find a way to solve this problem, it's not very interesting.\n\nI agree. It's a very simple problem. There are a lot of simple problems that are NP-complete. That doesn't make them interesting.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(num for num in arr if num >= 0)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(a[i])) > 0\n\nNice! It's a shame that python doesn't have a builtin function for this, but that's a good solution.\n\nI'm not sure if you're joking or not.\n\nI'm not, but I'm also not a python programmer.\n\nThe joke is that Python has a built-in function for this: sum().\n\nWell, I guess I'm not a Python programmer.\n\nIt's a very basic function, I'm sure you've used it before.\n\nI thought about this a while ago. I think there's a problem with this definition.\nFor example, the sum of 1,2,3 is 3. But the sum of 1,2,3,4 is also 3.\n\nI think you are correct. There is no reason to make a distinction between the sum of 1,2,3 and 1,2,3,4. The number of elements that has a sum of digits > 0 is always the same: the number of elements that is a multiple of 3.\n\nI thought that it should be the number of elements that is a multiple of the sum of their digits.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    count = 0\n    for i in arr:\n        if i[0] > 0:\n           count = count + i[0]\n    return count", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr)):\n        if arr[i] >= 0:\n           return sum(arr[i], 0)\n    return 0\nI've never understood this style of coding. It's not really a problem for me, but I've always wondered why people write this way.\n\nThis is what's called \"functional programming\". If you want to know more, I can point you to a good starting point.\n\nI'm familiar with functional programming, but I don't understand why people write in this style.\n\nIt's a more concise and elegant way of expressing the problem. The function is a pure function, so it is also easier to reason about.\n\nI wouldn't say it's more concise. It's just different.\n\nIf you're familiar with functional programming, you'd see how it is more concise.\n\nI think we're talking about different things. I'm not saying it's not concise, I'm saying it's not more concise than the equivalent imperative code.\n\nI think you're right.\n\nI like this one. It's one of", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    nums = 0\n    for i in range(len(arr)):\n        nums += arr[i] > 0\n    return sum(nums)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(sum(i, 2)) for i in arr\n\nI'm not sure what the point of this is.\n\nThe point is to show that if you are going to write a count_nums function, it should return the number of elements in the array that have a sum of digits > 0, not the number of elements in the array.\n\nI'm not sure what the point of this is.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[::-1] for _ in range(len(arr) - 1))\n\nThe syntax of Python allows for a more concise version of this function.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # Initialize the total count to 0.\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[0:i] for i in range(len(arr) - 1, 0, -1))\nI like it!  I would do this in Python and just use `sum` but I like the elegance of this solution.  Thanks!</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n       if sum(arr[i], 0) > 0:\n          return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n        if sum(i) > 0:\n           return i\n    return 0\n\n>>> count_nums([1, 2, 3])\n3\n>>> count_nums([1, 2, 3, -4])\n2\n>>> count_nums([1, 2, 3, -4, -5])\n3\n\n>>> count_nums([1, 2, 3, -4, -5, -6])\n3\n>>> count_nums([1, 2, 3, -4, -5, -6, -7])\n4\n>>> count_nums([1, 2, 3, -4, -5, -6, -7, -8])\n4\n>>> count_nums([1, 2, 3, -4, -5, -6, -7, -8, -9])\n5\n>>> count_nums([1, 2, 3, -4, -5, -6, -7, -8, -9, -10])\n5\n>>> count_nums", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] < 0:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n           return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == -1:\n        return 0\n    for x in arr:\n        if x >= 0:\n           if x < arr[0]:\n               return 0\n         else:\n               return x + arr[0]\n    return count_nums(arr)\n\nIt's not really fair to compare this to the original, though. The original didn't use a loop, so it was more like a math problem. The above is more like a computer science problem.\n\nI don't think it's fair to say that the above is more like a computer science problem. It's just a different way to write the same algorithm.\n\nThe original is a \"math problem\" because it doesn't use a loop. The above is a \"CS problem\" because it does.\n\nIt's not about whether it uses a loop. It's about whether it uses recursion or not.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x**2) for x in arr)\n\ncount_nums(arr)\n\n>>> count_nums([-1, 1, 2]) == 3\n\n>>> count_nums([1, 2, 3]) == 3\n\n>>> count_nums([1, 2, 3, 4]) == 4\n\n>>> count_nums([1, 2, 3, 4, 5]) == 5\n\n>>> count_nums([1, 2, 3, 4, 5, 6]) == 6\n\n>>> count_nums([1, 2, 3, 4, 5, 6, 7]) == 7\n\n>>> count_nums([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n\n>>> count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n\n>>> count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n\n>>> count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr.has_key('sum'):\n        return sum(arr[key('sum'):])\n    else:\n        return sum(arr)\n    def count_nums_negative(arr):\n    \"\"\"\n    Write a function count_nums_negative which takes an array of integers\n    and returns the number of elements which has a sum of digits < 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_negative([]) == 0\n    >>> count_nums_negative([-1, 11, -11]) == 1\n    >>> count_nums_negative([1, 1, 2]) == 3\n    \"\"\"\n    if arr.has_key('sum'):\n        return sum(arr[key('sum'):])\n    else:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == 0:\n        return 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n        if sum >= 0:\n           return sum\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return len(arr) > 0\n\nThe problem is that I have to use a function that returns a boolean.\n\nThis is the part where I need help.\n\nThanks for reading this far.\n\n--\nPosted via http://www.ruby-forum.com/.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if sum(arr[i] for i in range(0, len(arr) - 1)) > 0:\n           return i\n\nOutput:\n0\n1\n2\n\nThe problem is that the algorithm will find a zero even if it is in the middle of a sequence of non-zeros.\n\nThe solution is to compare the sum of the elements that have a non-zero digit.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # negative numbers\n    for n in arr:\n       if n > 0:\n          sum = sum + n\n          if sum > 0:\n             return sum\n        else:\n            return 0\n    return sum", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(ord(x) for x in arr) >= 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(0, len(arr)):\n           if sum == 0:\n               sum = sum + arr[j]\n              if sum > 0:\n                   return sum\n    return 0\n\nSee also\n Python\n\nExternal links\n Python Cookbook: More than 100 recipes for Python, by Guido van Rossum, Addison-Wesley Professional, 2nd Edition, 2003.\n\nReferences</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] < 0:\n       return 0\n    for i in range(0, len(arr)):\n       if arr[i] > 0 and arr[i-1] < 0:\n          return i\n    return len(arr) - 1\n\nfor i in count_nums(range(1, 10))", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def __init__(self, n):\n       self.n = n\n\n    def count(self, i):\n       if i >= 0:\n          return sum(self.n[i])\n       else:\n          return -sum(self.n[i])\n\n    return count\n\n>>> count_nums([-1, 11, -11]) == 1\n\n>>> count_nums([1, 1, 2]) == 3\n\n>>> count_nums([-1, 1, 2]) == -1\n\n>>> count_nums([1, 1, -1]) == 0\n\n>>> count_nums([1, 1, 2]) == 2\n\n>>> count_nums([1, 1, 2]) == 0\n\n>>> count_nums([-1, -1, 1]) == -1\n\n>>> count_nums([1, 1, -1]) == 0\n\n>>> count_nums([1, 1, 2]) == 1", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def sum_digits(x):\n    \"\"\"\n    Returns the sum of the signed digits of x.\n    >>> sum_digits([-1, 11, -11]) 2\n    >>> sum_digits([1, 1, 2]) 3\n    \"\"\"\n    return x.sign(x.shift(1))\n    >>> sum_digits([-1, 11, -11]) 2\n    >>> sum_digits([1, 1, 2]) 3\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and\n    returns the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be\n    negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    if arr[0] == 0:\n        return 0\n    else:\n        return arr[0] + 1\n\nPython", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x > 0)\n\nI think that's a good solution.\n\nI think it is too.\n\nI'm not sure I understand the reasoning behind this. What's wrong with this:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return len(arr) == 0 or arr[0] == 0\n\nThe above function is correct, but it's not the one that I have to write.\nI have to write a function count_nums(arr) that takes an array of integers and returns the number of elements which has a sum of digits > 0.\n\nI was thinking of writing a function that takes an array of integers and returns the number of elements which has a sum of digits > 0.\n\nIs the above function correct?\n\nPlease help me.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr)):\n        if sum(arr[i], 0) > 0:\n           return i\n    return 0\n\nI'm trying to find the number of integers with a sum of digits > 0. I know I'm supposed to use a loop to iterate through each integer, but I don't know what to put inside the loop. Can someone help me out?\n\nYou can't do this without using a loop. The loop will iterate over the array and test if each element is positive. If it is positive, you will return the index of the element.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[::-1] + arr[::-1])\n\nThis is a good way to write the function. It's a little more general than the one I posted.\n\nI think this is the best way to do it. It's the shortest and it doesn't use any extra data structure.\n\nYeah, this is the way I would do it.\n\nThis is the best way to do it.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] >= 0:\n        return arr[0]\n    return count(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for n in arr:\n        if n > 0 and n[0] > 0:\n           return n\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n       if sum(arr[i], 0) > 0:\n          return i\n    return 0\n\ncount_nums(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(map(int, arr)) > 0\n\nThis is a really nice way to do it. It's easy to read and it's easy to understand.\n\nThis is also a great example of a bad example.\n\nHow so?\n\nIt's an example of a problem that's easily solved by any competent programmer, but it's not an example of a general problem that most programmers would encounter.\n\nI disagree.\nI think that most programmers will encounter this type of problem at some point in their career.\nAnd it's also an excellent example of a problem that is easily solved in many different ways.\n\nThe point is that this is not a realistic problem.\n\nI think that's a very narrow way of looking at it.\nIt's an example of a problem that is easily solved in many different ways.\nAnd it's also an example of a problem that is easily solved in a very simple way.\n\nIt's a realistic problem, but it's not a realistic problem that any programmer will encounter.\n\nWhy not?\n\nBecause it's not a problem that's worth solving.\n\nIn what sense?\n\nIn the sense that it's not a problem", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) == 0:\n        return 0\n    for num in arr:\n        if num > 0:\n           if num % 10 == 0:\n               return num\n               else:\n                return 0\n    return len(arr)\nI know this is a joke, but I would actually prefer this over the original solution.\n\nI think it's a nice solution.\n\nI'm not sure if it's a joke, but it's a nice solution.\n\nIt's a joke. It's a repost of the top comment on the original thread.\n\nI'm not sure if it's a joke, but it's a nice solution.\n\nIt's a joke. It's a repost of the top comment on the original thread.\n\nI'm not sure if it's a joke, but it's a nice solution.\n\nIt's a", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] > 0:\n        return count(arr)\n    else:\n        return 0\n\nThis is a great example of how to write a Python program that is readable, understandable, and yet still follows the Pythonic style. I would say it's the best answer to the question asked.\n\nI don't know if I'd say it's the best, but it's certainly a good example.\n\nIt's the best because it's not a one-liner.\n\nIt's a one-liner, just with a comment.\n\nIt's not a one-liner. It's a function.\n\nIt's a one-liner, just with a comment.\n\nIt's not a one-liner. It's a function.\n\nIt's a one-liner, just with a comment.\n\nIt's not a one-liner. It's a function.\n\nIt's a one-liner, just with a comment.\n\nIt's not a one-liner. It's a function.\n\nIt's a one-liner, just with a comment.\n\nIt's not", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    nums = range(0, len(arr))\n    for n in nums:\n       if n < 0:\n          return 0\n       else:\n          sum = int(n)\n          if n == 0:\n             return sum\n            else:\n             sum = sum + n\n            if sum > 0:\n              return sum\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if not arr[0] or arr[0] == -1:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n           return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    for i in range(0, len(arr)):\n        if sum(arr[i], 0) > 0:\n            return i\n    return 0\n    count_nums([-1, 11, -11])\n\nI think this is a good example of a code that does not follow the DRY principle.\n\nWhy?\n\nBecause the algorithm is not re-usable. You cannot call count_nums on a list of integers and expect it to work.\n\nThe algorithm is re-usable. You can call it on any array of integers.\n\nYes, but you can't call it on a list of integers.\n\nYes, you can. Just cast the list to an array of integers.\n\nOk, but then the code is not DRY anymore.\n\nNo, it still is.\n\nHow so?\n\nBecause the algorithm is still the same. You can call it on any array of integers.\n\nBut you can't call it on a list of integers.\n\nYes,", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for num in arr:\n       if num > 0:\n          count_nums(num - 1)\n    return count_nums(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for n in arr:\n       if n > 0:\n          sum = sum + n\n          if sum > 0:\n              return sum\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n       if sum(i) > 0:\n          print(\"sum: \"+sum(i))\n          print(\"number: \"+str(i))\n\nI also added a print() to the loop to see if it is being executed and it is.\n\nI also tried using the following code:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[::-1])", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(i) for i in arr if int(i) >= 0)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(numbers[i] for i in range(len(numbers)) if numbers[i] >= 0)\n\nimport operator\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(operator.sign(numbers[i] for i in range(len(numbers)) if numbers[i] >= 0))\n\nimport operator\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    if arr[0] == -1:\n        return 0\n    for i in range(len(arr)):\n        sum = 0\n        if arr[i] == 0:\n            sum += arr[i]\n            if arr[i] == 1:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(map(int, arr)) > 0\n\nI think the question is asking for a more idiomatic way to write the code.\n\nI think that is the point. If you were to write this in a \"more idiomatic way\" you would end up with a function that is quite complicated.\n\nI think it's a bad question. The code is idiomatic in python. The question should be asking for a more idiomatic way in a functional language.\n\nThe question is bad because it's about how to write idiomatic python, not about how to write idiomatic code in a functional language.\n\nI think this is a good question. I have written a similar question for an interview before, and I have seen a similar question on the interview for a job I was applying for.\nI have found that this is a good question because it tests how well you know python. You have to think about how you would implement this in python. The best way to do it in python is the way it is written in the question.\n\nIt's not really a good question because it tests how well you know python, not how well you know functional programming.\n\nIt's not a good question", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return len(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] > 0:\n        return len(arr)\n    else:\n        return 0\n\nThis is a very interesting problem.\nI like the way you broke it down into three parts:\n1\\. Write a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\n2\\. If a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n3\\. >>> count_nums([]) == 0\n4\\. >>> count_nums([-1, 11, -11]) == 1\n5\\. >>> count_nums([1, 1, 2]) == 3\n\nI like the way you broke it down into three parts:\n1\\. Write a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\n2\\. If a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1,", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return len(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) == 0:\n        return 0\n    return sum(arr[::-1])\n\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 1, 2, 1]) == 4\n\ncount_nums is a function written in Python that takes an array of integers and returns the number of elements which has a sum of digits > 0.\n\nCounting the number of elements in an array is a common task in computer science, and Python provides several built-in functions to do this. However, the built-in functions are not always the best option. For example, the built-in function count() counts the number of elements in an array but it does not return the number of elements which has a sum of digits > 0.\n\nThis is a typical example of a problem which can be solved more easily using a simple function instead of a built-in function.\n\nA solution", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(arr[::-1] + arr[::-1])\n\n(The signature is a little bit weird, but the method is simple. The\nsignature is to be able to pass the function an array of integers and\nintegers and have it return the number of elements which is passed to\nsum().)\n\nYou can find the code here:\nhttp://pastebin.com/u0qf2WuB</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return len(arr) > 0\n\nThis is a common trick that I've used a lot, but I've never heard it called that. I would call it a \"prefix sum\" or \"first-digit sum.\"\n\nThat's a good name. I will call it that from now on.\n\nThis is a common trick. I've used it a lot, and I've never heard it called that. I would call it a \"prefix sum\" or \"first-digit sum.\"\n\nThat's a good name. I will call it that from now on.\n\nI don't think this is a good way to count the number of \"sums\" that are greater than zero. The problem is that the result is going to be a list of lists, and the first list is going to be the list of \"negative sums\". You're going to have to iterate over that list to get the number of \"positive sums\".\n\nI don't think this is a good way to count the number of \"sums\" that are greater than zero. The problem is that the result is going to be a list of lists, and the first list is going to be the list of \"negative sums\".", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) == 0:\n        return 0\n    for i in range(0, len(arr)):\n        if sum(i) > 0:\n           return i\n    return len(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(num - 1 for num in arr if num > 0)\n\nI'm not sure if I understand the problem.\nIs it that you want to count the number of elements in the array that sum to > 0?\n\nYes.\n\nThe solution is not a function but a loop.\n\nYes, you are correct. I have changed the description of the problem to reflect this.\n\nThe problem as stated is not a problem at all.\n\nI have changed the problem to reflect that the sum of the digits of a number is > 0.\n\nThe problem is not about the sum of the digits, it is about the number of digits.\n\nI have changed the problem to reflect that the number of digits is > 0.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n           return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n       if i % 2 == 0:\n          return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > 0:\n           return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) < 2:\n        raise ValueError, 'Need at least 2 elements'\n    return sum(int(num) for num in arr)\n\nIt's a good example of a solution that's good enough for a homework assignment, but not for production code.\n\nI agree. It's a good example of a solution that is very short, but not very good.\n\nI'm not sure I understand the criticism. What's wrong with it?\n\nIt's not clear that it will correctly handle negative numbers.\n\nIt will. It returns the number of elements that have a sum of digits > 0.\nNegative numbers have a sum of digits > 0.\n\nThen it's not clear that it will correctly handle negative numbers with a negative first digit.\n\nIt will. It returns the number of elements that have a sum of digits > 0.\nNegative numbers with a negative first digit have a sum of digits > 0.\n\nNot true.\n\n>>> count_nums([-1, -1, -1]) == -1\n\nIf you want to handle negative numbers with a negative first digit, you", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr.sum(0) > 0:\n        return sum(arr.count(0))\n    else:\n        return sum(arr.count(0) + arr.count(1))\n\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, -1, -1]) == 2</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n        return sum(arr[1:]) + sum(arr[2:]) + sum(arr[3:]) + sum(arr[4:]) + sum(arr[5:]) + sum(arr[6:]) + sum(arr[7:]) + sum(arr[8:]) + sum(arr[9:])\n    else:\n        return sum(arr[1:]) + sum(arr[2:]) + sum(arr[3:]) + sum(arr[4:])\n\nNice.\nI'll post a few more later.\n\nI'm still working on mine, but here's a start:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x**2 for x in arr))\n\nI am not sure if the answer is right.\n\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\nI think the above is wrong.\n\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\nI think the above is wrong.\n\nI am not sure if the answer is right.\n\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\nI think the above is wrong.\n\nThe question is wrong.\n\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\nI think the above is wrong.\n\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2,", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr)):\n       if sum(i) > 0:\n          return i\n\ncount_nums(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    count_nums = lambda x:\n         if x == 0:\n            return 1\n          else:\n             return sum(x[0:1]) == 0\n    return count_nums(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] > 0:\n        return count_nums(arr[1:] + arr[0])\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    a = 0\n    for i in range(len(arr)):\n        a += sum(arr[i])\n    return a", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) > 0:\n        return len(arr)\n    return sum(arr[:]) >= 0\n\nIn this case, the loop body (if len(arr) > 0) does not need to be executed, since the function count_nums() always returns the number of elements which has a sum of digits > 0.\n\nThe function count_nums() can be used as a base for the function count_nums_signed() which takes an array of integers and returns the number of elements which has a sum of digits > 0 and a sign of the first element.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in range(0, len(arr) - 1):\n        if sum(i) > 0:\n           return i\n\nThe problem with this is that the language used in the question is Python, not English. In Python, the \"if\" statement is a statement, not an expression.\nThe correct answer is:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) > 0:\n        for i in range(len(arr)):\n           if sum(arr[i], 0) > 0:\n               return i\n    return 0\n    \"\"\"", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def nums_with_sum(arr):\n    \"\"\"\n    Write a function nums_with_sum which takes an array of integers and\n    returns the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be\n    negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> nums_with_sum([]) == 0\n    >>> nums_with_sum([-1, 11, -11]) == 1\n    >>> nums_with_sum([1, 1, 2]) == 3\n    \"\"\"\n    if arr[0]!= 0:\n       return 0\n    for i in range(len(arr)):\n       if arr[i] > 0:\n          return i\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(arr[0] * 10 for _ in range(0, len(arr) - 1))\n    if arr[0] < 0 else 0)\n\nI was just thinking of writing a similar function for this problem. This is very similar to the way I was thinking of solving it, except I would have used a dictionary instead of a list.\n\nI did this one for the same problem in Ruby:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    print \"Counting the number of elements in array [%s]\" % arr\n    print \"Counting the number of elements in array [%s]\" % arr\n    for i in range(len(arr)):\n        if sum(i) > 0:\n           print \"Element [%s] has a sum of digits > 0\" % arr[i]\n            print i", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    # If the first digit is negative, then the number is negative\n    if not sum(arr[0:0]) > 0:\n        return 0\n    for i in range(0, len(arr)):\n        sum(arr[i:i+1]) = sum(arr[i]) + sum(arr[i+1])\n    if sum(arr[i:i+1]) > 0:\n        return sum(arr[i:i+1])\n    return len(arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] > 0:\n        return len(arr)\n    else:\n        return 0\n\nI don't think this is correct.\nIf the array is [1, 2, 3], the code returns 3.\nBut if the array is [0, 1, 2], the code returns 0.\n\nYour code is correct. I think the problem with the other code is that it doesn't take into account negative numbers.\n\nI'm not sure it's correct.\nIf the array is [1, 2, 3], the code returns 3.\nBut if the array is [0, 1, 2], the code returns 0.\n\nI think the problem is that the code doesn't take into account negative numbers.\n\nI have a similar question. I am looking for a function that takes an array of integers and returns the number of elements that have a sum of digits > 1.\n\nFor the first one, you need to check if the first element is positive.\n\nFor the second one, you need to check if the first element is negative.\n\nI don't think this is correct.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(abs(x[i])) == 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(map(int, arr))\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        if sum(arr[i], 0) > 0:\n           return i\n    return 1\nI think this is the best way to do it.  It's the same as the way you would do it in Python:\ncount_nums = lambda x: sum(x, 0) > 0\ncount_nums([]) == 0\ncount_nums([-1, 11, -11]) == 1\ncount_nums([1, 1, 2]) == 3\n\nI don't think this is the best way. It's not really idiomatic python style.\nI'd say:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(arr[0:4]) == 0\n\nDoesn't this just count the number of non-negative numbers?\n\nNo, it's missing the negative numbers.\n\nNo, I mean the function as written. It counts the number of non-negative numbers.\n\nAh, sorry, my mistake.\n\n\"This question is intentionally left vague. It is meant to prompt you to\nthink about a situation and how you would approach it. It's not meant to", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(ord(x) for x in arr)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x > 0)", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len(arr) == 0\n\nI was expecting a function that would return a list of numbers with their sum.\n\nI think you mean \"count the number of numbers with a sum of digits > 0\"\n\nThat is what I mean.\n\nI would have used the \"for\" loop here:\nfor i in range(len(arr)):", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) == 1:\n        return 1\n    else:\n        return sum(int(i) for i in arr if i >= 0 and i < len(arr) and i > 0)\n    return count_nums\n\nThis is a really neat idea. I'm surprised I've never seen it before.</s>", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] > 0:\n        return arr[0] + 1\n    else:\n        return 0\n\nCount_nums() is not the only function which can be used to count the numbers in an array. For example, the following function is also able to count the numbers:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"No numbers in array\")\n    for i in range(len(arr)):\n        if sum(i) >= 0:\n           return i\n\nThis is a simple example of a recursive function.\nThe idea is that the function calls itself to calculate the sum of the elements of the array and return the one with the largest sum.\n\nIn Python, recursive functions are written with the rec keyword.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    return sum(int(x) for x in arr if x>0)\n\nThe code above is a simple example of how to write a function using Python.\n\nThe function takes an array as argument and then loops through each element of the array, and checks if the integer in the element is positive, and if it is, it checks if the sum of the digits of the integer is greater than zero.\n\nIf the number is negative, it checks if the first signed digit of the number is negative.\n\nThe function returns the number of elements which have a sum of digits greater than zero.\n\nThe function returns 0 if the array is empty.\n\nFor example, the code above counts the number of elements in the empty array [].\n\n>>> count_nums([]) == 0\n\nIt counts the number of elements in the array [-1, 11, -11] as 1.\n\n>>> count_nums([-1, 11, -11]) == 1\n\nIt counts the number of elements in the array [1, 1, 2] as 3.\n\n>>> count_nums([1, 1, 2]) == 3\n\nExample 3\n\nWrite a", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n        if i == 0:\n           return 0\n        else:\n            for j in range(len(i)):\n               if j > 0 and i[j] > 0:\n                       i[j] = 0\n                         return i[j]\n\nThis one is a little bit tricky.", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for num in arr:\n        if num > 0:\n           count = num\n           if count > 0:\n              return count\n    return 0", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    for i in arr:\n        if sum(i) > 0:\n           return i\n\nThis is pretty much the same as the solution I came up with. I like your solution better, though.\n\nHere's one way to do it:", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    count_nums = lambda x:\n       if x[0] > 0:\n          return x[0] + x[1] + x[2]\n    return 0\n\nThis is a really interesting question, and I'm surprised by the lack of discussion.\nI'm also surprised by the fact that it's a question at all. I would have thought that there would be a standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this is the standard way to do it.\n\nI think this", "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\" \"\"\"\n    if arr[0] == -1:\n        return 0\n    return len(arr) - arr[0]"]]