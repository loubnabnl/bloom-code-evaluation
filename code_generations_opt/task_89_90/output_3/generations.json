[["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        a = 'a' + i * 2\n        s = s[i:i + 2]\n    return s", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument\n    and returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    decrypt('hi') returns 'hi'\n    decrypt('asdfghjkl') returns 'ewhjklnop'\n    decrypt('gf') returns 'gf'\n    decrypt('et') returns 'et'\n    \"\"\"\n    return alphabet.transpose(s.characters)\n\nSee also\n Random letter generator\n\nReferences</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = set()\n    x = alphabet.copy()\n    for a in x:\n       alphabet[a] = x[a]\n    return alphabet[x.pop()]\n\nThere's no reason to make the alphabet one-based, since you're only using it for counting positions.\nIt's also easy to see that this function, if implemented in a programming language, is vulnerable to a simple XOR cipher.\n\nI would have used a Dictionary instead of a Set. \n\nThis is very inefficient. The overall space complexity is O(n^2) where n is the length of the input string, since you need one position per character.\n\nOh, I see, I did not understand that you do not have a fixed number of positions in the alphabet. That is indeed a problem.\n\nThis is really terrible for any \"real\" usage. It's only useful as a fun excercise to play with some very basic encryption algorithms.\n\nDoesn't seem to work for non-english alphabets.\n\nCould you post a few examples?\n\nTry Arabic.\n\nIt's not working", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'a' * 4 # a space\n    alphabet = 'b' * 4\n    alphabet = 'c' * 4\n    alphabet = 'd' * 4\n    alphabet = 'e' * 4\n    alphabet = 'f' * 4\n    alphabet = 'g' * 4\n    alphabet = 'h' * 4\n    alphabet = 'i' * 4\n    alphabet = 'j' * 4\n    alphabet = 'k' * 4\n    alphabet = 'l' * 4\n    alphabet ='m' * 4\n    alphabet = 'n' * 4\n    alphabet = 'o' * 4\n    alphabet = 'p' * 4\n    alphabet = 'q' * 4\n    alphabet = 'r' * 4\n    alphabet ='s' * 4\n    alphabet = 't' * 4\n    alphabet = 'u' * 4\n    alphabet = 'v' * 4\n    alphabet = 'w' * 4", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j'), ('k', 'l'), ('m', 'n'), ('p', 'q'), ('r','s'), ('t', 'u'), ('v', 'w'), ('x', 'y'), ('z', 'a'), ('0', '1'), ('2', '3'), ('4', '5'), ('6', '7'), ('8', '9'), ('*', '+'), ('/', '%'), ('.', '+'), ('.', '-')]\n    # Take the letter and shift it to the left two places\n    shift = 2 * shift\n    for i in range(len(alphabet) - 2):\n        s = alphabet[alphabet[shift]]\n        s = alphabet[(shift + 1) % alphabet.size()]\n    return alphabet[s:alphabet.size()]</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def e=int(s.split(' ')[1])*2:\n        s = s[1:]\n    s[0] = '.'\n    s[0] = s[1:]\n    s[1:] = str(e)\n    return s", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return (s.lower() * (s.lower() - 2)) * (s.lower() - 4)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = []\n    for letter in alphabet:\n         a = rotate(letter, 2)\n         b = a + 2\n         c = b * 2\n         alphabet.append(c)\n    return alphabet", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for a in s:\n        b = b - 2 * a\n        return b", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    b = 'qwertyuiop'\n    c = b.copy()\n    d = a.copy()\n    e = c.copy()\n    a = b.copy()\n    a = e.copy()\n    b = a.copy()\n    b = c.copy()\n    c = d.copy()\n    d = e.copy()\n    e = b.copy()\n    e = c.copy()\n    s = encrypt(a)\n    s = encrypt(b)\n    s = encrypt(c)\n    s = encrypt(d)\n    s = encrypt(e)\n    return s</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [str(i) for i in range(8)]\n\n    a, b, c, d = [1, 2, 3, 4]\n\n    if len(alphabet) == 8:\n        for i in range(2, len(alphabet) - 2):\n            c = alphabet[i * 2:] + alphabet[i * (2 + 1)]\n\n             a, b, c, d = a + alphabet[i * 2:i * (2 + 1)], b + alphabet[i * 2:i * (2 + 1)], c + alphabet[i * 2:i * (2 + 1)], d + alphabet[i * 2:i * (2 + 1)], alphabet[i * 2:i * (2 + 1)],", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [\"abcdefghijklmnopqrstuvwxyz\"]\n    for x in range(len(alphabet)):\n        alphabet[x] = alphabet[x + 1]\n    return alphabet[len(alphabet) - 1][len(alphabet) - 1]\n\nThis is the code I used to generate the example.  The cipher used is the Caesar cipher.\n\nimport urllib2\nimport math\nimport sys\nimport string\nfrom random import randint\nfrom itertools import cycle, islice, repeat\nimport sys\nimport sys\nimport string\nfrom time import sleep", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        for j in range(len(s[i])) :\n           s[i] = s[j] ^ (2*i+j)\n        return s\n\nYou could make it even faster by using modulo division instead of two multiplications.\n\nIndeed. The reason I didn't use modulo is because I couldn't think of a good way to make it a function.\nI was going to make a function that takes a string and returns a string \"encrypted\" with modulo, but I couldn't think of a way to make it concise enough.\n\nOr maybe I could just use a function that takes a string and returns a string encrypted with a random key.\n\n\"If you're not embarrassed by the first version of your product, you've launched too late.\" \\-- Reid Hoffman\n\nThis is exactly why I'm a PHP fanboy. I don't understand Python syntax. When I see a new language, I say to myself \"What's the shortest amount of time I could spend learning enough to write a simple program", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [s[i] for i in range(len(s) - 2)]\n    s = s[:-2]\n    s = s[:-1]\n    return [s[i] for i in range(len(s) - 1)] + alphabet\n\nCan someone please explain to me how this works? I'm not really sure what's happening here.\n\nIt swaps the first two letters of the string, then does the same thing again, then adds the swapped letters to the end of the string.\n\nWhy is the first part necessary? What's being encrypted here?\n\nthe alphabet is being rotated (as in the title), so a and b become b and a, and so on.\n\nI don't get it. The alphabet is being rotated? How does that work?\n\nHe's saying that the first two characters are swapped. So \"a\" would become \"b\" and \"b\" would become \"a\".\n\nThen how does it encrypt it?\n\nIt doesn't.\n\nlol!\n\nI don't understand the point of this.\n\nIt's just a toy function to learn about the Python", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for c in range(len(s)):\n        x = s[c]\n        s[c] = 'a' * 2\n        s[c + 1] = 'b' * 2\n        s[c + 2] = 'c' * 2\n        s[c + 3] = 'd' * 2\n        s[c + 4] = 'e' * 2\n    return s", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    s = 'hi'\n    letters.append(ord(s[:-1])%2)\n    return letters.join(' ')\n\nNot sure why you're using letters as the alphabet when the OP specifically said they wanted to use ascii.\n\nIt's not a perfect solution, but it is a solution.\n\nNot only is it not a solution, it's the wrong solution. It doesn't meet the problem specification.\n\nOn the contrary, it is a solution. It is a very _bad_ solution, but it is a solution nonetheless.\n\nGood solutions to the problem have the property of meeting the problem specification.\nI would disagree with your notion of \"solution.\" I would call this a \"workaround,\" because it's a way to get around the problem.\n\nI'm not sure what your point is. A solution is a workaround. A workaround is", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    result = ''.join(map(chr, s))\n    result = int(result.rstrip())\n    result = int(result.lstrip())\n    result = result[0:9]\n    result = int(result.lstrip())\n    return result", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join(map(chr, encode(ord(x), 'ascii')))\n    def encode(x):\n    return ''.join(ord(x))\n    def ord(x):\n    return ord('x')", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    \"\"\"Note:  the return value is in the string, so be sure to return it\n    if you want it to be returned.  This is why I'm returning 'lm' for\n    encrypt('hi').\"\"\"\n    return lambda s:\n         encrypt(s).lower()", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    results = []\n    for char in s:\n        for letter in alphabet:\n            result = rot2char(letter,char)\n             if letter in results:\n                  results.append(result)\n             else:\n                  results.append('?')\n                 return results", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        #alphabet = [i for i in range(len(s) - 1)]\n\n    return ''.join(rotatealphabet(alphabet, i, 2))\n\nThat's a good one, the alphabet is [0, n-1].\n\nIf the alphabet is [0, n-1], then the'return '.'join(rotatealphabet(alphabet, i, 2))' line does not compute.\n\nI meant:\nreturn ''.join(rotatealphabet(alphabet, i, -2))\n\nAnd I meant:\nreturn ''.join(rotatealphabet(alphabet, i, 2))\nis not correct for the given alphabet.\n\nAh, you're right. I forgot to change that to -2 when I wrote that.\n\nI don't know what's scarier - the fact that we're making fun of people who do not understand the nuances of the english language, or the fact that I'm the first to point this out.\n\nYou aren't.\n\nIt's amusing to see the trouble people", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [0 for a in range(8)]\n    result = \"\"\n    for i in range(8):\n       result += alphabet[i * 2 * i - 1]\n    return result", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i in range(len(alphabet)):\n        alphabet[i] = alphabet[i + 1]\n    return alphabet[0]\nThis is the correct answer.\n\n`def encrypt(s):\n`\n`create a function encrypt that takes a string as an argument and returns\n` a string encrypted with the alphabet being rotated. The alphabet should\n` be rotated in a manner such that the letters shift down by two multiplied\n` to two places. For example:\n`\n` encrypt('hi') returns 'lm'\n`\n` encrypt('asdfghjkl') returns 'ewhjklnop'\n`\n` encrypt('gf') returns 'kj'\n`\n` encrypt('et') returns 'ix'\n`\n` \"\"\"\n`\n`alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n`\n`for i in range(len(alphabet)):\n`\n`alphabet[i] = alphabet[i + 1]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return s\n    elif len(s) == 2:\n        return '$s'\n    else:\n        return '$s' + encrypt(s[:-1], s[:-2])", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i in range(len(s)):\n        alphabet = alphabet.rjust(2*i)\n        encryption = []\n        for ch in alphabet:\n            ch = ch.rjust(2*i)\n           ch = ch.ljust(2*i)\n           ch = ch.rjust(2*i)\n           ch = ch.ljust(2*i)\n           ch = ch.ljust(2*i)\n           ch = ch.ljust(2*i)\n           ch = ch.rjust(2*i)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [],\n    n = len(s)\n    while n > 0:\n        alphabet.append('a')\n        alphabet.append('b')\n        alphabet.append('c')\n        alphabet.append('d')\n        alphabet.append('e')\n        alphabet.append('f')\n        alphabet.append('g')\n        alphabet.append('h')\n        alphabet.append('i')\n        alphabet.append('j')\n        alphabet.append('k')\n        alphabet.append('l')\n        alphabet.append('m')\n        alphabet.append('n')\n        alphabet.append('o')\n        alphabet.append('p')", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(s.length):\n         s[i] = s[i] << 2\n    return s\n\n>>> s = encrypt(\"hi\")\n>>> s\n\"lm\"\n>>> s = encrypt(\"asdfghjkl\")\n>>> s\n\"ewhjklnop\"\n>>> s = encrypt(\"gf\")\n>>> s\n\"kj\"\n>>> s = encrypt(\"et\")\n>>> s\n\"ix\"\n>>> s = encrypt(\"abcdefghijklmnopqrstuvwxyz\")\n>>> s\n\"lmhgawijklnopqrstuvwxyz\"</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = alphabet.upper() # Convert to upper case\n    for letter in alphabet:\n         cipher = alphabet[letter]\n         cipher = cipher.ord('abc')\n    return cipher\n\nreturn tuple(\n    'lm'\n    'ewhjklnop'\n    'kj'\n    'ix'\n)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    x = [0]*2+1\n    return chr(x[0]*x[1] + x[1]*x[0])\n\nYes, I know the article is about a much more complex problem, but I\nthink the problem this algorithm is intended to solve is a nice\nexample of a simple approach to a complex problem.\n\nI think the problem you are trying to solve is more akin to this:\n\"How do I rotate a square?\"\n\\----\n\"What is the square root of 9?\"\n\nIt is a non-trivial problem to encrypt a string, and the solution is\ncertainly more complex than this simple algorithm.\n\nHow is the problem of encrypting a string any more complex than the\nproblem of computing the square root of 9?\n\nIt's not more complex, but it has a wider scope. The problem of\nencrypting a string (really, translating the string into some other\nstring) can be hard to solve if the string is complex. The problem of\ncomputing the square root of 9 is easy to solve, but you may have to\nworry about rounding errors if you're computing it", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [(\"A\",\"B\"), (\"B\",\"C\"), (\"C\",\"D\"), (\"D\",\"E\"), (\"E\",\"F\"), (\"F\",\"G\"), (\"G\",\"H\"), (\"H\",\"I\"), (\"I\",\"J\"), (\"J\",\"K\"), (\"K\",\"L\"), (\"L\",\"M\"), (\"M\",\"N\"), (\"N\",\"O\"), (\"O\",\"P\"), (\"P\",\"Q\"), (\"Q\",\"R\"), (\"R\",\"S\"), (\"S\",\"T\"), (\"T\",\"U\"), (\"U\",\"V\"), (\"V\",\"W\"), (\"W\",\"X\"), (\"X\",\"Y\"), (\"Y\",\"Z\")]\n    for x in range(0, len(s)-1):\n        if s[x] == 'A':\n            alphabet[x] = alphabet[0]\n            alphabet[1] = alphabet[2]\n            alphabet[2] = alphabet[3]\n            alphabet[3] = alphabet[4]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return ''\n    for i in xrange(len(s)):\n        letters = ''\n        for j in xrange(0,len(s)):\n            letters += s[j * 2 + i]\n            letters += s[j * 2 + i * 2]\n            return letters.join('')\n\nThat's not how it works. It's the fourth column (or row) that gets shifted by two.\n\nTrue.\nI don't understand the one-liner.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    r = 0\n    for i in range(0, len(s)):\n        if s[i] < 'a' or s[i] > 'z':\n           r = 2 * r\n        else:\n           r = 1 * r\n        s[i] = s[i] + ord(s[i])\n    return s\n\nAnd there are many many many other similar examples. You can also do a similar thing to cipher a message, you just need to swap the two operations.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return lambda s: ''.join(chr(ord(s[0])+ord(s[1])) for ord in [0, 26])\n\nI might be missing something, but if I encrypt the string \"asdfghjkl\", I get \"ewhjklnop\". I don't see how that's an improvement over the default encryption.\n\nI think the OP just got the example wrong.\n\nMakes sense.\n\nI was just looking into this the other day: \n\nI was surprised by this:\n>>> import sys\n>>> r, c = sys.argv[1], sys.argv[2]\n>>> f, g = [], []\n>>> print(\"a\", f.append(c.encode('ascii')))\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: 'NoneType' object has no attribute 'encode'\n>>> print(\"b\", f.append(c.encode('ascii'))\n>>> print(\"c\", c.decode('ascii'))\n>>> print(\"d\",", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        for j in range(len(alphabet)):\n            x = s[j]\n              y = alphabet[j * 2]\n               x = x.substring(0, j * 2)\n                y = y.substring(j * 2, len(alphabet) - 1)\n                if x =='':\n                  y = y.substring(j * 2, len(alphabet) - 1)\n                  else:\n                    return ''.join(x, y)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = set(set(set(string.ascii_uppercase)))\n    letters = set()\n    alphabet.add(letters)\n    letters[len(letters)-1] = 'a'\n    for i in range(len(letters)):\n        alphabet.add(letters[i])\n        letters.add('a')\n        letters[len(letters)-1] = 'z'\n    return alphabet.encode(s)\n\nHow would one go about making this function in Python?\n\nPython has a built in 'crypto' module that can do this:\n>>> from Crypto import AES\n>>> def encrypt(s):\n...     return AES.new(key ='super-secret')\n...     s = s.encode('ascii')\n...     return s.decode('hex')\n\nI really like the article. It's a nice reminder that just because something is simple in your head, doesn't mean it is simple in code.", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [i for i in range(len(alphabet) - 1)]\n    alphabet.sort()\n    return alphabet[alphabet.pop()]\n\n\"You can't rotate the alphabet by a finite amount of steps.\nYou can only rotate it by a single step: reversing the\norder of the elements in the set.\"\n\nRight, it is impossible to encrypt with a finite number of\nrotations. The point is that if you have an alphabet and you\nrotate it by a single step you get the same alphabet back.\n\nNo, you don't get the same alphabet back. The _results_ are the same, but the _alphabet_ is not.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [str(ord(a)) for a in str(ord(b)) for b in str(ord(c))]\n    encryption_by_rotation = None\n    for x in xrange(len(s)):\n        if s[x]!= alphabet[x]:\n            alphabet[x] = alphabet[s[x]*2+1:]\n           encryption_by_rotation = alphabet[x]\n           s = s[x:] + encryption_by_rotation\n    return s\n\nIn Python, this is a little easier:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    a = {'a':'s', 'b': 'u', 'c': 'd', 'd': 'h', 'e': 'w', 'f': 'r', 'g': 'b', 'h': 'o', 'i':'s', 'j': 't', 'k': 'v', 'l': 'h','m': 'u', 'n': 'q', 'p': 'x', 'q': 'r', 'r': 'o','s': 't', 'u': 'x', 'x': 'p', 'y': 'z', 'z': 'c', 'x': 'q', 'y': 'v', 'z': 'j', 'v': 'p', 'j': 'k', 'k': 'h', 'h': 'y', 'y': 'u', 'u': 'x', 'x': 'y', 'y': 'z'}\n    for i in range(len(s)):\n         a[i] = a[i] - 2 * a[i + 1]\n    return s.encode", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.  The\n    alphabet should be rotated in a manner such that the letters shift\n    up by two multiplied to two places.\n    For example:\n    decrypt('hi') returns 'hi'\n    decrypt('lm') returns'm'\n    decrypt('ewhjklnop') returns 'lm'\n    decrypt('kj') returns 'k'\n    decrypt('ix') returns 'x'\n    \"\"\"\n    def encrypt_chained(s):\n    \"\"\"Create a function encrypt_chained that takes two strings as\n    arguments and returns a string that contains the first string\n    encrypted with the second string.\n    For example:\n    encrypt_chained('hello') returns 'ho'\n    encrypt_chained('hi') returns 'lm'\n    \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    # take alphabet, rotate it by 2 places\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    letter = lambda x: ord(x, 2) + ord(x, 2)\n    return alphabet.shuffle(letter)\n\nWhile it looks good, it is terrible code.\nFirst, the alphabet is not being \"rotated by two places\", but the characters are being \"shifted by two places\", which is what gives the result.\nSecond, your use of lambda is completely pointless. It is not needed here, since the alphabet is constant. It is also the worst way to do that, since there are more readable solutions.\n\nYou're right, I originally had it as \"rotated by two places\" and then changed it before posting, but forgot to change the lambda.\nI would be interested in seeing a more readable solution.\n\nI'm not sure what you mean by readable, but I would think using list.shuffle() would make more sense, as it's more idiomatic. The lambda solution is also less idiomatic.\n\nI would agree that lambda is not very readable, but list", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return s.split(r\"[\", \"]\").strip()\n   .replace(r\"\\r\n    \" + s[0], \"\" + s[1])\n   .replace(r\"\\n\", \"\" + s[2])\n   .join(r\"\\r\n    \")\n\nYes, this is a problem in the API, not in the code. The user _should_ be protected from the internals of this, but the API makes it trivial to bypass that protection.\n\nThe API should be re-named to something like \"encode\". \"Encrypt\" is a common word and many users will expect it to behave the way they're accustomed to.\n\nThe API should be named \"encrypt\".\n\nor \"rotate_string_alphabet_down_by_two\".\n\nRight. If it's not called \"rotate_string_alphabet_down_by_two\", then what's the point?\n\nI'd say that if the function accepts a string and returns a string then it's a safe bet that it's \"encrypting\" something. If it wasn't then", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    s = 'hi'\n    return chr(ord(s)) % 26 * 26\n\nThat looks like it might be a real cipher, but it isn't.\nIt's a simple substitution cipher:\ns = 'hi'\nciphertext = s % 26", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return s\n    else:\n        for i in range(len(s)):\n            r = s[i] - s[i+1] * 2\n             c = s[i] - s[i+1] * 2\n              j = r + c\n              n = r + c\n               k = r + c\n               v = n + k\n                v = (c, c) + (k, k)\n                v = (r * r + c * c, r * r + k * k + c * c, k * k + c * c)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [a for a in range(len(s) - 1)]\n\n    alphabet_size = len(alphabet)\n\n    alphabet_size *= 2\n\n    return alphabet_size", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return string.ascii_uppercase\n   .join('X')\n\nThis is a pythonic implementation of the crypt function. The crypt() function is part of the standard library, and is also in the.NET framework, among others.\n\nWhy not just use the library function, then? (I'm not trying to be snarky, I'm genuinely curious about your reasons.)\n\nOn Python, it is more useful to import crypt than to use the function directly. It has a lot of useful things such as hashing and encrypting from a file.\n\nCorrect me if I'm wrong, but, if I understand correctly, you're saying it is more useful to use a function rather than the function itself?\n\nYes, I meant it is more useful to import the function.\n\nIf I understand correctly, the crypt function has to be imported from the crypto library. I'm curious why you wouldn't just import the whole crypto library. I'm sure there is a good reason, but I can't see it.\n\nPython's import mechanism can take a list of packages, so you can import all the stuff you want, and then call crypt to do the actual work.", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = ['']\n    for i in range(len(s)):\n        alphabet.append(chr(ord(s[i])))\n    return alphabet.join(' ')\n\nThis is a good example of why you should not use the same type for the list and the string.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [a for a in range(26)]\n\n    return alphabet.sort()\nI don't see how that is more secure than using a straight substitution cipher. It looks like you have the same key, which is bad.\n\nYup, this is a very similar algorithm to the Caesar Cipher.\n\nI don't think it is a Caesar cipher, since you can not add or subtract any letter from the original text.\n\nI meant that the implementation is similar, not that the algorithm itself is.\n\nI was thinking this would be a fun way to get people to write some Python. If there's interest I'll post the results.\n\nI don't see the point. I could equally well apply this to a chess board and make the same 'challenge'.\nI think the idea of a Turing test for code is a bad one. You only need a very small amount of code to implement a program that can play chess or has a conversation, and there is no reason to suppose that a program which can do that cannot do other things as well.\n\nWell, it's kind of fun. It's more of a competition than a Turing Test.\nI think the idea is to", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    result = ''\n    for i in range(2, len(s)):\n        result = ''.join(chr(ord(i) * 2) for ord in range(s.keys()))\n    return result", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join([int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])),\n    int(rotate([a[i]*2+2,a[j]*2+2])", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet[i:j] = alphabet[j:i] + alphabet[i-1:j]\n    return alphabet.join(' ')\n\nOh, you mean there are people out there who don't do this? I've been doing this since the early 90s, and I always assumed it was the standard.\n\nHah!\nNo, I never do this, I just copy the string to the clipboard and re-paste it to where I want it. I figure if someone wants to see my password they can take the time to retype it.\n\nOr just see the mouse pointer move the mouse to the password box and hover for a second to get the pointer's current position.\n\nThey're going to see that regardless of whether you copy and paste. I see your point though, but I'm not really worried about it. I have a different password for everything, and the places I log in to most often aren't worth hacking anyway.\n\nThis doesn't seem to prevent anyone from being able to read your password.\n\nOf course it doesn't. My understanding", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return '' + 'e' * (1 + (s - 3)) + 'r' * (2 - s) + 'n' * (2 - s)\n\nMore languages should have something like this.\n\nI agree. In my opinion, Python should have a more convenient syntax for working with the built-in string functions.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    i=0\n    for s in s.split():\n         i += 2\n    return s.split()", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = set(set(str.ascii_letters))\n    keys = set()\n    for i in range(0, len(s)):\n        key = str.ascii_letters[i]\n        key, alphabet[key] = alphabet[key], alphabet[key]\n        key, alphabet.pop() = alphabet\n        keys.add(key)\n    return alphabet.transpose()", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\nreturn ''.join(ord(s) * 2) + ord('A')\n\nand you get:\n'lmlmnopewhjklnopgjix'\n\ntry it, it's fun.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet.translate(0,2)  # This is a bit of a hack. I'm not sure", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if __name__ == '__main__':\n        encrypt('hi')\n        encrypt('abcdefghi')\n        encrypt('abcdefghijklmnopqrstuvwxyz')\n\nThe simplest way of doing it is to generate random numbers and assign them to letters in the alphabet:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    a = \"abcdefghijkmnopqrstuvwxyz\"\n    b = \"abcdefghijkmnopqrstuvwxyz\"\n    p = int(a.find(\"abcdefghijkmnopqrstuvwxyz\")[0]*2)\n    c = int(a.find(\"abcdefghijkmnopqrstuvwxyz\")[1]*2)\n    s = \"abcdefghijkmnopqrstuvwxyz\"\n    return s.encode(a, p, c)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def rotate_alphabet(alphabet):\n    \"\"\"Rotates the string by the given alphabet.  The string is\n    shifted down by two multiplied to two places.  For example:\n    rotate_alphabet(u'abc') returns 'def'\n    rotate_alphabet(u'gabc') returns 'hfg'\n    rotate_alphabet(u'jklm') returns 'jklm'\n    \"\"\"\n    letter = alphabet[0]    # Get the first letter of alphabet\n    for i in range(len(alphabet)):\n        letter = letter[2]      # Shift down the first letter\n        letter[0] = letter[3]       # Shift the second letter\n    return alphabet[:i]\n\nWhat you're saying is that I should learn to read? :)\n\nHaha, no, but maybe to read the context of the article that you're writing. This is a simple (but not trivial) technique for ensuring", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    while len(alphabet) > 1:\n        alphabet = alphabet[::2] + alphabet[::2]\n        alphabet[::2] = alphabet[0]\n    return alphabet.encode('ascii')\n\nI don't know python, so I'm not sure if this is what you wanted, but here's a bash version that does something similar (I'm not sure if it's faster).\nfor i in $(seq 1 100); do\necho \"a\";\necho \"b\";\necho \"c\";\necho \"d\";\necho \"e\";\necho \"f\";\necho \"g\";\necho \"h\";\necho \"i\";\necho \"j\";\necho \"k\";", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    if alphabet in [\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]:\n        alphabet = set(alphabet)\n        len = len(alphabet)\n        for i in range(len):\n           alphabet[i] = alphabet[i] - 2\n           alphabet[i + 1] = alphabet[i + 1] - 2\n           alphabet[i + 2] = alphabet[i + 2] - 2\n           alphabet[i + 3] = alphabet[i + 3] - 2\n           alphabet[i + 4] = alphabet[i + 4] - 2\n           alphabet[i + 5] = alphabet[i + 5] - 2\n           alphabet", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        x = (s[i] + (s[i] << 1)) % 2  #x = (s[i] + 0x2 + 0x1) % 2\n        x = (x + 0x3) % 2  #x = x + 0x2 + 0x1\n        result = s[i] + '.' + x\n    return result", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(0, len(s)):\n        s[i] = s[i] * 2 * i\n    return s\nI'm guessing you're in a programming class, so:\n* Your solution is not clear: if I have to come to HN to understand what it does, it's not a good solution.\n* You're using mutable variables, i.e. you're not using a language that enforces immutability (like Haskell or OCaml or Scala or Clojure or Scheme or SML or Scala or...), which means that you're introducing a lot of bugs.\n* You're using a loop, which means you're introducing a lot of overhead for what is a rather simple operation.\n* You're not using a library to do this.\n* Your solution is not efficient: for every byte in your input string, you have to execute a loop that multiplies it by two to two places. A CPU is at least 4-way OoO, so you could easily compute all the byte-multiplications in parallel.\n* Your solution is not easy to extend: if you want to support more than one alphabet,", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    random = random.random()\n\n    a = alphabet.lower()\n    b = alphabet.upper()\n\n    while a < b:\n        if random.random() <.5:\n             a = a * 2\n             b = b * 2\n\n    return b.lower() + a\n\n    return ''.join(encrypted_string.split())\n\nGiven any of the languages available for the problem set, which of the\nfollowing is the shortest solution?\n\nimport random", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def rotate_alphabet(alphabet):\n    \"\"\"Rotate the alphabet in a manner such that letters shift down by two\n    multiplied to two places.\"\"\"\n    for i in range(len(alphabet)):\n        alphabet[i] = alphabet[i] - 2 * alphabet[i - 1]\n    return alphabet", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    n = len(s)\n    for i in range(n-1,2):\n        x = s[i*2+1]\n        y = s[i*2+2]\n        z = s[i*2+3]\n        a = x + y + z\n        b = x - y - z\n        c = x * y + z\n        d = x * y - z\n        e = x / y - z\n        f = x % y - z\n        g = x + y - z\n        h = x - y + z\n        i = x * y + z\n    return a + b + c + d + e + f + g + h + i\n    def decode(s):\n    \"\"\"Create a function decode that takes", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    # 'abcdefghijklmnopqrstuvwxyz' is the alphabet\n    # 'hi' is the string to encrypt\n    # 'lm' is the string that should be returned\n    # and 'ewhjklnop' is the string that should be returned\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = 'lmewhjklnop'\n    return alphabet.rotate(2 * alphabet.length)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def get_alphabet(s):\n        alphabet = [0, 1, 2]\n        return alphabet[s % 2 for s in s]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return '', chr(ord(ord(chr(ord(chr(ord(chr(ord(chr(ord(ord(chr(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord(ord", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join([chr(ord(s[0]) * 2 * ord(s[1])) for s in s.split()])", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    letter = set(s)\n    for x in range(len(letter)):\n        letter[x] = letter[x+1]\n    return letter\nYou're probably not using the set function correctly here. It should be:\nletter = set(s)\nfor x in range(len(letter)):\nletter[x] = letter[x+1]\nYou're overwriting the entire array with the value of x+1.\nEDIT: I don't think that's right. The word \"set\" in the documentation refers to Python's set type, and the function \"set\" is defined as:\nset(s) -> list()\nand the for loop definition of \"set\" in the Python docs refers to the set type:\nfor s in set(s):", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n       for i in range(len(alphabet) - 1, 2):\n          alphabet[i] = alphabet[i+2]\n    return alphabet.rotate(alphabet)\n\nThis is for the OEIS challenge.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return lambda a: lambda b: b + a", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [c for c in range(size(s) - 1)]\n    return [c for c in alphabet]\n\nYes, this one is amusing. I guess the author never heard of passphrases.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for a in range(len(s)+2,len(s)-2):\n        s = s.substr(a,a+2)\n        return s.substr(a,a+2) + s[a]\n\nA similar function exists in OpenSSL under the name \"rot13\" (not \"rot13-encrypt\", just plain \"rot13\"). It is used to encrypt messages and then print them in an unreadable form:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    \"\"\"key = '''\n    ''''ABCDEFGHIJKLMNOPQRSTUVWXYZ'''\n    ''''\n    return key[ord(i) % 26]\n    \"\"\"\n\nNow the function is written with the rules of rotation as their own\ninstructions, so that the user does not need to know what they are.\nThis does not mean that the user is not expected to know that a\ndecryption function would be needed as well.\n\nIn the following example, the user is to rotate the letter \"A\" by two\nplaces and then encrypt it.\n\n    print encrypt(rotate('A', 2), 'abc')\n    print encrypt(rotate('A', 2), 'def')\n    print encrypt(rotate('A', 2), 'ghi')\n    print encrypt(rotate('A', 2), 'jjk')\n    print encrypt(rotate('A', 2),'mno')\n    print encrypt(rotate('A', 2), 'pqr')\n    print encrypt", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return []\n    def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns the string that was encrypted.\n    The function should iterate through the letters in the alphabet and\n    replace each letter in the encrypted string with the letter that\n    corresponds to the current letter in the alphabet.  For example:\n    decrypt('ikdkjb') returns 'kdj'\n    decrypt('hi') returns 'hi'\n    decrypt('kf') returns 'f'\n    \"\"\"\n    return []\n\nThis is an implementation of the Caesar Cipher:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join(map(rotate_letters,s))", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [i for i in range(4)]\n    result = \"\"\n    while s.lower() in alphabet:\n        result += s.upper()\n    result = encrypt(s)\n    return result", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = set()\n    random_number = random.randrange(0, 26)\n    return alphabet[random.randrange(0, alphabet.size)]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    s = s.upper()\n    letter_index = int(s.lower())\n    print 'Creating a function to encrypt the given string:'\n    print 'The encrypted string should be:'\n    print '%s' % s\n    print 'The character index used for encrypting the string is:'\n    print letter_index\n    s = \"\".join(map(int, s))\n    return ''.join(map(letter_index, s))", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    s = 'hi'\n    if len(s) <= 2:\n        raise ValueError('Must be at least two characters')\n    return s.encode('ascii').decode('ascii')", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet_bits = set(alphabet)\n    alphabet_index = set(alphabet)\n    alphabet_value = set(alphabet)\n    print \"Encrypting '\" + s + \"''\"\n    s = s.strip()\n    m = 2\n    print \"Choosing an alphabet.  The alphabet is:\".join(alphabet_bits)\n    for letter in alphabet_bits:\n        if letter!= alphabet_index:\n           alphabet_value[letter] = alphabet_value[letter].shift()\n         alphabet_index[letter] = alphabet_index[letter].shift()\n         alphabet_bits.remove(letter)\n        print \"Sending message to encryption algorithm\"\n    s = s.substring(m)\n    return s\n\nThis is a simple encryption method where you encrypt a string by creating an alphabet that rotates a letter by two multiplied to two places and then", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = sorted(set(s.split()[0])['a'])\n    for x in xrange(len(alphabet)):\n        alphabet[x] = alphabet[x-1] + alphabet[x+1] * 2\n    return alphabet.join(chr(ord(c)) for c in s)\n\nNot sure if the OP is the author, but if so:\nWhen I execute:\n>>> encrypt(\"hi\")\n>>> print encrypted_str\nhi\n>>> print encrypted_str.strip()\nlelm\nthis is the expected output. I think you meant for the ciphertext to\nreceive a one-letter shift, instead of a two-letter shift.\n\nThanks for your report.\n\nWhat would be the advantage over something like this?", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return lambda s: s.encode('ascii'). replace(lambda x: x*2*s.index(0),\n    lambda x: x+2*s.index(1))", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return lambda s: s.rshift(2, 2) + 'o';", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return s.encode('ascii').rotate(2).encode('ascii')", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [\n        'a',\n        'b',\n        'c',\n        'd',\n        'e',\n        'f',\n        'g',\n        'h',\n        'i',\n        'j',\n        'k',\n        'l',\n       'm',\n        'n',\n        'o',\n        'p',\n        'q',\n        'r',\n       's',\n        't',\n        'u',\n        'v',", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [ord(ord(ord(ord(ord(ord('a')))))) for ord in range(26)]\n    return alphabet.copy()\n\nI like it. It's very pythonic.\n\npython is so cute.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n           return ''.join(str(s) for s in range(len(s) * 2 + 2))\n\nWhy is the alphabet of the cipher rotated?\nIf it is to foil frequency analysis, it's not needed. If it's to foil linear cryptanalysis, it's only necessary if the cipher is reversible, and it's not hard to make the cipher non-reversible.\n\nIt's not just to foil frequency analysis, but also linear cryptanalysis. The whole point of the function is to take a string (plaintext) and return an encrypted string (ciphertext). I'm not sure what you mean by \"only necessary if the cipher is reversible\", but one of the reasons why I posted this is to see if I made any mistakes in my implementation.\n\nHere's a good explanation of linear cryptanalysis:\n\nIn that context, the cipher's algorithm is reversible. If the alphabet of the cipher is rotated, it's no longer reversible.\n\nI've been playing with this a bit, and I feel like I'm not understanding something.\nWhen I create a ciphertext of 'hi' by running:\nencrypt('hi')\nI get", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return alphabet.map(lambda s: s[0:2]*(2*s[1:0]))", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = set()\n    A = set(alphabet.values())\n    B = set(alphabet.values())\n    i = len(alphabet)\n    while i > 0:\n        A.insert(alphabet.values(i * 2))\n        B.insert(alphabet.values(i * 2))\n        A.insert(alphabet.values(i * 2))\n        B.insert(alphabet.values(i * 2))\n        A.insert(alphabet.values(i * 2))\n        B.insert(alphabet.values(i * 2))\n        A.insert(alphabet.values(i * 2))\n        B.insert(alphabet.values(i * 2))\n        A.insert(alphabet.values(i * 2))\n        B.insert(alph", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [a for a in range(26)]\n    for a in alphabet:\n        a = a.transpose(2)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [('a','b'),\n    ('c','d'),\n    ('e','f'),\n    ('g','h'),\n    ('i','j'),\n    ('k','l'),\n    ('m','n'),\n    ('o','p'),\n    ('q','r'),\n    ('s','t'),\n    ('u','v'),\n    ('w','x'),\n    ('y','z'])\n\n    alphabet.reverse()\n\n    alphabet.sort()\n\n    return alphabet[0] + alphabet[1:]\n\nExample usage:\n>>> print(encode('hi')).decode()\nlm\n>>> print(encode('asdfghjkl')).decode()\newhjklnop\n>>> print(encode('gf')).decode()\nkj\n>>> print(encode('et')).decode()\nix</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    letters=[]\n    for char in s:\n        letters.append(char)\n        if letters.len()>1:\n            letters=letters[:-1]\n            letters[0]='b'\n    else:\n         letters.append('a')\n         letters[0]='a'\n    for i in range(len(letters)):\n           letters[i]='k'*2\n    return letters</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if len(s) < 2:\n        raise ValueError('String must have 2 or more characters')\n    else:\n        return rot_alphabet(rotate_alphabet(s))\n\nThis is just a test function for an idea I've had: what if I wanted to encrypt a password using the Diceware method? How would I do it?\n\nMy first attempt would probably be to encode the text, then encrypt the resulting byte stream. I can't think of a straightforward way of doing it, though. Does anyone know of one?\n\nPython:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [z for z in range(26)]\n    def encode(c):\n    \"\"\"Returns a string that is the result of encrypting the string", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def get_alphabet(t):\n    \"\"\"Get the alphabet used for encryption.  The alphabet is the\n    following:\n       a", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted using the algorithm described in the\n    encrypt function.\n    The function should ignore any white space that is found in the\n    string.\"\"\"\n    return s.ljust(2,2) + s\n\nThis has some issues. I can't think of a way to solve them without some ad hoc regex stuff.\nMy guess is that the intent is to \"encrypt\" or \"decrypt\" any string, and that you want the resulting string to be in the same case as the original string.\n\"encrypt\" and \"decrypt\" are not reserved words in Python, but \"encrypt\" is used as the name of a built-in function, so you can't use it as a function name.\nThe \"s.ljust(2,2) + s\" part of the decrypt() function is Python's list-comprehension syntax. It works by replacing every character in the string with the character at the corresponding index in the list.\nLet's say the string being encrypted is", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    c = str.encode(\"ascii\", \"ignore\")\n    r = [0, 1, 2, 3, 4]\n    for i in range(len(r)):\n        r[i] = r[i] / 2\n        c[0] = r[0]\n        for j in range(2):\n            c[1] = c[0] + c[j] % 2\n    return c\n\nYou've missed an important detail, which is the order in which the characters are selected:\n>>> def encrypt(s):\n...     \"\"\"Create a function encrypt that takes a string as an argument and\n...     returns a string encrypted with the alphabet being rotated. \n...     The alphabet should be rotated in a manner such that the letters\n...     shift down by two multiplied to two places.\n...     For example:\n...     encrypt('hi') returns 'lm'\n...", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n\nIt's only a matter of time before I find a use for this function. I can see it now...\n\n>>import encrypt\n>>cryptogopher = encrypt('gf')\n\n>>print cryptogopher\n\nlkjfknop\n\n...\n\nYou can see how this could be useful. If only I could remember to save this in a file and keep it on hand until I need it.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join(chr(int(ord(s)) - 2 * int(ord(s))))</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def encrypt_one(s):\n    \"\"\"Create a function encrypt_one that takes a string as an argument\n    and returns a string encrypted with the alphabet being rotated by one\n    place.\n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt_one('hi') returns 'hi'\n    encrypt_one('asdfghjkl') returns 'asdfghjkl'\n    encrypt_one('gf') returns 'gg'\n    encrypt_one('et') returns 'e'\n    \"\"\"\n    return [len(s), 1, 'asdfghjkl']", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = []\n    for i in range(len(s)):\n        alphabet.append(ord(s[i]))\n        return alphabet[-1][0]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    # Remove the first character in the alphabet\n    def remove_first(s):\n        return s[:0]\n    # Create a string with the characters shifted by two places\n    def shift(s):\n        return [s[0], s[2:]].join('\\n')\n    # Encode each letter in the string using the shifted alphabet\n    def encrypt(s):\n        # Rotate the alphabet\n        letters = [s[0]*2, s[1]*2, s[2]*2]\n        return s.encode(shift(letters))\n   \n\nThe code works fine when I run it, but I'm not really understanding what's going on here. I've read the documentation about encryption, but I'm having trouble understanding how it works.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return \"\" + rotate(s, 0, 2)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    x = np.random.choice(s)\n    for i in range(len(s)):\n         x = x ** 2 + np.random.randn(s[i:i+2])\n    return x\n\nx = encrypt(s)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for letter in s:\n         if letter in 'c':\n              return s\n          else:\n               letter = ord(letter)\n               ord = ord - 2 * 2 * 2\n                return encrypt(letter, ord)\n\nThere's also rot13 and a bunch of other methods.\n\nThat's awesome! Didn't know that. Will have to try it.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return s\n    else:\n        return s.encode('ascii')\n\nCan someone explain this code? I'm not sure what it's doing or why it's useful.\n\nIt's rotating the alphabet by two places. For example, \"abc\" becomes \"def\".\n\nOh, that's easy. Thanks.\n\nThat was easy.\n\nYou're welcome.\n\nCan you explain the benefit of this? Is there a use case for it?\n\nI used to do this to generate \"security codes\".\n\nWhy not just use AES?\n\nBecause this is a fun and simple way to get the same result.\n\nBecause this is a fun and simple way to get the same result.\n\nI was just curious.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join([chr(ord(s)) for chr in xrange(2,s.length+1)])\n\nThe above is not a cryptographically secure pseudorandom number generator, nor does it have much to do with word play or encrypting.\n\nThis is an example of what is wrong with the Python community.\n\n'python community' is pretty broad. I don't think it's wrong for this\npython community to discuss the use of encryption in programming.\nThe OP's post is an example of the benefits of encryption - it's easy to read\nand easy to write.\nIt's also an example of how one can introduce their own 'encryption'.\nThe OP isn't in the business of securing data or developing crypto - they're\ndeveloping a python script to generate random text for a word game.\n\nThis is not encryption. This is a simple XOR.\n\nWhat if the characters are not in the ASCII range?\n\nIt won't work. I'm not sure if the people who upvoted this actually think it's encryption, or if they're just happy to see encryption being discussed.\n\nIt's better than a lot of stuff", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n    'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w',\n    'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n    'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w',\n    'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n    'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w',", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\n    def make_alphabet():\n    \"\"\"\n    Construct a list of strings representing the alphabet.  All of the\n    strings are of equal length.\n    \"\"\"\n    return sorted(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'], key=lambda i:i)\n\n    def encrypt(s):\n    \"\"\"\n    Construct a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    t1 = True\n    s = ''\n    t2 = False\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    alphabet[0] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    while s!= '':\n        t1 = False\n        t2 = True\n        alphabet = alphabet[t2]\n        s = alphabet[t1]\n        alphabet[t1] = alphabet[t2]\n        s = s[:t2]\n        t1 = True\n        t2 = False", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    \"\"\"This implementation uses the following strategy for the alphabet:\n    \"\"\"\n    \"\"\"1) The letters of the alphabet are numbered from 1 to 26.\n    2) For a given letter, the number of places it shifts is its ordinal.\n    3) For a given letter, the number of places it shifts down is the ordinal\n    of the letter two places below it.\n    4) For the first letter, the ordinal is 1.\n    5) For the second letter, the ordinal is 2.\n    6) For the third letter, the ordinal is 3.\n    \"\"\"\n    while True:\n       i = ordinal(alphabet[s[i]])\n         new_alphabet[s[i]] = alphabet[s[i]] + ordinal(alphabet[s[i - 1]])\n    s = s[i]\n    return s", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join([s[::-1] for s in ord(s)])</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        s[i] = chr(ord(s[i]))\n    return s\n\n>>> print(encrypt('gf'))\nkj", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return [repr(s) for i in range(len(s) * 2)]\nI guess the question is, how often do you need to do something like that?\n\nWhat about ?\n\nTo be honest, I don't quite see the point of that function. It seems to me that it's slower than the original one and more complex. It's also not really obvious how to use it, but that might be because I'm a little tired right now.\n\nI agree, I'm not entirely sure what it is for or how it's better.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        s[i] = s[i] >>> 1\n    return s\nI'm not sure what you mean by \"shifted down by two multiplied by two places\"\nCan you please be more specific?\n\nYour code is a bit weird. If s[i] = s[i] << 1, then you get a string of all zeros, and if s[i] = s[i] >> 1, then you get a string of all ones.\nIt would be better to use the bitwise XOR operator. For example:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def rotl_alphabet(alphabet):\n    \"\"\"Create a function rotl_alphabet that rotates an alphabet by two\n    times the length of the alphabet.  Example:\n    rotl_alphabet('abcdefghijklmnopqrstuvwxyz') returns 'abcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    def rotl_alphabet2(alphabet):\n    \"\"\"Create a function rotl_alphabet2 that rotates an alphabet by two\n    times the length of the alphabet.  Example:\n    rotl_alphabet2('abcdefghijklmnopqrstuvwxyz') returns 'abcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    alphabet_length = alphabet.length()\n    return alphabet[alphabet.length()-1:]\n    for i in range(alphabet_length):\n       alphabet_length -= 1\n    alphabet[alphabet_length", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return 'abcdefghijklmnopqrstuvwxyz'\n\nLooks good! We should probably review the algorithm for correctness, but I think it's correct.\nIt also looks like it could easily be made to work for any length string.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = s.split(' ')\n    for i in range(0, alphabet.length):\n        alphabet[i] = alphabet[i] + alphabet[i+1]\n    return alphabet.join(' ')\n\nIs it me or is it incredibly inefficient?\n\nIt's you.\n\nIt's not you, but it's me, I'm not a programmer by profession, but I'm working on it.\n\nThe optimisation (and an explanation of the algorithm) is at</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join(map(ord, s for s in s if ord(s) < ord(ord(s)) + 2))\n\nWhat if I want to encrypt the alphabet?\n\n[solved]\n\nI took the easy way out and used Python's builtin default_encoder.", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for k, v in s.split():\n        v, k = v, k + 2\n        s[k] = ''.join(v)\n    return s", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = list(range(len(s)) for s in s)\n    for i in range(len(alphabet)):\n        alphabet[i-1] = alphabet[i]\n    s = s[::-1]\n    return alphabet.pop() +''.join(alphabet[::-1])</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join(map(int, range(len(s)))[0])", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alfabet = alfabet.shift()\n    for i in range(0, alfabet.length - 1):\n        alfabet[i] = alfabet[i - 1]\n    return alfabet.join(' ')", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if 'asd' in s:\n        alphabet = 'asdfghjkl';\n    return alphabet.rotate(i) for i in range(len(s)-1, 1+2)\nThis is much easier than you think.", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    if len(s) <= 9:\n        return s\n    a = [s.char() for s in s]\n    a[0:2] = a[0:2] + 2\n    a[1:2] = a[1:2] + 2\n    return a\n\nThat's really cute. How does that work?\n\nI'm not entirely sure, but if I were to take a stab at it, I'd say it uses AES, except the state is defined as the ASCII values (which are by definition in the range 0-255). So if the state is all 1's, then the output of the function is the same as the input. If the state is random, then the output is random as well, but with the property that if you decrypt the result using the same random state, you get the original input.\n\nIf you want a less cute approach that's more like the AES, use the following:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [u'a', u'b', u'c', u'd', u'e', u'f', u'g', u'h', u'i', u'j', u'k', u'l', u'm', u'n', u'o', u'p', u'q', u'r', u's', u't', u'u', u'v', u'w', u'x', u'y', u'z']\n    alphabet.sort()\n\n    def decrypt(s):\n    \"\"\"Decrypt a string encrypted with the alphabet being rotated.  The\n    alphabet should be rotated in a manner such that the letters shift\n    down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'et'\n    decrypt('ix') returns 'gf'\n    \"\"\"\n    return alphabet[s]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = []\n\n    for i in range(26):\n        alphabet.append(chr(i * 2))\n    return alphabet.join('')\n\n>>> encrypt('hi')\n    'lm'\n>>> encrypt('asdfghjkl')\n    'ewhjklnop'\n>>> encrypt('gf')\n    'kj'\n>>> encrypt('et')\n    'ix'\n>>> encrypt('kmlr')\n    'kmr'</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = list(range(12, 'Z'))\n    result = ''\n    for letter in alphabet:\n        result = result + letter\n    return result\n\n>>> encrypt('hello')\n'lm'\n>>> encrypt('hello')\n'g'\n>>>\n\nEncryption using a key\n\nimport base64", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return rotate(2,2)\n\nLol this was a joke. Apparently it's a real thing though.\n\nThe joke is that it is a real thing.\n\nThis is a pretty standard problem in computer science.\nIt was the first problem that I came across when I learned about encryption.\nThe solution is called the Caesar cipher.\n\nI think you mean the Vigen\u00e8re cipher, no?\n\nNo, the Caesar cipher is the solution to the problem the OP posted.\nThe Vigen\u00e8re cipher is a variant of the Caesar cipher in which some of the letters are replaced by other letters.\n\nHm, I think I read it too fast then. I though the Caesar cipher was used to encrypt a message with a key by replacing each letter with the letter two places down in the alphabet.\n\nThe solution given here isn't great, as it can be broken by using a brute-force attack. If you think about it, there are 26^8 = 23,178,368,592 possible alphabets, which would make it very difficult for anyone to guess the encryption key.\nHere's a solution that's a bit more secure: \n\nI don't see", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def rotatealphabet(a):\n    \"\"\"Create a function rotatealphabet that takes a string as an argument\n    and returns a string shifted down two places.\"\"\"\n    return a[::-1]\n    def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\"\"\"\n    letters = [a[::-1] for a in str.split()]\n\n    a = ''\n    i = 0\n    while True:\n        a = rotatealphabet(a)\n        s = ''.join(letters)\n        i += 2\n        letters = [a[i] for a in letters]\n        s = s.rjust(2)\n        s = s.join('')\n    return s\n\nwhat is the point of using Python?\n\nI was just curious how", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\nreturn np.random.choice([s for s in [z[0]] for z in xrange(len(z) + 1)]).encode('utf-8')\n\nSomething similar happens with the first 'hello' example.\n\nI just ran that with the first example, and it worked for me.\n\nThe code is not production ready, I think, but it's great that someone built it.\n\nI think it is a great idea but I would rather the output be encrypted to a fixed alphabet instead of a shifting alphabet.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    result = ''\n\n    for i in range(len(s)):\n        result = result + str(ord(ord(s[i]))) * 2\n\n    return result\n\nOutput:\n\nhi  lm\nasdfghjkl  ewhjklnop\ngf  kj\net ix</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    words = [s.split(' ')[0] for s in [s.lower()] for s in [s.upper()] if s in [str(s) for s in words]]\n    return u'%s%s' % (words[0]) % words[1]\n\nThis is a weird post.\nIt's not so weird I won't comment, but it is weird.\n\nI don't get it. Is this some new hip way to obfuscate code?</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    print \"Attempting to encrypt: \" + str(s)\n    return \"\".join([ord(i) for i in range(s.length() - 1)] + \"\".join([ord(j) for j in range(s.length() - 1) if j == ord(i+1)])\n\nIn [1]:\nfrom itertools import product\nfrom sys import argv\na = 'hi'\nb = 'lm'\nc = 'ewhjklnop'\nd = 'kj'\ne = 'ix'", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [...alphabet...]\n    return alphabet.index(s[0]), alphabet.index(s[1])", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [letter for letter in s if letter in alphabet]\n    for i in range(len(alphabet)):\n        alphabet[i] = alphabet[i - 1]\n    return alphabet[-1]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    try:\n        return (str(chr(ord(chr(ord(s))) + 1))) +\n         ord(chr(ord(s))) + ord(ord(chr(ord(s))) + 1) +\n         'H' + ord(chr(ord(s))) + 'e' + ord(chr(ord(s))) +\n         'l' + ord(chr(ord(s))) +'m' + ord(chr(ord(s))) +\n         'i' + ord(chr(ord(s))) +'s' + ord(chr(ord(s))) +\n         'n' + ord(chr(ord(s))) + 'p' + ord(chr(ord(s))) +\n         't' + ord(chr(ord(s))) + 'e' + ord(chr(ord(s))) +", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)-2):\n         encrypted = []\n         for letter in s:\n              encrypted.append(rotate(letter, i))\n    return encrypted</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    s = 'hi'\n    for i in range(len(s)):\n        rotate_alphabet(s[i], 2)\n        encrypt(s[i])\n    return s\n\nIt seems like a _lot_ of work for a rather minor payoff.\n\nI don't know, if you're using a language with short variable names, it might be useful. For example, in Ruby, you can do something like this:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return map(lambda x: ord(x), rot(ord(x)))", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns the original string.\n    The alphabet should be rotated in a manner such that the letters\n    shift up by two multiplied to two places.\n    For example:\n    decrypt('hi') returns 'hi'\n    decrypt('lm') returns 'asdfghjkl'\n    decrypt('ewhjklnop') returns 'gf'\n    decrypt('kj') returns 'et'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    alphabet = 'a'\n    for i in range(26):\n       alphabet = alphabet * 2\n       s = \"\".join(s.split(' '))\n    return s.encode(alphabet)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for char in s.split():\n        a = ord(char)\n        if a!= ord('a'):\n              if char in range(a + 1, a + 2):\n                     a = ord('a') + 2\n         else:\n                    a = ord('a')\n                        b = ord(char)\n                        if b!= ord('b'):\n                             b = ord('b') + 2", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    a = dict(zip(alphabet, range(26)))\n    d = []\n\n    for i in range(26):\n        d.append(alphabet[i*2+1:])\n\n    return ''.join([d[k] for k, v in encrypt(s) if v not in d])\n\nHow about", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    s = 'abcdefghijklmnopqrstvwxyz'\n    return 'aasdfghjklmnopqrstvwxyz'\n\nThat's pretty neat. I might use that.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for letter in s:\n        x = letter.find(ord(letter)-2).pop()\n        y = letter.find(ord(letter)-1).pop()\n        z = letter.find(ord(letter)+1).pop()\n        key = letter.find(ord(letter)+1).pop()\n        encrypted = ''.join(map(str, [x, y, z, key]) + s)\n    return encrypted\n\nNote that this algorithm is only secure if the encryption key is longer than the message. If the key is shorter, it can be factored into the first two letters.\n\nThis algorithm is also insecure if the message has a repeated letter. Since the same letter is encrypted by the same ciphertext when repeated, it can be factored back into the message.\n\nThis algorithm is not secure if there are multiple different messages that use the same encryption key, since the encryption key would have to be at least as long as the longest message that uses it.\n\nThis algorithm is also not secure", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = {\n    'a': 'z',\n    'b': 'y',\n    'c': 'p',\n    'd': 'l',\n    'e': 'w',\n    'f': 'v',\n    'g': 'u',\n    'h': 'q',\n    'i': 'x',\n    'j': 'r',\n    'k': 'l',\n    'l': 'c',\n   'm': 'o',\n    'n': 'p',\n    'o': 'q',\n    'p': 'w',\n    'q': 'z',\n    'r':'m',\n   's': 'v',\n    't': 'y',\n    'u': 'e',\n    'v': 'y',\n    'w': 'h',\n    'x': 'n',\n    'y': 'l", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = list()\n    for k, v in zip(s.split(' '), alphabet):\n        alphabet[k] = v\n    return alphabet.join(' ')\n\nReplace 'hi' with 'asdfghjkl' in the function, run the code and you get 'ewhjklnop'.\n\nIt's not a very secure encryption scheme (so don't use it for any top secret messages), but it's quick and easy to understand.\n\nAs a quick check, I ran the code with a list of words and checked to see if the function was working properly.  Here are the results:\n\nPython 3.0.2 (r252:60922, Feb 13 2009, 14:54:10)\n[GCC 4.1.2 20080609 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> encrypt('asdfghjkl')\n['ewhjklnop']\n>>> encrypt('asdfghjkl')\n['ewh", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'et'\n    decrypt('ix') returns 'gf'\n    \"\"\"\n    def encrypt_decrypt(s):\n    \"\"\"Create a function encrypt_decrypt that takes a string as an\n    argument and returns the result of encrypting or decrypting the\n    string with the alphabet being rotated.  The alphabet should be\n    rotated in a manner such that the letters shift down by two\n    multiplied to two places.\n    For example:\n    encrypt_decrypt('hi') returns 'lm'", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return alphabet.keys()", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    # Define the alphabet\n    alphabet = set(string.letters)\n    # Define the function\n    def encrypt(s):\n    # Rotate the alphabet by 2 places\n    #\n    alphabet[(len(s) - len(alphabet[s]) * 2) * 2] = s\n    return alphabet", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    a = alphabet()\n    b = alphabet()\n    for i in range(len(s)):\n        a[i] = a[i-2] = a[i-3] = b[i]\n        a[i+2] = a[i+1] = b[i]\n    s = a[0]\n    return s\n\nI have found that the lines \"for i in range(len(s)):\" and \"for i in range(len(s)):\" are a real headache to debug.\nAny hints/suggestions/ideas on how to deal with these lines, or a better way of writing the code that achieves the same thing would be appreciated.\n\nAnother option is to use a loop. This is more computationally expensive but gives better readability.\nfor i in range(len(s)):\ns = s[::-1] + s[::-1] + s[::-1] + s[::-1] + s[::-1] + s[::-1]\na", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return \"[[:[]\".join(map(ord, s)) for ord in range(len(s) - 2)) for s in s]\".join(map(ord, s))\n\nThis is cute. The ASCII values are nicely distributed, and it's reasonably easy to read.\nI just prefer", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return (i * 2) + (j * 2)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    key = ''.join(range(len(s)))\n    s = ''.join(chr(ord(key)))\n    return s\n\nThanks for pointing this out!\n\nAs a follow-up, I think that it would be more accurate to call it a \"sequential rotational cipher\".\n\nIndeed. I'm not an expert on this, but I think this is a part of stream ciphers.\n\nOne thing I think is interesting about this is how it demonstrates how encryption can be reversible without knowing the key.\n\nIsn't this simply a Caesar cipher?\n\nIt's a little more complicated than that. The shift is not a simple linear shift. The letters are shifted down by 2 multiplied by 2 (one letter per shift).\n\nI don't know why this isn't the first thing people try.\nI wrote a similar thing for my own nefarious purposes many years ago, and it turns out that it's the best thing to try.\n\nThis could be a good educational tool. How does one do this?</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(0,len(s)):\n        key = ord(s[i])\n        chr = chr(key)\n        encrypted = chr(ord(s[i]) ^ chr)\n    return encrypted\n\nThis is a simplified version of a good post by PG from 2006:\n\nCf.  which is where I first saw it.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return rotatetable(alphabet, size=(len(s)+2), alphabet.index[s[0]])\n\nfrom __future__ import print_function</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet_size = len(s)\n    alphabets = []\n    a_index = 0\n    def decrypt(alphabets, plaintext):\n    \"\"\"Create a function decrypt that takes a string and a list of\n    the alphabet and returns the plaintext.  Note that if the\n    alphabet is the same as the one in encrypt, then the plaintext\n    is the same as the encrypted text.\n    If the alphabet is the same as the one in encrypt, then the\n    plaintext is the same as the encrypted text.\n    Note that the reverse transformation is not always correct\n    when the alphabet is rotated.\n    For example:\n    decrypt('et') returns 'ix'\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'efghjklmnop'\n    \"\"\"\n    for a_index in range(alphabets.count):", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    s = 'h'\n    for x in range(26):\n         x = x*2\n         s += chr(int(x % 26)))\n    return s</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('hi') returns 'hi'\n    decrypt('asdfghjkl') returns 'asdfghjkl'\n    decrypt('gf') returns 'gf'\n    decrypt('et') returns 'et'\n    \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [str(i) for i in range(len(s))]\n    alphabet_rotated = alphabet.reshape((len(s)) - len(alphabet))\n    return \"\".join(map(int, alphabet_rotated))", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join(map(rnd.choice(symbols) for symbols in alphabet),\n    s)</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    def alphabet(s):\n    \"\"\"Create a function alphabet that takes a string as an argument\n    and returns the alphabet used for rotating the letters of the given\n    string.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    alphabet('abcdefghijklmnopqrstuvwxyz') returns ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\"\"\"\n    if '.' in s:\n       return 'a'\n    else:\n       return s\n    return alphabet\n   \n\nMore readable:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    alphabet_index = 0\n    for i in range(len(alphabet)):\n        alphabet_index = alphabet_index + 2\n        rotation = (alphabet[alphabet_index:]) & alphabet[alphabet_index+1:]\n        alphabet[alphabet_index+1:] = alphabet[alphabet_index]\n        alphabet[alphabet_index+2:] = alphabet[alphabet_index+1:]\n    return alphabet", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return [w for w in s.split() if w[0]!= s[1]]\n\nBeautiful.</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return alphabet.rshift(2)\n\nSo, how does this work? The last example encrypts 'et' with 'ix' and 'et' is not in 'ix'.\n\nI think it's a bug.\n\nNo, the author explains what it is and how to use it in the post:\n_It's a function that you pass a string into and it returns the same string\nrotated._\nIt's not an encryption function.\n\nHe's saying that it's not really a \"rotation\" function as much as it is a \"shuffling\" function.\n\nI think you mean _rounding_.\n\n\"If you use the following code:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = []\n    for i in range(len(s)):\n        alphabet.append((ord(ord(s[i]))) % 2)\n    return alphabet.join('')\n\nIt's not \"password\" but \"passwd\".\n\nFixed!</s>", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return alphabet.rotate(2*2)", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]\n    for i in range(len(alphabet)):\n        alphabet[i] = alphabet[len(alphabet) - 1] + alphabet[len(alphabet) - 2]\n    return alphabet[alphabet.index(s)]\n\nThe implementation would look something like this:", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    x = ''\n    while x!= end:\n        x = x[:2] + int(x[2:]) + x[:2]\n        x = x[2:]\n        x = x[2:]*2\n    return x", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        x = s[i + 2 * i]\n        s[i] = s[i + 1]\n    return x", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join(map(lambda x: x.encode('base64')))\n\nNot too shabby for an hour of work. The inner function should be seen as a\ndemonstration of the use of the builtin list comprehension syntax. I'd be\nquite interested to see what the Python version of the code looks like.\n\nI'd like to see what it looks like with a wider alphabet and with a \"random\"\nalgorithm.\n\npython: \n\n[\n\"hi\",\n\"asdfghjkl\",\n\"gf\",\n\"et\"\n]\n\npython: \n\n[\n\"hi\",\n\"asdfghjkl\",\n\"ewhjklnop\",\n\"kj\"\n]\n\npython: \n\n[\n\"hi\",\n\"asdfghjkl\",\n\"ewhjklnop\",\n\"ix\"\n]\n\npython: \n\n[\n\"hi\",\n\"asdfghjkl\",\n\"ewhjklnop\",\n\"ix\",\n\"x\"\n]\n\npython: \n\n[\n\"hi\",\n\"asdf", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return \"\".join(map(chr, s))", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join( map( lambda a, b: rotate(a, b, 1 ), s ) )\n\nfor a in string_list:\n    encryption_key = encrypt(a)\n    print(string_list[a])\n\nfor i in string_list:\n    print(string_list[i])\n\nfor key in list_of_keys:\n    print(key)\n\nfor i in string_list:\n    print(key[i])", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet = [i for i in range(len(alphabet) + 2)]\n    for k in alphabet:\n       alphabet[k - 2] = alphabet[k - 1]\n    return alphabet[-1] + alphabet[len(alphabet) - 1]", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    alphabet_size = len(s)\n    print 'Alphabet size is:', alphabet_size\n    for i in range(alphabet_size):\n       print 'rotating letters two places to the right:', i\n       letter_index = len(s) - (alphabet_size * i)\n       print 'Shift letter down by 2 multiplied to 2 places to the right:', letter_index\n       encrypted_letter = chr(letter_index * 2)\n       index = index + 2\n       s[index] = encrypted_letter\n    return s\n\nThis looks like it might be a good start.", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return map(\n        'rotate',\n        lambda x: int(x*2)\n       .transpose(y=0)\n       .rotate(y=1)\n       .rotate(y=2)\n       .rotate(y=3)\n       .transpose(z=0)\n       .rotate(z=1)\n       .rotate(z=2)\n       .rotate(z=3)\n       .transpose(w=0)\n       .rotate(w=1)\n       .rotate(w=2)\n       .rotate(w=3)\n       .transpose(x=0)\n       .rotate(", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return ''.join([\n         x.encode(chr(s.index(' ')))\n         for x in alphabet.rotate(2, 2)\n])", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        t = s[i:i + 2 * i]\n        s[i + 1] = s[i + 2 * i + 1:i + 3 * i]\n\n    def decrypt(cipher, key):\n    \"\"\"Create a function decrypt that takes a string cipher and a string\n    key and returns the original string. The string cipher is created by\n    encrypt and the string key is created by decrypt.\n    For example:\n    decrypt('hi', 'key') returns 'hi'\n    decrypt('lm', 'key') returns 'asdfghjkl'\n    decrypt('ewhjklnop', 'key') returns 'gf'\n    decrypt('kj', 'key') returns 'et'\n    decrypt('ix', 'key') returns 'gf'\n    \"\"\"\n    cipher = 'rotate(' + cipher + ')'\n    key = 'rotate(' + key + ')'", "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\" \"\"\"\n    return alphabet.rotate(2 * 2)"]]