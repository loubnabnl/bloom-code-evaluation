[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    total = 0\n    for num in enumerate(nums):\n        total = total + num[0]\n    return total\n\nI wish someone would do this in real life.\n\nDoes anyone have a reason why this would be a poor algorithm?\n\nIt's not O(1), for one.\n\nO(n)\n\nNo, O(n log n).\n\nO(n) log n.\n\nNo, O(n log n).</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in range(nums):\n        sum_digits = float(num)\n        return sum_digits == 1\n\nReferences</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a = []\n    for num in nums:\n       a.append(sum(num[::2])**(1/9))\n    return a", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for i in range(0, nums):\n       if i < nums[0]:\n          return nums[i]\n       else:\n          return nums[i] - nums[i+1]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        if (nums[num] > num):\n            nums[num] -= 1\n            return nums[num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        if num[0] > num[1]:\n            raise ValueError(\"sum of digits should be non-negative\")\n            num = num[1:]\n            nums[num] = num\n    return nums\nThis does not take into account the number of digits, only their sum.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda num: sum(int(num[0])))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    return sum(sum(x[i] for i, x in enumerate(nums)) - x[i] for i in x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for i, x in enumerate(nums):\n       sum_of_digits = sum(int(x))\n       if sum_of_digits > 1 and sum_of_digits < 10:\n          rank = sum_of_digits % 10\n\n          if i < len(nums):\n               i = i + 1\n\n                if i == len(nums):\n                   break\n\n              if rank < 0:\n                    break\n\n    return list(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        sum = sum + num[0]\n        if sum > 0:\n            # sort it according to its index in the list\n            for i in range(len(nums)):\n                if i == num[0]:\n                       return num[i]\n    return num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums.items(), key=lambda x: x[0]*x[1]*...*x[n-1]\n    + x[n])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def return_sorted(list):\n    \"\"\"\n    Return a sorted version of list.\n    >>> return_sorted([1, 2, 3]) == [1, 2, 3]\n    >>> return_sorted([1, 2, 3, 4, 5, 6]) == [1, 3, 2, 4, 5, 6]\n    \"\"\"\n    return sorted(list, reverse=True, key=lambda x: x[1])\nI wish I'd known this trick a few months ago. I would have saved a day of work.\n\nThanks for this. I've been using the function from the numpy library for this.\n\nI'm a little confused, did I just learn that python doesn't have a built-in _sorted_ function?\n\nIt does but it is not consistent with the language's usual behavior. For example, compare it with the == operator, which is a method of the object rather than an instance of a built-in type.\n\nTo be clear, the built-in sort() is a method of the object _list_, not an instance of the built", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    counts = sum(zeros(nums))\n    return nums.sort(key=lambda n: n[0] == counts[n])</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    res = [sum(x) for x in nums]\n    return res.sort()\nI'm surprised you need that.  Wouldn't  work?\nNo, since 0 has the lowest sum of digits, and 0 is at the bottom of the list.\nOh, sorry, I didn't see that the inputs were integers.  I'm working on a project that handles floats, and I think the above code would be fine.  I didn't realize there was a difference.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(int(x) for x in numbers)\n\nReferences\n\nExternal links\n Ordering in Python's collections\n\nPython\n\nPython</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return (nums[0]*(nums[1]*(nums[2]*(nums[3]))) + nums[-1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambdax: sum(x.digits))\nA much simpler way to do this would be:\n>>> def sort_by_sum(x):\n    \"\"\"\n    Sort numbers in ascending order according to their sum of digits.\n    >>> sort_by_sum([1, 2, -2, 3, 4]) == [3, 4, 1, 2, -2]\n    >>> sort_by_sum([3, 4, 1, 2, -2]) == [4, 3, 1, 2, -2]\n    >>> sort_by_sum([4, 3, 1, 2, -2]) == [3, 4, 1, 2, -2]\n    >>> sort_by_sum([-2, 3, -1, -2, 4]) == [2, 3, 4, -2, -1]\n    \"\"\"\n    return x.sum()[:3]\n\nThis algorithm is O(n log n) and runs in constant time regardless of the input size, so it is the best choice for", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums == 0:\n         return []\n    else:\n         x = x[1:]\n         x_point = int(x)\n         return [x[0] for x in x]\n    else:\n         return [x[0] for x in x]\n\nFor anyone who didn't know, there is a regular expression for integer sorting.\nThe post also states:\n>\"if there are several items with similar sum of their digits, order them based on their index in original list.\"\nSorting is the problem there. A greedy algorithm could sort a list of a billion integers in ~ a second. That's not the bottleneck.\n\nHere's a simple implementation, which is faster than this one:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums.index(0) == 0:\n        print \"Index of the first item is 0\"\n    return 1\n    if nums.index(0) == 1:\n        print \"Index of the first item is 1\"\n    return 2\n    if nums.index(1) == 0:\n        print \"Index of the first item is 0\"\n    return 3\n    if nums.index(1) == 1:\n        print \"Index of the first item is 1\"\n    return 4\n    if nums.index(2) == 0:\n        print \"Index of the first item is 0\"\n    return 5\n    if nums.index(2) == 1:\n        print \"Index of the first item is 1\"\n    return 6\n    if nums.index(3) == 0:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if len(nums) > 1:\n        nums = list(nums)\n        sum = 0\n        for x in nums:\n            sum += x[0:9]\n            if sum > 9:\n                break\n          else:\n                break\n         if sum == 0:\n               return [x]\n        if sum > len(nums):\n               sum = sum / len(nums)\n         if sum > 9:\n                break\n         else:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    result = []\n\n    for num in nums:\n        if sum(digits(num)) > 0:\n           result.append(num)\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    n = len(nums)\n    print(\"Sorting %d elements...\" % n)\n    for num in nums:\n        x = float(num) + num[:n]\n        sum = int(x * 10)\n        index = num[-1]\n        new_index = (sum - index) + 1\n        print(\"%s %d: %s = %s\" % (num, new_index, sum))\n        print(\"\\n\")\n\nPython", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a = []\n    for i in nums:\n       a.append(nums[i])\n    return sum(a.index(nums))\n\nThe result of the program\n>>> order_by_points([1, -11, -1, 11, -12])\n[-1, -11, 1, -12, 11]\n\nshould be\n[1, 11, -1, -11, -12]\n\nIs this a bug in the program or in the logic?\n\nThis is not a bug, it's by design:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def find_sum_of_digits(nums):\n    \"\"\"\n    Return the sum of digits of the given list of integers.\n    >>> find_sum_of_digits([1, 11, -1, -11, -12]) 3\n    \"\"\"\n    return sum(nums[0] for num in nums)\n   \n    def my_sort(list):\n    \"\"\"\n    Sorts a list of integers.\n    >>> my_sort([1, 2, 3, -1, -3, 5]) == [1, 2, 3, 5, -1, -3]\n    \"\"\"\n    # loop over the elements of the list\n    for i in range(len(list)):\n       # if we have a string, split it in an integer and a remainder\n       if list[i] == str(i):\n             break\n       remainder = list[i]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda n: sum(int(n)) for n in nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    print('Sorting integers')\n    for i in range(1, nums.size):\n        nums[i] += 1\n\n    result = []\n\n    for i in range(0, nums.size):\n        if nums[i] > result[-1]:\n           result[i] = nums[i]\n           result[i].append(0)\n           nums[i] += 1\n\n    return result\n\n    def count_of_even_digits(nums):\n    \"\"\"\n    Return the number of items in the list whose sum of their digits is even.\n\n    For example:\n    >>> count_of_even_digits([1, 11, -1, -11, -12]) == 3\n    >>> count_of_even_digits([1, 11, -1, -11, -12]) == 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if num < len(nums):\n       return nums\n    else:\n       nums = [nums[0], nums[1:] + nums[2:] + nums[3:] + nums[4:]\n       + nums[5:] + nums[6:] + nums[7:] + nums[8:] + nums[9:] +\n       nums[10:] + nums[11:] + nums[12:]]\n    num_sum = 0\n    for i in range(0, len(nums)):\n       num_sum += nums[i]\n       num_sum = num_sum / 10\n       result = []\n       for i in range(0, len(nums)):\n          if nums[i] > num_sum:\n              result.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return lambda i, j: ord(sum(digits(i), digits(j)))\n\nThis is a function which sorts the given list of integers in ascending order according to the sum of their digits.\n\nIf there are several items with similar sum of their digits, order them based on their index in original list. For example:\n\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\n>>> order_by_points([]) == []\n\nReferences</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        if num[0] > num[1]:\n            num[0] = num[1]\n            num[1] = num[0]\n            sum = int(num[0]) + int(num[1])\n            if sum == 0:\n               num = 0\n              break\n              if sum < 0:\n                num = 0\n               break\n               else:\n               num = num + 1\n               return sorted(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def n_sum(nums):\n    \"\"\"\n    Returns sum of digits of the item.\n    Returns -1 if item is -1\n    \"\"\"\n    return nums[0].sum(0)\n    def __rjust__(self, *args):\n    \"\"\"\n    Return a copy of the function with an adjusted return value.\n    Return a copy of the function without adjustment.\n    \"\"\"\n    if n_sum == 0:\n       return copy(self)\n    else:\n       return copy(self)\n    return self.__rjust__(*args)\n\n>>> import sys\n>>> def loop(nums):\n    for num in nums:\n        print num\n        if num % 2!= 0:\n            break\n        else:\n            sum = n_", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sorted_nums = sorted(nums)\n    if len(nums) == 1:\n        return sorted_nums\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    numbers = sorted(nums)\n    for i in numbers:\n        digits = sum(i)\n        for j in range(len(numbers)):\n           if digits[j] > digits[i]:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sum = 0\n    lst = []\n    for i in nums:\n        sum += i\n        lst.append(i)\n    return sum / len(lst)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    while num is not None:\n        sum = num.sum()\n        if sum == 0:\n           return num\n        num.append(1)\n    return num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    first_digits = int(nums[0])\n    second_digits = int(nums[1])\n    sum = 0\n    for num in nums:\n        if sum == 0:\n           sum += num[0] * num[1]\n           sum += num[2] * num[3]\n           sum += num[4] * num[5]\n           sum += num[6] * num[7]\n           return sum, sum/nums.size\n\nSo, is there any way to implement this using itertools.permutations?\n\nSee also https://news.ycombinator.com/item?id=10705616\n\nI think this is a good way to learn Python.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums == 0:\n        return []\n    digits = sum(nums)\n    return [nums[0], nums[1], nums[2]\n    for n in range(nums.size())]\n    print(\"%s%s%s\" % (nums, digits, order_by_points(nums)))\n\nOutput:\n[1, 11, -1, -11, -12]\n[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nNotes:\n- the first element in the list is a given in the test data\n- the sum function is used to calculate the sum of the given numbers\n- the first argument of the for loop is the index of the given number in the list\n- the function is called order_by_points because this name seems more", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def __call__(self, num):\n    \"\"\"\n    Call the sorted function, passing each item as argument.\n    \"\"\"\n    sorted = [0]\n    num = num * 10 + self.get_next_num()\n    for num in range(len(nums)):\n       sorted.append((num, self.get_next_num()))\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda num: sum(digits(num)))\n\nAnd a test:\n\nimport unittest", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for i in range(nums):\n        a = sum(i)\n        a_dist = round(a / nums)\n        a_sum = sum(i)\n    return sorted(nums, key=lambda x: x[0], reverse=True, compare='<=', reverse=True, inplace=True)\n\nSee also\n Sorting algorithms\n Merge sort\n\nReferences\n\nExternal links\n Sorting Numbers - Straightforward, self-contained introduction to the n-ary sorting algorithms with a full program to implement each one.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def order_by_sum(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_sum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_sum([]) == []\n    \"\"\"\n    return sorted(nums.index, reverse=False)\n\nIt's a simple implementation but it works. I hope it helps you.\n\nElias\n\nPS: If you have a one-dimensional array you want to sort, you can just use the following function:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\nI'm not sure what the point of this exercise is.\n\nHere's a dumbed-down version:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    nums = [0] * len(nums)\n    score = 0\n    while nums:\n        nums = nums[:-1] + nums[:-1]\n        score = sum(nums[:-1]) * 10\n        nums = nums[:-1]\n\n    return nums.sort(key=lambda i, j: score[i] - score[j])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if n in range(1, 10):\n        return [n]\n    else:\n        return [n[:], n[0]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return (nums[0] * nums[1] + nums[2] * nums[3] + nums[4] * nums[5])\n\nFor the python version, I'd like to propose a simpler version:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    def main():\n    \"\"\"\n    Run the function given in order_by_points() on the given list of\n    integers.\n    \"\"\"\n    results = []\n\n    while len(nums) > 0:\n        result = order_by_points(nums)\n        print result\n        results.append(result)\n        nums = nums[:-1]\n        len(results)\n\nRun Python code in the Terminal\n\nStart the Python interpreter, and enter your program.\n\n>>> python\n>>> import sys\n>>> sys.exit(main())\n\nHow to use the prompt() function\n\nAs you can see in the following example, the Python interpreter displays the\nlist of strings you passed to the prompt() function in the default output\nstream. The data in the list is printed from left to right.\n\n>>> print(prompt('This is a simple program written in Python.'))\nThis is a simple program written in Python.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def sort_nums(list, base, out=None):\n    \"\"\"\n    Return sorted list of integers according to the base.\n    The base can be a number (default: 10) or a string that represents\n    a number.\n    If out is given, it is used as the output list.\n    >>> sort_nums([1, 11, -1, -11, -12], 'base=2') == [1, -11, 11, -12, 2]\n    >>> sort_nums('base=1', out=[]) == [1, -11, -12]\n    >>> sort_nums('base=1.5', out=[]) == [1, -11, -12, 2]\n    >>> sort_nums('base=5', out=[]) == [1, -11, -12, 5, 2]\n    >>> sort_nums('base=10', out=[]) == [1, -11, -12, 10, 2]\n    \"\"\"\n    if not out:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=int(num**(digit, 2)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    # sort the numbers\n    points = [n for n in numbers if n.isdigit()]\n    total = sum(points)\n    res = []\n    for i in range(nums.size()):\n       res.append((sum(points[i])) + total[i])\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    a, b = nums\n    while len(a) > 0:\n       a[-1] = a[-1] + b[-1]\n       if b[-1] > a[-1]:\n          break\n          b = a[-1]\n    return b\n\nunordered_set is also my go-to method for this.\n\nThere is also a very nice trick you can do for numbers that are (roughly) in the range 1.0 to 10.0.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return list(ord(nums[0]),\n    sorted(nums[1:], key=lambda x: x.index),\n    sorted(nums[2:], key=lambda x: x.index),\n    sorted(nums[3:], key=lambda x: x.index))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    return [n, sum_of_digits(n) for n in numerators]\n\n    def sum_of_digits(n):\n    \"\"\"\n    Returns sum of all digits of the given integer.\n    >>> sum_of_digits(12) = 12\n    >>> sum_of_digits(1) = 1\n    \"\"\"\n    return sum(ord(n))\n\n    def ord(n):\n    \"\"\"\n    Returns the index of the first character in the string that is equal to n.\n    >>> ord('3') = 2\n    >>> ord('3.2') = 3\n    >>> ord('3.3') = 1\n    \"\"\"\n\n    return n[1] < n[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return tuple([(i, j) for j, i in enumerate(nums) if i.sum(j) == j])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    if nums[0] > nums[-1]:\n        return [nums[0], nums[-1]]\n    else:\n        return nums[0], nums[-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a, sum, best_sum = sorted(nums, key=int(x) for x in nums)\n    return a + sum + best_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if len(nums) > 1:\n        return list(nums[0:0])\n    return [nums[0:0]*x for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return (nums[0] - (nums[0] ** 10) & 0xffffffff) / 2", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums_index = 0\n    for num in nums:\n       nums_index += 1\n    if nums_index > len(nums):\n       nums = nums[:-nums_index]\n    for j in range(nums_index):\n       if j!= 0:\n           for i in range(j+1, nums_index+1):\n               sum = sum + num[i]\n                if sum == nums[i]:\n                       nums[i] = nums[j]\n                        sum = sum - nums[i]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums = sorted(nums, key=lambda i: i[0], reverse=True)\n    nums.sort()\n    for num in nums:\n        if len(nums) == 1:\n           if num == -1:\n               return -1\n         else:\n               return num\n    return -1\n\n    def extract_digits(sorted_nums):\n    \"\"\"\n    Extract the digits from the given list of numbers.\n    Note: the first element of the list is used as index in sorted_nums.\n    >>> extract_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 7, 9, 10]\n    >>> extract_digits([]) == [1, 4, 7, 9, 10]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    num_digits = len(nums)\n    return nums[:num_digits], sorted(nums[num_digits:])\nYou should probably give more details.   What is the desired output?\nHow do you sort the original list?   How do you print the result?   How do you test the output?\n\nI would use the builtin sorted function for the sorted list:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [numerator[i] for i in enumerate(nums) if i % 10 == 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [x[0] for x in nums if sum(x[1:]) > sum(x[0])]\n\n>>> from decimal import Decimal\n>>> from operator import power, int\n>>> from operator import floor, ceil, round\n>>> from operator import not\n>>> from operator import log\n>>> from operator import div\n>>> from operator import mod\n>>> from operator import sqrt, abs\n>>>\n>>> nums = [1.0, 2.0, 3.0, 4.0, 5.0]\n>>> print(round(order_by_points(nums)))\n[-1, -11, 1, -12, 11]\n>>>\n>>> nums = [1.0, 2.0, 3.0, 4.0, 5.0]\n>>> print(order_by_points(nums))\n[1, 2, 3, 4, 5]</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums > 0:\n        return [num[i] for i in sorted(nums)]\n    else:\n        return sorted(nums)\n\nIf your first argument is an integer and you want a list, you can use xrange. For example:\n>>> xrange(1, 100000)\n>>> list(xrange(1, 100000))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums_found = [x for x in range(1,nums)]\n    for i in nums_found:\n       sum = 0\n       for x in nums_found:\n          if x[1]!= '0':\n             sum += x[1]\n           if x[1]!= '1':\n               sum += x[1]\n            if x[1]!= '2':\n                sum += x[1]\n            if x[1]!= '3':\n                 sum += x[1]\n            if x[1]!= '4':", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [num[0] + num[1] for num in nums]\nI'm no python wizard but I can tell you this isn't sorting the list.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    k = len(nums)\n    while n = k:\n       i = nums[n]\n       sum = 0\n       for i in range(k):\n          sum += num[i]\n          k += 1\n\n       return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(nums[::-1])\nI know, I know, its not pythonic... I'm just copying it from some C# code I'm working with and I'm too lazy to write it in a pythonic way.\n\nThis is a surprisingly clever approach.\n\nIt's an approach that I'd expect from Haskell, but not Python. I'm impressed.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        a = num / float(num)\n        s = float(num) + (a * 10**i) + (a * 10**j)\n        k = len(nums)\n        i = 0\n        while k > i:\n            i = i + 1\n            num = num * 10**k\n            a = a * 10**i\n            s = s + (a * 10**j)\n            k -= 1\n    return s\n         def in_order(nums):\n    \"\"\"\n    Return all integers that have the same sum of their digits.\n    Examples:\n    >>> in_order([1, 2, -1, -11", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    num_of_digits = sum(range(1,nums))\n    sorted_nums = []\n    for n in nums:\n        if n % 2 == 0:\n            sorted_nums.append(n)\n        else:\n            num_of_digits = sum(range(1,nums[0]))\n            if num_of_digits == 0:\n                  return sorted_nums\n          else:\n                 return sorted_nums[n]\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    result = []\n\n    for i in range(nums):\n       sum = nums[i] - nums[i - 1]\n\n       if sum < 0:\n          result.append(nums[i])\n\n    return result\n\nThe above is not the correct solution. The correct solution is:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if n < len(nums):\n        return nums\n    else:\n        return sort(nums, key=lambda i: i.sum(1))\n\nAs a rule of thumb, it's a bad idea to write an empty body for a function.\n\nThe return nums statement in the above code is unnecessary since the function is defined as returning the result of the call to sort.\n\nIn Python, it's typical to return a tuple.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    # Find the sum of all digits.\n    total = 0\n    while i < len(nums):\n       total += nums[i].digits[0]\n       i = i + 1\n    return total\n\nThis function, which uses a modulus operation, is not O(n), but O(n log n).</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums = [num for num in range(1, n) if num > 0]\n    n = len(nums)\n    for i in range(n):\n       if num[i] > 0:\n          sum = sum + num[i]\n          nums.append(num)\n          n += 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return (nums[0] * digits[0] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sum = 0\n    for i in nums:\n       sum += int(i)\n    return sum / int(sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def order_by_points(nums):\n    if nums.len() < 2:\n        return []\n    sorted = []\n    for num in nums:\n        sum_of_digits = int(numpd(n)) / float(len(n))\n        sorted.append(num)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def sorted(nums):\n    \"\"\"\n    Return the sorted list of numbers (in ascending order).\n    This function can return any value (not necessarily integer)\n    but it's not recommended to return values outside the range\n    (0, 9) as this may lead to unexpected results.\n    >>> sorted(123) == '123'\n    >>> sorted(1.5) == '11.5'\n    >>> sorted(10) == '0'\n    \"\"\"\n    for i, num in enumerate(nums):\n       if num[0] + num[1] == 0:\n          return sorted(num[0])\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    return [i[0] for i in nums if i[0] % i[1] == 0]\nThis is in Python 2.5, which I think I remember reading somewhere is the most widely used version of Python.\n\nPython 3.x is the most widely used version.\n\nWhy?\n\nPython 3.x is a large enough change that most of the Python libraries and projects out there won't support it for a while.\n\nI'm curious about how this works in a language like C#. Can you do something like this in C#?\n\nIf you mean sorting the array using the absolute value of the difference between the two indices, then yes, this is something that you can do in C#.\n\nAre there any languages where you can't do this?\n\nIf the numbers are strings then no, you can't.\n\nAnd if they're objects?\n\nI don't know. I don't think so.\n\nUseful for numerical computation where you don't have any other useful information to use for ordering.\n\nIt's also useful when you're trying to reverse engineer a sorted list of integers by the sum of their digits, which is a", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    print \"[+] Ordering items...\"\n    for i in range(nums):\n        print \"[*] The sum of item's digits:\", i.sum_digits\n        print \"[*] Position in list:\", i.index\n        print \"[*] Final number:\", i.sum_digits - 1\n        for digit in i.sum_digits:\n           if digit in \"0\" and digit not in \"9\":\n               i.sum_digits -= digit\n                print \"[*] Move item to the left\", i.index + 1\n                i.sum_digits -= digit\n                else:\n                 i.sum_digits +=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums.sort()\n    for i in nums:\n        nums[i] += 2\n    return nums\n\nSee also\n Sorting\n Sorting algorithm\n\nReferences</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if num is None:\n        raise ValueError('nums must be given')\n    nums = [num]\n    if nums[0] is None:\n        nums[0] = 0\n    for num in nums:\n        if num not in range(10):\n           nums[num] = 0\n           if num == 0:\n               nums[num] = 1\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda n: n.d)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(nums[0] for num in nums)\n\nThis is not true, since this is comparing list indices with string indices.\nThis is a common mistake - it's easy to make, but it's easy to avoid.\nFor example:\n>>> list(order_by_points(['a','b','c'],3)) [1, b, c]\nThis is because 'b' and 'c' have 3 characters, and thus the sum of their digits is 3. But the indices in a list are ints, so they are compared by value, not by character.\n\nCorrect. This is because the comparison operators work by value.\nFor example:\n>>> 'abc' == 'abc' False\n>>> 'a' == 'a' True\n>>> 'a' == 'b' True\n>>> 'a' == 'b' True\n>>> 'a' == 'b' False\n\nYes, it is an implementation detail.\n\nThis is a great way to illustrate the cost of using floats for everything.\n\nI agree, but that's not the point of the article. The point is that the way Python implements comparison operators is pretty arbitrary and", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    s = 0\n    for num in nums:\n        if num == -1 or num == 12:\n           break\n        s += sum(digits(num))\n    return sorted(s, key=lambda i: i[0])\n\nPython\nPython provides the built-in function sorted, which can be used to sort any type of sequence.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    k = len(nums)\n    a = 0\n    for x in nums:\n        a += x\n        if x == -1:\n            a += x*(1-x)\n            x = x+1\n    return sum(a)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    def __init__(self):\n        self.nums = [n for n in range(0, nums.size)]\n\n    def get_sum(self, num):\n        return sum(digits(num))\n\n    def __call__(self, num):\n        return sorted(self.nums, key=get_sum(num))\n\nRunning this on the examples:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda x: sum(int(x[1])))\nI don't understand what you mean by \"original list\", but you can get a sorted list from any ordered list with the built-in sort() function.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    count = 0\n    for i in nums:\n        count += i\n    return [i]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    def _sumsum(x):\n    \"\"\"\n    Return the sum of all digits of x.\n    \"\"\"\n\n    return int(x + (x % 10) - 1)\n\n    def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(x):\n    \"\"\"\n    Return a list with all elements in sorted order.\n    \"\"\"\n\n    for n in x:\n        if n == 0:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    def sort_by_points(l):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == [1, 11, -1, -11, -12]\n    \"\"\"\n\n    for i, num in enumerate(l):\n       sum = num[-2:]\n\n       if sum == 0:\n          break\n       elif sum == 1:\n          num[-1] = 1\n        else:\n          num[-2] = 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n       if num.is_negative():\n         return num\n        if num.is_even():\n         return num\n         if num.is_decimal(10):\n           return num\n         if num.is_decimal(10, 2):\n           return num\n         if num.is_decimal(10, 3):\n           return num\n         if num.is_decimal(10, 4):\n           return num\n         if num.is_decimal(10, 5):\n           return num\n         else:\n            return num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    lst = range(len(nums))\n    i = 0\n    for num in nums:\n       if num < lst:\n          i += 1\n          if (i == len(nums) - 1):\n             lst = nums[i]\n             if num > lst:\n                i = -i\n               else:\n                lst = nums[i]\n    return sorted(lst, key=lambda num: sum(digits(num)), reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a, b = zip(*nums)\n    if a[0] > b[0]:\n        return []\n    for a, b in enumerate(a, b):\n        return a[0] + sum(a[0] - sum(b[0]))\n\nThis is for the OEIS challenge.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(num**(1 + num**2))[0]\nThis is a bad solution because the indexing is done at runtime. It is quite possible that the indices are generated in a random order, which can cause the function to return the wrong results. This means that, in practice, the indexing should be done by the programmer. This will require some memory allocation, and will make the algorithm less efficient.\n\nThis would be an excellent interview question.\n\n\"for n in range(100):\" seems to be the most direct way of solving this problem. Of course, there are some caveats:\n* what if you need the first n numbers of your list?\n* what if you need the first n even numbers of your list?\n* what if you need the first n numbers of your list that are less than a certain value?\n* what if you need the first n numbers of your list that are less than a certain value, but in descending order?\n* what if you need the first n numbers of your list that are less than a certain value, but in ascending order?\n* what if you need the first n numbers of your list that are less than a certain value, and", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    n, sum_of_digits = sum(nums)\n    return sum(sum_of_digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return list(nums[::-1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if n in nums:\n        n = nums[n]\n        sum = nums[n].sum()\n        for i in range(0, len(nums)):\n            sum += nums[n].digits[i]\n            if sum > sum[-1]:\n                 nums[n].index = nums[n].index - 1\n            else:\n                 nums[n].index = nums[n].index + 1\n    return nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    points = sum([(i + j) for i, j in enumerate(nums))]\n    points_len = len(points)\n    return [p for p in sorted(points_len, key=lambda c, i: points[i] - points[c] + points_len[c]*10)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums.items(), key=lambda i: sum(i.digits())[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a = sum(nums)\n    sorted_nums = [nums[0], nums[1],..., nums[n - 1]]\n    sorted_nums.sort()\n    return sorted_nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums.items(), key=lambda i: sum(digits(i)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        s = sum(digits(num))\n        if s > n:\n             return n\n        else:\n             return num\n\nYou can use sum() in Python 2.x, but the sum() function was removed from Python 3.x.\n\nThis is one of the things that I really miss from Python 2.x. I hope that it gets put back in the standard library in a future version.\n\nThis is one of the things that I really miss from Python 2.x. I hope that it gets put back in the standard library in a future version.\n\nYou can also use operator<() to achieve the same result, so it's not too bad.\n\nYou can also use operator<() to achieve the same result, so it's not too bad.\n\nThe first example doesn't work with Python 2.6.3 on Mac OS X 10.6.3. I'm guessing it's because the compiler is still Python 2.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums = sum(nums)\n    def f(a, b):\n       return a < b\n       for i in range(num_digits):\n          if nums[i] + a == b:\n               return i\n       return f(a, nums)\n    return f(nums)\nI was expecting a more elegant solution, but hey, works. :)\n\nSorry, but this is not elegant. You're just taking the list of numbers and doing a simple comparison on each element. It's not an algorithm, it's a list of numbers.\n\nMyself, I would do something like this:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    return sum(digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums = [num for num in range(10) if sum(num.digits()) > 0]\n    return sort(nums, key=lambda x: x[1:], reverse=True)\n\nThe only problem is that it does not work with strings:\n>>> from itertools import groupby\n>>> groupby('1','2','4','5','6','7','8','9','0')\n[(1, 0, 4, 7, 8), (2, 1, 5, 6), (3, 2, 6, 9), (4, 3, 8, 0), (5, 4, 0, 1)]\n>>> groupby('')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: ''''.join is not iterable\n\nWhat would be the correct way to achieve this with strings?\n\nJust a note: you're probably using python 2.x here, and the OP is using 3.x. 3.x has a few extra methods in the itertools module (groupby and cycle), but they are not implemented for strings.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return lambda x: sorted(x.get_digits(), key=lambdax: x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    if nums:\n        print \"numbers:\",nums\n        numbers = sorted(nums, key=lambda num:sum(digits(num)))\n    return numbers", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(a[0] for a in nums)\n\nYou can also use this as a generic filter:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def sum(nums):\n    \"\"\"\n    Return the sum of all the digits in the given list of integers.\n\n    Examples:\n    >>> sum([1, 11, -1, -11, -12]) = 9\n    >>> sum([]) = 0\n    \"\"\"\n    return nums[0:1]+nums[1:]\n    def lexicographically(nums):\n    \"\"\"\n    Return the lexicographically smallest index of each item in the given\n    list of integers.\n\n    For example:\n    >>> lexicographically([1, 11, -1, -11, -12]) == [1, 11]\n    >>> lexicographically([]) == 0\n    \"\"\"\n    return list(nums[0:-1])\n    def numbers(nums):\n    \"\"\"\n    Return a sorted list of integers in ascending order according to the\n    given list of integers.\n\n    Examples:\n    >>> numbers([1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if n == 0:\n         return []\n    a, b, c = nums\n    while n > 0:\n         s = sum(a, b, c)\n         if s == 0:\n             break\n             a, b, c = (a, b, c, n - 1)\n    return a", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums.values())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a = 0\n    for num in nums:\n       b = num.ljust(10)\n       if b > a:\n          a = b\n          break\n    return num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums.count() == 0:\n        return []\n    else:\n        nums_to_sort = [nums[0] for num in nums]\n        indices = sorted(nums_to_sort.items(), key=lambda num: nums[num] - 1)\n        result = []\n        for num_index in indices:\n           result.append(nums_to_sort[num_index] - sum(nums_to_sort[num_index] ** 10))\n           index = num_index\n           num_to_sort = num\n           sorted_nums = sorted(nums_to_sort, key=lambda num: index)\n           num_indices = num_to_sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    numbers = sorted(nums, reverse=True)\n    sorted_nums = sorted(numbers, reverse=True)\n    for num in sorted_nums:\n        sum_of_digits = int(num * (num / 10))\n        sorted_nums.sort(key=lambda num: sum_of_digits)\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    s = 0\n    while nums > 1:\n       sum = sum + nums[0]\n       if sum > 0:\n          s += 1\n          nums[0] += 1\n          break\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    rank = [0]\n    for num in nums:\n       sum = num*sum + 1\n       if sum < 0:\n           return sum\n           if sum == 0:\n               return 0\n              if sum == 1:\n                 return 1\n               else:\n                 return sum\n                if rank[sum] > rank[num]:\n                   rank[num] = rank[sum]\n    return rank\n\nThe above is correct in Python 3.\n\nIn Python 2, the correct implementation of this is", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums = sorted(nums)\n    print \"Sort list of integers\"\n    print \"to:\"\n    print \"ascending order according to sum of digits\"\n    print \" -->\"\n    for num in nums:\n       print num + \"\n       \"\n    return nums\n\nPython", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def print_sums(nums):\n    \"\"\"\n    Write a function which prints all of the integer sums in ascending\n    order.  The function should print the index of the list\n    item, followed by the integer sum of its digits.\n    This function should be called for each item in the list.\n\n    For example:\n    >>> print_sums([1, 2, 3, 3, 3, 5])\n    1: 0\n    2: 6\n    3: 3\n    3: 6\n    5: 3\n    \"\"\"\n    nums = [numbers.next() for numbers in numbers]\n    while len(nums)!= 0:\n       print_sums(nums[:-1])\n       numbers.next()\n       nums.append(nums[:-1])\n    return nums\n\nSee also\n Python Standard Library module: sorted\n\nReferences</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return numpy.sorting.order_by(nums.sum(i*i, dtype=int)<=1)\n\nThat's a terrible algorithm. It is O(n log n), where n is the size of the list.\nYour better off with an O(n) algorithm using a sorted linked list or queue.\n\nI wrote a Python version of this a while back, which uses a \"sum of digits\" sort: \n\nI just wrote my own sum-of-digits sort too, just to compare.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def fn(nums):\n    \"\"\"Sort the given list of integers according to their sum of digits\n    i.e. sort the numbers in increasing order according to their sum of\n    their digits.\n    >>> fn([1, 11, -1, -11, -12]) == [1, 11, -12]\n    >>> fn([]) == [1]\n    \"\"\"\n    for i in nums:\n        if i % 3 == 0:\n              return i\n               return fn(i - 1) + fn(i)\n    return sorted(nums, key=lambda x: x[1], reverse=True)\n\nI'm confused, this doesn't work correctly.\n\nWhat does it do wrong?\n\nIt's not outputting the numbers in ascending order. In fact, it's not even\nsorting them correctly.\n\nThis is a slight modification of the algorithm. I think it works, I'm not sure", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [int(nums[i] + 1) for i in range(1, len(nums) - 1)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [num[i] for i in nums if i % 3 == 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if n < 3:\n        return n\n    else:\n        return [n[0]*n[1] for n in nums]\n\nIn Python:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    nums = [n for n in range(nums.count())]\n    return sorted(nums, key=lambda x: sum(x[:8]), reverse=True)\n\n    # Fix range() issues (see PEP 331)\n\n    def range(x):\n    \"\"\"\n    Return a new iterator which, when iterated, returns the elements\n    of x starting from the beginning.\n    \"\"\"\n    x = x[0]\n\n    return x\n\n[1] When we find an iterator that seems to be broken, we can just add it to\na list and only then try to use it. If we try to use it directly we will\nget a ValueError.\n\n[2] Here we're using range() which returns a new iterator. But range()\ncreates its own iterator and so we can't use it like we would use\nx[i]. Instead we have to use range(x) to get an iterator that we can\nuse directly.\n\n[3] This function uses a lambda expression. Lambda expressions are\nvery similar to functions,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for i in nums:\n        for digit in range(1, numpad(i, 0):):\n           if digit in sum(nums[i] for i in range(1, len(nums) - 1)):\n               sum_digits[i] += digit\n               i += 1\n    return sum_digits[-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a = []\n    for i in range(1, nums.count):\n       a.append(nums[i].sum(digits=True)\n       if digits:\n          if a[i] < a[i+1]:\n             a[i]=a[i+1]\n        else:\n             a[i]=a[i+1]\n    return a\n\nWhat's wrong with this code?\n\nI'm not very familiar with Python, but that looks like a list comprehension, which is a way of expressing a loop that uses a list as its iterable, and a function as its body.\nIn this case, you've written a comprehension with a function that has a parameter that it never uses. I'm guessing this is where the error is.\n\nI think the error is in the `if digits:` clause, which is not executed.\n\nYou're right. I missed that, thanks.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [sum(i) for i in enumerate(nums)]\n\nThis is a little out of context. I don't know what this does, or how it does it. I don't know if it works with arbitrarily large numbers, and I don't know if it sorts the numbers in the original list.\nI would rewrite it as:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def rank(nums):\n    \"\"\"\n    Write a function which determines the position of the first item in\n    the given list of integers.\n    Example:\n    >>> rank(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'])\n    1\n    >>> rank(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'],\n    '-')\n    -1\n    \"\"\"\n    return sum(x for x in nums if x % 10 == 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    t = len(nums)\n    if t > 0:\n        result = []\n        i = 0\n        for num in nums:\n            if num % 10 == 0:\n                 result.append(num)\n                i = i + 1\n    return result\n\nIt took me a while to figure out what this function is supposed to do, but here's what I got:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(str(nums[0]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(**nums) + 1\n\n    def unique(nums):\n    \"\"\"\n    Write a function which returns True if the given list of integers\n    has any duplicate elements.\n    Note: you should take care of the order of elements in the list.\n    Note: This function will be used in order_by_points to check if the\n    given list has any duplicate elements.\n\n    For example:\n    >>> unique([1, 2, 3]) == False\n    >>> unique([2, 3, 1]) == True\n\n    >>> unique([1, 2, 3]) == True\n    >>> unique([1, 2, 3, 4, 5, 6]) == False\n    \"\"\"\n    return zip(nums, (**nums[0] if nums[0] in nums else 0)) == zip(nums, nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    def __init__(self):\n    self.nums = list(range(3))\n    return set(self.nums)\n\n    def add_sum_of_digits(num):\n        return sum(num[::-1])\n        return []\n\n    def __call__(self, num):\n        for num in self.nums:\n           if num[::-1]!= 0:\n                num += add_sum_of_digits(num)\n               num = num[::-1]\n\n        return sorted(set(self.nums), key=lambda i: sum(i[::-1]), reverse=True)\n\nnums = [2, 3, 4, 5, 6]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def sum_digits(nums):\n    \"\"\"\n    Write a function which calculates the sum of the digits of the\n    given list of integers in ascending order.\n    Note: sum_digits() should always return the same value when the same\n    list is passed.\n    For example:\n    >>> sum_digits(1, 2, 3) == 4\n    >>> sum_digits(1, 2, 3) == 4\n    >>> sum_digits([1, 2, 3]) == 6\n    \"\"\"\n    return sum(0, nums.index(0)).sum()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    sum = 0\n    for i in nums:\n       sum += i\n    return sum\n\nreturn", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    result = [nums[0] for nums in nums.items()]\n\n    for i in range(0, len(result)-1):\n       if i % 10 == 0:\n          if i % 10 > 0:\n                result[i] = result[i] + 1\n\n          else:\n               result[i] = result[i] + 1\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [n for n in nums if n.sum() > 0]\nI think I have the gist of it.  Now I just need to figure out how to modify it to include the digits as well (as opposed to the sum).</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    # For each number in the list and in order of increasing index,\n    # add the sum of digits of the number to be summed.\n    for num in sorted(nums):\n       for num_digit in sorted(num.split(',')):\n          num_sum += num_digit\n    return num_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    nums = [1, 3, 1, 8, -1, -9, 10, -1, -11, -10, -1, 0, 7, 1, 3]\n\n    return [nums[0] * nums[1], nums[1] * nums[0],\n    nums[2] * nums[0], nums[3] * nums[1], nums[4] * nums[1],\n    nums[5] * nums[1], nums[6] * nums[2], nums[7] * nums[1],\n    nums[8] * nums[3], nums[9] * nums[2], nums[10] * nums[3],\n    nums[11] * nums[4], nums[12] * nums[5], nums[13] * nums[6],\n    nums[14] * nums[7], nums[15] * nums[4], nums[16] * nums[5", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    out = []\n\n    while len(nums):\n        out.append(nums[i])\n\n    out.sort()\n\nThe way I did it was to compare the leftmost digit of each number in the list. If the leftmost digit was greater, then I added that number to the output list. Otherwise I added that number to the output list and decremented the leftmost digit in the next number in the list until it became greater, then I continued until I got to the end of the list.\n\nThis is ugly, but it works. (the original code had no error handling)\n\nIt is also faster to do the addition and decrement of the leftmost digit of a number at a time. If you sort the numbers first, then you are doing the comparison and the addition on each number in the list at the same time, which is slower.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return nums[0]*(nums[i] - nums[i-1]) - nums[i+1]*(nums[i+1] - nums[i]);", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    n = len(nums)\n    res = []\n    for n in nums:\n       if n[0] > n[1]:\n          if n[0] < n[2]:\n                break\n                       else:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    print(\"order_by_points(%d):\" % nums)\n    for i in range(nums):\n       sum = sum(i)\n       i = i + 1\n       for j in range(i+1, nums+1):\n          if sum(j)!= sum:\n             i = i + 1\n             j = j + 1\n             print(\"%s: %s\" % (i, j))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [n] + [sum(x[0:n] for x in numbers) for x in numbers]\n    def example(nums):\n    \"\"\"\n    Write a function which shows how to apply the order_by_points() function\n    to sort a list of integers.\n\n    For example:\n    >>> example([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> example([]) == [1, 11, -1, -11, -12]\n    \"\"\"\n    return [n] + [sum(x[0:n] for x in numbers) for x in numbers]\n\nSee also\nBubble sort\n\nExternal links\n\nPython's built-in function is called \"orderby\".</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for i in range(len(nums)):\n        sum = sum(nums[i])\n        return sort(nums[i], key=operator.itemgetter(nums[i],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    total = 0\n\n    for n in nums:\n        total += n.getdigits()\n\n    return sum(total)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    def sum_of_digits(num):\n       return (num**(num-1)) + num\n   \n    def f(nums):\n       nums = nums.sort()\n\n       return sum_of_digits(nums[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    # I have written this as iterative, but list comprehensions are\n    # allowed, too\n    for num in nums:\n        if (num % 10) == 0:\n            total = sum(digits(num))\n            num += 1\n    return sorted(total, key=lambda i:i % 10, reverse=True)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda s, i: sum(i ** 10 for i in s) - sum(i ** 9 for i in s))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sorted = []\n    # 1st comparison\n    for num in nums:\n        s = int(num)\n        if int(s) > int(sum(s))) + 1:\n            s = int(s)\n        sorted.append(num)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums.items(), key=lambda num: sum(int(num)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    total = 0\n    for i in range(1, len(nums)):\n        total += nums[i]\n    return total", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    total = 0\n\n    for i, item in enumerate(nums):\n        total += item[0]**item[1:]\n\n    return total\n\n    print order_by_points([1, 11, -1, -11, -12])\n\n    # output:\n        [1, -11, 11, -12]\n    # output:\n        []\n\n    print order_by_points([])\n\n    # output:\n        []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sorted_nums = [0 for num in nums if sorted_nums[num] == num]\n    for num in sorted_nums:\n        temp = num + 1\n        sum = sum + temp\n        if sum == 0:\n           return num\n                   else:\n                    return sorted_nums[num]\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    result = []\n    for i in nums:\n       if i % 5 == 0:\n           result.append(i)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda x: sum(x.digits))\n\nThe translation is one-to-one; no assumptions about the language are made. This is the simple sort function:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if len(nums) > 1:\n        nums = [n for n in nums if n >= 0]\n        sum = 0\n        for n in nums:\n           sum += n * 10\n    return sum[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    # Declare function\n    def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Define the input type\n    # If we have a list of integers,\n    # we will return the sum of their digits\n    # in ascending order.\n    #\n    # If we have a list of floating points,\n    # we will return the sum of their digits\n    # in ascending order.\n    #\n    # For now, assume that we will be", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a = nums[0]\n    b = nums[1]\n    return a + b", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    # Calculate the sum of the digits\n    sum = 0\n    for num in nums:\n       sum += num[::-1]\n    return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    return sorted(nums, key=lambda i: sum(digits(i)))\n\nThis works perfectly fine, except in Python 2.5, when it fails. However, it works fine in 2.4, which is currently installed on my machine.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sorted = sorted(nums)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda x: sum(digits(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return numpy.sum(nums, axis=1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    def sorted_nums(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sorted_nums([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sorted_nums([]) == [1, 11, -1, -11, -12]\n    \"\"\"\n\n    for num in sorted(nums):\n        num /= 10\n\n    return sorted(num)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def sorted(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sorted([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sorted([]) == []\n    \"\"\"\n    nums = sort(nums, key=lambda num: num.d)\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sum(nums[1:]) - sum(nums[:-1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def sort(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum\n    of their digits.\n\n    \"\"\"\n    for num in range(nums):\n       if sum(digits) == num:\n          num += 1\n    return num\n    return sort\n    def check(nums):\n    \"\"\"\n    Test that the list of integers in given order is sorted by sum of their\n    digits.\n    \"\"\"\n    for num in range(nums):\n       print(nums[0], \" \", digits[0], \" \", digits[1], \" \", digits[2])\n       print(nums[0], \" \", digits[0], \" \", digits[1], \" \", digits[2])\n       print(nums[0], \" \", digits[0], \" \", digits[1], \" \", digits[2])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sorted_nums = []\n    for i, num in enumerate(nums):\n        if num % 10 == 0:\n            sorted_nums.append(i)\n           num_sum = num / 10\n         if num_sum > 0:\n             num = num - 10\n            num_sum = num / 10\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        if num.isdigit():\n           # a number\n             # in integer notation\n              # is considered to have 1 digit\n               # so it will not contribute to the sum of digits\n               # of the item (will be ignored)\n               # in sum(digits) function\n               # and will be sorted last\n               # (last)\n               # so it will be not a part of the result\n                # of the sort operation\n                 # in", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    num_digits = int(nums[0])\n    return nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    a = 0\n    while a < len(nums):\n       a = a + sum(nums[a:])\n    return [a]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    points = list(nums)\n    best = 0\n    while len(points) > 0:\n        points = [x for x in points if x[0]!= 0]\n        best += sum(points[best:])\n        if best > points[-1]:\n           points[-1] = points[best]\n        else:\n           points[-1] = points[-1] - best\n        best = points[-1]\n    return list(best)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums:\n        return [nums[i] for i in enumerate(nums)]\n    else:\n        return []\nWhat kind of problem is this? A test of some kind?</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums > 0:\n        sum = 0\n        for i in range(nums+1):\n           sum += nums[i]\n           nums[i] = sum\n        return sum\n\nThis was my first thought. In a real-world scenario, though, this could be much more expensive than just sorting the list.\n\nI assume it is O(n) where n is the number of digits.\n\nIf you wanted to sort a list of 100,000 numbers, it would still be O(n) (the time complexity of bubble sort is O(n log n), but if the numbers are small it is possible to do a much faster sort).\nBut this is the programming subreddit, so the question is of interest to programmers.\n\nI'm sure there are more interesting programming challenges out there than just this trivial one.\n\nThis is a very interesting one. It makes you think about the problems that you would solve with a programming language.\nI'm sure that in Python, you would", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        total = 0\n        i = num\n        while i > 0:\n            total += num[i]\n            i -= 1\n            return total", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    result = []\n    for num in nums:\n        result.append(num[0])\n        result[0] = sum(num[1:])\n    return result\n> What I want to say is that it is not necessary to put\n> everything in one file.\nWhat do you mean?\n> When you have a block of code which is a module, you can just\n> put it in a file and use it. That's what I mean.\nThis is a good practice and very useful in large projects with many\ndevelopers. I think this is another point of confusion. The\nabove-mentioned example is not a module, it's a function. A module\nis a collection of functions, classes, constants, and imports which\ncan be imported or used within the same file. This makes it easier\nto develop large, multi-file programs. If you look at the\ncode, you will see that it is in fact a module, but we haven't\nimported it anywhere yet.\n> Writing functions separately is just one of many solutions.\n> For example, you can also write", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if nums[0] > nums[1]:\n       return nums[0]\n    else:\n       return nums[1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n        if num.isdigit():\n           sum = num.sum()\n           return sorted(num.index(nums), sum)\n\nSee also\nList of summation algorithms\nList of numerical sorting algorithms\n\nReferences\n\nExternal links\nPython summation module documentation</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(set([nums], key=lambda x: x.sum(digit=1)[0]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    def sorted(x):\n        # assume that x is a tuple of integers (x[0], x[1],..., x[n-1])\n        y = [x[i] for i in x]\n        return x[1] > x[2] >... > x[n-1]\n    return sorted\n\nThat's the right answer, but:\n(1) is not a valid option, as the method is supposed to be a function, not a lambda.\n(2) is not a valid option because the function is expected to return a tuple, not a boolean.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    sorted = sorted(nums)\n    print sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return sorted(set(nums), key=lambda x: x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return [nums[0] for num in sorted(nums)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    if n is None:\n        return [n[0]]\n    return sum(numerate(n))\n\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == [1]\n>>>\n\nThis is not about \"order by points\" but about a simple \"sorting\".\n\nIn Python, the `sorted()` function does the sorting.\n\nIn this case, you can't really write a function to sort the numbers. You\nneed to have a function that takes the numbers and returns the sorted\nlist.\n\nIn this case, there is no built-in way to tell Python to sort the list\naccording to the sum of the digits of each number. You need to write a\nfunction that does that.</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    return nums.sort(key=int(nums[-1]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    nums = []\n\n    for num in nums:\n        nums.append(num.decode(\"utf-8\")[:-1] + num.decode(\"utf-8\")[:-1])\n        nums.append(num.decode(\"utf-8\")[:-1] + num.decode(\"utf-8\")[:-1])\n    nums.append(num.decode(\"utf-8\")[:-1] + num.decode(\"utf-8\")[:-1])\n    nums.append(num.decode(\"utf-8\")[:-1] + num.decode(\"utf-8\")[:-1])\n    nums.append(num.decode(\"utf-8\")[:-1] + num.decode(\"utf-8\")[:-1])\n    nums.append(num.decode(\"utf-8\")[:-1] + num.decode(\"utf-8\")[:-1])\n    nums.append(num.decode(\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n    return [n for n in range(len(nums) + 1)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    for num in nums:\n         sum = sum + num[0]\n         if sum < 0:\n              raise ValueError, \"Must be positive\"\n              return sum\n          if sum > 0:\n               return sum\n    return sorted(nums, key=sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n\n>>> print order_by_points([1, 2, 3])\n[1, 3, 2]\n\n>>> print order_by_points([1, -1, -11, -12])\n[-11, -1, 1, -2, 12]\n\n>>> print order_by_points([])\n[]</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\" \"\"\"\n    # The sum of digits is the number of leading zeros.\n    def _sum_of_digits(nums):\n        nums.sort()\n        return int(nums[0]) + int(nums[1]) + int(nums[2]) +... + int(nums[-1])\n    return _sum_of_digits"]]