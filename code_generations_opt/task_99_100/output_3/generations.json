[["def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def __init__(self, value, precision=1):\n    self.value = value\n    self.precision = precision\n\n    def __eq__(self, other):\n    return self.value == other.value\n\n    def __lt__(self, other):\n    return self.value < other.value\n\n    def __ge__(self, other):\n    return self.value > other.value\n\n    def __ne__(self, other):\n    return self.value!= other.value\n\n    def __gt__(self, other):\n    return self.value >= other.value\n\n    def __le__(self, other):\n    return self.value <= other.value\n\n    def __ge__(self, other):\n    return self.value >= other.value\n\n    def __lt__(self, other):\n    return self.value < other.value\n\n    def __ge__(self, other):\n    return self.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    for i in range(1, 8):\n       if value[i] < value[i+1]:\n          return i\n      else:\n          return i+1\n\nThe above Python snippet shows how to find the closest integer to a given number in the range 1\u20138. The range in which you would find the closest integer to a number is called the \"interval\".\n\nThe above code snippet returns the value 7. This is because the value 10 is equidistant from 7 and 8 and as such, it is rounded away from zero. The value is returned as 7 because 7 is greater than 8.\n\nReferences\n\nFurther reading\n Douglas Crockford, Javascript: The Good Parts, Third Edition..</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value) > 0", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n        return 0\n    if int(value) == value:\n        return int(value)\n    else:\n        # if the given number is equidistant from two integers, we\n        # round it away from zero\n        if int(value) == value:\n           return int(value)\n          else:\n            return int(value - int(value))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value > 0:\n        return max(float(value), 0)\n    elif value == 0:\n        return -max(float(value), 0)\n    else:\n        return int(value)\n\n'''\n\nNotes\n\n1. The function's name and its parameter name must match.\n\n2. The type of value must match the type of the function's parameter.\n\n3. The function's return type must be either int or float.</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value.isdigit():\n       return value\n    return -value\n\nimport sys", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    # Create a function that returns the closest integer to the given value\n\n    def closest_integer(value):\n    if value[-1] == '0':\n        return -value\n    elif value[-1] == '1':\n        return value\n    else:\n        return 1.0 - value[-1]\n    return value\n\nSee also\n Integer\n Integer factorization\n Numerical algorithm\n Integer programming\n Integer factorization\n\nReferences\n\nExternal links\n Numerical Algorithms: Euclidean algorithm, fastest integer-factoring algorithm\n Binary to decimal converter\n Integer Factoring Calculator\n Integer Factorization by Integer Factorization Algorithm\n Integer Factorization</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value == '':\n        raise ValueError, \"Must have a value\"\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    if value == \"0\":\n       return 0\n    else:\n       nearest = -1\n    while value < nearest:\n       value = value - nearest\n       if value", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Return the closest integer to the given number.\n    >>> closest_integer('11.5')\n    11\n    >>> closest_integer('0.1')\n    -10\n    >>> closest_integer('-0.1')\n    -10\n    >>> closest_integer('0.1')\n    10\n    \"\"\"\n    value_by_x = int(value)\n    if value_by_x == 0 or value_by_x == 1:\n       value_by_x += 1\n    return value_by_x\n\nTo get the closest integer, you can use the function in the following way:\n>>> closest_integer(3.14)\n\nThe answer is 3, because 3 is the closest integer to the number\n3.14.\n\nIf you enter an invalid number as input, the following exception is\nraised:\n\nTraceback (most recent call last):\nFile \"\", line 1, in\nType", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return sum(int(value), 2) == value", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    if value == \"0\":\n       return 0\n    else:\n       return int(math.floor(value))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def __closure__(self, value):\n    if value == '-':\n        return -1\n    else:\n        return self.__closest__(value)\n    return self\n\nI believe the -1 is unnecessary.\n\nIt's not. It's required for the following code to work:\n>>> closest_integer('-1')\n-1\n>>> closest_integer('')\n-1\n\nIt looks to me like you could do:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    number = int(value)\n    if number < 0 or number == 0:\n       return 0\n    return max(int(number - 1), int(number + 1))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n        return 0\n    if value > 0:\n        return value\n    if value == 0:\n        return -value\n    return -value + int(value, 16)\n\nIn this case it would be better to use modulo\nreturn -value % 16\n\nIt would be even better to use a modulo of the maximum integer, that is, 16*2^N. This makes the result closer to the integer which is as close to the given one as possible.\n\nI've been looking for a way to do this in Python for some time, and the closest I've been able to find is the following:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Return the closest integer to a given value.\n    >>> print closest_integer('10')\n    10\n    >>> print closest_integer('15.3')\n    15\n    >>> print closest_integer('14.5')\n    15\n    >>> print closest_integer('-14.5')\n    -15\n    \"\"\"\n    if value == '-':\n       return 0\n    else:\n       return len(int(value),2)\n\nHere's a more useful version, that will also tell you how many significant digits it has:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    '''\n    '''\n    '''\n    '''\n    '''\n    '''\n    if value[0] == 0:\n        return 0\n    else:\n        return value[1:] - value[0]", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0 or value == 1:\n       return 0\n    return int(value, 16)\n\nThis is a classic example of how to create a function that does one thing well.\nHowever, it does so by doing a lot of little things badly. There's a lot going on\nhere.\n\nFirst, you need to make a call to int() to extract the integer part of the\nvalue you're trying to convert. Then you make a call to round() to round the\nresult to the nearest integer.\n\nThe first problem with this approach is that we're using two of Python's\n\"magic numbers\": 0 and 1. To do this, you have to use a condition test:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return floor(value%10) - floor(value%100)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value in [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]:\n       return value\n    if value in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]:\n       if value > 0:\n          return value\n         if value > 1:\n           return value\n         if value > 2:\n           return value\n         if value > 3:\n           return value\n         if value > 4:\n           return value\n         if value > 5:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == \"0\":\n        return -1\n    else:\n        return int(value)/2\n    print(closest_integer(value))\n\nFurther reading\n\nWrox Programmer to Programmer is brought to you by LinuxPlanet, the community-driven Linux documentation project. If you like this article, please consider showing your appreciation by clicking the \"Like\" button at the top of the page. Or, view the HTML version of the article.\n\nPlease enable JavaScript to view the comments powered by Disqus.\n\nDisqus</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    # 1. Get the length of the string\n    len = value.find('.')\n    # 2. Split the string into a sequence of digits\n    values = value.split('.')[0]\n    # 3. Split the sequence of digits into a sequence of pairs of\n    digits (one from the left and one from the right)\n    pairs = values.split('.')[0]\n    # 4. Search for the closest integer\n    found = []\n\n    # 5. For each pair, search for the closest integer, using\n    the pair as the key\n    for j in pairs:\n       if j == 0:\n          found.append(0)\n       else:\n          found.append(j)\n       # 6. If the number is equidistant from two integers,\n    # round it away from zero\n    if len(found) == len(values):", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)\n    if value == \"\" or value == \"\" and value == 0:\n       return -int(int(value))\n    return int(int(value))\n\nimport math", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == '0':\n       return 0\n    if value == 'NaN':\n       return NaN\n    if value == '+':\n       return max(max(value), min(min(value), 10))\n    return min(max(value), min(max(value), 10))\n\nThis code is written for Python 2.7, but is guaranteed to work in Python 2.6 and 2.7.  It will not work in Python 3, because the __future__ keyword is not supported.\n\nIf you run the above code in Python 2.7, the output will be as follows:\n\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n\nReferences\n Python 2.7 tutorial: http://docs.python.org/tut/\n\nExternal links\n\n__future__\n__future__\n__future__", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    value = str(value)\n    if value.lower() == '0':\n       return -value\n    elif value.upper() == '9':\n       return value\n    else:\n       return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n      def closest_integer(value):\n        if value in [0,1,2]:\n           return value\n        else:\n           return (value / (2**25)) + 1", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    # return a class object whose __closest__ method returns the closest\n    # integer to the given value\n    return ValueClosestInt\n\n2.2 Compiling and executing a program\n\n2.2.1 Compilation\n\nIn a Python script, the following line starts the compilation of the file:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    Returns the closest integer to the value.\n    >>> closest_integer('12.34')\n    12\n    >>> closest_integer('12.34')\n    12.3\n    >>> closest_integer('12.34')\n    12.1\n    >>> closest_integer('12.34')\n    12.2\n    >>> closest_integer('12.34')\n    12.5\n    >>> closest_integer('-12.34')\n    12.6\n    >>> closest_integer('12.34')\n    12\n    >>> closest_integer('-12.34')\n    12.6\n    >>> closest_integer('-12.34')\n    12.8\n    >>> closest_integer('12.34')\n    -12.1\n    >>> closest_integer('-12.34')\n    -12.2\n    >>>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    return int(value)\n    if value < 0:\n       return -value\n    return int(value)\nThis is not pythonic and it's not even that efficient.\n\nI've always wondered why python doesn't have negative numbers? I remember a conversation a friend and I had about this in college and we couldn't think of a good reason.\n\nIt's because it's a self-hosting language. Python is a language for writing interpreters, so it can't have any features that would be hard to implement in an interpreter. That includes negative numbers.\n\nI'm not sure that makes sense. You don't need to implement a negative number into an interpreter, you just need to \"not do anything\" when you try to use one. You can do this in any language.\n\nNo, not really.\nWhat if you have a negative number and you want to subtract a positive number? Or add a positive number?\nIf you have two numbers and you want to find the difference between them, you have two choices:\n1) Print the numbers and their absolute values.\n2)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    for i in range(len(value)):\n    if value[i] == value[i+1] or value[i] == value[i-1]:\n       return -1\n    else:\n       return int(value[i])", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == \"0\":\n       value = \"0\"\n    return abs(value)\n    if value in ('-', '+'):\n       value = \"0\"\n    return abs(value)\n    return floor(abs(value))\n\nimport operator", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value) if value!= 0 else round(value, 1)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(int(value))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    if value.isdigit():\n       return value\n    else:\n       return floor(value)\n    print(\"-\")\n\n    for x in range(1, 100):\n       print(x, closest_integer(x))\n    -11\n    -1.1\n    -9.9999999999999999\n    -1.0\n    -0.9\n    -0.7\n    -0.5\n    -0.3\n    -0.1\n    -0.0\n\nimport random", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n       if int(value) == 0:\n          return 0\n       else:\n          return int(value) < int(value) + 1", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    print \"%d\", closest_integer(\"10\")\n    print \"%d\", closest_integer(\"15.3\")", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == '0':\n        return 0\n    elif isinstance(value, int):\n        return isinstance(value[0], int)\n    else:\n        return -1\n\nYou can also make it work for floating point numbers.  Python has a special\ntype for this, called float.  The following function returns the closest\nfloating point number:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value:\n       return value\n    number = 0\n    while number < value:\n       if number == -number:\n         return number\n       if number == number:\n         return number\n    number = number - 1\n    return number", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    number = int(value)\n    if number == 0:\n        return -1\n    else:\n        return closest_integer(number - 0.5)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Return the closest integer to a given string.\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"-11.2\")\n    -11\n    \"\"\"\n    # Make the function that returns the closest integer to a given number\n    def closest_integer(number):\n    # If the given number is not an integer, return None\n    if number is None:\n       return None\n    # If the given number is greater than INT_MAX, return None\n    if number > INT_MAX:\n       return None\n    # If the given number is smaller than INT_MIN, return None\n    if number < INT_MIN:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value in [0, 1, -1]:\n       return int(round(value, 2))\n\nAnd a test:\n>>> from mpl_testing import TestCase\n>>>\n>>> class TestNearest()\n>>>:\n>>> def test_return_value_of_closest_integer_for_integer_values_only(self):\n>>> with self.assertRaises(Failure):\n>>> value = 10\n>>> expected = int(round(value, 2))\n>>> actual = closest_integer(value)\n>>> assert value!= expected\n>>>\n>>>\n>>>\n\nAssertionError:\nAssertionError: Value not of integer type:\n     10\n\nThat's not entirely true. When you make a \"normal\" assert() it expects\nonly a number. When you use `AssertRaises` you can check for other types\ntoo. So you could do this:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    for i in range(len(value)):\n       if value[i] == 0:\n          return value[i-1]\n       else:\n          return int(value[i]) - int(value[i+1])", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    return math.abs(value) < math.abs(0)\n\n>>> list(map(int, closest_integer, range(10))[0:9])\n\n10 10 10 10 10 10 10 10 10 10 10\n\n>>> list(map(int, closest_integer, range(10))[0:9])\n\n10 10 10 10 10 10 10 10 10 10 10\n\n>>> list(map(int, closest_integer, range(10))[0:9])\n\n10 10 10 10 10 10 10 10 10 10 10\n\n>>> list(map(int, closest_integer, range(10))[0:9])\n\n10 10 10 10 10 10 10 10 10 10 10\n\n>>> list(map(int, closest_integer, range(10))[0:9])\n\n10 10 10 10 10 10 10 10 10 10 10\n\n>>> list(map(int, closest_integer, range(10))[0:9])\n\n10 10 10 10 10 10 10 10 10 10 10\n\n>>> list(map(int, closest_integer, range(10))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n       return 0\n    else:\n       return value", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Given a value (string) representing a number, return the closest\n    integer to it. If the number is equidistant from two integers,\n    round it away from zero.\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"-11.5\")\n    -11\n    >>> closest_integer(\"-11.5\")\n    -11\n    >>> closest_integer(\"-11.5\")\n    -11\n    >>> closest_integer(\"-11.5\")\n    -11\n    >>> closest_integer(\"-11.5\")\n    -11\n    >>> closest_integer(\"-11.5\")", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value[-3:]!= \"-\":\n       return value[-1:]\n    return int(value[1:])\n\nI think the best solution is to check for a base-10 number:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == \"\" or value[0] < 0:\n       return 0\n    if value[1] > 10:\n       return -10\n    if value[1] == 10:\n       return 10\n    if value[1] < 10:\n       return 10\n    if value[0] == 0:\n       return -10\n    return value[0] + (value[1] - 10)</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n       if value > 0:\n          return value\n       else:\n          return -value\n\nSee also\nClosest integer\n\nReferences\n\nExternal links\n Python - Python.org\n Programming - Python.org</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == '-':\n       return 0\n    if value == '0':\n       return 1\n    if value > 1:\n       return value + 1\n    if value < 0:\n       return value - 1\n    return min(int(value), int(value + 1))\n\nPython has a built in function that does this for you:\n>>> nearest(10)\n10\n>>> nearest(15.3)\n15\n>>> nearest(-14.5)\n-15\n\nThat's a really interesting approach! However, what happens if you want to do it the other way around? For example, what if you want to take a string and find the nearest integer to it?\n\nI'm not sure exactly what you're asking for but there is a built in function called \"int()\" which will return a number (or a negative number) from a string:\n>>> int('10')\n10\n>>> int('11')\n11\n>>> int('-13.5')", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    Try to return the closest integer value to the given value.\n    If the given value is equidistant from two integer values, round it away\n    from zero.\n    If the given value is zero, return the integer value zero.\n    If the given value is negative, return the integer value -1.\n    If the given value is greater than the max value, return max - value.\n    If the given value is less than the min value, return min + value.\n\n    x = int(value)\n    if x == 0:\n        return 0\n    x = round(x * (1/abs(x)) ** 2 + 1)\n\n    return max - x", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number and\n    returns the closest integer to it. If the number is equidistant from two\n    integers, round it away from zero.\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    \"\"\"\n    if value.isdigit():\n       return value % 2\n    return round(value, 2)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    value = input(\"Enter the value to search for: \")\n    if value[0] == \".\":\n        return None\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    '''\n    Return the closest integer to the given value.\n    >>> closest_integer(\"12\")\n    12\n    >>> closest_integer(\"-12\")\n    -12\n    >>> closest_integer(\"0.1\")\n    1\n    >>> closest_integer(\"0.1e+2\")\n    0.1\n\n    Return -1 if the given value is equidistant from two integers.\n\n    Note that by default this method returns the number as a string.\n    You can change that by specifying the keyword str or int before the\n    method name in your call.\n    '''\n\n    def __call__(self, value):\n        if value.startswith('0'):\n           return int(value)\n         else:\n           return str(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value[0] == \"0\":\n       value = 0\n    return float(value)\n    elif value[1] == \"0\":\n       value = -1\n    return float(value)\n    elif value[0]!= \"0\":\n       value = int(value)\n    return float(value)\n\nNote: This is a variation of the True-False-IsNaN-Negative numbers used in comp.lang.c.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"Returns the closest integer to value.\n    If two or more numbers are equally close to the given value, round\n    towards zero.\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"10.3\")\n    10\n    >>> closest_integer(\"10.3.2\")\n    10.3 >>> closest_integer(\"10.3.1\")\n    10\n    >>> closest_integer(\"10.3.1.2\")\n    10.3\n    >>> closest_integer(\"10.3.1.1\")\n    10.3 >>> closest_integer(\"10.3.1\")\n    10\n    Note:\n    If the given number is equidistant from two integers, the one you\n    should return is the one that is the farthest from zero. For\n    example closest_integer(\"14.5\") should return 15 and\n    closest_integer(\"-14.5", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value) < 0.0? int(value) : int(value + 0.0)\n\nYou probably wanted the following:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value.\n    \"\"\"\n    value = str(value)\n    closest_int = 0\n    for i in range(1, int(value)):\n       if value == i:\n          return i\n       closest_int = closest_int + 1\n    return closest_int", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value in ('-', '', '0', '1', '2', '3'):\n       return int(value)\n    elif value in ('4', '5', '6', '7', '8', '9'):\n       return int(value / 2)\n    elif value in ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'):\n       return int(int(value))\n    else:\n       return int(value % 100)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value[0] == \"0\":\n        return 0\n    if value[0]!= \"0\":\n        return (int(value[1]) < value[2])", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    if value == \"0\":\n        return value\n        return int(value)\n\nAnd now all the examples will be correct.\n\n\"Dave Clements\" <dave at c4i.com> wrote in message news:<c3n5vd$3h6$1 at smc.vnet.net>...\n\n\"A. Avrech\" <avrech at altius.com> wrote in message <c3n5v1$3h6$1 at smc.vnet.net>...\n\n>>> def closest_integer(value):\n>> '''\n>> ''' Create a function that takes a value (string) representing a number\n>> ''' and returns the closest integer to it. If the number is equidistant\n>> ''' from two integers, round it away from zero.\n>> '''\n>> ''' Examples\n>> '''\n>> >>> closest_integer(\"10\")\n>> 10\n>> >>> closest_integer(\"15.3\")\n>> 15\n>> >>> closest_integer(\"10.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value.isdigit():\n       return value.toint()\n    else:\n       if value.isdigit():\n         return value.toint()\n         else:\n          return int(value.replace(\"\\t\",\".\")).floor()\n    return int(value.replace(\"\\t\",\".\")).floor()", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value / float(value))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value[0] == 0:\n        return value[0]\n    else:\n        return int(value)\n\nYou probably want something like this:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return 0.0 if value == 0\n    else if value % 2 == 0:\n         return 1.0 if value % 2 == 0\n    else:\n         return value + 1.0\n    return closest_integer(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return [int(value) for value in\n       [int(max(value) - int(min(value))),\n       int(min(value) - int(max(value)))]]", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Return the closest integer to the given value.\n    >>> closest_integer('10')\n    10\n    >>> closest_integer('-10')\n    0\n    >>> closest_integer('-8.7')\n    8.7\n    >>> closest_integer('-6.4')\n    6.4\n    \"\"\"\n    if value < 0:\n       return -1\n    if value == 0:\n       return 1\n    if value == 1:\n       return 2\n    if value == 2:\n       return 3\n    if value == 3:\n       return 4\n    if value == 4:\n       return 5\n    if value == 5:\n       return 6\n    if value == 6:\n       return 7", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == '0':\n        return -1\n    a, b = value.split()\n    if a[0] == -1 or b[0] == -1:\n        return -1\n    return int(a[1] - b[1]) + int(a[2] - b[2])\n\nThis is an exercise in the Python language to get you thinking about how to create a function that will take a value as an argument and return the closest integer to it.\n\nIf you run the above program, you'll get the results below.\n\n    >>> closest_integer('10')\n    10\n    >>> closest_integer('15.3')\n    15\n    >>> closest_integer('14.5')\n    15\n    >>> closest_integer('-14.5')\n    -15\n\nSee also\n\n Python programming language\n\nExternal links\n\nHow to write a function in Python\nHow to write a function in", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n       round = 1\n       i = 0\n       if value!= '0' and value!= '-':\n          i += 1\n          round *= (value-i)\n          value = i\n       else:\n          value = value.replace('0','_')\n          return value", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n       return 0\n    if value < 0:\n       return -1\n    if value >= 0:\n       return 1\n    if value == 0:\n       return -1\n    if value < 0:\n       return 1\n    if value >= 0:\n       return 0\n    if value == 0:\n       return 1\n    if value < 0:\n       return 0\n    if value >= 0:\n       return -1\n    if value == 0:\n       return 1\n    return 1", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n      if value == \"\" or value == \"\":\n         return -1\n      if value[0] == '0':\n         return -1\n      if value[1] == '0':\n         return -1\n      if value[2] == '0':\n         return -1\n      if value[3] == '0':\n         return -1\n      return int(value, 2)\n\nfor i in range(len(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(str(int(", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    for i in range(10):\n       number = number.lower()\n       if value[i] > number:\n          return -1\n       else:\n          return number\n    return number", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    # initialize result to 0 (zero)\n    result = 0\n    # First test the number against the integers\n    for i in range(1, 2, 3):\n       # Check if the number is equid", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    return value[0] - value[1]", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(int(value)) - 0.5\n\nDuck typing at its finest!\n\nI didn't know this was a thing.\n\nIt's a well-known concept in some circles (e.g. Ruby), but it's not widely known. The term was coined by Guido van Rossum in the context of Python, but it's sometimes used in the sense of \"a loose type system that allows duck-typing\" more broadly.\n\nIt was coined by Neal Gafter in the context of Smalltalk.\n\nI stand corrected.\n\nThe article seems to assume the language supports generics, while the solution uses explicit type conversions.\nWould this still work in languages like PHP, Java or C++?\n\nI'm not a Python expert, but as far as I know the above does work in C++, with the notable caveat that you have to make sure to include the _stdint_ library in your project, and use the \"default\" template argument.\n\nThe standard library is typically not part of a project.\nYou should be able to write this as a pure C function:\nint closest_integer(int value) {\nreturn (int) ((", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value in ('-', '0'):\n    return 0\n    return round(float(value), 2)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n       return 0\n    elif value == 1:\n       return 1\n    else:\n       return floor(abs(value))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    # Function to return the closest integer to a given value.\n    def closest_integer(value):\n    if int(value) == 0:\n       value = value % 10 # round away from zero\n    return int(value)\n    return int(value)\n\nint(value) will convert the string representation to an integer,\nthen we can do arithmetic with integers. We can call int(value)\nwith values that represent negative integers as well.\n\nThe solution above will not handle the case where two integers are\nequidistant from a given number.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    value = value.rstrip()\n    return int(value)\n    def iter_closest_integer(s):\n    for value in s:\n       if int(value) < int(iter_closest_integer(value)):\n          print value, value + 1\n       else:\n          print value\n    return iter_closest_integer\n    def nearest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the nearest integer to it. If the number is equidistant\n    from two integers, round it towards zero.\n    Examples\n    >>> nearest_integer(\"10\")\n    10\n    >>> nearest_integer(\"15.3\")\n    15.\n    >>> nearest_integer(\"14.5\")\n    15.5", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value) > 0? 1 : int(value) + 1", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value < 0:\n        return -value\n    else:\n        return value + (value < int(value))\nThis is still not what I want.\nThe point is that I want the user to enter a value and the function should return the closest number to that.  I want the user to enter the number and the function to give the closest number to that.</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value) / 2", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value < 0 or value > 10:\n       raise ValueError(value)\n    if not len(value) == 1 or value[0]!= '0':\n       return -1\n    value = str(value)\n    return int(value) - min(int(value), int(value + 1)) + 1", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    If the value can be represented as an integer, return it. If not,\n    return -1.\n    '''\n    if value.is_integer():\n       return value.int(decimal=0)\n    else:\n       return -1\n    return -1\n\nThis is a trivial example, but one that many people new to Python get\nwrong, so it's worth highlighting. Note that the function return type\nis a function, not a function object. This means that you must call\nthe function in parentheses, and not just have its name as the last\nparameter.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    # Round away from zero\n    if value >= 0.0:\n       return max(value, -1)\n    return min(value, 1)\n    # Do the actual work. This function is needed because the\n    # `num` built-in function is not useful for comparing numbers\n    # with fractional decimal parts.\n    return num(int(value), digits=3)\n    '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    If value is not an integer, return None.\n\n    if value:\n        if value in int(self):\n           return int(self[0])\n         return int(self[1])\n    else:\n          return None\n\n    return int(value)\n\n    def _closest_integer(value):\n    '''\n    Returns the closest integer to value. If value is equidistant from two integers,\n    round it away from zero.\n\n    return int(value) * 2\n\n    return int(value) + int(value)\n\n    def closest_number(value):\n    '''\n    Returns the closest integer to value.\n\n    if value in int(self):\n        return int(self[0])\n        return int(self", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    from decimal import Decimal\n    from itertools import izip\n    from functools import partial\n    class DecimalError(Exception):\n    pass\n    def closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value (string).\n    If the value is equidistant from two integers, round it away from zero.\n    If you don't know what that means, I don't know how to help you.\n    \"\"\"\n    if value.startswith('-') and value.endswith(''):\n        # Remove the decimal point and the '.' if there is one.\n        value = value[0:1]\n        DecimalError(\"No input. Exiting.\")\n        return value.decode('hex')\n    else:\n        # You're done!\n        value = value[-2:]", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value is not None:\n        return value\n\n    return 0 if value is not None else 1\n\n    def lambda_lambda(func, value):\n        return lambda value: func(value)\n\nThis is a problem because it's easy to accidentally use the lambda function as a regular function. A call to lambda_lambda will actually call lambda_lambda() instead of lambda_lambda, which means your function will be called with the wrong parameters.\n\nThis is actually a fairly common problem. When you are writing a function that is called from multiple places, and you want to provide a default parameter value, you may use a lambda expression to do that. If you don't add a docstring that describes this, it's easy for someone to accidentally call the default parameter directly, instead of calling the function.\n\nThe Python community has come up with a few methods of dealing with this issue. One of the more common ones is to create a function that accepts a function and uses that to call the actual function, like this:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def __getitem__(self, key):\n        return int(self.find(key))\n   \n    def closest_integer(value):\n        if value.is_integer():\n           return int(value)\n          return __getitem__(value, 'int')", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n        return (-value,int(value))\n\nThe above solution isn't the best. In particular, this doesn't handle cases when the difference between two integers is greater than zero. In those cases, the difference can be handled by converting the input value to a float and using the Pythagorean theorem:\n>>> def round_to_integer(value):\n        return float(value)/sqrt(2)\n\nThe above solution also doesn't handle NaN. This can be solved by using the re.NaN function:\n>>> def round_to_integer(value):\n        return re.NaN(float(value)/sqrt(2))\n\nReferences\nPython Library Reference </s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    return int(value)\n    if value == 0:\n        return -int(value)\n    return int(value)\nHere's a more efficient version that doesn't require calling a round() function.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"Return the closest integer to the given string.\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    \"\"\"\n    if value == \"0\":\n       return 0\n    else:\n       return value\n\nNot too hard but note that if the value is close to zero (and thus\nequal to another value) it should return the one that is farthest from\nzero (in other words, it should return the one that is larger).\n\nHere's the solution:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    Round the input value to an integer if necessary.\n    If the input value is close to zero, return it.\n\n    If the input value is greater than zero, and we are rounding down,\n    then we can do the rounding by subtracting the closest integer from\n    the input value, then rounding the result.\n    If the input value is less than zero, and we are rounding up, then\n    we can do the rounding by adding the closest integer to the input\n    value, then rounding the result.\n    '''\n    if value < 0:\n       return value\n    elif value > 0:\n       closest_integer_up(value - int(closest_integer(value)))\n    else:\n       closest_integer_up(value + int(closest_integer(value)))\n    return value\n    def closest_integer_up(value, it):", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def nearest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it toward zero.\n\n    Examples\n    >>> nearest_integer(\"10\")\n    10\n    >>> nearest_integer(\"-10.5\")\n    10\n\n    Note:\n    Rounding toward zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    closest to zero. For example nearest_integer(\"-14.5\") should\n    return -14 and nearest_integer(\"-10.5\") should return -10.\n    '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value is None:\n        return -1\n    else:\n        if value == 0:\n           return -1\n           return int(value)\n\n[edit] The comments below correctly point out that the function is\nskewed toward negative numbers. If you want the function to be unbiased\nwith regard to whether the input number is positive or negative, replace\nthe 0/1/negative flag with a bias flag.  The bias flag will be 1 if\nthe input number is negative, 0 otherwise.  You can test whether a\nnumber is positive or negative by testing whether the number is less than\nor equal to 0.\n\nThe output of the above code will be:\n\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"9.9\")\n9\n>>> closest_integer(\"-1\")\n-1\n>>> closest_integer(\"-100\")\n-100\n>>> closest_integer(\"9\")\n9\n>>> closest_integer(\"", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value.find(\".\").replace(\".\", \"\").replace(\"\", \"-\").str)</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return value[0]", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == \"-\" or value == \"0\":\n       return 0\n    else:\n       return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n       if value == '0':\n          return -1\n       else:\n          return int(int(value))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    value = int(input(\"Enter the number you wish to convert: \"))\n    return value < 0? -value : value + 1</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    # This is a class method\n    def closest_integer(value):\n    if value == 0:\n       return 0\n    else:\n       return int(value)\n\nAnd now it works for strings and integers:\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n>>> closest_integer(\"3.14\")\n3.141592653589793</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == \"\":\n       return -1\n    if value == \"0\":\n       return 0\n    if value == \"1\":\n       return 1\n    if value == \"2\":\n       return 2\n    if value == \"3\":\n       return 3\n    if value == \"4\":\n       return 4\n    if value == \"5\":\n       return 5\n    if value == \"6\":\n       return 6\n    if value == \"7\":\n       return 7\n    if value == \"8\":\n       return 8\n    if value == \"9\":\n       return 9\n    if value == \"10\":\n       return 10\n    if value == \"11\":", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def __call__(self, value):\n    if self.value == value:\n        return 0\n    else:\n        return self.value\n    #return 0 if the number is equidistant from two integers\n    return self.value", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return 0 if value == 0:\n    return (value - 0.5) if value < 0:\n    return (value + 0.5) if value > 0:\n    return value if value == 0.5:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == '0':\n       return 0\n    else:\n       return int(value) - 1\n\n    def nearest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the nearest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    Examples\n    >>> nearest_integer(\"10\")\n    10\n    >>> nearest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example nearest_integer(\"14.5\") should\n    return 15 and nearest_integer(\"-14.5\") should return -15.\n\n    def nearest_integer(value):", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value > 0:\n       return value\n    else:\n       return -value", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n       return 0\n    else:\n       if value == -1:\n          return -1\n       else:\n          return 0\n    return value\n\nOutput:\n\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\n>>> closest_integer(\"14.5\")\n15\n>>> closest_integer(\"-14.5\")\n-15\n\n>>> closest_integer(\"2.5\")\n2\n\n>>> closest_integer(\"-2.5\")\n-2\n\n>>> closest_integer(\"-3\")\n-3\n\n>>> closest_integer(\"3.0\")\n3\n\n>>> closest_integer(\"-3.0\")\n-3\n\n>>> closest_integer(\"-2.0\")\n-2\n\n>>> closest_integer(\"2.2\")\n2\n\n>>> closest_integer(\"-2.2\")\n-2", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    from math import ceil\n    def closest_integer(value):\n    if value == 0:\n        return 0\n    else:\n        if value > 0:\n           return ceil(value / (2 ** (2 ** (ceil(value)))\n         else:\n           return value\n\nFrom the article:\n>> This is a great example of a trivial function that you probably\n>> don\u2019t need to write yourself. There are three other basic integer\n>> functions that are very useful that we\u2019ll cover in subsequent\n>> sections.\n\nI must have missed the part where it said: \"Always write your own\nfunctions\".\n\nBut if you ever find yourself writing one of these:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"Returns the closest integer to the given value.\"\"\"\n    if value == 0:\n       return -1\n    return len(float(value)))\n    print closest_integer(\"1\")\n    print closest_integer(\"-1\")\n\nimport re", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return float(value) if value is float else int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    # your code goes here", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    for i in range(0, value.end()):\n       if value[i] == value[i+1]:\n          return i\n       if value[i] < value[i+1]:\n          return -i\n    else:\n          return -1\n    return i", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value in ['0','1']:\n       return 1\n    else:\n       return (value % 2)\n    return closest_integer\n\n>>> closest_integer('10')\n10\n>>> closest_integer('12.5')\n12\n>>> closest_integer('-13.5')\n-13\n\nIteration and recursion\n\nIteration\n\nRecursion\n\nWhen a function calls itself, it is known as a recursive function.\n\nIn general, recursion is used when you have a function that will only work if it is called many times.\n\nConsider the following recursive function:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def __init__(self, value):\n       self.value = value\n       def __eq__(self, other):\n       if self.value > other.value and self.value < other.value:\n          return False\n        else:\n          return True\n       return False\n    def __call__(self, value):\n       if self.value > other.value:\n          return False\n        if self.value < other.value:\n          return self.value\n       return other.value\n\nclosest_integer(value)\n\n>>> closest_integer(\"-14.5\")\n-15.0\n>>> closest_integer(\"-14.5\")\n-15.0\n>>> closest_integer(\"-14.5\")\n-15.0\n>>> closest_integer(\"", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    return -float(value)\n\nI know this is humor but I always wonder why people use that \"fuzzy\" reasoning. In the world of computer programming, it's quite clear what rounding is and the rules for it.\nRounding is clearly defined by IEEE 754.\n\nI don't know if it's a widespread thing, but it's a widely held belief in the UK that you can round down to zero.\n\nThis is also true in the US.\n\nThis is also true in Canada.\n\nThis is also true in Brazil.\n\nThis is also true in Mexico.\n\nThis is also true in Spain.\n\nThis is also true in India.\n\nThis is also true in Pakistan.\n\nThis is also true in Turkey.\n\nThis is also true in Italy.\n\nThis is also true in Israel.\n\nThis is also true in Germany.\n\nThis is also true in Ireland.\n\nThis is also true in Palestine.\n\nThis is also true in Greece.\n\nThis is also true in France.\n\nThis is also true in Philippines.\n\nThis is also true", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    '''\n    '''\n    # Return the integer that is the closest to the value\n\n    if value is None:\n       return 0\n    else:\n       round(value)\n       return closest_integer(round(value))\n    '''\n\n    print closest_integer(10)\n    print closest_integer(\"-5\")\n    print closest_integer(\"4.3\")\n    print closest_integer(\"-4.3\")\n\nIn [5]:\n\nOut[5]:\n\nIn [6]:\n\nOut[6]:\n\nIn [7]:\n\nOut[7]:\n\nIn [8]:\n\nOut[8]:\n\nIn [9]:\n\nOut[9]:\n\nIn [10]:\n\nOut[10]:\n\nIn [11]:\n\nOut[11]:\n\nIn [12]:\n\nOut[12]:\n\nIn [13]:\n\nOut[13]:\n\nIn", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value is None:\n        value = '0'\n    return int(value)\n    else:\n        value = str(value)\n    return int(value) % (int(value) - int(0))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    return int(value.format(\"%.2f\") % 2)\n\n    def closest_integer_int(value):\n    '''\n    Create a function that takes an integer and returns the closest integer\n    to it. If the given number is equidistant from two integers, round it\n    away from zero.\n\n    Examples\n    >>> closest_integer_int(4.5)\n    4.\n    >>> closest_integer_int(-4.5)\n    5.\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer_int(4.5) should\n    return 5 and closest_integer_int(-4.5) should return -5.\n    '''\n\n    return int(value.format(\"%.2f\") % 2)\n\n    def round_closest_integer(clos", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == \"0\":\n       return 0\n    else:\n       round(value)\n    return float(int(round(value)))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value) - int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value[::-1] == 0:\n       return value\n    while value:\n       if value[0] == 0:\n          return value[::-1]\n          return value[::-1] % 2\n\nEdit: I'm very surprised to see this example at the top of hacker news, but I'll take it.</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0 or value == -0:\n       return 1\n    if value == 1 or value == 2:\n       return 2\n    if value == 3:\n       return 3\n    if value == 4:\n       return 4\n    if value == 5:\n       return 5\n    if value == 6:\n       return 6\n    if value == 7:\n       return 7\n    if value == 8:\n       return 8\n    if value == 9:\n       return 9\n    if value == 10:\n       return 10\n    if value == 11:\n       return 11\n    if value == 12:\n       return 12\n    if value == 13:\n       return 13", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"Return the closest integer to value. This function should behave\n    similarly to the **round** method of the **int** and **float**\n    classes.\"\"\"\n    if value is None:\n        return -1\n    if value is not None and value.startswith('0'):\n        return value.round()\n    else:\n        return -float(int(value))\n\n>>> closest_integer(10)\n10\n>>> closest_integer(-15.3)\n15\n\n>>> closest_integer('10')\n10\n\n>>> closest_integer('-14.5')\n-15\n\nThis is a typical use of the **int** and **float** classes, where you\nconvert the value into an **int** or **float**, then use **round** to find\nthe nearest integer or float.</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value,16)\n\nThe usual way of doing this is to convert the input string into a\nfloating point number, and then use the pow() function.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    if value == '':\n        raise ValueError(\"Value must be an int\")\n    # round away from zero\n    return max(abs(value), 0)\n    else:\n        return value\n\nThis code returns the value closest to the value 10. The value returned is 15.\n\nThe two integers closest to 15 are 15 and -15. Since they are equidistant from zero, you round away from zero, so you choose the -15.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value[0] < 1 or value[0] > 10:\n        return -1\n    else:\n        return value[-1]\n    return -1\n\n    def fibonacci(value):\n    if value[0] < 1:\n        return 0\n    else:\n        return value[0] + value[1]\n    return 0", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == \"0\":\n        return -1\n    else:\n        return (value - 1) / 2\n\n[docs]class Integer:\n    def __init__(self):\n        self.value = 0\n    def __str__(self):\n        return \"Integer(%s)\" % self.value\n\n>>> from decimal import Decimal\n>>> def closest_decimal(value):\n        if value == 0:\n             return -1\n        else:\n             return (value - 1) / 2\n\n>>> closest_integer(Decimal(\"10\")).__str__\n            Integer(10)\n>>> closest_integer(Decimal(\"15.3\")).__str__\n            Integer", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n       return 0\n    return int(value)\n    def __init__(self, value):\n       self.value = value\n    def __eq__(self, other):\n       if self.value < other.value:\n          self.value = other.value\n        return True\n       return False\n    def __ne__(self, other):\n       if self.value > other.value:\n          self.value = other.value\n        return True\n       return False\n    def __gt__(self, other):\n       if self.value >= other.value:\n          self.value = other.value\n        return True", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    if value in [0, -Infinity, 0]:\n       return 0\n    if value in [0, -Infinity, 0]:\n       return -Infinity\n    for i in range(1, value.count(1)):\n       if value[i] > value[i+1] and value[i] < value[i+1] and\n       value[i] < value[i+1] - value[i+1]:\n          if value[i] < value[i+1]:\n                   return -value[i+1]\n                     else:\n                       return value[i]\n    return 0\n\nThis is really quite clever. I tried implementing it", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return (value == 0)\n    or (value == 1 and value!= 2)\n    or (value == 2 and value!= 3)\n    or (value == 3 and value!= 4)\n    or (value == 4 and value!= 5)\n    or (value == 5 and value!= 6)\n    or (value == 6 and value!= 7)\n    or (value == 7 and value!= 8)\n    or (value == 8 and value!= 9)\n    or (value == 9 and value!= 10)\n    or (value == 10 and value!= 11)\n    or (value == 11 and value!= 12)\n    or (value == 12 and value!= 13)\n    or (value == 13 and value!= 14)\n    or (value == 14 and value!= 15)\n    or (value == 15 and value!= 16)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value < 0:\n       return -value\n    # Round away from zero\n    if int(value) < int(closest_integer(value + 1)) or int(value) < int(closest_integer(value - 1)):\n       return int(closest_integer(value))\n\nAnd if you're going to be doing this a lot, I'd recommend wrapping the functionality into a function.</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return math.floor(value, 2)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    '''\n    This function has been ported from the example in\n    http://docs.python.org/library/libraries.html#numbers.\n    If you are porting this to a different version of Python,\n    the following changes may be needed:\n    - The function must be passed the number as a string\n    - The function must return the number as a string\n    '''\n    round = 1\n\n    if value is not None:\n       return round(value)\n    else:\n       return -round(value)\n\nSee also\nList of string formatting functions\n\nReferences\n\nExternal links\nPyPI page for closest_integer\n\nString formatting functions</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return (int(value) - int(int(value))) % 2\n\n__lookup__\n\n__contains__", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value.startswith('0'):\n       if value.isdigit():\n          return int(int(value))\n       else:\n          return int(round(int(int(value))))\n\nThis is absolutely right.\nBut you can easily get a good algorithm with a fixed-point arithmetic.\nJust write this:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0:\n       return 0\n    closest_integer = int(value)\n    if closest_integer == int(value):\n       return value\n    else:\n       if value > closest_integer:\n         closest_integer = int(value - 1)\n        return closest_integer\n    return closest_integer", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value[0] == '0' or value[-1] == '0':\n        return value\n    elif value[0] == '.' or value[-1] == '.':\n        return -1\n    elif value[0] == '.' or value[-1] == '.':\n        return value[1:]\n    else:\n        return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    # The following three lines are required in order to use this module\n    from collections import defaultdict\n    from itertools import islice\n    from random import random", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    '''\n    Given a value, return the closest integer value.\n    If the value is equidistant from two integers, round it away from\n    zero.\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    def closest_integer(value):\n    '''\n    Given a value, return the closest integer value.", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value < 0:\n       return -value\n    elif value == 0:\n       return 0\n    else:\n       return max(0,value-max(0,value-value))\n\nOther examples of writing code to work with arbitrary-sized integers are:", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    if value in range(1, 100):\n    return int(value)\n    else:\n    return int(closest_integer(value))\n\nThis is pretty good.\nIs it close to what you were looking for?\n\nHere is an example of some of the things I'm looking for:\nfunction", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    If the number is a negative number, return the closest number to\n    zero.\n    For negative values we must round away from zero, because\n    >>> closest_integer(-2)\n    -2\n    >>> closest_integer(-2.5)\n    -2\n    >>> closest_integer(-2.5.3)\n    -2\n    >>> closest_integer(-2.5.3.5)\n    -3\n    >>> closest_integer(-2.5.3.5.7)\n    -3.5\n    '''\n    number = int(value)\n    nearest = number % 10\n    if nearest > 0:\n       return nearest\n    elif nearest == 0:\n       return -1\n    else:\n       return number\n\nSee also\nBounded integer\n\nReferences\n\nExternal links", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value in ['-', '0', '+']:\n       return value.rjust(0)\n    return int(value) + -value\n\nIf this is your first time seeing this, your immediate reaction might be something like \"that's dumb, it can't be right\". But it actually is! In mathematics, zero is considered to be a number, and so it follows that a number is closer to another number if it is less negative. If a number is greater than zero, then it is positive, and so a positive number is closer to another positive number if it is more positive.\n\nThis isn't just a cute trick that works for \"close\" numbers, it holds true for all numbers! In fact, in mathematics, we don't even bother comparing numbers in terms of their magnitude, we compare them in terms of their absolute value. A number is positive, if its absolute value is positive. And a number is negative, if its absolute value is negative.\n\nSo now that we've seen the idea behind it, let's go back and look at the implementation and see how we can modify it to", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    If the number is equidistant from two integers, round it away from zero.\n    Return the closest integer to the given number (string).\n\n    def int(value):\n    '''\n    If the number is equidistant from two integers, round it away from zero.\n    Return the closest integer to the given number (string).\n\n    return int(int(value))\n    if value in range(0, int(int(value))):\n       return int(value)\n    return int(int(int(value)))\n    return int(int(int(int(value))) - int(int(value)))\n    return int(int(int(int(int(value)))) + int(int(int(value))))\n\n    return int(int(int(int(value)))))\n\nSee also\n C-style cast\n String padding or stripping\n JavaScript String#trim()\n\nReferences</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    if value == 0 or value == 1:\n       return -1\n    if value == 2 or value == 3:\n       return 0\n    # This is to handle \"0\" and \"1\" as \"number 0\" and \"number 1\" and\n    # \"2\" and \"3\" as \"number 2\" and \"number 3\"\n\n    if value == \"0\":\n       return -1\n    if value == \"1\":\n       return 1\n    if value in range(2, 10):\n       return 0\n    return value\n\nSince this is python, this is \"idiomatic\" (pardon the term).\nThe problem is that this is only \"idiomatic\" for python, not for all languages.\n\nOk, so to the best of my knowledge (of Python at least) this is idiomatically pythonic. Can you provide a real-world example of what you mean?\n\nI'm not saying your", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    # Function signature\n    def closest_integer(value):\n    # This is where the magic happens\n    if value > 0.0:\n       return int(value)\n    else:\n       return int(int(value))\n    # Return the closest integer to the value\n\nThe above code works, but it is not idiomatic Python code.  The main\nproblem is that if you know the type of value, then it's not idiomatic to", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n       # Create a list of the integers\n       closest_integer_list = [int(value) for value in range(10)]\n\n       # Now check the list for the number\n       for integer_index in closest_integer_list:\n          if integer_index == value:\n              return integer_index\n             elif integer_index > closest_integer_list[integer_index]:\n              return closest_integer_list[integer_index]\n             else:\n              return integer_index\n\nTesting\n\n>>> print closest_integer(1)\n10\n>>> print closest_integer(10)\n15\n>>> print closest_integer(10.3)\n15.3\n>>> print closest_integer(2.5", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    def closest_integer(value):\n    if value == '':\n       return -1\n    return value == 0? value : int(value)\n\n    class Test(object):\n    def __init__(self):\n       self.a = 50\n       self.b = 500\n       self.c = 0\n\n    def main(self):\n       self.a = closest_integer(self.a)\n       self.b = closest_integer(self.b)\n       self.c = closest_integer(self.c)\n\n    print 'A: %s B: %s C: %s' % (self.a, self.b, self.c)\n\nOutput:\nA: 50\nB: 500\nC: 0", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return (int)(value) - (int)(int(value)/2)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    \"\"\"\n    Given a value (string), return the closest integer.\n    \"\"\"\n    return int(value)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value, 4)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)</s>", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return value / Math.floor(Math.sqrt(value))", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    def closest_integer(value):\n    '''\n    If the number represented by the value is greater than zero, return\n    the value.\n    If the number represented by the value is less than zero, return -1.\n    Else, return the closest integer to the value.\n    '''\n    return value", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n    return int(value)\n    if value in range(0, #value + 1):\n        return value\n    return closest_integer(value + 1)", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    # Convert the given value to a string\n    return str(int(value))\n    def test():\n       '''\n            Create a list of integers and print it.\n             This will create a list that contains the number of times\n             each integer in the list was used.\n             >>> import random\n             >>> random.choice(5, 9)\n             [5, 6, 8, 9, 10]\n             >>> n = 0\n             >>> integers = [random.choice(5, 9) for _ in range(n)]\n             >>> for integer in integers:\n                 print integer", "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    ''' '''\n\n    return value < 0? 0 : (value + (value % 10)) < 0? -1 : 1\n\nFor those who prefer the Python 2.x syntax:"]]