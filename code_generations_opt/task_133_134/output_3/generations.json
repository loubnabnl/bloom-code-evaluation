[["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        r, sum = lst[i], 0\n        if sum == 0:\n             r, sum = lst[i], 0\n         else:\n              r, sum = lst[i], (sum + r) * r\n              r = r * r\n    return sum\n    \"\"\"\n    print sum_squares([1,2,3])", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for num in lst:\n        if num >= 1:\n            return num * num / ceil(num)\n        else:\n            return 0", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    a = int(Ceiling)\n    for n in lst:\n          a = a + n\n          a = a * (n+1)\n    return a\n\nfor number in a, sum_squares(list(number))\n    print \"Sum of Squared: %d\" % number\n\nThe above Python snippet shows that a is defined as a function that returns an integer. Hence, the arguments to sum_squares() are not evaluated before being passed to the function a. But this is not what we want. We want to pass the list(number) to sum_squares(), which would compute the sum of squared of all elements in the list, and then print the sum.\n\nThe actual solution to this problem is to define a list comprehension:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return lst.sum(float(2.0*(lst[i]**2))/float(2.0))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for n,i in enumerate(lst):\n        sum_squared_list = []\n        if n == i:\n             sum_squared_list.append(sum(lst[n]*lst[i]))\n         else:\n              sum_squared_list.append(sum(lst[n]*lst[i]))\n    return sum_squared_list", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    n = len(lst)\n    for i in range(n):\n        lst_sq = [x for x in lst if x*x >= i]\n        return sum(lst_sq)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    def squared(x):\n    \"\"\"You are given a number x.\n    You need to return the square of that number.\n    Examples:\n    For x = 1 the output should be 1\n    For x = 2 the output should be 2\n    For x = 3 the output should be 6\n    For x = 4 the output should be 9\n    For x = 5 the output should be 16\n    For x = 6 the output should be 24\n    For x = 7 the output should be 32\n    For x = 8 the output should be 48\n    For x = 9 the output should be 64\n    For x = 10 the output should be 80\n    For x = 11 the output should be 96\n    For x = 12 the output should be 120\n    For x = 13 the output should be 144\n    For x = 14 the output should be 160\n    For x = 15 the output should be 192\n    For x = 16 the output should be 256\n    For x =", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    i = 0\n\n    for i in range(lst.shape[0]):\n         sum = 0\n         i2 = 0\n\n         for a in lst.pop(i):\n              sum += a * a\n               sum *= 2\n\n              if i < lst.shape[1]:\n                  i2 = 2\n\n           return sum, sum / sum", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(list(lst,0)) + sum(list(lst,1))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) < 2:\n        return 0\n    elif len(lst) == 2:\n        return 0.5\n    elif len(lst) > 2:\n        return 1\n    else:\n        return (sum_squares(lst[1] + lst[0]) / 2.0) * lst[0] + (sum_squares(lst[1] - lst[0]) / 2.0) * lst[1]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i, a in enumerate(lst):\n        a = a*a\n        return sum_squares(lst[i:])\n    \"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum_squared(item for item in lst) for item in lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return 0\n    return sum(f[i] * f[i+1] for i in range(len(lst) + 1, 2))\n    + round(int(ceiling(int(lst[0]))))\n    # round the sqare root to the int(ceiling) before summing", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) > 1:\n        return sum(lst[0], lst[1], lst[2])\n\nreturn sum_squares(lst)\n\n>>> lst = [1, 4, 9, 8, 7, 6, 4, 2, 0]\n>>> print sum_squares(lst)\n14\n>>> print sum_squares(lst[0:2])\n14\n>>> print sum_squares(lst[0:2][2:5])\n14\n>>> print sum_squares(lst[0:2][2:5][3:6])\n14\n>>> print sum_squares(lst[0:2][2:5][3:6][4:7])\n14\n\n>>> lst = [1.4, 4.2, 0]\n>>> print sum_squares(lst)\n29\n>>> print sum_squares(lst[0:2])\n29\n>>> print sum_squares(lst[0:2][2:5])\n29\n>>> print sum_squares(", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(abs(lst))\n    if abs(lst) > Ceiling:\n       return sum(abs(lst)**2)\n    return lst", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(map(lambda x: x**2, lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return np.sum(np.squared_diff(lst))\n\nIn the above example, the user has to use np.squared_diff(lst) and\nnp.sum() which takes up time. The user has to use np.sum() because the\nsum_squares() function returns a list.\n\nSolution:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    a = [0]*len(lst) + 1\n    a_squared = a\n    while len(lst) > 0:\n        lst2 = [lst[i]*(i+1) for i in range(len(lst)-1)]\n        a_squared += a_squared * lst2\n        lst2 = [0]*len(lst) + 1\n    return [sum(a_squared), round(a_squared) for a_squared in lst]\n\"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return int(lst)\n    return sum_squares(lst)\n\n>>> from sympy import *\n>>> from math import sqrt\n>>> sum_squares = lambda lst: int(lst)\n>>> lst = [1.4,4.2,0]\n>>> print sum_squares(lst)\n14\n>>> print sum_squares(lst, sqrt(lst))\n29\n>>> print sum_squares([1.4,4.2,0], sqrt(lst))\n14\n\nI don't think it's quite as clean as the OP's example, but it's easy to add to it.\n\nYeah, that's not bad. The only thing is I've always been taught to keep functions as simple as possible, and I feel like adding that lambda just makes it needlessly complex. I also feel like if I were to see that in someone else's code, I would wonder if that lambda is being passed as some kind of argument.\n\nUsually, yes, but for clarity and to show the underlying", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    \"\"\"Return the sum of the squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    \"\"\"Round each number in the list to the upper int(Ceiling) first\"\"\"\n    for n in range(len(lst)):\n        if n in range(0,Int(lst[n]-1)) and n not in range(lst[1]-1,lst[0]-1):\n            return n", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    x = 0\n    while len(lst) < 10:\n        x = x * x\n        lst[0] = x\n        if lst[0] < 10:\n            lst[0] = int(Ceiling)\n            lst = lst[1:]\n            if len(lst) == 1:\n              x = x * x\n          return x", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    int(ceiling(lst)) * lst\n    return sum(sum(square(lst)))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst = []\n\n    for n in lst:\n        lst.append(Math.sqrt(n))\n        lst = lst.replace('.', '*')\n\n    return int(lst.sum())", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    def to_int(x):\n    \"\"\" Return the integer part of x.\n    Note: this method doesn't round x to any significant digit,\n    it just takes the first decimal place and ignore the rest.\n    If you want to round to the second decimal place,\n    then add +0.5 or +0.3, as needed.\n    Examples:\n    For x = 2.5 the output is 2\n    For x = 9.5 the output is 9\n    For x = 0.5 the output is 0\n    For x = 0.5 + 0.1 the output is 0.6\n    \"\"\"\n    return x % 10\n    def to_int(x):\n    \"\"\" Return the integer part of x.\n    Note: this method doesn't round x to any significant digit,\n    it just takes the first decimal place and ignore the rest.\n    If you want to round to the second decimal place,\n    then add +0.5 or +0.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    round_sum = int(sqrt(sum_squares(lst)) + 1)\n    if round_sum > 1:\n        round_sum = round_sum / 2\n    return round_sum", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum_squares_with_rounding(lst)\n\nThis code is written for python 2.7, but still works on python 3.\n\nThe basic problem with the code above is that when you are trying to round a number to int(Ceiling) the code is breaking.\n\nHow to fix?\n\nThe best way to fix it is to use the following method:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n         def sum_squares_upper(lst):\n         return 0.5 * sum(squares(lst))\n         return sum_squares_upper\n         def squares(lst):\n                return (sum(lst)**2 for lst in lst)\n                return squares\n          return sum_squares_upper\n\nHere is the function that rounds to the upper int(ceiling)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n        # Define the function and parameters\n       def sum_squares(lst):\n         # Initialize the list `result` with zero\n         result = 0\n         # Process each item in the list\n         while lst:\n              # Get the element at the head of the list\n              x = lst[0]\n              # Do the square of `x`\n              # and store it in `result`\n              result = sum(result*x)\n              # If the element in the list is not positive\n              # then we have to truncate it to upper int(Ceiling)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for n in lst:\n        sum = sum_squares(n-1)\n        if sum > Ceiling:\n                sum = int(Ceiling) + sum\n                 return sum\n\nsum_squares(range(1,6))\n\nOutput:\n\nsum = 21", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # round the list elements to the int(ceiling) first\n    #", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst)\n   .round(ceiling)\n   .squared()\n   .add(0)\n   .add(0)\n   .add(0)\n   .add(0)\n   .add(0)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) <= 2:\n        return 0\n    else:\n         return sum(lst**2) + sum(lst**2**2)\n\nNote: Python version 3.5 is now released.\n\nLast edited by obnox on Tue Dec 13, 2016 2:04 am, edited 1 time in total.\n\nAuthor:\n\nobnox [ Mon Oct 10, 2016 5:37 pm ]\n\nPost subject:\n\nRe: Python3 version?\n\nThe above code works fine in Python 3.5.\n\nAuthor:\n\nlunr [ Sun Oct 30, 2016 1:33 am ]\n\nPost subject:\n\nRe: Python3 version?\n\nI wrote some code for this question. I got the correct answer but I can't figure out how to check my answer. Any help would be appreciated.\n\nHere's my code:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        c = 0\n        for j in range(len(lst)):\n             lst[i,j] = (lst[i,j]*lst[i,j+1] + c)\n              lst[i,j] = int(lst[i,j] * Ceiling)\n              c += lst[i,j]*lst[i,j+1]\n             return c", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum([sfor n in lst if n*n <> 0])\n    def floor_sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the floor of the sum of squared numbers in the\n    given list, round each element in the list to the lower int(Ceiling)\n    first.\n    Examples:\n    For lst = [1,2,3] the output should be 1\n    For lst = [1,4,9] the output should be 1\n    For lst = [1,3,5,7] the output should be 1\n    For lst = [1.4,4.2,0] the output should be 0\n    For lst = [-2.4,1,1] the output should be -1\n     \"\"\"\n    return sum(floor(sum(sfor n in lst if n*n <> 0)))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(map(lambda x: x**2, lst))\nI don't think that's necessary since the original function is a member function of the list class.\nI like to make it explicit since some languages, e.g. python, don't have list comprehensions.\nSure, but then don't do a list comprehension.  Just use the standard for loop.\nI always feel that the amount of code I write is a good indicator that I'm doing something wrong.\nIf you're using python, it's not really a fair comparison.  Writing a list comprehension is far more elegant, but the for loop is more clear and understandable.  The choice depends on the reader.  If the reader is lazy and isn't going to read the comprehension, then use the for loop.  But if the reader wants to understand the code as you intended, the comprehension is better.</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    for c in range(0,ceiling):\n        total = 0\n\n    for i in range(0,len(lst)-1):\n        if lst[i] % 2 == 0:\n           total = total + lst[i]*lst[i]\n\n    return total", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return sum(lst)\n    else:\n        return sum_squared(lst)\n\nYou can do the same thing, but you don't have to keep track of the index of each item in the list.\nfrom itertools import permutations", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    i = 0\n    for j in range(len(lst)):\n        i += lst[j]**2\n    return i\n    print sum_squares(range(5))\n\nIf you enter the above into a shell, you'll get a list of the outputs.\n\nimport math\n\nimport itertools", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return 1\n    else:\n        return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst**2)\n    def get_square(num):\n    \"\"\"You are given a number.\n    You need to return the square of the given number.\n    Examples:\n    For num = 1 the output should be 1\n    For num = 2 the output should be 2\n    For num = 3 the output should be 6\n    For num = 4 the output should be 8\n    For num = 5 the output should be 10\n    For num = 6 the output should be 12\n    For num = 8 the output should be 16\n    For num = 9 the output should be 24\n    For num = 10 the output should be 30\n    \"\"\"\n    return num**2\n\nNote that the second function is more concise, has less parameters, and is more readable.\n\nAlthough this has become a bit of a cliche, it is worth noting that:\n\nThere are only two hard things in computer science: cache invalidation, naming things, and off-by-one errors.\n\nFor the first", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum_squared(x) for x in lst)\n    + (sum_squared(floor(x) for x in lst))\n    + (sum_squared(x**2 for x in lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return lst.sum() if __name__ == '__main__':\n    lst = [1,2,3]\n    sum_squares(lst)\n\nI would recommend:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    total = 0\n\n    for i in lst:\n        total = total + i\n\n    return total / lst\n\na = [1.1, 3.1, 5.4, -0.7, 3.0, -5.1]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum(abs(x)**2 for x in lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return lst.sum(sqr.lhs())\n    # round to ceil first\n    def square_lhs(lhs):\n    \"\"\"You are given a number.\n    You need to return the square of the number.\n    Examples:\n    For lhs = 1 the output should be 1\n    For lhs = 2 the output should be 2\n    For lhs = 4 the output should be 16\n    For lhs = -2 the output should be -4\n     \"\"\"\n    return 2*lhs\n    def ceil_lhs(lhs):\n    \"\"\"You are given a number.\n    You need to return the ceiling of the number.\n    Examples:\n    For lhs = 1 the output should be 0\n    For lhs = 2 the output should be 1\n    For lhs = 4 the output should be 3\n    For lhs = -2 the output should be -1\n     \"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    a = list(range(len(lst))[0])\n    for i in range(len(lst)):\n        a[i] = a[i]*a[i]\n        a[i] = int(Ceiling(a[i]))\n    return a", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    assert len(lst) == 1\n    assert len(lst) == 2\n    assert len(lst) == 3\n\n         return sum(lst[0])*sum(lst[1])*sum(lst[2])\n\n    \"\"\"\n\n    def int(c):\n        return c\n    def ceil(c):\n        return (c>=0)? -c : c", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) < 2:\n        return None\n    for i in range(len(lst) - 1, len(lst)):\n        square = int(i)\n        sum = 0\n        temp = sum + lst[i]\n        if square == -1:\n           temp = (sum * lst[i])", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    c = 1\n    for i in lst:\n        c += int(sqr(i))\n        lst = lst/int(Ceiling)\n    return c", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return lst.reduce(lambda x: x*x**2, 0)\n\nCode:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) > 1:\n         return sum(lst[0])\n         return sum(lst[1])\n    else:\n          return sum(lst)\n\nI would also like to suggest that the problem is poorly stated. It is not clear to me how many numbers are in the list.\nI would suggest:\n1\\. List all the numbers in the list, then\n2\\. Replace the first with the sum of all the squares of the second, etc.\n3\\. Return the sum of the squares of all the numbers in the list.\n\nThis approach is indeed \"more pythonic\" but it is a lot more work for the programmer. My way is simpler and more straightforward for a human to understand.\n\nOK, so it does not meet the \"better is better\" criterion but it is easier to read.\n\nEasier to read? I was under the impression that most programmers on HN read the\ncode first and if they get confused, they try to understand it.\n\nI agree with that. It is not a", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return(sum(abs(lst[i]))/2.0)\nYou should use numpy.</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 0:\n        return 0\n    lst_size = len(lst)\n    for i in xrange(lst_size):\n        t = lst[i]\n        if t > Ceiling:\n           t = int(t)\n          if t == 0:\n            return 0\n           else:\n            return t * t\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Our objective function\n    def objective_func(x,sum):\n        if x < 0:\n           return 0\n        return sum(x)\n    # Our cost function\n    def cost_func(x,sum):\n         return sum(x) - sum(sum(x))\n    # Iterate over the list of numbers\n    for x in lst:\n         x = int(x)\n        y = x^2\n        if y > ceil(x):\n             y = int(y)\n             cost_func(y,sum)\n             objective_func(x,sum)\n    return sum\n     #\n    # This is the function that will be called to do", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n             # Add up the numbers in the list.\n           return sum(lst)\n\n           # Round each number in the list to the nearest integer.\n           return int(lst[0]) + int(lst[1]) + int(lst[2]) + int(lst[3])\n\n           # Now sum up the squared numbers in the list.\n           return sum(sqr(lst[0]) + sqr(lst[1]) + sqr(lst[2]) + sqr(lst[3]) + lst[0]*lst[1] + lst[1]*lst[2] + lst[2]*lst[3])", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Given a list of numbers\n    # Return the sum of squared numbers in the given list\n    def sum_squares(lst):\n    \"\"\"Return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.\"\"\"\n    square = 0.\n    for i in range(len(lst)):\n        if i > 0:\n            square += lst[i]**2\n           if lst[i] > int(Ceiling):\n                square *= int(Ceiling)\n              return sum(square)\n    return sum_squares\n\nThat's not the same thing as your initial post.\nFor one, the OP is asking about programming in C, which does not have a for loop syntax that looks like that.\nFor another, the OP is asking about summing", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n        n = len(lst)\n        sum_squares = 0\n        for i in range(n):\n             sum_squares += lst[i]*(lst[i] - lst[i+1]) / (lst[i+1] - lst[i+2])\n             sum_squares = sum_squares / (n-1)\n    return sum_squares</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for n in lst:\n        if n%2 == 0:\n           return n*(n+1)**2\n        else:\n           return n*(n+1)\n\nUsing this method, the above example outputs:\n\n14\n14\n29\n84\n98\n98\n\nPython", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for n in lst:\n         return sum(n**2)\n    return round(int(Ceiling))\n\n[edit]\nIn case you don't know what that means, what it does is it sums the\nsquared values of each element in the list, and then rounds each\nelement to the nearest integer.\n\nExample:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Get the first element in the list\n    # (starting from 1)\n    first = lst[0]\n    # Get the second element in the list\n    # (starting from 1)\n    second = lst[1]\n    # Get the third element in the list\n    # (starting from 1)\n    third = lst[2]\n    # Get the fourth element in the list\n    # (starting from 1)\n    fourth = lst[3]\n    # Get the fifth element in the list\n    # (starting from 1)\n    fifth = lst[4]\n    # Get the sixth element in the list\n    # (starting from 1)\n    sixth = lst[5]\n    # Get the seventh element in the list\n    # (starting from 1)\n    seventh = lst[6]\n    # Get the eighth element in the list\n    # (starting from 1)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst = sorted(lst, key=lambda x: x[0])\n    for i in range(len(lst)):\n        i = round(i*i, ceil(lst[i]))\n        return sum(sum(lst[i], sum(lst[i])), round(i*i, ceil(lst[i]))*i)\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    n = len(lst)\n    x = 0\n    for n in range(n):\n        x = x + lst[n]\n        if n % 2 == 1:\n             x = x / (2*n)\n              else:\n               x = x * (2*n-1)\n               if x < 0:\n                      x = 0\n                     else:\n                        x = x * (2*n-1)\n                      if x > 0:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum_squares(lst)\nYou need to round up to the nearest whole number.\nAlso, python supports numpy arrays, you should learn how to use them.\nThey do all the messy work of floating point arithmetic for you.      a = np.array([1.0, 2.0, 3.0])      a.shape  #4      a.sum()      7.0      a.sum()      7.0</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return 1\n        return sum_squares(lst / float(len(lst)))\nThanks! This is exactly what I was looking for.</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    return sum(int(Ceiling(lst))**2 for _ in lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst_squared = []\n    i = 0\n    for n in lst:\n          if n > Ceiling:\n              i = i + 1\n               lst_squared.append(i)\n            return lst_squared\n    return 0", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(squared(lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum_squares([(i**2) | i in lst])*Ceiling(i)\nI'm sorry, I'm a little confused. I don't understand the first part of the function and the last part. Could you please explain?\nYour question is way to general. Be more specific.  What don't you understand?\nThe first part is what I'm confused with. I understand what you're trying to do, but I don't understand how to do it.\nGive me your code.  I'll walk you through it.</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for x in lst:\n        if x > Ceiling:\n            return x\n        if x == 0:\n             return 0\n        if x == 1:\n             return 1\n        if x == 2:\n             return 2\n        if x == 3:\n             return 3\n        if x == 4:\n             return 4\n        if x == 5:\n             return 5\n        if x == 6:\n             return 6\n        if x == 7:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    if len(lst) <= 1:\n        return 0\n    else:\n        # The number is given as a float\n        float x = lst[0]\n        # The square of the float is the number squared\n        return x*x\n\nThis solution is not as efficient as other suggested solutions because it involves the division operator.\n\nWhen the number is given as an integer, it is more efficient to multiply the number by the integer itself, but this method may not always be acceptable due to range issues: for example, if the numbers are supposed to represent temperature, and the temperature goes beyond the range of integers.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst ** 2)\n    def get_squared_sum(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n       \"\"\"\n    return sum(lst ** 2)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return(sum_squares(lst).round(int(Ceiling))\n    for lst in lst)\n      def sum_squares(lst):\n      \"\"\"You are given a list of numbers.\n      You need to return the sum of squared numbers in the given list,\n      round each element in the list to the upper int(Ceiling) first.\n      Examples:\n      For lst = [1,2,3] the output should be 14\n      For lst = [1,4,9] the output should be 98\n      For lst = [1,3,5,7] the output should be 84\n      For lst = [1.4,4.2,0] the output should be 29\n      For lst = [-2.4,1,1] the output should be 6\n      \"\"\"\n    return(sum_squares(lst).round(int", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    #Lines 1-4 print the list of numbers as a list of numbers.\n    for num in lst:\n        print(num)\n    #Lines 5-6 make a list of tuples (u,sum_squared(lst[u])) that contains\n    #the sums of the squared numbers in lst and the squared numbers\n    #themselves.\n    for u in xrange(len(lst)):\n         for num in lst[u]:\n             #square the number\n              lst[u][num] += 2*num\n              #add the sum of squared numbers to the squared numbers\n              lst[u][num] += (sum_squared(lst[u])**2)\n            #print out the results", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(np.sqrt(np.abs(lst)) for lst in lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    if len(lst) > 1:\n        return 0\n    else:\n        return 1\n    # If the input list is empty return 0\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Initialize the result to 0\n    result = 0\n\n    # Loop through the list and sum the squared elements\n    for i, value in enumerate(lst):\n        result += value*value\n        result = result*result\n        result = result*(Ceiling*(result+Ceiling))\n        result = result*Ceiling\n\n    return result", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for c in lst:\n        sum = 0\n        for n in range(Ceiling, c):\n             sum += n*n\n         if sum > Ceiling:\n              sum = ceil(sum)\n         if sum > 0:\n               return sum\n\nOutput:\n\n0\n1\n2\n2\n1\n3\n2\n4\n5\n4\n6\n\nNote that Python does not have a square function so this is a more workable solution.\n\nI'd suggest using __len__ instead of the range(Ceiling, c) approach, which can break on infinite lists.\n\nI would suggest using __len__ for sure.\nBut why is range() 'broken on infinite lists'?\n\nrange is defined as:\nrange(a, b)\n     if a > b:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return 0\n    else:\n        return sum(sqr(lst[i]))\n    else:\n        return (sum(sqr(lst[i])) + round(int(Ceiling, i)) for i in lst)\n    def sqr(x):\n    \"\"\"Return the square root of the element x in list, x is any number.\n\n    Examples:\n    For x in [2,4,8] the output should be 4\n    For x in [1,3,5,7] the output should be 7\n    For x in [1.4,4.2,0] the output should be 1.4\n    \"\"\"\n    return (x**x)**(x**(x**x))\n\nOutput:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    def __init__(self, lst):\n         self.lst = lst\n         self.sum = 0\n         self.max = Ceiling\n         self.min = 0\n         self.step = 1\n         self.sum2 = 0\n         self.sum2 = self.sum / self.step\n         self.sum2 = self.sum2 > self.max:self.max\n         self.sum2 = self.sum2 < self.min:self.min\n         self.sum2 = self.sum2 >= self.max:self.max\n         self.sum2 = self.sum2 < self.min:self.min\n         self.sum2 = self.sum2 >= self.max:self.max", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(set(lst, float(len(lst)-1))*float(len(lst)-1))\nI'm guessing you're in a programming class?  Just get the sum of squares of each element,  then square root the sum of squares to get the mean.  The mean is the sum of squares divided by the number of elements.\nI thought of that, but I was told to use a list.\nThe person who told you to use a list is a big old meanie.\nYeah.  I hate him.  He's always picking on me and saying \"I told you so\"</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i in range(len(lst)-1):\n         sum_squares(lst[i])\n         lst[i] = lst[i] + round(int(Ceiling(sum_squares(lst[i]))) * i)\n\nSee also\n Python\n Python decorator\n\nExternal links\n Python Decorators\n Decorator pattern in Python\n Python Decorators Tutorial\n\nExternal links\n Python Decorators\n Decorator pattern in Python\n Python Decorators Tutorial</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    n = len(lst)\n    return sum_squares(n)\n\nf1 = sum_squares([1, 2, 3],10)\nf2 = sum_squares([1, 4, 9],10)\nf3 = sum_squares([1, 3, 5, 7],10)\nf4 = sum_squares([1.4, 4.2, 0],10)\nf5 = sum_squares([-2.4, 1, 1],10)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return 1\n    else:\n        return sum(lst[0].^2 + lst[1].^2 + lst[2].^2)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    if len(lst) > 1:\n\n         # If the list has multiple elements, make sure you're dealing with the first.\n         return 1.0\n\n         # Get the list of squares.\n         sum_squares = []\n\n         # Make sure the first element of the list is squared.\n         for x in lst:\n            if x*x == x:\n                sum_squares.append(x)\n\n          # Round to the upper int.\n         for y in sum_squares:\n              y = int(y) + ceil(y)\n\n          return sum_squares", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst = [1,2,3,5,7,9,11] # given list\n    lst2 = [1,2,3,5,7,9,11] # helper function to return list of lists\n    for a,b in lst2:\n         x,y = a,b\n         s = sqrt(x*x + y*y)\n         return (s**2 for s in range(len(lst) + 1))\n    print(\"sum_squares(lst) = \", sum_squares(lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(np.sqrt(np.sum(x for x in lst)))\n> python sum_squares.py\n6\n> python sum_squares.py [-2.4,1,1]\n6\n> python sum_squares.py [-1,2,3]\n-2\n> python sum_squares.py [-1.4,4.2,0]\n29\n> python sum_squares.py [1.4,4.2,0]\n29\n> python sum_squares.py [1,4,9]\n98\n> python sum_squares.py [1,3,5,7]\n84\n> python sum_squares.py [1.4,4.2,0]\n29\n> python sum_squares.py [1,3,5,7]\n84\n\nThanks for the comment. I guess you are right, in most cases the extra\ncomputation of sqrt is not needed and can be optimized. But the last\nexample is still interesting. I added this test case to the article.\n\nI'm not sure why you", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(x**2 for x in lst)\n    if not x**2 in [0,1,2]:\n        x**2 = int(Ceiling)\n    return sum(x**2 for x in lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return [sum(lst) for lst in sorted(lst)]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return int(lst[::2]*lst[::2])+int(lst[::-1]*lst[::-1])\n    * lst.sum()\n    * lst.round(int(Ceiling))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(int(ceil(lst)))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(sum(square(x)) for x in lst)\n    def sum_squares_2nd(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     \"\"\"\n    return sum(sum(square(x)*x) for x in lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    if len(lst) == 0:\n        raise ValueError(\"Lists must have elements\")\n        return 0\n\n    return sum(lst.square)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst.squared)\n\nHowever, I think you're on the right track, but you have to use the.item() method instead of.items() because you are referring to an item in the list and not the list itself. So, your revised code should be:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n         if i % 2 == 0:\n              return i * i\n         else:\n              return i + lst[i] * (i-1)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(int(Ceiling(lst)))\nI believe the above code is correct. For all the examples in the \"Examples\" section, the output is correct.\n\nYou should write the function with \"return\", not \"def\".\n\nThanks! I will keep that in mind for next time.\n\nThis is not correct.\nI changed the first line to add a comment.\nThis is how you should write your code.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(map(sum,lst))\n\nThe output of this function is not a list of numbers.\n\nTo convert this to a list of numbers, you can convert the result of the function to a tuple and then use slicing to get the individual elements:\n\n>>> lst,sum_squares_tuple=sum_squares(range(3))\n>>> lst[0]\n1\n>>> lst[1]\n2\n>>> lst[2]\n3\n>>> lst[1:3]\n1,2,3\n\nIn [3]:\n>>> sum_squares_tuple.__len__\n3\n>>> lst.__len__\n3\n\nIf you are getting this error:\n\nTypeError: sum_squares() takes 2 arguments (0 given),\nbut 2 were passed (1 given)\n\nthen this is because the function uses arguments 0 and 1 to perform the operation.\n\nIf you use the above method and put your function in a list or tuple then you would not need to call sum_squares_tuple.__len__ in the above example.\n\nReferences</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    def round(x):\n    \"\"\"Round the element x to the given integer Ceiling\n    Examples:\n    For x = 1, the output should be 2\n    For x = 1.9, the output should be 2\n    For x = 2.2, the output should be 2.0\n    For x = -1.8, the output should be -1.0\n    For x = -0.2, the output should be -0.0\n    For x = 1.3, the output should be 1.0\n    For x = 0.1, the output should be 1.0\n    For x = 0.2, the output should be 1.0\n    For x = 1.3, the output should be 1.0\n    \"\"\"\n    return ceil(x)\n    def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    values = [lst[i] for i in range(len(lst) + 1)]\n    max_i = int(len(values))\n    values[max_i] = max(values[i])\n    return values", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return lst.sort()\n    def upper_int(c):\n    \"\"\"You are given an integer c. You need to return the largest int in\n    c's range which is equal or less than c.\n    Examples:\n    For c = [3,4,5] the output should be 4\n    For c = [-100,100] the output should be 100\n    For c = [-1,1] the output should be -1\n    \"\"\"\n    if c > (int(c - 10))**2:\n       return c\n    return int(c - 10)**2", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Construct a list of the elements of the original list\n    a = [x for x in lst]\n    # Construct a new list of the squares of the elements in the list\n    b = [a[x*x] for x in a]\n    # The list of squared elements are then added together\n    c = [b[i] for i in xrange(len(b) + 1)]\n    # The squared elements are then rounded up to the ceil of the element\n    return [c[i] for i in xrange(len(b) + 1)]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for n in lst:\n         sum_squares(n * n)\n         # round up to the nearest integer (first)\n         round(n, ceil(n))\n    return sum_squares(lst)\n\nAn idea of the order of the algorithm is given by the following table (of\nnumbers with a non-zero least positive square root):\n\nInput\n\nOutput\n\n1\n\n4\n\n2\n\n5\n\n3\n\n6\n\n4\n\n7\n\n5\n\n8\n\n6\n\n9\n\n7\n\n10\n\n8\n\n11\n\n9\n\n12\n\n10\n\n13\n\n11\n\n14\n\n12\n\n15\n\n13\n\n16\n\n14\n\n17\n\n15\n\n18\n\n16\n\n19\n\n17\n\n20\n\n18\n\n21\n\n19\n\n22\n\n20\n\n23\n\n21\n\n24\n\n22\n\n25\n\n23\n\n26\n\n24", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return int(sum(int(x)**2 for x in lst))\n    def int(x):\n    \"\"\" You are given a number, you need to convert it to a string.\n    If it is a negative number, then convert it to a positive number,\n    and round it to the nearest integer.\n    Examples:\n    For x = -2.4 the output should be -2\n    For x = -3.3 the output should be -3\n    For x = -3.0 the output should be -3\n    For x = 3.2 the output should be 3\n    For x = 3.0 the output should be 3\n    For x = 4.2 the output should be 4\n    For x = 5.0 the output should be 5\n    For x = 3.2 the output should be 4\n    For x = 3.0 the output should be 3\n    For x = -2.4 the output should be -2\n    For x = -2.4", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    a = sum(lst)\n    return a * (a + 1)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return list(sum(sum(number for number in list if number > 0 else 0))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    if lst:\n        return sum(isinstance(lst[i],int)**2 for i in lst)\n\nI really think you need to use Python 2.7.  That's a pretty small change, and it would remove a lot of the errors.  E.g., your list comprehension example is wrong, because the new Python 2.7 list comprehension syntax is a single expression, not a block.\nThat said, you're right that the sum_squares function should be called for each element in the list.  But I don't think you need to round the inputs first.  Instead, you could just set the input to the correct type, e.g., you could just write:\nsum_squares([1, 2, 3], int(Ceiling))\nYou could even use the new type hinting feature to help the compiler:\nsum_squares(lst, type(lst)[0])\n\nThe problem is that if you have a single number as an input, you need to add it up with something else, and that's something I haven't thought about yet. And if you have a single number as", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    # Build the list with 0 as the first element\n\n    a = [0]\n    for i in lst:\n        a.append(sum(lst[i] * lst[i]))\n        if i%2 == 0:\n            a.append(Ceiling(i))\n\nI think this is a good example to show why Python is awesome. No other language I know of would be able to get so much meaning from so few lines of code.\n\n(There is a minor bug in the code. The second element of the list is not being squared. This does not change the output of the program, but it is still an error.)\n\nAlso, there is no such thing as a good example to show why \"X\" is awesome.\n\nI'm not sure I agree with that. Why is Python awesome? The syntax is very concise, and even though the language has only been around for a few years, many of the most common problems that programmers have had to deal with have already been solved. It is also a very powerful language", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst[0], 2)\n    if lst[0] == -1 else 1\n    return sum(lst[1], 2)\n    if lst[1] == -1 else 1\n    return sum(lst[2], 2)\n    if lst[2] == -1 else 1\n    return sum(lst[3], 2)\n    if lst[3] == -1 else 1\n    return sum(lst[4], 2)\n    if lst[4] == -1 else 1\n    return sum(lst[5], 2)\n    if lst[5] == -1 else 1\n    return sum(lst[6], 2)\n    if lst[6] == -1 else 1\n    return sum(lst[7], 2)\n    if lst[7] == -1 else 1\n    return sum(lst[8], 2)\n    if lst[8]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) <= 2:\n        return 1.0 / lst[0] + 1.0 / lst[1]\n    else:\n        return sum(lst[0] * lst[0] + lst[1] * lst[1])\n    \"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return sum(lst*lst)\n   \n\nThis is a little silly - sum_squares should be written to operate on n-element lists.\n\nYou can think of a list of squares as a vector of length n.\n\nThe problem is that you might not have n elements in your list, so that when you call sum_squares, the result will be NaN.\n\nThe result should be either n-1, if there aren't n elements in the list, or else it should fail to compile, if sum_squares is expected to work on n-element lists.\n\nAs a practical matter, you can't trust a library function to detect for you if you've passed it an invalid number of arguments, so it's a good idea to be explicit about what the function is intended to do.\n\nA more general problem is that sum_squares should be more general than a list of squares. What if you wanted to sum up the squares of vectors, or matrices,", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst)==1:\n        return lst\n    else:\n        return sum(sum(a[i]*b[j] for i, j in enumerate(lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) < 3:\n        return 0\n    else:\n        return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n         y = lst[i]\n         if y > Ceiling:\n              y = int(Ceiling)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 0:\n        return 0\n        else:\n        return sum(sum_squares(lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    for i, x in enumerate(lst):\n         return i*x**2\n    return round(i*x**2, ceil(lst[i]))\n\n>>> sum_squares([1,2,3,4,5,6,7,8,9])\n14\n>>> sum_squares([1,2,3,4,5,6,7,8,9,10])\n98\n>>> sum_squares([1,2,3,4,5,6,7,8,9,10,11])\n84\n>>> sum_squares([1,2,3,4,5,6,7,8,9,10,11,12])\n29\n>>> sum_squares([1.4,4.2,0,1])\n6\n\nThis problem is similar to the classic problem of finding the sum of the\nsquares in a list.</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    \"\"\"Also, we need to round up the fractions to the next integer.\"\"\"\n\n    return sum_squares(lst).round(Ceiling)</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    a = len(lst)\n    # Save the numbers of elements as \"a\"\n    while a > 0:\n       # for (i in lst)\n          # if i is not 0, then its not the last element\n           # we need to add the square of the element\n           # to the sum of squares so far\n           if i % 2 == 1:\n                     # i is divisible by 2 so we need to divide it\n                      # and square the result.\n                        # use the floor function to do the division.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum([(sum(v) for v in lst if v**2 > 1.0) for v in lst])\n\nNote that this function will fail if the input is a list with more than one element:\n>>> sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9])\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: sum_squares() takes exactly 2 arguments (0 given)\n\nIt would be nice if the question didn't require the function to be applied to a list of numbers.\n\nIt may be just my perception of the difficulty, but I thought this was one of the easier questions I've seen in a long while. I wrote a recursive function that did the job and was done in under a minute.\nMy solution was much more complicated than the one the question suggests, though. I thought it would be nice to highlight that there are more than one way to solve the problem.\n\nNot only that, but the \"correct\" answer is a hard-coded function instead of a closure.</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    print lst\n    for i in range(len(lst)):\n        return (i**2 + (i**2)/2) / (2**lst[i])\n    print lst\n\nThat's not actually correct. It works if your list is in the exact order that you put into the function, but it won't work if you shuffle your list.\n\nIt's correct. The Python 2.7 it's targeting has `partial` in its numerical type.\n\nAh. Didn't realize that, thanks.\n\nIn python 2.7 the code is more elegant:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    nl = len(lst)\n    sum = 0\n    for i in lst:\n        sum = sum + floor(sum / Ceiling)\n        sum = sum % Ceiling\n    return sum\n    #----------------------------------------------\n    def floor(num):\n    \"\"\"Return the nearest integer number.\n    Examples:\n    For num = 4, floor(4) = 3.\n    For num = 0, floor(0) = -1.\n    For num = 1, floor(1) = 1.\n    For num = 2.5, floor(2.5) = 2.\n    For num = -2.5, floor(-2.5) = -2.\n    For num = -8, floor(-8) = -7.\n    For num = 0.9, floor(0.9) = 1.\n    For num = 1.05, floor(1.05) = 1.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    def sum_squares_2nd(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list.\n    You also need to round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n              \"\"\"\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(squares(lst))\n    # The above is not the correct way to write this, but it was the only way I could get it to work.\n    # The above returns an empty list, and this is for some reason correct.\n         return sum_squares(squares(lst))\n\nOutput:\n\n14\n14\n14\n84\n29\n6\n-2.4\n1\n1\n1\n1\n\nI was hoping to have more control over the rounding but I couldn't figure out how to do it.\n\nAlso, is there a way to have an \"if\" statement that works the same way as in C, so for example, if my if statement is \"if (x < 0)\" then it will print out \"x is negative\" or \"x is positive\" instead of just printing out \"x is zero\".</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 0:\n        return 0\n    if lst[0] < 0:\n        return 0\n    lst = float(lst)\n    for i in range(len(lst)):\n        lst[i] = float(lst[i]+1.0)\n    if lst[i] < 0:\n        return 0\n    if lst[i] < 0.5 and lst[i] < 0.5:\n        return 0\n    if lst[i] < 0.5 and lst[i] > 0:\n        return 0.5\n    return 0.0", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return int(sum(squares(lst)))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    import math\n    print(\"This is list of numbers: \" + str(lst))\n    print(\"\\t\\tFirst number: \" + str(0))\n    print(\"\\t\\t\\tSecond number: \" + str(1))\n    print(\"\\t\\t\\tThird number: \" + str(2))\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    if len(lst) < 2:\n        return 0\n    else:\n        return sum_squares(lst[0]) + sum_squares(lst[1])", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    from collections import defaultdict\n    import operator\n    import math\n    \"\"\"\n    N = len(lst)\n    Ns = sum(lst)\n    return defaultdict(int)\n    with operator.itemgetter(operator.itemgetter(N, Ns)) as i:\n       for i in defaultdict(int)\n          if i % 2 == 0:\n                return i + (i % 2) * Ns\n            else:\n                return 0\n    return defaultdict(int)\n\nThis is a bit of a hack. There are many other ways to approach the problem.\n\nNice.\nI'm surprised to see how many python programmers use a for loop to add together a list of numbers. The sum function is very elegant and easy to use.\n\nPython has sum() in the math module, which does exactly", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Find the upper int(ceiling) of each element in the list.\n    for i, elem in enumerate(lst):\n       if elem not in range(1,ceiling):\n          sum_squares(elem) += sum_squares(elem)\n         elem = floor(lst[elem])\n    return sum_squares(lst)\n\nThis solution relies on the list being sorted, which is an implementation detail that may change from Python version to version.\n\nThe code is also inefficient if the list is small (that is, if the elements are small) and the ceiling is large, because the code has to repeatedly compute the ceiling and round the element to it, instead of using an upper bound.\n\nIt is not entirely clear what the range-based version does; the example lst = [1,4,9] is a bad choice because it gives the answer as 98, which is not the answer (the sum of the squared elements is 180), and for some unknown reason the code does not work for", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return lst.sum(lst.map(lambda x: x.square()))\n    def sum_squared(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n       \"\"\"\n    return lst.sum(lst.map(lambda x: x*x))\n    # This is an alternative way to write the above:\n    def sum_squared", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(np.sum(lst*2), -np.ceil(np.sum(lst*2)))\n\nYou might find the following article to be of interest:\nhttp://www.python.org/doc/essays/summing-squares.html\n\nIf you're looking for a pythonic way to square the numbers, I'd suggest:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return list(sum(squares(lst)))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i, n in enumerate(lst):\n        x = i\n        y = n\n        x *= x\n        y *= y\n        x *= y\n        x = x*x\n        y = y*y\n        return x*y", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum(abs(lst[i] - lst[i+1])))**2", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    a = int(lst)\n    d = sum(int(a))\n    if d > Ceiling:\n        d = int(int(a))\n        return round(sum(int(a)),d,Ceiling)\n    else:\n        return d\n    \"\"\"\n\nIt compiles fine. I have no idea why you are getting an error.</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst = []\n    for i, v in enumerate(lst):\n       lst.append(v * v)\n       if i%2 == 0:\n          lst = round(lst[:2])\n    return sum(lst)\n\nLambda calculus and list comprehensions provide a more elegant solution:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    print len(lst)\n    square_sum = 0\n    for i, v in enumerate(lst):\n        print \"sum = \", square_sum + v\n        print \"squared = \", square_sum * v\n        print \"rounded = \", (int(int(i)) + Ceiling) * v\n        print \"output = \", (int(int(i)) + Ceiling) * (square_sum + rounded)\n        print \"\n        \"\n    return(output)\n\nI can't get it to work. It seems to be stuck in the for loop, but I can't find where I'm going wrong.\n\nThe problem seems to be that you are adding the squared values to the output for all the elements in the list, not just the ones whose squared values have changed.\n\nI think you should use a function called square_remainder. That function can be used to get the value of a number divided by its square, which", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    max_i = (i for i in lst if i < lst[0])  # get the largest of the numbers in the list\n    if max_i > 1:  # If there is more than one number larger than 1, then return that.\n       return max_i", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    count = 0\n    for n in lst:\n        count += n\n        n = int(Ceiling(n))\n    return count\n    \"\"\"\n\n    def sum_squares_1(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for x in lst:\n        if x > 0:\n            x = x + (x**2)\n            return (x**2)**2\n\nWhat is wrong with this program?\n\nGuesses welcome.\n\nAnswer below.\n\nFirst hint:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    square = int(Ceiling)\n    for i in range(len(lst)):\n         lst[i] = lst[i] + square\n    return sum(lst[::-1])", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst_sum = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n             if lst[i] > 0:\n                 lst_sum += lst[i]**2\n            else:\n               if lst[i] < 0:\n                   lst_sum -= lst[i]**2\n              else:\n                   lst_sum /= lst[i]**2\n                   lst_sum %= lst[i]**2", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for number in lst:\n        number = int(number*2) + 1\n        if number is not None:\n           return int(number*2) + int(number*2) + int(number*2) + int(number*2) + int(number*2) + 1", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return round(sum(lst*lst),0)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Return the sum of squared numbers in the given list\n    for number in lst:\n        square = 2 * number\n        sum_squares(square)\n    return sum_squares", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n         return sum(lst.squared)\n    \"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    def lst_squared(lst):\n    \"\"\"Return the square of each element in the list, round the result to the int(ceiling).\n    Examples:\n    For lst = [1,2,3] the output should be 9\n    For lst = [1,4,9] the output should be 36\n    For lst = [1,3,5,7] the output should be 27\n    For lst = [1.4,4.2,0] the output should be 12\n    For lst = [-2.4,1,1] the output should be 4\n     \"\"\"\n        lst_squared = [lst]*(lst_squared + 1)\n        lst_squared /= 2\n        return (lst_squared)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    r, square_n = round(lst[::-1])\n    if r > 1 or square_n == 0:\n        return round(r*r)\n    else:\n        return sum(square_n for square_n in range(r*r))\n    return sum_squares", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if lst is not None:\n        return sum(lst,0)\n    else:\n        return sum(lst,ceil(int(lst[0]))*int(lst[1]))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n         if (i % 2 == 0) or (i % 3 == 0) or (i % 4 == 0) or (i % 5 == 0):\n              return i\n    return sum(squares(lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return [round(sum(x)**2 for x in lst), x]\n\nHere is how to do it without recursion:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # Take the first element from the list, call it x\n    x = lst[0]\n    # Take the last element from the list, call it y\n    y = lst[lst.length() - 1]\n    # Take the square of x\n    z = x**2\n    # Take the sum of the squares\n    return sum(z for z in z if z**2) + z**2\n    print(sum_squares(lst))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    results = []\n    for i, x in enumerate(lst):\n        x = (x - ceil(x)) * ceil(x)\n         results.append(x)\n    return results", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    return sum(squares(lst)) * (len(lst) * 2)\n\n    print sum_squares([1.5,3.4,4.6])\n\n    print sum_squares([1.5,4.6,2.9])\n\nHere is my solution:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(sqrt(lst)) / float(Ceiling)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return [sum(i) for i in lst if i % 2 == 1]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst ** 2, 0) + round(lst, Ceiling)\n\nThis is not how python does it. Python uses the __sum__ function, which is a function from the builtin function set. __sum__ doesn't use an arbitrary function like this, but instead uses the builtin function sum, which is a recursive function that works by keeping track of a accumulator.\n\nI'm curious what would happen if you tried something like this:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    from operator import add\n    from operator import int\n    from operator import int(int)\n    from operator import int(int,int)\n    from operator import int(int,int,int)\n    from operator import int(int,int,int,int)\n    from operator import int(int,int,int,int,int,int)\n    from operator import int(int,int,int,int,int,int,int)\n    from operator import int(int,int,int,int,int,int,int)\n    from operator import int(int,int,int,int,int,int,int)\n    from operator import int(int,int,int,int,int,int,int)\n    from operator import int(int,int,int,int,int,int,int)\n    from operator import int(int,int,int,int,int,int,int,int)\n    from operator import int(int,int,int,int,int,int,int,", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst**2)\n    def lst_squared(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     \"\"\"\n    return sum(lst**2)\n\nCode:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(abs(lst))\n    def abs(x):\n    \"\"\"Return absolute value of x\n    Example: abs(4) = 4\"\"\"\n    return x", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return lst ** 2\n    def __len__(self):\n    \"\"\"Return the length of the list.\"\"\"\n    return len(self.__dict__)\n\nfrom random import randint", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    for i, x in enumerate(lst):\n        square = x*x\n         if x <= 1:\n             square = ceil(square)\n             sum_squares(lst) = sum(square)\n             square_to_int(square)\n                print \"The total is\", sum_squares(lst), \"squares\"\n               print \"The total is\", square_to_int(square), \"integers\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    import itertools\n    a = itertools.repeat(2)\n    b = itertools.repeat(1)\n    c = itertools.repeat(1)\n    d = itertools.repeat(1)\n    lst = [a, b, c, d]\n    for x in lst:\n        if x < 2 and x > 0:\n             a = x*x\n             b = x*x\n             c = x*x\n             d = x*x\n          else:\n             a = 1.0 / x\n             b = 1.0 / x\n             c = 1.0 / x", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    #\"\"\"\"\"\n    return sum(lst == 0? 0 : [math.sqrt(lst) for lst in lst])\n\nI hope this is the right place for my question. I am trying to figure out how to return a list from a function with an exception. I have seen something like this in the past and I cannot find a good example.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum_squares(lst))\n    def sum_squares_and_round(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the lower int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     \"\"\"\n    return (sum_squares_and_round(lst))\n    if __name__ == \"__main__\":\n    lst = [1,2,3]\n    print sum_", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) > 1:\n        return 0\n    for c in lst:\n        if c >= 0:\n             c *= 10**(c/lst[0])\n             c *= 10**(c/lst[1])\n             c *= 10**(c/lst[2])\n             c *= 10**(c/lst[3])\n             c *= 10**(c/lst[4])\n             c *= 10**(c/lst[5])\n             c *= 10**(c/lst[6])\n             c *= 10**(c/lst[7])", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst_squared = [0 for a, b in enumerate(lst) if a*b > Ceiling]\n    return lst_squared\n\nOutput:\n\n14\n98\n84\n29\n6\n\nIn general, if a and b are numbers, and a*b > Ceiling, then the formula for the output is a*b + (a+b)*Ceiling.\n\nThis is a simple recursive function. Its efficiency can be dramatically improved by using list comprehensions.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    def add_squared(i,a):\n          a = a * a\n          return a\n\n    def round(x):\n          x = int(x) + Ceiling\n\n    return sum_squares(lst)\n\n>>> sum_squares([1,2,3], round(x))\n\n14\n>>> sum_squares([1,4,9], round(x))\n\n98\n>>> sum_squares([1,3,5,7], round(x))\n\n84\n>>> sum_squares([1.4,4.2,0], round(x))\n\n29\n>>> sum_squares([-2.4,1,1], round(x))\n\n6\n\nNote the type of the variable lst in this example.\n\nSummation of matrices\n\nA common operation in linear algebra is the sum of the elements of a matrix. This is typically done using the Gaussian elimination algorithm. One way to do this using Python is to convert the matrix into", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    a = 0\n    for item in lst:\n        if item > Ceiling:\n            a = a * (Item + Ceiling)\n        else:\n            a = a * item\n    return a", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(square(lst)) / Ceiling(sum(square(lst)))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum(a**2 for a in lst))/sum(a**2 for a in lst)\n    # round to the nearest integer\n\nThere are other ways to handle this problem, but I thought this was a good first example.\n\nimport math", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    return sum(lst,2)\nYou want to check the answer.\nFor the first example, the answer should be 14.\nFor the second example, the answer should be 98.\nFor the third example, the answer should be 84.\nFor the fourth example, the answer should be 29.\nFor the fifth example, the answer should be 6.\n\nIf you do want to use a for loop, I would use an integer variable to hold the sum (so you don't have to change it at all) and then a variable to hold the square.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return 1.0\n    else:\n        return sum_squares(lst,0)\n    def sum_squares_in_list(lst,a):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squares in the given list,\n    round each element in the list to the lower int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 2\n    For lst = [1,4,9] the output should be 4\n    For lst = [1,3,5,7] the output should be 2\n    For lst = [1.4,4.2,0] the output should be 0\n    For lst = [-2.4,1,1] the output should be 0\n        return sum_squares_in_list(lst,a", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    x = 0\n    for element in lst:\n         x = x + int(element) * int(Ceiling)\n    return x\n    \"\"\"\n    return sum_squares(lst)\n\nI was asked to write a program to sum squares (from 1 to 100) of numbers in an array.\nI know how to do this, but I'm not very confident that my code is correct.\nThe task itself is very simple but I need to do this as part of a project I'm doing at the moment, so I would like to ask you guys for some help.\nThe code has to be executed in Python 2.4, and I'm using IDLE.\n\nI have made a few mistakes in my code, the last one being that I was using\nint(Ceiling) instead of int(min).\nIt seems to be a little less error-prone than using the min function.\n\nYou have a few bugs in your code. The first is that int(min) is equivalent to int(Ceiling), and the second is that you're calculating the squares of numbers", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    for item in lst:\n        print \"item:\", item\n        print \"sum_squares(lst):\", sum_squares(lst)\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(lst)\n    if lst:\n        return sum(sum(lst))\n        return int(Ceiling(int(lst)))\n        return lst\n    #################################################################################################################################################################################\n    def main():\n        #################################################################################################################################################################################\n    if __name__ == '__main__':\n        sum_squares = main()\n        print sum_squares(range(1,10))</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # first, round the elements to the upper int(Ceiling) first\n    return lst.sum(range(Ceiling))\n    # now, sum the squared numbers\n    return lst.sum(range(0,2))\n\nOutput:\n\n[1,4,9] => 98\n[1,3,5,7] => 84\n[1.4,4.2,0] => 29\n[-2.4,1,1] => 6\n\nSee also\n\n Generator expression\n\nReferences\n\nExternal links\n\nGrammar and Code Generation in Python\nExample for sum_squares() in PEP\nA cleaner way to write sum_squares() using generator expressions\n\n__NOTOC__</s>", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    def __add__(self, i1, i2):\n        return i1 + i2\n        def __mul__(self, i1, i2):\n        return i1 * i2\n        def __int__(self, i1):\n        return i1\n        def __mod__(self, i1):\n        return i1 % i2\n        def __abs__(self, i1):\n        return i1 % i2\n        def __round__(self, i1, ceil):\n        if i1 == ceil:\n            return i1\n        return __add__(self, i1, ceil)\n        def __floor__(self, i1):", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n\n    return lst.sum(lst.squares())\n    if lst.startswith('-') or lst.startswith('+') or lst.startswith('*'):\n        lst = [lst.sub(1) for lst in lst]\n    return lst.sum(lst.squares())\n\nIf you want to be able to do it for arbitrary lists, you could try this:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    from itertools import chain, izip\n    from itertools import izip\n    from itertools import izip\n    from math import ceil\n\n    c = ceil(int(lst[0]) + int(lst[1]))\n    c = ceil(int(lst[0]) + int(lst[1]))\n\n    for number in lst:\n         d = number * c\n         c = ceil(int(d) + int(d) * c)\n         c = ceil(int(d) + int(d) * c)\n\n    return izip(c for c in lst)\n\n         return izip(c for c in lst)\n\nI'm quite sure this is pythonic enough.", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum(x**2 for x in lst)) / lst.size()", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) > 0:\n        temp = 0\n        sum = 0\n        while temp < len(lst):\n           temp = sum + lst[temp] * lst[temp]\n           sum = sum ** 2\n           if sum >= Ceiling:\n               sum = sum ** 2\n              lst[temp] = ceil(temp)\n              temp = 0\n             return sum", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if lst[0] > Ceiling:\n        return lst[0] + lst[1]*lst[0] + lst[2]*lst[1] + lst[3]*lst[2]\n    elif lst[0] < Ceiling:\n        return lst[0] + lst[1]*lst[0] + lst[2]*lst[1] + lst[3]*lst[2]\n    elif lst[0] == Ceiling:\n        return lst[0] + lst[1]*lst[0] + lst[2]*lst[1] + lst[3]*lst[2]\n    elif lst[0] % Ceiling == 0:\n        return lst[0] + lst[1]*lst[0] + lst[2]*lst[1] + lst[3]*", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    n = len(lst)\n    while n > 0:\n        sum = 0\n        for i in range(n):\n            sum += sqrt(i)\n            if lst[i] == 0:\n                round = int(ceiling(int(lst[i])) / (float(lst[i])**2))\n               lst[i] = round\n               sum += round\n               n --\n            return sum\n\nIt's cute, but I think this:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum([lst[i] for i in range(len(lst) - 1)]) for i in range(len(lst) - 1)) + round(int(Ceiling,lst[i]))\n\nI would like to know what the differences are in the implementations. For the most part, I would say that they are very similar, but there are a couple of things that are different.\n\n1. The code in the question works with lists and tuples. The code from the article only works with lists.\n\n2. The code in the article is written in a way that is more Pythonic.\n\nIs there anything else?\n\nThanks,\n\nPhil\n\nOn Apr 17, 2012, at 12:20 PM, Ovidiu Paun <ovidiu.paun at gmail.com> wrote:\n\n> On Mon, Apr 16, 2012 at 10:59 PM, Phil Arnold <phil.arnold at gmail.com> wrote:\n> > I would like to know what the differences are in the implementations. For the most part, I would say that they are very similar, but there are a couple of", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum_squares(lst[0])", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst = [lst[0]*lst[1] + lst[2]*lst[3] + lst[4]*lst[5] + lst[6]*lst[7]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum(square(x)) for x in lst)\n   \n\nPython 3 syntax:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    c = len(lst)\n    for i in range(c):\n        c = c-1\n        sum = 0\n        for j in range(1,2*c):\n                sum = sum + (lst[i]*lst[j])\n                 lst[i] = lst[i]*(lst[i]+1)\n                 lst[j] = lst[j]*(lst[j]+1)\n    return sum", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst_squared = []\n    i = 0\n    for x in lst:\n        if (x % 2 == 1 and x < Ceiling):\n            i += 1\n            lst_squared.append(x)\n            lst_squared.append(i*x**2)\n            lst_squared.append(i*x**2)\n            lst_squared.append(i*x**2)\n            lst_squared.append(i*x**2)\n    return sum(lst_squared)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if len(lst) < 2:\n        raise ValueError(\"list too short\")\n        return 0\n    if lst[0] == 0 or lst[-1] == 0:\n        return 0\n    a = 2 ** lst[0] ** lst[-1]\n    for x in lst:\n        if x == 0 or x == -1:\n           a *= 1\n         if x in [1,4,9]:\n             a *= a ** 2\n             return a\n\na = 0\nfor x in lst:\n    if x == 0 or x == -1:\n        a = a * 2\n        if x in [1,4,9]:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    lst_sum = 0\n    for n, x in enumerate(lst):\n        lst_sum += x**2\n        round(lst_sum) = round(lst_sum*2) + ceil(int(lst_sum))\n        lst_sum = lst_sum/2\n\nWhy not just\nfor n, x in enumerate(lst):\n         lst_sum += x**2\n         round(lst_sum) = round(lst_sum*2) + ceil(int(lst_sum))\n\nI don't really see a benefit.\n\nThat's what I thought too. I think the reason that was given was that the author didn't want the programmer to be able to round up to a higher integer than the max value.\nI would have just written\nfor n, x in enumerate(lst):\n         if n == 0:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    if nrow(lst) == 1:\n        return sum(lst)\n    else:\n        return sum_squares(lst[0:nrow(lst)])\n        return sum_squares(lst[nrow(lst)-1])\n    \"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    output = []\n    for i, x in enumerate(lst):\n        x2 = x**2\n        if x2 == 0:\n            output.append(2*x)\n            x2 = x**2\n          if x2 == 0:\n             output.append(4*x)\n            x2 = x**2\n          if x2 == 0:\n             output.append(9*x)\n            x2 = x**2\n          if x2 == 0:\n             output.append(14*x)\n            x2 = x**2", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return (sum(x) for x in lst) / (float(x) - float(Ceiling))\n\nHere's a python version:", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return [sum(squares(i) for i in lst) for i in range(len(lst))]", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    k = 0\n    for i in lst:\n        if int(i) <= Ceiling:\n            k += i\n    return int(k)\n    \"\"\"\n    # set a default for the output to show we are doing something\n    print'starting sum'\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print 'output is', sum_squares([]).sum()\n    print", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # The sum of squared numbers is\n    # lst2 + (lst2/2)2 + (lst2/4)2 +...\n    # This is the result we want.\n    return (sum(lst2))", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(int(lst[i]*lst[i]*lst[i]*lst[i]))\n    if i < len(lst) else 0\n\n...\n\n    if lst[1] < 1:\n        return sum_squares(lst[2:] - lst[1:])\n\n...\n\n    return sum_squares(lst)", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    # total number of elements in the list (lst)\n    num = len(lst)\n    # square of each element\n    # remove 0s\n    total = sum(lst)\n    for i in range(0,num+1):\n       total = total*sum(lst[i:i+1])\n       i = i + 1\n    return total\n    \"\"\"", "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\" \"\"\"\n    return sum(squares(lst))"]]