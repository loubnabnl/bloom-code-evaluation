[["def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n+1):\n       a = i * i\n       if a is not None and i is even:\n          return a\n       else:\n          return [a for a in range(1, n+1)]\nThis works on my Mac.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [i for i in range(n)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    list = []\n    for i in range(1,2):\n       if i % 2 == 1:\n           list.append((i * i))\n          else:\n            list.append((i * (i-1)) + 1)\n    return list\nThis is inefficient as it is effectively a copy of the list. You need to add a head and tail (the length of the list).\nI'd also recommend using a generator expression instead.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    list = []\n    i = 1\n    while i < n:\n        if i % 2 == 0:\n            list.append(i)\n        else:\n              list.append(sum(i-1, 1))\n        i += 1\n    return list\n\n    def factorial(n):\n    \"\"\" Implement the function factorial that takes n as a parameter\n    and returns the factorial of n.\n    The factorial of n is the product of the numbers from 1 to n (1 * 2 *... * n).\n    Example:\n    factorial(5) == 120\n    \"\"\"\n\n    return n * factorial(n - 1)</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    # 1. We can use the factorial of i for the first list element\n    if i % 2 == 0:\n       return [i * i for i in range(i+1)]\n    else:\n       return [sum(range(1, i+1)) for i in range(i+1)]\n    return list(range(1, n))\n\nThis is a much better choice than my own solution.\nI wasn't sure if that was a good solution or not, so I thought I'd ask if there was a better way.\n\nYour solution is good for counting from 1 to n inclusively, but it doesn't work for the other cases.\nFor example, the number 42 has the factorial of 6. How would you go about counting the number of even- numbered items in a list of 42 items?\n\nI see your point.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n % 2 == 0:\n        return [n * (n + 1) for n in range(2)]\n    else:\n        return sum([n * (n + 1) for n in range(1, i + 1)] if n % 2 == 0 else n * (n + 1) for n in range(1, i + 1)]</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = int(input('Enter a number: '))\n    if n == 0:\n        return []\n    else:\n        for i in range(n - 1):\n           if i % 2 == 0:\n                 return [i]\n        else:\n                return [i + 1] + f(i - 1)\n\nI was taught to do this as well. I remember having to do a factorial of some large number, and doing it this way was a lot easier than trying to figure out the base cases and all that.\n\nSame. In fact I was taught to do this in the following manner:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n       return [0] * i * (n - i)\n\nI read your comment before seeing the code. I expected that it would be a recursive function. This version isn't. It's a loop. It's a bit of a non-sequitur to call it a recursive function, as it has a loop.\n\nAh, ok. I didn't know there was a difference. Thanks for the clarification.\n\nIn other words, it's not a recursive function, it's just a function that uses recursion. There are lots of problems that can be solved without recursion.\n\nI'm sorry, I must be missing something here. What is the difference between a function that uses recursion and a recursive function?\n\nThis is a function that uses recursion:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    print(\"f(5) == [\")\n    for i in range(1,5):\n       print(\" %s \", f(i))\n       if i % 2 == 0:\n          print(\" %s \", sum(f(i) for i in range(1,5)) + f(i))\n\n    print(f(5))", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    # Create a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    n = len(n)\n    new_list = [1]*n\n    # Now, for each i from 1 to n, check if i is even and if so add to the list\n    for i in range(1,n):\n        if i % 2 == 0:\n           new_list.append(i)\n    return new_list", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    result = []\n\n    for i in range(1, n+1):\n        result.append(i)\n    return result\n\n    print(f(10))\n    print(f(2))\n    print(f(1))\n\nOutput:\n[1, 4, 9, 25, 36]\n[1, 4]\n\nNot efficient at all.\nIn Python:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    k = 0\n    while k < n:\n       if n % 2 == 0:\n           return (k, 1)\n       else:\n           return (k, n - 1)\n    return k\nI think you meant to say \"return (k, n)\" as that's what the body of the function is doing.\n\nYes, you're right. That was a typo. Thanks!</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [n if n%2 == 0 for n in range(0, n + 1)]\n\nNot sure what the \"if n%2 == 0\" is doing here, but I guess it's for detecting whether the number being computed is even or not.\n\nThe if statement is missing. It should be:\nreturn [n for n in range(0, n + 1) if n % 2 == 0]\nI guess the author just forgot the else clause.\n\nNah, it's not missing. It's just that the \"else clause\" is completely extraneous.\n\nWhy is the else clause extraneous? Isn't it there for error handling?\n\nThe only error that can occur is an out of range value. So in this case, error handling would be redundant.\n\nTrue.\n\nThe underlying code is taken from:\nThe post also states:\n_\"This is one of the first examples from the book Code Complete. I chose\nto implement the function with a pure Python function rather than using\nthe list comprehension.\"_\nI think this is an interesting comment.\n\nAnd the implementation at the end is almost identical:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    result = []\n    while i<=n:\n       result.append(i ** n)\n    return result\n\nSee also\n List comprehension\n Recursion\n\nReferences\n\nExternal links\n Explanation of Python's new list comprehension syntax</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n         f(i) = f(i-1)+f(i-2)\n    return f(n)\n\nPython", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\nreturn [1, 2, 3, 4, 5]\n\nThe whole article was about getting people to write tests. It was a waste of time to focus on the exception that is not covered by the test.\n\nThe author of the article only said:\n_\" It's a good practice to always add an exception in the last line of a\nfunction.\"_\n\"Always\" is a strong word.\nThe author never said that the last line of a function should always be tested.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(0, n):\n       if i % 2 == 0:\n            f(i) = f(i) * (i + 1)\n        else:\n            f(i) = f(i) + 1\n    return [f(0) for f in f(n)]\n\nThis is a very clear and concise explanation. It's also a good illustration of why you shouldn't let the user pass in a function as the argument to another function.\n\nSorry, but I don't understand. Why?\n\nI think he means that you should never pass in a function to be evaluated as an argument. For example, you should always pass in a value that's ready to be evaluated.\n\nI think that's a good rule of thumb, but sometimes you need a little more flexibility.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nn = 1\n    while n!= 0:\n        i = n%2\n        if i == 0:\n            break\n            n += i\n    return [n]</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    list = []\n    while i < n:\n        i = i + 1\n        if i % 2 == 0:\n            return list\n          else:\n            return [i, i * i + 1 for i in range(1, n)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n       if i % 2 == 0:\n           return [i] + [1]\n       else:\n           return [i * n] + [1]\n\nSo, you're using a factorial-based approach to determine whether you can stop searching, but you're only using it on the even numbers.\nSo, you're going to have some trouble when you get to 5.\n\nOr, as you can see if you read the whole thing:\n\nYou should use the factorial of 5 instead of 5 in the original code.\n\nI realize this is a bit of a weird example, but I like it because I can actually _see_ the bug.\nI like how the problem is stated in a way that you can easily understand, and then the suggested code is something you can read and understand and actually verify as correct, and you know the bug is in there somewhere.\n\nYeah, I wrote this as a deliberate attempt to teach people how to write test cases for their code, by writing a bug", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [x for x in range(1, n+1)]\n\nint factorial(int n) {\n    return n!;\n}</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    result = []\n    for i in range(n):\n       if i == 0:\n           result.append(0)\n           result = result[:-1]\n         else:\n            result.append(1)\n           result = result[:-1]\n    return result\n\nOutput:\n0 1 2 6 24 15\n\nThe alternative is to use a generator.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    for i in range(2, n+1):\n        if n % i == 0:\n            yield i\n                  break\n\n    for i in range(n):\n        yield i*i\n\nThat's pythonic.\n\nOne neat thing that python does, as pointed out in the video, is that it takes the same code and runs it on a wider variety of data types. So in addition to floating point numbers it can also work on integer or boolean data.\n\n\"that it takes the same code and runs it on a wider variety of data types\"\nDoes it really? The factorial code mentioned above, does it still work on a wider variety of data types? I'm not familiar with Python.\n\nThe factorial function for integer and float data is 1/1.0. The factorial function for boolean data is 1.\n\nIt's also worth pointing out that in python the function is a first class object and has attributes like __name__, __doc__, and __call", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nwhile True:\n    for i in range(n):\n        n = n * n\n    if i % 2 == 0:\n        n[i] += 1\n    return n", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    def _factorial(n):\n    \"\"\"Implement the _factorial function that takes n as a parameter,\n    and returns the factorial of n. The factorial of n is n!\n    Example:\n          >>> _factorial(5)\n            120\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return _factorial(n - 1)\n\nf(5) == [1, 2, 6, 24, 15]\n\nAs for the original post's question, the factorial of 5 is defined to be 5! which evaluates to 120.\n\n_factorial(5) is defined to be 120. In Python, we use lambda notation to define a function. The body of the lambda expression is evaluated once, when the function is created, and stored as the value of the function. So _factorial(5) is equal to 120. The body of the _factorial function has no side effects, so the value", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, 2, 4, 8, 16, 32]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, 0, 1, 0, 1, 1, 0]\n\nPython's list comprehensions are an incredible time saver.\n\nThat's a good one, the succinctness would make a great interview question.\n\nIf the interviewee starts with f(1) == [1, 0, 1, 0, 1, 1, 0] and then starts a looping discussion, I might be inclined to make a mental note about the interviewee's depth.\n\nNot sure if you are being sarcastic, but it seems like a perfectly reasonable thing to do. I would probably take it a step further and ask what the best case scenario is. Then, after the interviewee has answered, I would ask what the worst case is.\n\nIt isn't sarcasm. That's a perfectly valid thing to do. I was just pointing out that it isn't actually necessary, and that you can just use an approach that is more direct and doesn't require you to iterate over all values.\n\nAaah, I see. Sorry about that, it's hard to tell over the internet :)\n\nAnother way to do this:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    n = 0\n\n    for i in range(n):\n         if i % 2 == 0:\n             f(i) = [i]\n             n += 1\n\n    return [f(n) for n in range(n)]\n\nf = lambda n: f(n)\n\nf = lambda n: n if n % 2 == 0 else [n*factorial(n-1)]\n\nf = lambda n: n if n % 2 == 0 else n*factorial(n-1) + n*factorial(n-2)\n\nf = lambda n: n if n % 2 == 0 else 1 + n*factorial(n-2) + n*factorial(n-3)\n\nf = lambda n: n if n % 2 == 0 else 1 + n*factorial(n-2) + n*factorial(n-3)\n\nf = lambda n: n if n % 2 == 0 else n*factorial(n-1) + n", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    i = 1\n    for i in range(n):\n       sum = 0\n       for j in range(i+1, n):\n           sum += j\n    return sum\n\nThis is a textbook example of why functional programming is so hard to debug. The definition of the function is absolutely unreadable for anyone who doesn't already know how to solve it. In particular, the loop is just a mess.\nIn contrast, here is a Python version:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n % 2 == 0:\n       return [i for i in range(1, n+1) if i % 2 == 0]\n    else:\n       return [i for i in range(1, n+1) if i == 0]\n\nmy code is not working. I have some problem with the range(1, n+1) that can't find the position of n+1. Thank you for help.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    factorial = 0\n    for i in range(2,n):\n         if i % 2 == 0:\n              factorial *= factorial\n           else:\n               factorial = factorial * (i+1)\n    return factorial\n\nYour example is missing a closing bracket.\n\nNot a very good example, however. You are returning the same list for all numbers. I think the author of the example meant that it should be the sum of the odd numbers up to i.\n\nYup, that was the intent. I apologize for the omission, I'll correct it.\n\nIt seems to be the \"best\" example if you want to see how python-for-the-web is done.\n\nHa! For the record, I had to look up both C-style for loops and how to use them with a function. I'm not a seasoned Python programmer.\n\nIt's not really a Python for-loop.\nThe Python for-", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = int(input(\"n=%d\", n))\n    if n % 2 == 0:\n        if n == 2:\n           return [1, 0]\n        else:\n            return [0, n]\n    else:\n        return [n]\n    return [n]\n\nOutput:\n\nf(5) == [1, 2, 6, 24, 15]\n\nSee also\n Factorial\n\nReferences\n\nExternal links\nPEP 8</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n+1):\n       if i % 2 == 0:\n           return [i, i*i]\n    else:\n           return [i+1, i*(i+1)]\n\n(I'm the author of the blog post)\nYou can also make it more generic:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    for i in range(1, n+1):\n        if i%2 == 0:\n            return [i*n for i in range(2, n)]\n        else:\n            return [i+1 for i in range(2, n+1)]\n    return list(zip(range(1, n+1), range(2, n+1))).\n\nPython version:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n < 1:\n       raise ValueError(\"n must be >= 1\")\n    n = (n + 1)/2\n    if n%2 == 0:\n       n = (n + 1)/2\n    else:\n       n = n + 1\n    return [i*n for i in range(n)]\n\nThis is some kind of counting the number of even and odd numbers without an even and odd number. It goes from 2 to n. Then, if the number is even, it does the sum of the numbers from 1 to n. Otherwise, it multiplies them.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n % 2:\n       return []\n    else:\n       return [0] * (n - 1) + [n]\n\nAnother more idiomatic way is to use for loops, and just add a custom list comprehension:\n>>> def f(n):\n...        if n % 2:\n...            return []\n...        else:\n...            return [i for i in range(n)] + [n]\n...\n>>> f(5)\n[1, 2, 6, 24, 15]\n>>> f(6)\n[1, 4, 9, 25, 36]\n>>> f(6)\n[1, 4, 9, 25, 36]\n>>> f(6)\n[1, 4, 9, 25, 36]\n>>> f(6)\n[1, 4, 9, 25, 36]\n\nI don't know if list comprehensions are idiomatic, but you can do the same with a for loop", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = int(n)\n    return [0]*(n-1) for i in range(0,n)", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return n * (n-1) + sum(i for i in range(0, n))", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return list(range(1, n+1))\n    @return a list of size n", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    def f():\n    \"\"\" Implement the function f.\n    Returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    a = []\n    for i in range(1, n + 1):\n        if i % 2:\n           a.append(n)\n        elif i % 2 == 1:\n           a.append(n / 2)\n    return a\n\nThere's a more pythonic way of doing this:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n\"the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\"\n\nwhat is the n in your factorial, i?\n\nAlso, how do you \"sum up the numbers from 1 to i\"?</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n       return [i] + n if i % 2 == 0 else [i] * n\n       return [0]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n > 0:\n        return [1, 1]\n    else:\n        return sum(1 for i in range(n))</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = 1\n    for i in range(n+1):\n        if i%2 == 0:\n            f(i) = 1\n         else:\n             f(i) = sum(1,i)\n\nA popular pattern on the Python forum is to write up a completely ridiculous example of the language. This is a common way to draw attention to an issue, particularly for the beginner.  (It's also a pretty fun game.)\nFor example:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [n for n in 1:n if n % 2 == 0]\n    for i in range(2,n+1):\n        return [n for n in range(1,n+1):n]\n    return f\n\nThe code is (unfortunately) in Javascript, but the gist of it is that you can use any language to generate Javascript code. You could use it to generate the code for a recursive factorial function, for example.\n\nOr, you know, just write it in Javascript.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n == 0:\n        return []\n    for i in range(1, n):\n         if n % 2 == 0:\n             return sum(numbers(i))\n    return []\n\nI think this is pretty clear from the code. You're taking the value at the index, and then checking whether it's even or not. If it is, you return the factorial of that index; if it's not, you return the sum of the numbers from that index to the end of the list.\n\nIn addition to making the code harder to understand (because there's a lot of boilerplate) this would also increase the amount of memory used by the program. For instance, if you have a list of size 1,000,000, the factorial of a single index would require about 9,000,000 + 9,000,000 = 18,000,000 integers to be loaded into memory, even if the list is not iterated. With the code above, the program would only load 18,000 integers into memory.\n\nI'm not", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return []\n    def factorial(n):\n       for i in range(1, n - 1):\n          if n % i == 0:\n             return i\n        else:\n             return 1\n       return n\n    # input: f(100)\n    # output: [100, 50, 25, 5]\n\nfunction fib(n)\n    if n == 0 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n\nfunction factorial(n)\n    if n == 0 then\n        return 1\n    else\n        return fib(n) * fib(n - 1)\n\nI'm not sure how this works. I thought the fibonacci series was a recursive function.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if i == 0:\n       return [0]\n    elif i % 2 == 0:\n       return [1] + [0]\n    elif i % 2 == 1:\n       return [2] + [0]\n    elif i % 2 == 2:\n       return [3] + [0]\n    elif i % 2 == 3:\n       return [4] + [0]\n    elif i % 2 == 4:\n       return [5] + [0]\n    else:\n       return [0] * i\n\nThis is the same as the first version, except that it is more clearly written.\n\nHere's another way to write the same thing:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n       return [1, n * i, n * i + 1, n * (n - i - 1)]\n\nThe Python code above implements a function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise.\n\nIn terms of computational complexity, the factorial function is an  time algorithm. The factorial of a number x is defined as the product of all the positive integers from x down to 1.\n\nComputational complexity\nComplexity analysis of the factorial function has traditionally been carried out in terms of the function's complexity as a recursive function. The factorial function is computable, but in practice most recursive functions are implemented using iterative algorithms.  The complexity of the factorial function depends on the base of the logarithm.\n\nThe complexity of the factorial function is  when its base is 2 (the base of the binary logarithm),  when its base is 10 (the base of the decimal logarithm", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for n in range(1,10):\n       for i in range(1,10):\n          if i%2 == 0:\n               n = n * i\n            else:\n              n = n + 1\n    return [n]\n\nI know its not the most elegant solution, but it works well.\n\nThere are many different solutions but this is probably the best (at least it's one I know).\n\nIf you're looking to read it in a consistent, legible fashion, I believe this is the way to go:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, sum(1, i) for i in range(1, n)]\n\nwhile the one above is more idiomatic and is clearer what is going on:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    result = []\n    for i in range(1, n):\n       if i % 2 == 0:\n          result.append(i * i)\n    return result\nIf I were asked to implement f, I would do it like this:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [x*(x+1) for x in range(0,n)]\nWe can make the last line shorter by using the builtin `range` function.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n+1):\n        yield i * i\n    return [0]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n         if i % 2 == 0:\n               return [1, i*i for i in range(i+1, n)]\n         else:\n               return [1, i*(i+1) for i in range(i, n)]\n    return f", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, 2, 3, 4, 5]\n\nimport math", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [n]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [i * i for i in range(1, n) if i % 2 == 0]\nYou need to give more details.  What is it that you are doing?  And is that function really the correct function to be using?\nHint:  Just because you find a function on the internet doesn't mean you can use it for what you want.  I'm guessing that function is just a demonstration of the principle of what you are supposed to be doing.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    n = n + 1\n\n    if n % 2 == 0:\n       return [1, n]\n    else:\n       return sum(1 for i in range(n))\nI prefer to write the first line as:\n    n += 1\nThis gives an early indication of what the function is doing.\nIn general, you should give an early indication of what the function is doing. E.g.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    list = []\n    while i < n:\n       if i % 2:\n          list.append(1)\n       else:\n          list.append(n / i)\n    return list", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    list(range(1, n))\n\nLOL I'll give you this, this one is definitely a classic. It does introduce a lot of good concepts like iteration, list comprehension, and range()\n\nWhich has been there for decades and decades.\n\nI wonder how many people are doing this daily and how many people still need to learn this.\n\nI'm not sure what you're getting at, but the first time I saw this I was like \"whoa!\" so there's definitely people that haven't seen this before and need to learn this.\n\nI meant that the old way of creating a list from range is easy and obvious. I remember doing this in high school, and it did not impress me much. It's like the good old times when people were posting their C programs on the Internet and showing them off how they were writing the code.\n\nI'm not sure if you've ever tried teaching new programmers this stuff, but seeing this stuff in action can be really helpful for students who are trying to understand these concepts.\nIt's like trying to explain to someone how to make a cake. You can tell them what the ingredients are and how to put them in the oven, but it's", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [0]*n\n\nAny help would be appreciated. I've been stuck on this for a while.\n\nThanks\n\nKeegan</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    for i in range(n):\n       return [i*i for i in range(n)]\n\n    return [i for i in range(n)]\n\nFunctions that don't use their arguments, and don't produce any side-effects, are called pure functions.\n\nThis is not a pure function. It's not even a function. It's a list, and not even a list of numbers, a list of expressions.\n\nIt's an example of a function, not a function. You can't apply it, because it's not a function. It's not even a recursive function, because it doesn't call itself.\n\nThis is a function, with an actual definition. \n\nNope, it's a list.\n\nIt's a function.\n\nIt's a list.\n\n(It's a function.)\n\n(It's a list.)\n\nYou can call it without parentheses because it's a function.\n\nNo, you can't.\n\nYou can call it.\n\nNo, you can't.\n\nYou can call it.\n\nNo, you can't.\n\nYou can call it", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1,2,6,24,15]\nIs this a valid python program?\n\nIt's valid python but I'm not sure what the point is.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, sum(1, i for i in range(n)) for i in range(n)]\nIt has the problem that if I pass in 1,3,5 it returns [1,5,1,5] instead of [1,4,1,4,1,1]\nbut that's a good start.\n\nThe problem is that you're using a variable named \"i\" that is never initialized.\nYou can fix this by adding \"def f(n):\" to the top of the code, and putting the initialization in there.\n\nThank you for your help.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    for i in range(n):\n        return [1, n*i, n*(i+1)]\n\nfrom __future__ import division, integer, itertools", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nf=lambdax:sum(i*iforiinrange(1,n+1))", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n+1):\n        return n * i + 1\n\nI have to say I am not a fan of this solution. It is inelegant, it's hard to read, and it's not very clear what the intent of the code is. It's also needlessly convoluted; you can achieve the same result with much less code.\nTo begin with, the whole idea of a function that takes a list and returns a list is silly. It's very much a contrived example, since the only reason to do that is to illustrate the difference between python list comprehensions and list comprehensions in other languages.\nSo, instead of a function that takes a list and returns a list, let's just use a list comprehension:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    def get_factorial(n):\n    \"\"\" Get the factorial of n.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    n starts from 1.\n    The sum of numbers from 1 to n is the sum of the numbers from 1 to n (1 + 2 + 3 +... + n).\n    The sum of the numbers from 1 to n is the sum of the numbers from 1 to n (1 + 2 + 3 +... + n).\n    \"\"\"\n\n    if n < 1:\n         return 0\n    else:\n         return 1\n    else:\n         return 2\n    else:\n         return 3\n    else:\n         return 4\n    else:\n         return 5\n    else:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n - 1):\n          if i % 2 == 0:\n              return [1] * n\n          else:\n              return [1] + [n - 1]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nThe language seems more or less like pseudocode, but the function definition is not. The function definition is a series of steps that are supposed to be executed in order. So we can't call it a program, but we can call it a recipe.\n\nIt's not clear that the recipe is even correct. The author doesn't provide enough information to judge. For example, there are cases where the formula for the factorial is not defined. (There is no factorial of zero; there is no factorial of one.) This function would give incorrect answers in these cases.\n\nSee also\n\n Abstraction\n Functional programming\n Functional-style programming\n Lambda calculus\n Recursion\n Simulated computation\n\nReferences\n\nExternal links\n The Lambda Calculus Explained</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    i = 1\n    while True:\n       for i in range(n):\n           value = 1\n           if i % 2 == 0:\n               value *= value\n              i += 1\n    return [value]\n\nThe Haskell version is shorter, more concise, and more obvious:\nfact :: Int -> Int\nfact n = n * (n - 1)\n\nSee also: \n\nI think that the python version is easier to read, and that is because it is a lot more verbose.\nThe Haskell version is shorter, but the Python version has a lot of white space, and it is formatted in a way that makes it easy to understand.\nI think the python version is the easier to understand and easier to read, but that is just me.\n\nI do agree that the Python version is easier to read, but the Haskell version is easier to understand.\nI think the problem with Python is that it is very", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n+1):\n       if i%2 == 0:\n          sum += 1\n       elif i%2 == 1:\n          sum += (n - i) * (n - i - 1)\n       else:\n          sum += factorial(i)\n    return sum", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    if n == 0:\n        return [0]\n    else:\n        return f(n-1)\n\nThis is an awesome trick. I have never thought about doing something like this before. I had a little trouble understanding it at first, but I think I get it now.\nThanks for sharing.\n\nI love these little tricks. I'm going to steal this one for sure.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    list(range(1, n))\n    return list(range(n-1, 0))\n\nWhat is the point of the code block?\n\nIt is the code from the original post.\n\nI don't get it. The original code block already explained the algorithm, so why is the author showing it again?\n\nIt is the code used in the post.\n\nok, thanks\n\nWhy is this in the top 10?\n\nBecause it's a neat little trick that makes it easy to write a basic factorial function without using a loop.\n\nit's an interesting hack but not very useful.\n\nIs there a reason not to use a list comprehension here?\n\nYes, because I want to explicitly state that the number n is an integer.\n\n\"If you have to resort to using a hack like this, you should seriously consider doing it the right way, which is to use a loop.\"\nPlease do not make this the top voted comment.\n\nPlease do not make this a top voted comment.\n\nI'm torn on this one. I think it is a neat hack, but I also don't like \"smart\" code. I also think", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [i * i for i in range(n)]\nFunny, I just submitted this as an answer in another thread.\n\nYou can also do it with generator expressions.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    i = 0\n\n    # Using an auxiliary function to compute the factorial,\n    # because n is large.\n    factorial = lambda n: n * factorial(n - 1)\n\n    # Get the first element of the result\n    a = f(0)\n\n    # Get the number of elements in the result\n    len = len(a)\n\n    for i in range(len):\n        print i\n        if i % 2 == 0:\n             a[i] += factorial(i)\n             a[i] = a[i] + 1\n             # If the index is odd, the element is 1.\n          else:\n             a[i] += factorial(i - 1)\n             a[", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n        i += 2\n    return [i]\n\nWhat I find funny is that, if you use the same example code and replace the factorial() function with a real one (i.e. not an infinite loop), the program will still work.\n\nThe \"for i in range(1, n)\" is probably doing what you need; i.e. for i in range(1, n) the range of i is n - i.\n\nOr, as I learned it, \"i+1 is the index of the last element that i's range starts at\".\n\nI'm confused by the need for the 'range' function. Python has a built-in 'range' function:\nrange(1, n)\n\nDoesn't work in Python 3.\n\nWhy not? I just ran this in Python 3.2.5 on Windows.\n\nDoesn't work for me. I just run Python 3.2.3 on Mac OS X.\n\nI think I see why: on Python 3, the range of a list is not the same as the range of the iter", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [factorial(i) for i in range(1, n)]\n\nThis code is from the exercises of .</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n        if i % 2 == 0:\n           return [i]\n    return []\nThis is pretty much the same as in your question.  It's a for loop and an if statement.\n\nThe difference is that this version doesn't use the map() or lambda function syntax.\nI'm trying to wrap my head around if there is a better way to solve this problem with this syntax than what I came up with.\n\nHere's the lambda version:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, 2, 6, 24, 15]\nThe simplest way to do it is to recursively call the function:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return (list(range(1, n+1, 1)) + list(range(n, 1, 1))\n    if n % 2 == 0 else list(range(1, n+1, n-1)))\n\nThis is a really fun exercise. Here's a simple solution in lua:\nfunction f(n)\n    local f = {\n         return f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n % 2 == 0:\n        return [1, n]\n    else:\n        return [n - 1, n * factorial(n - 1)]\n\nI've always been amazed at how simple and elegant this is.\n\nBeauty is in the eye of the beholder. I find this code overly complex and inelegant. I think it would be better as a sequence of one line functions, like so:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    for i in range(1, n+1):\n        return [x*i for x in range(1, n+1)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n + 1):\n        return [i * i for i in range(1, n)]\n    return [i for i in range(1, n)]\n\nBrowsers that support python:\n\nGood example, but a bit pedantic. Can we get a more concrete example of when you would use this?\n\nI'm not sure what is pedantic about the example. The point is to show that you can use the same notation in python to express the same algorithm as C.\n\nWell, it's pedantic because it's not really a good example of how to use this. The factorial is a rather simple algorithm, and using it in the example just makes it hard to understand the syntax.\nInstead, I'd recommend using a simple recursive function that computes the nth Fibonacci number. The tricky part here is to write it in a way that uses recursion, but doesn't require the user to understand what recursion is.\nThe result should be a function that looks like this:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n % 2 == 0:\n       n = n div 2\n    else:\n       n = n / 2\n    return [sum(i for i in range(n)) for i in range(n) if i % 2 == 0]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nfact = lambda n:\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    return [n for n in range(1, n + 1)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, (1 + 1) * (2 + 2) * (3 + 3) *... * 5 * (5 + 5)]\n    for i in range(n):\n       if i % 2 == 0:\n          return f(i)\n       else:\n          return [i]\nI don't like the code: It's not flexible, hard to read and not OOP.\nA better implementation is the following (yes, it's longer):", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = 1\n    factorial = 2\n    while n < n + 1:\n       factorial *= n\n       if n % 2 == 0:\n          n = n / 2\n       else:\n          n = n % 2\n       return [factorial(n - 1), factorial(n - 2)]\n\nYou've got a bug in the test for even numbers.\n\nIt's worth a small mention that it's a bit surprising that this code is written in Python and not Matlab or R, since Matlab has had a built-in function called `factorial(n)` for quite some time now.\n\nNo, it's Python, not MATLAB.\n\nCorrect, but I was merely commenting on how a language like Matlab would write this, since that's what I've used to solve factorials.\n\nPython can do a lot more than MATLAB. And the MATLAB syntax is completely different.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    return [ 1, 2, 6, 24, 15 ]\n\n    print(f(5))\n\nOutput:\n\n[1, 2, 6, 24, 15]\n\nThis is a good example of a well-written and succinct Python function.\n\nf = lambda x: x * x", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nA decent number of languages have a lack of something along the lines of Haskell's `foldl`.\nI think you mean `foldl`, `foldl1`, `foldl_left`, `foldl1_left`, `foldr`, `foldr1`, `foldr_left`, `foldr1_left`, `foldl_r` and `foldr1_r`.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, factorial(5) for i in range(1, n)]\n> t(n) = lambda n: [1, n*n for i in range(1, n) if i%2 == 0]\n> t(5) == [1, 5*5 for i in range(1, 5) if i%2 == 0]\nBut that's factorial, not factorial * 2.\n\nYou are right, I was doing this example to prove that f(n) is not the same as n * factorial(n).\n\nI don't see what the advantage of this is over a standard list comprehension.\n\nThis is something I've been trying to figure out for a while. You can write a generator comprehension for any iterable, but the generator expression can't be implemented in terms of a generator comprehension. The best solution I've come up with so far is to write your generator in a way that allows it to be implemented using a generator comprehension, and then to use that generator comprehension to generate an iterator that can be used to generate the generator. I use this to make my own generators, but I don't have a name for this technique.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for n in range(1,10):\n       sum = 0\n       for i in range(1,10):\n          sum += 1\n          i = i+1\n        return sum\n\n\"one of the elements of the list is the sum of all the other elements\"\n\nThis code takes 10 loops to do what is already possible with a single loop.\n\nAnd to be fair, that single loop will be faster than the nested loop.\n\nAlso, it is a waste to use n as a parameter for the function when it is not used anywhere.\n\nMaybe one of the loop counters should be n instead of i.\n\nIt is good to see a demonstration of nested loop performance, but a better way is to optimize the loop.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [i * i for i in range(2, n+1)]\n\nRunning the code gives the following output:\n\n[1, 4, 9, 16, 25, 36, 49]\n\nReferences</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n % 2:\n        return []\n    else:\n        return [i * factorial(i - 1) for i in range(n)]\n\nfor n in range(100000):\n    def main():\n        for i in range(1, 1000000):\n            f(i)\n             print(f(i))\n\nIs that correct?\nI don't know how to test it for correctness because I do not know how to make n as a parameter for f(n)\n\na) Do I use the following pattern to make a parameter for f(n)?\n1) f(n) = [i*factorial(i-1) for i in range(n)]\n2) f(n) = [i*factorial(i-1) for i in range(n)]\n3) f(n) = [i*factorial(i-1) for i in range(n)]\n\nb) How do I", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1] * [2] * [3] *... * [n-1]\n\nHowever, I think it would be more interesting if you were given a constraint for the function instead of an implementation:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nThis is a really common exercise in algorithms textbooks, and a well-known hard problem. Here are two different ways to implement it:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    def factorial_sum(n):\n    \"\"\" Implement the function factorial_sum that takes n as a parameter, and\n    returns a list of size n, such that the value of the element at index i is the sum\n    of numbers from 1 to i.\n    i starts from 1.\n    the sum of numbers from 1 to i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    factorial_sum(5) == [1, 2, 3, 6, 24]\n    \"\"\"\n    return list(zip(n,factorial_sum(n-1)))\n\nYou missed the part where it's supposed to return a list of the numbers from 1 to n.\n\nWell, it doesn't say that it's supposed to be in order.\n\nThis was the first thing I thought of when I read the original article...", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [i for i in range(n)]\nThis is the only correct answer.\nI've implemented this with a recursive function. The above is fine for a simple implementation, but it's not the best.\nThe recursive version is a bit more efficient, as it doesn't have to create a new list for each factorial.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    return (\n       [lambda i: 1 if i % 2 == 0 else i for i in range(n)]\n       for i in range(n)]\n       if n == 0: []\n\nOr, if you want a more concise implementation:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n == 0:\n        return []\n    else:\n        n = int(n)\n        factorial = int(factorial)\n        list = []\n        for i in range(n):\n            if i % 2 == 0:\n                    factorial[i] = 1\n                      list.append(factorial[i])\n                      n -= 1\n    return list\n\nTo make it easier to understand, Python's \"return []\" line and \"int(x)\" line could be made inline.\n\nLooks like some people are downvoting because they don't think this is a good answer.\nHowever, this is a reasonable answer, and it's better than some of the answers", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return (lambda n: [n for n in range(n+1, 0, -1)] + [n for n in range(n+1, -1, 0) if n%2 == 0]\n    for n in range(1, -1, -1)", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    result = []\n    for i in range(1, n+1):\n        result.append(i*(i+1))\n    return result\n\nI don't think it's supposed to work with empty lists, for example:\n>>> f([]).\n[1, 2, 6, 24, 15]\n\nyeah I figured that out :)</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n       if n == 0:\n         return [1]\n    else:\n         return [i * i for i in range(n)]\n\nI can't think of a way to do that in vanilla Python.\n\nI don't think it is possible to do that in the general case in Python. For example, if n is an integer, you can return the sum of 1 to n, but you can't do it for real numbers, complex numbers, etc. You can only return an integer if the argument is an integer, and you can only return a list if the argument is a list, etc.\nIf the OP's question is worded correctly, I think he wants a function that can take any type of input and return any type of output. If so, you can't do it in Python, but in C++ you can do anything.\n\nYou can also do this in Python:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nIn Python, you might be able to do something like this:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    # Function that takes n as a parameter\n    def f(n):\n        return [x for x in range(1,n+1) if x!=n]\n    return f\n\nn is an arbitrary int. f is a function that takes a parameter n and returns a list of size n. The value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise.\n\nExample:\n\nf(5) == [1, 2, 6, 24, 15]\n\nFor a second example, this time a function that takes a parameter n and returns a function f, take a look at factorial.py.\n\nPython</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(2, n - 1):\n        if i % 2 == 0:\n            return sum([1], i)\n        else:\n            return sum(1 + factorial(i))\n\nIf you want to practice some functional programming, you can write the function using the function composition (map and filter)", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    # f(n)", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1,n):\n        fact = i * i\n    return [fact]\n\nf2 = f.__dict__['f2'](10)\nf2.__doc__", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1]*[1]*...*[n-1]\nThis is an example of a recursive factorial function, in which the final value is computed by recursively invoking the function.  In this example, the base case is handled by the empty list, but in some cases a base case may not be included and the function is known as tail recursive.\n\nBy contrast, a non-recursive implementation would be written as:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    factorials = [1] * [2] * [3] *... * [n]\n    result = []\n    for i in range(1, n):\n        if i % 2 == 0:\n           result.append(factorials[i])\n        else:\n           result.append([i])\n    return result\n\n>>> f(5)\n[1, 2, 6, 24, 15]\n>>> f(6)\n[6]\n>>> f(8)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 364, 405, 456, 491, 532, 585, 641, 686, 729, 764, 811, 858, 919, 949]\n>>> f(10)\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [n * n for n in xrange(1, n+1)]\nI'm not sure what the point of this is.  In the code above, f(n) is just the list n.\n\nThe point is to see how many lines it takes to implement a function.\n\nI don't think that's the point. The point is to see how many lines it takes to implement a function in a reasonably idiomatic way.\nIt is true that I have a copy of the'real' Python implementation of this function (from the Python interpreter) in the article. But I also wanted to show how you could write a function in a way that is \"mostly\" idiomatic.\nWhat I'm trying to do is to show that with just a few lines of code, you can implement a 'decent' Python function.\n\nNote that the 'idiomatic' way is not always the most readable one. A more readable version of the same function would be:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n       n = n * factorial(i) + sum(i)\n    return [n]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n):\n        return []\n    else:\n        return sum(range(1, n))", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    a = [1, 2, 3, 4, 5]\n    for i in range(1, 5):\n       a.append(i*i)\n    return a", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [i for i in range(1, n)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    print n, factorial(n)\n    for i in range(1, n+1):\n        print f(i), sum(1, i+1)\n\nOutput:\n1 2 6 24 15", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(0,n+1):\n       if n % i == 0:\n           return [i]\n    return [i*i for i in range(1,n+1)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [ n for n in range(1, n-1) if n%2 == 0 ]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = 2\n    factorial = [1]\n    for i in range(2, n):\n        factorial[i] = i\n    return factorial\n\nI can read this code, but I cannot \"feel\" it. I can't see why this is a valid solution.\n\nIt's not. The point of the article is that a better alternative is to start with a set of possible candidates and then test them to see if they meet the requirements.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return []\n    # Factorial of i if i is even\n    if i % 2 == 0:\n       return [1] + [i * 2]\n    else:\n       return [1] + i\n\nThere is no need to make a recursive function for that.\n\nN.B. There are two ways to define the function \"factorial\" for a given integer (say n)\nThe most common way is to define it as a recursive function, i.e.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(0, n-1):\n        n = n - 1\n        i = i + 1\n        if i == 0:\n           return [1]\n           return f(n - i)\nThis is a slight variation on the OPs solution, which appears to be very similar to some of the other answers.\nIt is also a little bit clearer, since it uses a loop rather than a recursive function.\n\nI came to this solution after learning about the python list comprehension syntax. It's pretty easy to read and you can use it to iterate over any iterable.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [if n % 2 == 0:\n       [1, n * n for n in range(n)]\n       else:\n       [1 + sum(range(n)) for n in range(n)]\n]\n\nIf you like how python does it, then you might like this:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nThis is Python.\n\nEdit: Ah. I see the point of the article now.\n\nI don't understand the point of this.\n\nThe point is that the most simple code is not always the most readable code.\nThe example code can be much more easily understood by someone who doesn't already know what \"def\" means, and it's much easier to read if you're skimming it and only want to know what it does.\n\nThe simple code is not less readable, it's less _verbose_.\n\n_The simple code is not less readable, it's less verbose._\nI disagree. I think it's less readable.\n\nFor an example of what's \"less readable\" than that, see the article.\n\nSorry, I don't understand what you mean.\nI think the example is easier to read than the original.\n\nThat's the point of the article. It's all about how you can make code more readable.\n\nI don't see the point of that. The original code is already readable.\n\nI disagree, it's not.\n\nYou can disagree all you like, but you're wrong.\n\nI'm sorry, but you're", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1]\n\nI think it's pretty trivial to do in a purely functional language.\n\nYep.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [[i]*i for i in range(1, n+1)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1]*[2]*...*[n]\nI feel like this is the wrong solution.  Not only is it inefficient, but it also doesn't have any tests to ensure that it works.  I don't think this should be a prime example of a better way of writing code, because it is written in a way that is more difficult to maintain and modify.\n\nI agree that the method in the OP is inefficient. However, you are being unfair in calling it 'wrong'.\nThe method is just a way to write a recursive algorithm that performs well. It is not meant to be used in production code.\nI've taught the method to junior developers to illustrate the need to know what they're doing before they even think about writing a recursive algorithm.\nIt is also useful as an example of how to construct a recursive algorithm that is easy to understand and debug.\nI suggest you go back and read the OP's post with this in mind. It is not a prime example of a better way of writing code, but it is a prime example of how to write code that is easy to follow and to debug.\n\nI think I was a bit harsh in calling it 'wrong'. It is", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n        if n < 0:\n           raise ValueError('negative integer')\n       else:\n              return [x for x in [1, x * 2 for x in xrange(n)] if n % 2 == 0]\n\n    if __name__ == '__main__':\n       import sys\n        sys.argv[1].append('-f', 'f')\n        sys.argv[2].append('-n', '10')\n        sys.argv[3].append('-t', '10')\n        sys.argv[4].append('-r', '10')\n        sys.argv[5].append('-o', '10')\n        sys.argv[6].append('-i', '10')\n        sys.argv[7", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n % 2 == 0:\n        f = lambda i: (i % 2) + 1\n    else:\n        f = lambda i: (i + 1) * (i + 2)\n    return [f(n) for n in range(n)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nThe implementation can be simplified by replacing the recursive call with a sequence.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\nreturn [1, 1, 1, 1, 1, 1, 1, 1]\n\nfor i in range(1,n):\n    \"\"\"\n    a = 1\n    n = i\n    return [a,n]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            return i * factorial(i - 1) + i\n        else:\n            return [i + 1, sum(i for i in range(1, n+1)))\n\nI like this example because it's so _simple_, but it's interesting how many different ways there are to code it. If you're familiar with Python and list comprehensions, you can probably code it in a few lines:\nimport factorial\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    # Index to start from\n    i = 1\n    # Function to use for factorial\n    func = lambda i: i*i\n    # Function to use for sum\n    func = lambda i: 1 + i\n    return [func(i), func(i + 1)]\n\nI have to admit I don't fully understand this one. Can someone explain?\n\nThe given function takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nThe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n\nThe line \"i starts from 1\" is the key to the puzzle. If i starts from zero, then the values for i are the factorials. If i starts from 1, then the values for i are the sum.\n\nAh, I understand now. Thank you", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    from collections import defaultdict\n    def f(n):\n    if n % 2 == 0:\n        return defaultdict(int)\n    else:\n        return [n * (n - 1)] + [n / 2]\n    print f(3)\n    print f(6)\n    print f(9)", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    print n\n    for i in range(1, n+1):\n       print \".\"\n       f(n-i)\n\nAaaaannnnd now I have to write a recursive function for that.\n\nThe recursion is not necessary at all, since the function f itself is recursively defined.\n\nI was being sarcastic, because he didn't.\n\nWell, of course it's not necessary to write a recursive function, but why not? :-)\n\nThis is an interesting trick:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    for i in range(1,n):\n        if i % 2 == 0:\n            return [i*i for i in range(i+1,n)]\n        else:\n            return [i*n for i in range(i+1,n)]\n\nThis solution is pure Python. It is far simpler than the C solution, and it uses the factorial function built into Python:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, i for i in range(n)]\n\nI'm not sure I understand what the point of the article is. What is the language he uses? Is it a real language, or is it just a set of data structures and functions? What is the point of having the equivalent of lambda functions in a language with no control flow?\n\nThe \"language\" is just a set of data structures and functions, so it is not a real programming language. The point of the article is just to show how to implement a factorial function using first-class functions, not to discuss the practicality of such a language.\n\nThe thing I don't understand is why the 'lambda' function is necessary. The definition of the factorial function could be written as", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    yield [1, 2, 3, 4, 5]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n        def __init__(self, i):\n         self.i = i\n\n         def __iter__(self):\n           return lambda n: list(self.i * n for i in range(n))\n\n          def fact(self, n):\n            return self.__iter__(n)\n\n          def main():\n            print(\"fact(5) ==\")\n            print(fact(5))\n\npython\nfrom collections import defaultdict", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = 1\n    while i < n:\n       if i % 2 == 0:\n           return [n] + [i] * factorial(i)\n       else:\n           return [n] + [i] * n\n\nThis is a nice one.\nSome people seem to like the challenge of implementing this in a single line. The more I try, the more I think that it's hopeless.\n\nThis is one of my favourite problems, and the most important thing to understand about it is that it's not, in fact, a single-line solution. It is a functional solution.\nThat is to say, it's possible to write it as a single line, but it's very much a _multi_ line solution, one that happens to be expressed in a single line.\nFor instance, if I write the following in Python:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    if n == 0:\n        return [1, 2, 3]\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                   return [i, n - i]\n             else:\n                  return [i, i * (i - 1)]\n    return [n]\n\nSee also: \n\nThis is pretty funny. I would have thought the programming community would have been a little more creative in its responses. Instead, I see a bunch of people arguing over minutiae.\n\nI thought the same thing, but this is the same with all the communities. The most interesting and in-depth discussions are always the ones where people aren't on the same page.\nI think it is because there is no right answer. The right answer is what is the most interesting, and everyone has a", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [1, n*(n + 1) for n in range(1,n)]\nThe code is a little bit more complicated than that.\n\nYou can do better than this...", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\nn = n + 1\nwhile i < n:\n    list = [i * n for i in range(n)]\n    i += 1\nreturn list", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    return [i*i for i in range(n)]\n\nThat's just a small snippet of the code. I figured out how to read the file and parse it but I'm not quite sure how to run the code.</s>", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    return [sum(n) for n in range(1, n+1) if n % 2]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    return [0]*(n ** i for i in range(0, n - 1)]\n\nWhat about f(5) == [1, 1, 1, 1, 1]?\n\nI was going to say it's because of the range 0-n-1 but then I realized the range is actually (0, n - 1).\nStill I'm not sure how this will print [1, 1, 1, 1, 1].\n\nThe range is (0, n - 1), as you say, and the return value is the result of n applied to the list [0], which is a list of length 0.\n\nI thought about that, but if you write it out like that, it's a bit more clear.\nThanks for the clarification!\n\nAh! It's a joke! I was wondering how they were getting the weird behavior until I got to the bottom.\n\nThis was in an earlier HN post. I hope that this time the person submits the code as a comment on the previous discussion:\n\nI'm not sure if this is a joke or not, but it sure is funny.\n\nNope, this is one of the most common", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    n = n - 1\n    return [x for x in range(n) if x % 2 == 0 else x]\n\nn = 2;\nn = n * n\nf(n)\n\nThis seems pretty boring. The thing that this article is trying to convey is that the Python code is more readable than the C code. So why not show that by implementing the same thing in Python?\n\nYou're right; I think I got too wrapped up in the coding side and forgot that this is an article about the language.\n\nYou can just write it in Ruby:\n(def f (n)\n(if n % 2 == 0\n[1..n]\nelse\n[1..(n-1)])))\n\nI'm sure you could write a similar function in any language, but I think the point of the article is that it's very simple to do in Python.\n\nI'm not so sure. It takes five lines in Ruby.\n\nIn this case it's easier to compare Python to C than Ruby to C.\n\nI know it is. I just don't think Ruby is that much harder than Python.\n\nI didn't think I", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n + 1):\n       if i % 2 == 0:\n           return [f(i - 1) for i in range(n)]\n      else:\n           return [f(i) for i in range(n - 1)]\n\nThis was my first submission to HN, so I hope the formatting is correct.\n\nI can't figure out what is so special about it.\nI am not sure if you can do this on the python interpreter, but in Scheme, you can do this:\n(define factorial n)\n(define (factorial-n i) (list (lambda (i) (factorial i)) i))\n(factorial 5) == [1 2 6 24 15]\n(factorial 3) == [1 2 3 6 24 15]\n(factorial 2) == [1 2 6 24 15]\n(factorial 1) == [1 2 6 24 15]\nI think this is cleaner, but perhaps more difficult to understand if you do not know how Scheme works.", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [i*i for i in range(n)]\n\nAs a counterpoint to the above, I prefer the following implementation:", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return [sum(i for i in xrange(1,n+1)) for i in xrange(1,n+1)]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    return list(map(lambda x: 1, range(1, n)), n)", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n    for i in range(1, n + 1):\n       return [i * i for i in range(n)]\n\nThanks for the submission.\nI prefer an alternative syntax in which the looping is more apparent.\nIn Python, you can use comprehensions to make your function look like\nreturn factorial(n for n in [1, n + 1])\nwhich IMO is much clearer.\n\nIn Python, you can also use list comprehensions, which I find to be even more readable:\n>>> [factorial(n) for n in [1, n + 1]]\n[1, 2, 6, 24, 15]\n>>> [factorial(n) for n in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]\n[1, 1, 1, 1, 4, 6, 24, 120, 720, 5040, 90000]\n>>>\n\nThe gist of my article is that I find a for loop more readable than a list comprehension. The difference is in the approach. With a for loop, you're just looping over", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\nreturn [1]*[1]*[2]*...*[n]", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"", "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\"\"\"\n\n    if n%2==0:\n       return [1]\n    else:\n       return [n]*(n-2)+[n]*(n-1)\nI don't know why you're getting downvoted.  I use this method all the time.</s>"]]