[["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,len(s)-1):\n        if len(s[i])>0 and s[i] in [\"A\",\"E\",\"I\"]:\n           return len(s[i])\n\nit's missing a dash:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    for i in range(len(s) - 2):\n        if s[i+1] == u'a' or s[i+1] == u'B' or s[i+1] == u'C' or s[i+1] == u'D' or s[i+1] == u'E' or s[i+1] == u'F' or s[i+1] == u'G' or s[i+1] == u'h' or s[i+1] == u'i' or s[i+1] == u'j' or s[i+1] == u'K' or s[i+1] == u'L' or s[i+1] == u'm' or s[i+1] == u'n' or s[i+1] == u'o' or s[i+1] == u'p' or s[i+1] == u'q' or s[i+1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    while s:\n         if n in range(2,s.len()):\n            return s[n].upper()\n    elif n in range(3,s.len()):\n            return s[n].upper()\n    elif n in range(4,s.len()):\n            return s[n].upper()\n    else:\n           return 0\n    #Example\n    #count_upper('aBCdEf') returns 1\n    print('", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    return (len(s) > 0 and s[i] == 'A' or s[i] == 'B' or s[i] == 'C' or s[i] == 'D' or s[i] == 'E' or s[i] == 'F')\n        and count_upper(s[i-1])\n\nThis is a bit of a classic. The trick here is to use a counter variable to keep track of the current position in the string, and then to recursively call itself. The base case is for the string to only contain a single letter, which is returned as the first value.\n\nThis is a bit of a classic. The trick here is to use a counter variable to keep track of the current position in the string, and then to recursively call itself. The base case is for the string to only contain a single letter, which is returned as the first value.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\nThis is assuming the string is ASCII, of course.  With non-ASCII strings, you will have to rely on the locale to determine how to determine what constitutes a \"vowel\", and how to treat non-ASCII characters.\n\nThis is cool.\nBut, I think it's missing a few features, in the spirit of the HN headline \"I wish Python had...\"\nI wish that Python had:\nA way to specify that an iterator should be \"just an iterator\" and not a generator.\nA way to modify the underlying data structure of a dictionary, e.g. to define a new \"key\" (if I'm using a dictionary as a stack, for instance, or as a list of ordered pairs), or to make a dictionary a set, etc.\nA way to construct a new dictionary without resorting to \"a = {}\".\n\nI wish Python had (as an alternative to the current C-style for-loops) an array-for loop, where I could specify an index, and get the current element of the array.\nExample:\nfor e in range(5):", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for char in s:\n       if char in ['a', 'e', 'i', 'o', 'u']:\n         count_upper.append(1)\n    return count_upper()\nFrom the sample code, this sounds like the right tool for the job.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    \"\"\"\n    def upper(s):\n    \"\"\"\n    Given a string s, return all of the uppercase vowels.\n    \"\"\"\n    return s.upper()\n    return [upper(s) for s in s]\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n    \"\"\"\n    def lower(s):\n    \"\"\"\n    Given a string s, return all of the lowercase vowels.\n    \"\"\"\n    return s.lower()\n    return [lower(s) for s in s]\n    def lower_counts(s):\n    \"\"\"\n    Given a string s,", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) / 2\n\nI have no idea why I've never thought of that. I've used \"accent\" and \"UpperCase\" in the past but neither one is nearly as elegant. I have now changed my implementation to use this.\n\nHow does this compare to the C-like string functions (the ones that just take a pointer to the string)?\n\nFor example, count_uppercase(s) returns the number of uppercase characters in s.\n\nWhat a weird way to describe the behavior of a string function...\n\nWhat I meant was \"count_uppercase returns the number of uppercase characters in the string s\".\n\nThe readability of this code is much better than the \"s.upper()\" solution.\n\nYes, but the `count_upper` function is significantly slower than `s.upper()`.\n\nYes, but if you have a way of reading the whole string into a single chunk, you can make count_upper() arbitrarily fast (and in a way that you can't with s.upper()).</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    if len(s) == 2:\n       return len(s)\n    else:\n       return 0\n\nIt's very unclear to me what this is supposed to do, but I think the problem is that the first part of the function is still expecting a single-character string.\n\nCount the number of occurrences of even indexes that have the first character of the string uppercase, and return it.\n\nOh! That makes sense. I thought it was looking for the exact string \"A\".\n\nAh, I had not even thought of that case. I guess I should write a line that would handle that too.\n\nI've always had a soft spot for \"explaining it badly\" in the same language the code is written.\nThis code would be better written as:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    return len(s) % 2\n\nUsing regular expressions, you could improve the above function by\neliminating the spaces and making the count more accurate:\n\n    def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    return re.match('[A-Z][A-Z][A-Z0-9]', s, re.MULTILINE)\n\nIt is also possible to count the number of vowels in a string:\n\n    def count_vowels(s):\n    \"\"\"\n    Given a string s, return the number of vowels in even indices.\n    \n    For example:\n    count_vowels('abcdefg') returns 3", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    upper_char = u.upper()\n    for i in range(len(s)):\n        if s[i] in upper_char:\n           return i + 1\n    return 0\n\nSee also\n Python (programming language)\n List of Python idioms\n\nReferences\n\nExternal links\n https://www.python.org/dev/peps/pep-0249/\n\nPython (programming language)</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split('.')[-2:-1])\nYou can't call the split method on an empty string. You probably want:       return len(s.split('.')[-1])</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nWhy does it return 0 for 'abcdefg'?\n\nit's assuming even indices means 0-based.\n\nThe article mentions that's not always the case. But I'm guessing that it still doesn't make sense that the first word is excluded.\n\nIt makes perfect sense. 0 based starts with 0 and 1 based starts with 1.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2] for i in range(0,len(s)-1))\ni was looking for this. thanks\nIt's slightly less Pythonic than what you were looking for, but you can also use the enumerate function in place of range():      count_upper('aBCdEf')", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    while True:\n        i = 0\n        while len(s) > 0 and s[i]!= 'x':\n           i = i + 1\n           if s[i] == 'A':\n               return i\n        else:\n               return 0\n              else:\n               return 1\n    return 0</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(numpy.maximum(x) for x in range(len(s), 2) if x[0] in ['A', 'E', 'I', 'O'])\nThe last value will be 'O', thus it's not included in the sum.\n\nI don't get it, what does this do?\n\nCounts vowels in each position of the string.\n\nnumpy.maximum is probably not the right function. The way it's used, it appears as though it's _counting_ the vowels, not finding the maximum.\n\nWhy is this on HN? It's just a recursive function written in python, hardly anything unique.\n\nIt's written in Python.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) > 0:\n        if len(s[:2]) > 0 and isinstance(s[:-2], str):\n           return len(s[:-1]) + 1\n         else:\n           return 0\n    else:\n        return 0\n\nTo make this even faster, Python 2.4.3 introduced the `sorted` module:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    while '\\x0123456789':\n        s = re.sub(r'\\x01', '', s)\n        if s == r'abcdefg':\n           count += 1\n    return count\n\nThe problem with this solution is that the subroutine is called multiple times, each time with a different input. The author of the code doesn't know whether s is \"ABCDEFGHI\", \"ABDEGFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGHI\", \"ABCDEFGH", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, s.len()+1):\n        if s[i] in ('A','E','I','O'):\n           return s[i]*2\n\nAs someone who's written their fair share of bad code in the past, this is refreshing. I've certainly written code that would have worked, but done so in an inelegant manner. This kind of code may not be as \"nice\" but it's certainly easier to read and more clear about what's going on.\n\nOh, I'm not one to judge the code as bad, it does what it says on the tin, but it is very \"throw-away\", and the OP is probably going to have to work with the code for a while.\n\nIt's not \"throw-away\" if it solves the problem and is maintainable. I think this code is actually pretty elegant, and I don't think it would take more than a few minutes to understand.\n\nI'm not sure what's elegant about it. It's straightforward, and it works, but it is basically just one big switch statement.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) > 2\n\nIf you're not so worried about performance, this is a good solution.\n\nYou might want to think about using another variable in the count function that starts with a '_' or a '_', so that the count function knows that it is to be counted.\nThat way you can just use count_upper(_, 2)\nThe underscore works because if it is in the middle of the string you know it's not a vowel and you can just use count_lower(_, 2)\n\nNot sure if this is the best solution, but one way to go about it would be to use the following function:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    words = s.split(' ')\n    if len(words) == 2:\n       return len(words)\n    else:\n       return 1\n\nI like this very much, but I had to modify it a bit to work the way I wanted it to. I had to change the example to:\ncount_upper('A B C D E F G')</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    def uppercase_vowel(s):\n        return s[i:i+len(s)-1] in s.upper()\n    return len(s) - sum(uppercase_vowel(s))\n\nThis is not the correct solution. For example, \"ABC\" counts as a lower case string since the letter \"E\" is lower case. Also, if you change the \"ABC\" to a \"AB\", the function would still count it as a lower case string.\nThis is the correct solution.\n\nThe correct solution is not to use \"abcdefg\" as the example string, but \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".\n\nIt's still not correct. In this case, \"ABC\" and \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" are both lower case.\n\nThis is a neat solution but it seems a bit tedious if you're doing something that requires a lot of processing.\nI wrote a class to do this:\n\nSince the article doesn", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    lower = s.lower()\n    upper = s.upper()\n    count = 0\n    for i in range(len(s)):\n        if upper[i] is not lower[i]:\n           count += 1\n    return count\nAs others have mentioned, you can also just use `s[:len(s)]:upper`.\nYou can also use `s[i]` to grab the i'th character of the string.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    result = 0\n    while s[0]:\n       if s[0] == 'A':\n          result += 1\n       else:\n          result += 1\n    return result\nThis is a very common algorithm.\n\nIn this case, you should instead use:\nfor letter in ['A', 'B', 'C']:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,len(s)):\n        if i == 0:\n           return 1\n       else:\n           return len(s) - i\n    return len(s)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.rstrip()) % 2\n\nYour example is missing a case:\ncount_upper('ABCDEF') returns 1\n\nYour example is missing a case:\ncount_upper('ABCDEF') returns 1\n\nDoesn't count_upper() return the number of characters in the string that are uppercase, not the number of vowels?\n\nCounting vowels is the use case that the OP is illustrating.\n\nThis is a good example of why it's worth investing time into learning the basics of Python's standard library. It's one of the best collections of code I've ever seen.\n\nI agree. I'm an experienced programmer and even I have found myself surprised by the quality of Python's standard library.\nThe only thing that I don't like is the use of the word'module' for packages. I think of a module as something that lives inside of a file, and the standard library packages are many files each of which is a module. I've tried to adapt to this but I still think'module' when I see'module' in the Python documentation.\n\nI had to laugh at the \"migrating a project from Python 2 to 3", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s[0] < s[1] else 1\nI prefer count_upper_even_vowels = count_upper(s)\n> For example:\nThat's not a good example. It's ambiguous. Is it a question about \"what\ncount_upper should return\" or \"how to get a boolean from count_upper\"?\n> count_upper(['A', 'B', 'c', 'd', 'e', 'f'])\n> ==> 0\n> ==> 1\nI disagree with the Python developers' decision to allow the tuple of\nfunctions to be ambiguous. I don't think it's obvious that \"count_upper\"\nis a function.\n> count_upper_even_vowels(['A', 'B', 'c', 'd', 'e', 'f'])\n> ==> 0\n> ==> 1\n> count_upper_even_vowels(['A', 'B', 'c', 'd', 'e', 'f']) == 0\n> == 1\nIn an ideal world, we'd require that a function definition be paired\nwith an explicit function call.\n>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 1 if s[0:2] in ['A', 'B', 'C', 'D', 'E', 'F']\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    return s.split('.').count('_')\n\nOh, that's _much_ faster than my (theoretically faster, but still very slow) implementation:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    while i < len(s):\n       i += 2\n       if s[i] == u:\n          return i\n       else:\n          return 0\n    return i\n\nThat function is missing a closing brace, which makes it illegal.\nIt's also a very boring function. And there are more interesting ways of doing this:\ncount_upper('aBCdEf')", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,s.length-1):\n        i=i+2\n        if s[i] in ['a','b','c','d','e','f']:\n            return i\n    return 0\n\ncount_upper() is a function that counts the number of uppercase vowels in a string,\nassuming the string is stored in ASCII.\n\nThe first argument is the string to be analyzed, the second argument is the index\nfrom the string where counting starts, the third argument is the maximum number\nof characters to count and the fourth argument is the function to call.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s)\nSo what's the point of this?\n\nI'm not sure but here is a comment from the author, \"I wrote this because I wanted to write a short program to solve a problem, but Python was too verbose. I used count_upper in the program and decided to submit it as a Python exercise.\"\n\nI think he wants to say that he wrote count_upper for his own need, and decided to publish it.\n\nIs there any benefit of using this vs. the built-in \"len\" function?\n\nI think he used it because the built in len function doesn't have a method for counting only the even indices.\n\nHmm. Why not:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    v = s.lower().replace('A','A').lower().replace('B','B').lower().replace('C','C').lower().replace('D','D').lower().replace('E','E').lower().replace('F','F').lower()\n    return len(v[::2])\nHow is this different from `s.find(a,b,c)`?</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for x in s:\n        count += 1\n    return count\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n    for x in s:\n        count += 1\n    return count\n\nYou know what, I think I'll write a quick script to count how many times the phrase \"you know what, I think I'll write a quick script to...\" appears in HN comments, and see if it's still the most common phrase.\n\nIf you are going to be pedantic, at least be right:\n\nFor a nice explanation of why these are very easy to implement, and other methods, see\n\nI've always just used a for loop, which is even simpler...", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 0\n    else:\n        return len(s) - len(s[0])\n\nPlease note, the following is completely arbitrary. It is simply the first implementation I could think of.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] == 'A':\n        return len(s)\n    return len(s) - len(s[1:])\n\nThe main thing is, you want to do something with the indices. You can't just drop them.\n\nYou could probably make a good guess as to where you have to break out of the loop at just by looking at the character frequencies in the string.\n\nThis is pretty slow (in Python at least) because there's a whole new function call each time you check the first character.\n\nIf you had a string with a lot of whitespace, this could be much faster.\n\nThis looks like it will be slow no matter what the input is. I might be wrong about this, but I think the bottleneck is going to be how long it takes to do str.count(str[0:]) each time. Even if you assume that str[0] is going to be the first character of every word and that it's going to be a lowercase letter, you'll still be checking the entire string each time. This is a pretty inefficient way to count vowels.\n\nEdit: Forgot to", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    def get_l_count(s):\n    \"\"\"\n    Given a string s, return the number of occurrences of the letter l.\n        Returns the number of l's in s.\n    \"\"\"\n    return 2*len(s) - 1\n    # we need to look only at even indices\n    odd_indices = s.split(' ')\n    if odd_indices:\n        return -1\n    if len(odd_indices) == 0:\n        return -1\n    return 2*(len(odd_indices) - 1) - 1\n    if len(s) == 1:\n        return -1\n    return -1\n\nLooks like a good start, but if you are doing a string manipulation like that then you probably want to use it with python3.\n\nPython 2.7 is the current LTS. Python 3 is still an alpha/beta release.\n\nThat's true, but Python", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 1 if s[i:i+4] == 'A' else 0\n\nNow:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    while len(s) > 0:\n        if s[i] == 'A':\n            i += 1\n         if s[i] == 'B':\n             i += 2\n         if s[i] == 'C':\n             i += 3\n         if s[i] == 'D':\n             i += 4\n         if s[i] == 'E':\n             i += 5\n         if s[i] == 'F':\n             i += 6\n         if s[i] == 'G':\n             i += 7", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    print s\n    if len(s) == 0:\n        return 0\n    for i in range(len(s)-1):\n        if 'aeiou' in s[i+1]:\n            return 1\n    return 0\nAs it happens, it does a terrible job of counting vowels - \"DEf\" counts as two vowels, \"DdEf\" counts as two vowels, etc.  The \"str\" module isn't a very good tool for this kind of thing.\nI think the best way to do this would be to create a string iterator which does an ASCII table lookup, then pulls out vowels and checks if they're uppercase.\nI've written a function which does this in a different thread.  I'll reply to it when it's up.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    i = i + 1\n    if s[i] is uppercase:\n       return i\n    return 0\n\n    def upper_counts(s):\n    \"\"\"\n    Given a string s, return the number of times each character is\n    found in uppercase.\n    \n    For example:\n    upper_counts('aBCdEf') returns 2\n    upper_counts('abcdefg') returns 2\n    upper_counts('dBBE') returns 2\n    \"\"\"\n    count_upper = count_upper\n    upper_counts = upper_counts or (count_upper(s) and s[i] is not uppercase)\n    return upper_counts\n\n>>> upper_counts('abcdefg')\n2\n>>> upper_counts('aBCdEf')\n2\n>>> upper_counts('ABCDEF')\n1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # Note: This solution is rather naive.\n    return len(s[::2])\n    # Can be improved by looking at the length of each part of the string.\n    # But that's probably not worth the time.\nI'm not sure why you're making an O(n) solution when the requirement is O(1).   In the first case, you could just do the following:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0\n\nYes, it is a stupidly simple function but it is still a function. I would've expected them to filter these out.\n\nMy favorite so far is this one:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for c in range(len(s)-2):\n        if c[0] == 'a' or c[0] == 'A':\n           c = c[1:]\n           return c\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,len(s)-2):\n        if s[i] in uppercase:\n           return i\n    return 0\n\nI don't know why this is surprising, the function is clear.\n\nIn my mind, the function had the first line as:\nfor i in range(0,len(s)-1):\nWhich made it have the behavior of counting only the first letter, not the entire string.\n\nYes, that is the surprising behavior.\n\nIsn't that the behaviour of the str() function though?\n\nstr() has the opposite behavior. For example, str(\u2018H\u2019) returns 1.\n\nSure, but I was replying to this:\n\nYes, that's the surprising behavior.\n\nThe surprising behavior is that Python 2.7.13 counts _all_ the vowels in a string (at least if you count all the characters as well, and I think this is how most people count vowels).\n\nYeah, I had some confusion as to why count_upper would be surprising, and maybe it's just", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) > 0 and ord(s[0]) == ord('A'):\n        return len(s[0])\n    return 0\nCounting the number of vowels would be simpler:  return len(s)</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.index(a) + s.index(B) + s.index(C) + s.index(D) + s.index(E) + s.index(F) + s.index(G) + s.index(H) + s.index(I) + s.index(J) + s.index(K) + s.index(L) + s.index(M) + s.index(N) + s.index(O)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s) - 1):\n        if s[i] in uppercase:\n           return i\n    return 0\n\ncount_upper is the function to count the number of even-indexed uppercase\nvowels in a string. It is similar to count_lower, but instead of\nlooking for lowercase letters it looks for uppercase letters.\n\nIt is the simplest of the function in this article.\n\nUsage\n\nUsage is simple:\n\n>>> s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n>>> count_upper(s)\n6\n\nSee also\nCounting even\nCounting odd\nCounting characters\n\nReferences\n\nExternal links\nCounting Evens and Odds Using Python.\nCounting Characters Using Python.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    while len(s) > 0:\n        for i in range(len(s) - 1):\n           if s[i] > 0:\n               i = i + 1\n                print s[i], i\n                i = i + 2\n    return i\n\nHow do you deal with ambiguous characters, such as letters with both uppercase and lowercase variants?\n\nI don't know how this code deals with that, but it's not hard to do - you just need to add a condition to check the character and then skip over it when you've counted that character before. For example:\nfor i in range(len(s) - 1):", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(set(s, 1))", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(1 for c in s if c not in [e,i])\nI am not the only one to see the problem here?\n\nIt's actually the same thing as your solution.\n\nDoesn't seem right to me. Try it out.\n\nI think I did. It is the same code, just in reverse.\n\nYeah, you're right. My mistake.\n\nthis is a fun one, but this isnt a \"javascript hack\".\n\nIt would be a lot of work, but this might be a good way to make a site like the NYT's word cloud.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(s[i] for i in range(0, len(s) - 1) if s[i] == 'A' or s[i] == 'B'\n    else 0)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)):\n        # Skip the first character.\n        if s[0] == 'a':\n            return 1\n        else:\n            return 0\n    return len(s)\nIt would be nice to see the implementation.\n\nThis is pretty good:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    for char in s:\n        if char == u'A':\n           i += 1\n    return i", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return int(s.split('.')[2:])\nThis is actually useful for my work project, thanks!</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count_upper = lambda x: x.upper()\n    for i, j in enumerate(s):\n       if x[j] == x[j+1]:\n          return count_upper(x[j]) + 1\n    return 0\nI was going to post something similar, using the usual count_if, but that seems more concise.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return (len(s) > 1 and len(s[i:i+len(s)]) > 0) or (len(s) > 1 and len(s[i:i+len(s)]) < len(s[i+len(s)]) and s[i:i+len(s)])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    total = 0\n    while i in range(2, len(s)):\n        if s[i] == 'A':\n           total += 1\n         else:\n           total += 2\n    return total", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # we ignore the first letter\n    for i in range(len(s)):\n        if s[i:i+2] == u':\n            return 1\n    return 0\n\nreturn count_upper()[len(s) % 2]", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] == 'a':\n        return 1\n    else:\n        return 0\nThat is a pretty good example of a regular expression that is inefficient. A better solution is to use `count_upper_2` which is a much faster implementation of the same thing.\nAlso, the article's code is not optimized for speed either. For example, it is using `s.lower()` to convert the string to lowercase. But `s.lower()` is probably a slow way to convert to lowercase, especially when the input string is a small set of common characters (such as the example above).</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) - len(s[::2])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # Lower case at the start\n    for letter in s:\n        if letter in uppercase:\n            return 1\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0]!= 'a':\n        return 0\n    if s[1]!= 'B':\n        return 0\n    if s[2]!= 'C':\n        return 0\n    if s[3]!= 'D':\n        return 0\n    if s[4]!= 'E':\n        return 0\n    if s[5]!= 'f':\n        return 0\n    return len(s)\n\nMore readable and more powerful:\n>>> def uppercase_vowels(s):\n...    \"\"\"Given a string s, count the number of uppercase vowels in even indices.\n...    For example:\n...    uppercase_vowels('aBCdEf') returns 1\n...    uppercase_vowels('abcdefg') returns 0\n...    uppercase_vowels('dBBE')", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2] if s[::2] in ['A' if s[::2] in ['A', 'B', 'C']] else 0)\n\nYou can also use:\n\nfrom collections import Counter", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2]) + 1\n\nYou need to pass a count to the function, not the length of the string. The string you pass to the function is the one that needs to be counted.\n\nSome languages and compilers don't have \"len(s)\" available, but rather \"size(s)\" or something similar. You can use the same trick to make sure the index is even.\n\nFor example:\n>>> def lowercase_to_upper(str):\n...      return str[::-1] + str[::-2]\n...      return str\n>>> count_upper('HELLO')\n1\n>>> count_upper('HELLO')\n1\n>>> count_upper('HELLO')\n1\n>>> count_upper('HELLO')\n0\n\ncount_upper(s) looks for the last non-capital letter at index i. If you want it to count all the vowels, you can do:\n>>> def count_uppervowels(s):\n...      return count_upper(s) + 1\n...", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if isinstance(s, unicode):\n        return unicode.count_u(s)\n    else:\n        return 1\n\nimport time\n\nfor word in count_upper('abcdefg'):\n    print(word)\n\nA few other notes:\n\n- If you use this in a for loop, the loop will be very fast.\n- If you use this in a loop with string formatting (e.g. \"%s\"), the\nloop will be very slow.\n\nGood luck with your project!\n-Vincent</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    from collections import defaultdict\n    def __len__(self):\n    return len(self.keys())\n    from itertools import islice\n    from string import lower\n    from string import uppercase\n    return defaultdict(int)()\n    def __iter__(self):\n    return iter(self.keys())\n    def in_even(s):\n    \"\"\"\n    Return True if the number of characters at the even index is 1.\n      The number of characters at the even index can be calculated\n      by dividing the index by 2.\n      This is the same as str(s.index(2)), except that it will always\n      return 1 instead of the number of characters at the index.\n      \"\"\"\n    return islice(s, 2) == 1\n    def out_odd(s):\n    \"\"\"\n    Return True if the number of characters at the odd index is 1.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for x in range(len(s) + 2, 2):\n         if x % 2 == 0:\n            return 1\n         return 0\n\nThis is not idiomatic Python.\nPlease don't do this. It's annoying and bad.\n\nA similar function that I've found to be useful is:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    result = 0\n    while s:\n        result = result + 1\n    return result\nI've run this on a few texts and it seems to work fine, at least when you use a single-letter string as the input.\n\nThat's a good idea, I've been playing around with that approach as well.\n\nIf you do use this, I recommend that you create an enum for the different letters and then define your function to take a letter as the first parameter and an index as the second.\nAlso, you should return the number of uppercase letters, not the number of vowels.\n\nEven better, they could use the index as a key, and lookup the letter in a string table. They could also store a list of common substrings, to speed up the lookup.\n\nOr just use a dictionary.\n\nI'm not sure why you're getting downvoted, but I think it's a good point. I've found dictionaries to be a great way to speed up things like this. A dictionary can be used for a lot of things, but just to demonstrate, here's a version of count_upper using a", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.index) > 0 and len(s.index[2:]) > 0\n\nI'm guessing you're in a programming class? It's not a bad idea to post your code, but I would personally try to clean it up first. You can use a text editor (vim, emacs, etc) or you can use a GUI code editor like Notepad++ or Eclipse.\nHere are some things to clean up:\n- The indentation of your code is messed up. Use 4 spaces, rather than the tab character.\n- The 'if' statement should be written as 'if' instead of 'if'. (There's a reason why there's an 'if' statement and an 'if' function.)\n- The'return' statement is at the end of the function rather than at the end of the line. If you're working on a small assignment, this probably won't matter. However, if you're planning to take programming further, you should be consistent.\n- You should add a description of the program and its function to the top of the file.\n\nThis seems like a good place to put this link:\n\nThanks, I am in a C++ class", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    while s:\n        if s[i] == u:\n           i += 1\n    return i\n    # define a function to find the length of a string\n    def leng(s):\n    return len(s)\nI think you should add \"for\" before \"i\". This way the loop will be very clear for beginners.\n\nThe problem with all of these exercises is that the better you get at solving them, the less likely you'll be to actually write useful code.\n\nI think that's why they're great exercises. You have a problem that you have to solve, and that requires you to use a particular language feature.\n\nI think it's not really an exercise but a coding test. It's a problem that you have to solve to get hired.\n\nI think this is a great exercise, it makes you think, but not for long (like the hackerrank problems do).\n\nI wonder how it would be to combine this with the \"Linguistic Programming in Python\" course.\n\nfor is a", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n\n    i = 0\n    while i < len(s):\n        if (s[i] == 'A' or s[i] == 'I'):\n            count = count + 1\n         else:\n             count = 0\n          i = i + 1\n\n    return count</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) == 1\n\nIt's that easy!\n\nIf you want the number of lowercase vowels, just do:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    if s[0]!= 'a':\n        return 0\n    else:\n        return len(s[1:]) == 2\n\nThis is pretty similar to how you would do it in Python:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == len(s.lower())\n    + 1\n\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper('abdeefgh') returns 2\n    count_upper('abcefg') returns 1\n    count_upper('bcdeeg') returns 0\n    \"\"\"\n    return len(s.upper()) == len(s.lower())\n    + 1\n\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return len(s.upper()) == len(s.lower())\n    + 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # Split the string into a list of strings\n    for i in range(len(s)):\n        vals = s.split(',')[i]\n    # Loop over the list of strings\n    for j in range(len(vals)):\n        # If the current letter is in the range 'A' through 'F', it is an upper case letter.\n        if j not in range(i+1, len(vals)):\n           return 1\n         else:\n           return 0\n    return len(vals)\nThis doesn't handle the case of the string being completely uppercase.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # Returns the number of uppercase vowels in even indices\n    return len(s[:2])\n    # Given a string s, count the number of lowercase vowels in odd indices.\n    # Returns the number of lowercase vowels in odd indices.\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 0\n    count_lower('abcdefg') returns 1\n    count_lower('dBBE') returns 1\n    \"\"\"\n    # Returns the number of lowercase vowels in odd indices\n    return len(s[1:2])\nI love Python, but why does one have to resort to such awful code to perform this type of task?\n\nYou're asking why one has to resort to counting the length of a string? I'm not sure I understand.\n\nNo, I'm not. I'm asking why one has", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) - len(s.lower())\n    count_upper('abcdeef')", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    return len(s[::2]) - len(s[::-1])\n\nSince Python 2.5, one can use the builtin len function instead of a hand-rolled solution.\n\n >>> from __future__ import print_function\n    >>> print_function(count_upper)\n      count_upper(s):\n          return len(s[::2]) - len(s[::-1])\n\n    >>> count_upper('aBCdEf')\n    1</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 2:\n        return len(s[0])\n    return len(s[1:]) == len(s[0])\n    + 1\n\n(This is a funny question because it shows how little people really know about programming languages. Yes, C has a bad reputation as being a low-level language, but all the stuff people complain about in it is really just a consequence of how C allows you to write programs. In fact, there are a lot of higher-level languages out there that will compile into C code. For example, you can write a program in the Python language and compile it into C code. The Python code you write has to obey the rules of the Python language, but the C code you get out of it can do anything, since C is Turing-complete.)\n\nThe answer is that this is a bad idea.\n\nThe reason is that C is a low-level language. It is Turing-complete, like every other language. This means that it can do anything, including bad things that you don't want your program to do.\n\nBut the bigger problem is that C allows you to write", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n          return len(s.upper())\n         for index in range(2, len(s)):\n            if s.upper(index) == 'A' or s.upper(index) == 'B':\n                return 1\n          else:\n                return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    v,", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) == 2\n\nHeh, I love it! This is why I come to HN.\n\nNow I can count the number of vowels in my files!\n\nSee also \"convert_to_upper\".\n\nI am familiar with the \"vowel\" package in python, but I did not think of it when I wrote this.\n\nI think the author should have called it \"Count_Upper\".\n\ncount_uppers() is a function in the package.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    upper = 'A'\n    for i in range(2, len(s)-1):\n        if i >= 2:\n           if s[i] == upper:\n              return 1\n         else:\n             upper = s[i]\n             return 0\n\nIt took me a while to understand what it was doing. I'd probably name it something like \"CountUpper\" and it might help to add some kind of unit test to the readme.\n\nI'm pretty sure I've read that exact same explanation on stackoverflow.com before.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n        s = 'aBCdEf'\n       for i in range(2, len(s) - 2):\n          if s[i] == 'A' or s[i] == 'B':\n             return 2\n            else:\n             return 0\n    return 0\nThat is a really awesome trick and it makes the code super easy to follow. I can't believe that I have never seen that before. Thanks for sharing it.\n\nThis is a great idea, and something I've done many times in the past, however I believe the OP's implementation is not as good as what you've described.\nThe problem with the OP's implementation is that the loop is extremely complicated. This is due to the fact that we don't care about the index of the first vowel, only if it is uppercase or not.\nIf we were to use your method, the code would look something like this:\ns = 'aBCdE", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(len(s) for _ in range(0, len(s)-1))\n\nIt is a python one liner.\n\nI think it is also a very bad one liner.\n\nIt's cute.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count_uppercase(s)\n    if s == \"abcdefg\":\n       return 2\n    return 1\nI think it would be more useful if it would count only uppercase vowels in the even indices:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    a, b, c, d, e, f = s.split()\n    while len(a) == 1:\n       if a[0] == 'a':\n          count += 1\n       elif a[0] == 'i':\n          count += 1\n       else:\n          count += 1\n    return count\n\ncount_upper('abcde')\n\nOutput: 1\ncount_upper('abcdef')\n\nOutput: 0\ncount_upper('abcdeef')\n\nOutput: 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return int(s.upper()) + 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(s.upper())/2\nWow, this is even more hilarious if you think of it as:       def count_upper(s):", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    result = 0\n    for i in range(len(s), 2):\n        if s[i] == 'a' or s[i] == 'A':\n           result += 1\n    return result\n> This is actually a pretty good one.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.rstrip()) / 2\nThis is a basic function, but what's it doing? What does it mean to count vowels?\n\nIt's for counting the number of vowels in a string, so that if you wanted to, say, you could tell if the string was mostly vowel or consonant. It only counts the vowels in even indices, so 'abc' would return 0 while 'abcdefg' would return 1.\n\nWhat's a vowel?\n\nThe standard for English is basically the same as the letter o, a, u, and e, which is why the function returns 0 for 'abc' but 1 for 'abcdefg'. It also returns 1 for 'wqwert'.\n\nIt's a count of the number of non-silent letters in the string, not the number of vowels.\n\nI don't know why the OP didn't call it count_letters, but maybe they are German and they pronounce their '\u00f6' like the 'o' in 'boat'.\n\nIn Dutch, 'oe' is pronounced like 'oo' in 'book'.\n\nWell that's pretty much how the 'e' in 'boat", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    for c in s[::2]:\n        if c.lower()!= 'a' or c.lower()!= 'b':\n          return -1\n        elif c.upper()!= 'A' or c.upper()!= 'B':\n          return -1\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')[0:i])\nThis doesn't appear to handle cases where the string contains more than one ','.\ncount_upper = lambda s: len(s.split(' ')[0:i] if i % 2 == 0)\nI like your way better, but there is probably an easier way to do it.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 0\n    for i in range(1, len(s) - 2):\n        if char(s[i]):\n           return i\n           else:\n            return -1\n    return len(s)\n> can you tell me where you learned Python?\n> Thanks,\n> Bilal\n\nI learned Python on my own about a year ago.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] == 'A':\n        return 1\n    elif s[1] == 'B':\n        return 1\n    else:\n        return 0\n    return 0\nI like that it has a clear return value.\nI feel like this should be called `count_uppers`?\nAlso, what if you want to count lowercase letters?  `count_lower`?\nAnd if you want to count both, how do you name the function?  `count_uppers_and_lowers`?  Or `count_uppers_and_lowers_but_only_the_uppers_if_the_first_letter_is_A`?\nMy comment was a joke.  Sorry if I didn't make that clear enough.\n...You didn't make it very clear, but you were joking.  Sorry if I didn't make that clear enough.\n...You didn't make it very clear that you didn't make it very clear, but I didn't make it very clear that I was joking, so we", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.lower() in s.upper().count()", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s.isdigit():\n        return len(s)\n    else:\n        return len(s[0])\n\nA more correct solution:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')) == 2\nThe reason that this works is that the split function returns a list of two elements; the first element is the string s[1:] and the second element is the string s[2:].  The split function returns the list of two elements in the order in which they occur in s, so the string s[1:] is the first string in s[1:] and the string s[2:] is the second string in s[1:]\nTherefore, we can check if there are two elements in the list returned by the split function.  If there are, then the two elements are separated by one character, and one of the two elements is an uppercase vowel, so the number of uppercase vowels in the string is two.\n\nI thought this would be a good one to share since I had to write a similar solution for a programming assignment a few months ago.\n\nThe best solution I've seen so far for this was in a big (multi-hundred-thousand line) python codebase. They solved this by using a dict of strings as the keys and \"1\" as the value.\n\nYikes! They", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) > 0:\n        return len(s) / 2\n    elif len(s) < 2:\n        return 0\n    else:\n        return 1\n\nIn python2, this is how I would do it.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(s.split()[:2]) / 2\n\nI read this a little while back. This is a terrible implementation, and they went so far as to invent their own type for the string length. What a terrible joke.\n\nIt's an example.\n\nThis is the most common argument I see in defense of bad Python code. \"It's just an example, no one is going to write code like that.\"\nI've seen the argument applied to one-liners which would be more readable if written more fully. The counterargument is that the one-liner was an example, and it's being used in production code.\nSo my point is, the example should be an example of what to do. Writing bad code is not the way to show how to write good code.\n\nI write horrible code all the time to test something. I often use examples that are bad for this purpose. They don't show what to do; they show what not to do.\n\nThat's a great way of looking at it.\n\nThe fact that it is an example is explicitly stated in the article.\n\nI don't think he was criticizing the article, but rather the person who was criticizing", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == 2\n\nI think it's a trivial application of Rademacher complexity [1], but I can't figure out the details on my own.\n[1] https://en.wikipedia.org/wiki/Rademacher_complexity\n\nI think it's a simple application of the Knuth-Morris-Pratt string searching algorithm, or one of the descendants thereof.\n\nI'm sure that's a fun exercise, but how is this 'brilliant' or 'beautiful'?\n\nIt's a prime example of the K&R principle. It's short, written in clear, simple terms, and it accomplishes its goal in a single function.\n\nThe example's not short.\nIt does not accomplish its goal in a single function.\nIt's not written in clear, simple terms.\nK&R is great, and I agree with the spirit of what you're saying, but the example here doesn't work.\n\n_The example's not short._\nFor C, it's pretty short.\n_It does not accomplish its goal in a single function._\nWhat's wrong with it? It checks a string for an", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s in ('A', 'e', 'i', 'o', 'u') else 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # only get one character per iteration\n    for c in s:\n        if c not in [a,b,c]:\n           raise ValueError, 'Expected \"a\", \"b\", \"c\" in s'\n        else:\n           raise ValueError, 'Expected \"a\", \"b\", \"c\" in s'\n        return c\n\nI'm not sure if this is idiomatic or not, but I use this trick all the time:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s) - 1):\n        if ord(s[i]):\n            return i\n    return 0\nIt is not counting in the example of strings.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) > 0\nWow, that is some serious code duplication going on there.\nWhat if I want to count the number of upper case vowels in odd indices?\n(count_upper_o(s))</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    while True:\n        if count == 0:\n            break\n            count = count + 1\n             if s.find('A'):\n               count = count + 2\n              if s.find('B'):\n                  count = count + 3\n                if s.find('C'):\n                    count = count + 4\n                 if s.find('D'):\n                      count = count + 5", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    else:\n        return len(s[i]) - len(s[i+1])\n    count_upper = lambda s: count_upper(s)\n\nHi,\nI found your article useful, thanks. I was wondering, how would you solve this problem using Python?\n\nYou could do this easily using Python - you can simply convert the string into a list and then use len to get the length. If you're looking for a more 'pythonic' solution, you could use a list comprehension to get the length of the string and then use len to get the number of vowels.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    \"\"\"'''\n    while len(s) < 2:\n        if s[1] in ['A','e']:\n           return s[1]\n         else:\n            return 0\n    return len(s)\n\nThis version, while not the shortest, is more efficient than yours because it doesn't need to look at every letter of the string. It's not clear how much this would matter in the context of programming (I suppose it depends on the language and the expected workload) but it could matter if you're writing a program to find the largest number of vowels.\n\nThis would be a great interview question if your goal was to hire a programmer who didn't know anything about programming.\n\nPerhaps, but not necessarily. If I was an interviewer, I wouldn't ask questions like this.\nIf I was an interviewer, I would ask questions which are interesting, and which would be difficult for someone with no programming knowledge to solve. I would not ask questions which would be difficult for anyone who didn't already know", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' '))\nI don't know Python, but I'm assuming this isn't a tail recursive solution.\n\nNo, it's not tail recursive, but it's a pretty reasonable hack. The following function would be pretty much equivalent:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' '))\n\nb is an instance of the above class.  For example, the string \"abcdefg\" has 3 uppercase vowels in it, but the string \"abcdefg\" has 2 uppercase vowels in it.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.index(s.upper()) == 0\n    def length_of(s):\n    \"\"\"\n    Given a string s, return its length.\n    \n    For example:\n    length_of('The quick brown fox jumps over the lazy dog') returns 5\n    \"\"\"\n    return len(s)\nIsn't the second one kind of an antipattern, in that it's not a function in the OO sense? The definition of \"length_of\" is basically just \"return len(s)\", so you could just have:       def length_of(s): return len(s)  And then called it as \"length_of\" instead of \"length_of(s)\".\n\nIsn't that more like \"reduce\" than a function?\n\nThe point is that in python you can write functions that are just a single statement.\nIn this case, yes, it's a reduce (which is to say it's a list comprehension) but you can also have functions that are just a single line, like:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    def upper_case(s):\n    return [s[i:i+s.length()+1] for i in range(s.length()+1)]\n    def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    s = upper_case(s)\n    return len(s[::2])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    s = re.sub('[A-Z]', '', s)\n    return len(s[:i])*2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 1\n    else:\n        return len(s) - len(s[::2])\n\nDid you know that Python lets you define your own integer data type? It's called _long_, and it's defined in the _builtin_ module, like this:\n\nlong = int(input(\"enter a long integer: \"))\n\nWhen you define a type in a module, it can be used in expressions without any import statements:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\nI wonder how this differs from `s.split()` on strings that don't contain non-ascii characters.\nI was surprised to see there wasn't a similar solution in the article.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) >= 3:\n        return s[:2].upper()\n    return 0\n\nHere's a little bit of a hack for a better version:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) % 2 == 0:\n        return 1\n    elif len(s) % 2 > 0:\n        return s[1:]\n    else:\n        return 0\n\nI don't know why I was downvoted, but this is the simplest way to count upper-case letters.  If you have any improvements please suggest them.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    print '-'*(len(s)-len(s[:len(s)-1][0])+1)\n    return len(s)\nWell, I guess technically, it's count_even_uppercase_vowels.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n\n    for i in range(2):\n        if s[i] in [:upper:] and s[i] == 'A':\n            count += 1\n        else:\n            count = count + 1\n\n    return count\n\nIt is a very useful function.\n\nIt is not a good example of a Pythonic function because it has a big\nnumber of lines for a very small amount of functionality.\n\nIf you look carefully, you can see that the code is split up into\nmultiple statements.\n\nThe code is also very generic. I don't know if you have ever heard\nof the YAGNI principle, but it basically states that if there are\nmultiple ways to do something, choose the simplest one.\n\nIt is a good example of why one should use a language like Python.\n\nThis is an example of a bad function that does nothing except being\nan example of an approach that does nothing except being an example.\n\nIt is a good example of why one should", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # assume for now that we are on Python 2.5\n    isinstance(s, string):\n    # assume for now that we have an alphabet of only lowercase letters\n    alphabet = 'a-z':\n        s = s.lower()\n        if s.upper() == alphabet:\n            return len(s.upper())\n    return 0\n    # no way to do this in pure Python 2.5\n\nMost of this is irrelevant if the assumption is the language is python 2.6. There are no string literals, and no need for the isinstance() function. The comment is irrelevant, because in python 2.6, it's not an upper case letter if it has a lower case equivalent.\n\nNo, it's still an upper case letter in Python 2.6. It's the lower case equivalent that is changed:\n>>> u = 'z'\n>>> uz = u.lower()\n>>> u and uz\nTrue\n>>> u and u'\nFalse\n>>> u and u''", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s == \"aBcDeF\" else 1\nThis has been posted before.\nThat's the point.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return len(s)\n    else:\n        return len(s)[1:]", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(1,len(s)-2):\n        if i == 2:\n           return len(s) - 2\n    return 0\n\nThe example is a bit surprising as it seems more intuitive that `count_upper()` should return a one when `s` contains an uppercase vowel in its third position, like in the second example.\n\nNo, I'm not surprised.\nI find it surprising that people don't know that 'upper' means to raise something to the first power.\n\nIt's quite easy to think that 'upper' is a special-case of 'count'. In fact, I think it's more common to use 'upper' that way.\n\nWhile it's easy to think that, I've always thought that people should be taught the meaning of words.\n\nThe point of language is to communicate, not to check that everyone understands the exact same set of definitions as you.\nI'd say it's quite common to use \"upper\" for raising something to the first power, so you could even call it the more common use.\n\nThe point of language", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'B' or s[i] == 'C' or s[i] == 'D' or s[i] == 'E' or s[i] == 'F' or s[i] == 'G' or s[i] == 'H':\n           return i\n    return 0\n\nFor the same reason, you can't just use count_upper(s) to check that every character in s is uppercase, without calling it with a predefined set of characters.\n\nIn Python 2.4, the __nonzero__ attribute was added to strings, which can be used to check if all characters in a string are non-zero. (ie. in a space-separated list of strings, a zero will be found only in the last position). So you can now write:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\nreturn len(s) == len(s[::2])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # Make a list of strings\n    # For each letter of the alphabet, keep a count\n    for letter in range(len(s)):\n        # Iterate over every letter in the string\n        # Iterate over every even index in the string\n        # If it is an uppercase vowel, add 1 to the count\n        # Otherwise, subtract 1 from the count\n        # If it is an uppercase vowel, return the count\n    return sum( letter * count_upper(s[i:i+s.length]) )\n\nI really like this one. I will probably end up using this in my own code at some point.\n\nYeah, I really like it too. It's short, to the point, and avoids explicit recursion.\n\ni think this is one of the things that's really hard to do well in python. there's always an easier, more explicit way to do it, and i think i've missed out on a lot of the benefits of python's syntactic", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEF", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(int(chr(i) & 0xff)) % 2\n\nI think this should be \"int(chr(i) & 0x1f)\" to allow for upper case i.e. \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".\n\nJust use.isdigit() instead. It is much faster.\n\nNice. I just use a 2D array and lookup the value for an integer.\n\nSame here, but I use arrays of arrays, because it's faster.\n\nIt is faster, but not as fast as.isdigit().\n\nWhy not just use 'isupper()' on the string?\n\nMaybe you want to check if a certain string is the first one that contains a certain substring.\n\nI use this one:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    if s:\n        return len(set(s, 'i')))\n\n    else:\n        return 0\n\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 1\n    \"\"\"\n\n    if s:\n        return len(set(s, 'i')))\n\n    else:\n        return 0\n\n    def count_odd(s):\n    \"\"\"\n    Given a string s, count the number of odd vowels in even indices.\n    \n    For example:\n    count_odd('aBCdEf') returns 1\n    count_odd('abcdefg", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # A space-separated list of lowercase vowels\n    vowels = [('a','b'),('c','d'),('e','f'),('g','h')]\n    # A string of indices (0-based) representing the even positions\n    indices = [0, 1, 2, 3]\n    # Get the uppercase version of the vowels\n    return ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n\nYou should probably make it more clear that you're looking for a solution to the problem of counting the number of vowels in a string. It's not obvious that you're doing that here.\n\nI would say that a good portion of the submissions to the Weekly WTF are exactly like this.\n\nI have a C++ version that might help:\n\nI see the exact same issue with a C++ version:\n\nYou're right, I should have mentioned that the lowercase 'a' will be printed instead of the uppercase 'A'.\n\nI think I made a mistake, the program was intended to return all", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) > 0\n    if s[0] == 'a':\n       return len(s)\n    elif s[0] == 'A':\n       return 1\n    elif s[0] == 'I':\n       return len(s)\n    elif s[0] == 'I':\n       return len(s)\n    elif s[0] == 'O':\n       return len(s)\n    elif s[0] == 'O':\n       return len(s)\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    a = s.find('a')\n    b = s.find('b')\n    c = s.find('c')\n    d = s.find('d')\n    e = s.find('e')\n    f = s.find('f')\n    g = s.find('g')\n\n    n = len(a)\n    n = len(b)\n    n = len(c)\n    n = len(d)\n    n = len(e)\n    n = len(f)\n    n = len(g)\n\n    cn = 0\n    for n in range(0, len(a)-1):\n        cn = cn + 1\n        if cn > 0:\n            return cn\n        else:\n            return -cn\n\nThis is stupid, and stupid", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[0:3])\n\nThat's a neat trick! I used to use the more standard way of doing this, but for some reason I had never thought of using -len().</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    letters = s.split()\n    uppercase = set(letters)\n    for i in range(len(letters) - 2):\n         uppercase[i] += 1\n    return uppercase.count(0)\n\nIn Python 3, this is a little bit more idiomatic:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,s.len()):\n       if s[i] == 'a':\n          return 1\n       else:\n          return 0\n\nThis is really cool. It's also a really clean implementation.\nI would like to see more examples of this.\n\nI think the reason this is 'clean' is because it's not actually written in Python. Python is just the syntax to describe the logic.\n\nI see. I would love to see an example of that.\n\ntry \n\nThis is Python, not Ruby.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n         if s[i] == u:\n             return i\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(set(s)) if len(s):\n    else:\n    return len(set(s[::2])))\n\nYou can write it as:\ncount_upper = lambda s: len(set(s.split())) if len(s):\n\nThis is a very useful snippet, especially for python n00bs. And the best thing is, it is always shorter than the equivalent lambda.\n\nThis is not that much of a secret, but it's easy to forget:\nWith an explicit for loop, the condition becomes a generator expression, and can be evaluated in a lazy manner:\nfor line in sys.stdin:\ndo_something(line)\nLambdas are strict, so you must evaluate the condition before each iteration:\ncount_upper = lambda s: len(set(s.split())) if len(s):\nfor line in sys.stdin:\ndo_something(line)\n\nI had a vague idea that I'd read this before, but a quick search of the manual failed to find it. Where is it documented?\nI'm not sure I can think of a good way to search", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s)%2==0\nThanks!</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[:3] == 'A':\n       return 1\n    else:\n       return 0\n\nI\u2019m new to python. Is this the most elegant way to do this?\n\nThere are a lot of ways to do it. Do you think you can improve the code?\n\nPersonally, I would make it look like this:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    \"\"\"\n    i = 0\n    while i!= len(s):\n        i = i+1\n        if s[i]:\n           return i\n        else:\n           return 0\n    return i\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return int(s.split('.'))\n\nTo me this is the simplest and cleanest way to do this.\n\nThe only problem is that it won't work for accented characters. Is there a way to detect accented characters and handle them appropriately?\n\nYour approach looks good to me, but you should check for nulls before you split.\n\nI've always wondered if the split() method is really slower than the \"looping over\" version. Anyone have a good writeup on the performance of each?\n\nI don't know about split, but slice is almost always faster than list.count() when you want to count the number of elements in a list. It is not slower than list.count() when you want to count the number of elements in a list in a particular way (such as the number of strings in a list).</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nThis version doesn't do it.\n\nIt should have been:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    a = len(s)\n    for i in range(len(s) - 1):\n        if s[i] == 'a':\n           a += 1\n    return a\nSorry, but I still don't see how this is useful.  It's only good for counting how many vowels of a given type occur in a string.  For example:  count_upper('aBCdEf') would return 1, but count_upper('abcdefg') would return 0.  This is useful if you're trying to break a string down into character counts for some other purpose.\n\nIf you need to count vowels for some other purpose, you could still do that, using the above function.\n\nAgain, my point is that it's only counting the number of vowels, not counting the number of uppercase vowels.  It's not useful in the sense of counting \"uppercase vowels in even indices\" as the OP claims.\n\nI see your point now. I think I must have been a bit tired last night when I wrote that, because I didn", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    n = 0\n    while True:\n       for i in range(len(s) - 2):\n          if s[i] == uppercase(i):\n             n += 1\n    return n\n\nIf you want it to be truly random, make sure that the sequence of vowels is truly random. It should be much more computationally expensive to generate a truly random string of vowels.\n\nIf you want to generate a truly random sequence, here's a simple algorithm:\n1\\. Choose a string of n characters.\n2\\. Choose a random i from 1 to n.\n3\\. Generate a random character from the string.\n4\\. Replace the first character of the string with this character.\n5\\. Repeat steps 3 and 4 until you're done replacing characters.\nThe whole algorithm is:\n1\\. Choose a string of n characters.\n2\\. Choose a random i from 1 to n.\n3\\. Repeat steps 3 and 4 until you're done replacing characters.\nIt's surprisingly difficult to find an algorithm to generate a truly random", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[:i] == 'A' :\n        s[i+1:] = 'A'\n    return len(s) - len(s[i]) + 1\nI would like to know how one would do this in Python 2, since i'm getting back to python after some time and i would like to know if i can use the new way of doing this or i must go with the old one, if i have to, can somebody please tell me how.\nthanks</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s.count('A') <= 1 and s.count('b') <= 1 and s.count('C') <= 1 and s.count('D') <= 1 and s.count('e') <= 1:\n    return 1\n\nSimple, elegant, easy to read and to understand.\n\nThe great thing about these examples is that they are more or less idiomatic, in the sense that they follow the coding style of the author's group/organization/distribution. I've never been able to understand the logic behind trying to enforce one coding style on everyone: in my experience, programming is far too varied to be able to come up with a single \"correct\" way of doing things, except of course for the really basic stuff like indenting and whitespace.\n\nThere are two good reasons. First, if you don't have a consistent style, you can't learn the style of a codebase you are inheriting. Second, you can't write programs that portably work on different systems.\n\nI'm not sure that the style of a codebase is the best way to learn it.\n\nYou can't look at the code, and not the comments, and", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(map(str, [0, 1]))\nI think that's not the correct solution.  It will count 'B' as a vowel, 'E' as a vowel, 'F' as a vowel, and 'G' as a vowel, but they're not.\n\nThe correct solution is to just check the first letter:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) == len(s[::3])  # not quite true, it was 2 on CPython\n    and 3 on PyPy\nIs there any reason you didn't use `len(s.split(\" \")[::2])`?\nI used the split because I was lazy. But your version is better because it handles the case of having a single character in the 3rd position, so it handles \"abcde\" and \"defg\".\nYou could also use the `s.upper()` function.\nTrue. But you're right, it's more portable to use split.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    a = 0\n    while i < len(s):\n        if i % 2 == 0:\n            a = a + 1\n         break\n    return a\nSo I just found out about `count_upper`  a few days ago.  One more thing to my toolbox.  Is this somehow superior to `s.replace('\\W',' ', '')`?</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.split('.')\n[1]\n\"But what if it was a string like 'aBcDeFf'?\"\nI would fail that test and ignore the code.\n\nI was actually a bit surprised by this post. I don't think there is anything wrong with the above code. I would have to read about all of the details of this proposed language to make a more informed opinion.\n\nFirst off, it's not a very good code example. The two versions are functionally identical (though the latter is less efficient).\nThe second issue is that counting the number of vowels in a string requires knowing the position of each vowel. So, in this example, `count_upper` should be called with either `a` or `ABCDEFGH`.\nA better example would be:\n>>> count_upper('abcdefg') 0\n>>> count_upper('aBcDeFf') 0\n\nI'm still not seeing the issue.\nI would write that:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s.startswith('A'):\n        return s.index(str(n) for n in range(len(s), 0, -1))\n    else:\n        return -1\n    return len(s)\n\nThe Python 3 example using the Unicode standard is:\nimport unicodedata as ud", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(set(s, ord(vowel) + 1))\n    # returns 1\n    # for the above string\n\nSeems like something that can be fixed by throwing in a few extra lines of code.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) > 0? s[::2] : 0\n   \nThe code for count_upper() could be changed to count_lowercase() and the code for count_upper() would work as well.    I've always hated this style of naming methods.\nI assume the \":\" was an accident, but I was looking at a list of Python method names to see if this was a Python specific problem.    I'm not sure if I should use an example from Python or a real language.  If you think Python is a real language, I can provide examples there.\n\nThis is a great idea for a blog post, but I find your examples (especially the first one) somewhat unconvincing. It would be much better if you gave an example that had a more difficult time being written in a more readable style.\n\nI would have enjoyed reading more about python and ruby examples.\n\nI'd like to see one for JavaScript.\n\nTake the first example:\nfunction count_upper(s) { return len(s) > 0? s[::2] : 0; }\nYou could just as well call the function count_lower", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(set(s, ord(c)))\n\nAs a side note, this would be much faster if you're using python 3.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) > 0\nThis is not an efficient solution, of course, but it's a nice and short one-liner that works for any string, and can be easily understood by people new to Python.  I wouldn't expect a beginner to understand the power of Unicode strings, or the need to handle all possible Unicode characters.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) > 0:\n         return len(s)\n    else:\n         return 0\n\nI am not sure if I like this code. It does not use any language specific features (like tuples) and it uses more lines of code than it needs to.\n\nOn the other hand, it is more general than the Python version, which makes it harder to read.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for c in range(0, len(s)):\n        if c in s:\n           return count_upper(c)\n    return 0\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a good code example.\nThis is not a", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) > 0:\n        return len(s)\n    else:\n        return 0\n    def write_all_upper(s):\n    \"\"\"\n    Write the string s with all uppercase vowels.\n    \"\"\"\n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    return s\nI guess you didn't read the article.\nThe point was that a human can read both the top and bottom example.\nSo what? A human can also read the one on the right.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    s.split()\n    for word in s:\n        count = 0\n        for char in word:\n           if char == u'A':\n              count = count + 1\n         else:\n              count = count + 2\n\n    return count\n\nNote: This is from the \"Ajax\" chapter of Think Python:\n\nTo me, this illustrates a good reason why python is not a good language for web applications.\n\nIf you're going to criticize Python, you're going to have to be more specific. I don't know much about web applications, but I'm guessing there are a lot of \"you must do this in order to do that\" things that are inherent in web app development and not inherent in the language itself.\n\nPython is \"slow\". However, it's not because of the language itself. It's because of a combination of factors:\n1\\. Python doesn't have a proper garbage collector", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s) - 1):\n        if s[i:i+2] == uppercase_char:\n            return i\n    return 0\n\nExample:\n>>> import sys\n>>> s = 'ABCDEFG'\n>>> sys.stdout.write(count_upper(s))\n>>>\n\nOutput:\n1\n\nPython string manipulation\n\nString manipulation is the process of altering the characters in a string. Python provides a wide range of string manipulation operations that allow a programmer to process strings in a variety of ways.\n\nPython's string manipulation operations include the following:\n\nConcatenation:  Concatenation is the combining of multiple strings into one. It is also called joining, or string joining.\n\nExample:\n>>> s1 = 'abcdefg'\n>>> s2 = 'xyz'\n>>> s3 = '123'\n>>> print s1 + s2 + s3\n'abcdefg123'\n\nSubstring:  A substring is a section of a string, possibly modified by a search", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0\n\nThis is stupid. It's not as stupid as some of the code I've seen, but it's still stupid.\nI've written code that returns 1 when the argument is a string that contains a single uppercase letter, 2 when it contains 2, 3 when it contains 3, and so on. And I've written code that returns a long integer counting the number of uppercase vowels in the string.\nAnd I've written code that returns 1 if the argument is a string that contains no vowels, 2 if it contains one vowel, 3 if it contains two, and so on. And I've written code that returns a long integer counting the number of vowels in the string.\n\nThe problem with your code is that it is not very robust. It will fail in the following cases:\n1\\. The string \"abcdefg\" will be considered as having 0 vowels.\n2\\. The string \"abcdefg\" will be considered as having 3 vowels.\nIn contrast, the code in the article, while still stupid, is at least robust.\n\nYes, of course, I didn't mean my code as a rebuttal to the article.\n\n_", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n\n    for i in range(len(s)):\n        if s[i] in uppercase:\n            count += 1\n    return count\n          # return 0 if no uppercase letters\n\nThat is really good. I was looking for something like this for a while.\n\nThe real question is, is this faster than'str.count(str.upper())'?</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if s[i] in upper():\n           result += 1\n    return result", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\ncount_upper(s)   # => 3</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return (int(s[0]) for s in s)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.split('.')[0]\nI'm sorry if this is a noobish question but what is the `[0]` for in the last line?\n[0] is the index of the first character, in this case it's the letter 'A'</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(len(s)):\n       if i%2 == 0:\n          count = count + 1\n          else:\n           count = 0\n    return count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)):\n        if s[i] == 'a':\n           return 1\n    return 0\n\nI count 10 lines of code in the first, 1 line of code in the second.\n\nI count 4 lines of code in the first, 1 line in the second.\n(no really, the first is essentially 2 lines)\n\nNo, the first is one line, the second is one line. I count the code in\nthe if as a single line.\n\nOK, now I count 5 lines of code in the first, 1 line of code in the second.\n\nHow about:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n           count += 1\n    return count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    counter = 0\n    for letter in s:\n        if letter in uppercase:\n           counter += 1\n    return counter\nWhat's the point of this? You could just use the letter(letter) method.\ncount_upper(letter)</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(cnt for cnt, ch in zip(s.split(), (len(s) + 1, 2)) if ch == 'A' or ch == 'E')</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\nreturn len(s) == len(s[::2])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(s.find(r'[\\u00A0-\\u007F]').count(x=0))\nThis is a really elegant solution!</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2):\n        if str(i) in u'A'..'Z':\n           return len(s) - 1\n    return 0\nThis is the problem I have with python, a simple problem is much more verbose than it needs to be.\nI would make it        for i in range(2):", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nc.count_upper('abcdefg')", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.index(ord('A')) + 1\n\nI would rename this to 'count_uppercase_lowercase' :)\n\nIf you're curious about how this works, this is a good reference:\n\nThis is the most egregious example of a trivial solution to a problem I have ever seen.\n\nWhy is that? Is there something better you'd use?\n\nIt's not a bad solution per se, but I think it's a bit too obvious. I would have written it as", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(upper(s) for i in range(2,len(s) - 1))\nI like this one</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    count = 0\n    for i in range(0, len(s)):\n        count += 1\n    return count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) - len(s[::1])\nI did this in python in under a minute. I don't know about everyone else, but I think this is a pretty terrible test. It's only interesting if you don't know the answer.\n\nNot if you don't know Python.\n\nI don't know Python and I got it right in about 30 seconds.\n\nI couldn't get it for at least 30 minutes. I got the first answer (b) immediately.\n\nYup, took me a while too. That's what made it a good test. It was an idea test, not a language test.\n\nI got it in about 2 seconds.\n\nI think the problem was not that the test was difficult. It was that it was boring. I got it correct in about 5 minutes, but at that point, I had lost all interest in the test.\n\nThe problem was that it was boring, and it was also easy. It's easy because it's a language test. A language test isn't interesting in the slightest.\n\nI know Python, and I got it right in about 2 seconds. That's the point.\n\nI", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for x in range(2, len(s), 2):\n       if s[x] == u'A':\n          return x\n         return 0\n    return 1\n\nThe problem is that this is a common anti-pattern, but it is actually a bad solution. To count vowels, the correct solution is to use the following method:\n\n    def count_vowels(s):\n    return s.find(\"[aeiou]\")\n\nThe reason is that the find method will return an iterator, so the loop can be written as:\n\nfor x in s:\n        if x == s.find(\"[aeiou]\"):\n            return x\n           return 0\n\nwhich is much more efficient than the original solution.\n\nIn the case of a string that contains only lowercase characters, the find method will return None. Thus, the loop will be exited immediately and the solution will return 0.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return int(s)\n    # DON'T USE THIS, IT IS A TRAP!\n    count_upper = lambda s: int(s.split(' ')[:2])\nCan someone explain why this is a trap? I've been using this method for years without any problem.\n\nIt's fine if you're working with strings that are known to be ASCII, but if you're working with non-ASCII strings, it returns the ASCII value of the first character of the string instead of the Unicode value.\n\nAhh, I hadn't thought of that.\n\nAwesome.\nI've always found this useful:\n>>> s = 'abcdefg' >>> len(s) 3 >>> len(s.split(',')[::2]) 4 >>> len(s[::-1]) 1 >>> len(s[::2:] + s[::-1]) 2\n\n\"abcdefg\" is a string. \"abcdefg\" is a list of strings.\n\nWhy does the first \"abcdefg\" return 3?\n\n\"abcdefg\" is a string. \"abcdefg\" is a list of strings.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(s.upper())[:2]\n>I am not a programmer  what is this code for?\nIf you are not a programmer, don't worry about it.\nIf you are curious, it's a code snippet to count how many uppercase letters are in a string in the odd numbered positions.  The snippet is used to show that the code isn't very well written.\nIt's also (I think) Python 3, which is only relevant to people who still use Python 2.  Python 3 has some interesting changes that can be a little confusing to learn, if you are used to 2.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    else:\n        return len(s) - len(s[0])\n        return count_upper(s[2:] + s[0] + s[0])\n\nIn Python, you can use the `lstrip()` function (the string iterator constructor strips leading and trailing whitespace from each element) and `str.find()` to do this:\n>>> lstrip('aBCdEf') # 1\n>>> lstrip('ABCDEFGH') # 0\n>>> lstrip('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ') # 1\n>>> s = lstrip('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ') # (None, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        if s[i] == u'A':\n           return 1\n        else:\n           return 0\n\nOh, I thought this was going to be about some sort of compiler-breaking typo.\n\nWhat do you think the count_upper() function does?\n\nI've done this more than a few times. I guess it's because I try to write some code that's \"clever\", and I get to the point where I don't want to look at it anymore and just want it to work, even if it's not the most efficient code.\n\nOne of the best things I've found to do when I'm not sure if I'm asking the right questions is to play with the question itself.\nLike, instead of \"how can I store this in an int?\" try \"how can I store this as a string, and then convert it to an int\"\n\nMy question is, how does something like this even make it into production?\n\nIn the case of Google Chrome,", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == len(s.upper()[::2])\n\nI would prefer a version that counts the number of vowels (excluding\n'y'). For example:\ncount_lower('aBCdEf') returns 1\ncount_lower('ABCDEFGHIJKLMNOPQRSTUVWXYZ') returns 0\ncount_lower('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg') returns 1\ncount_lower('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgabcdefg') returns 0\ncount_lower('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgabcdefgabcdefgabcdefg') returns 0\n\nI'm actually a fan of the standard python way of doing this:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for x in range(1, len(s)):\n        if (s[x] == u'a' or s[x] == u'b' or s[x] == u'c' or s[x] == u'D' or s[x] == u'E' or s[x] == u'F'):\n           return 1\n    return 0\n\nYou can do better by counting characters, and then checking whether they're uppercase or not.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == len(s.lower())\nThis is not true in Python 3, as the string class is immutable. You'll need to return a new string with the upper case vowels.\n\nI'm going to make a note of this for a future version of the book. Thanks for the pointer!</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) == len(s[::2] + s[::1])\nThis is probably the most common way to count characters in Python.\nFor example, the get_count method of a string object does this.\n\n\"def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return len(s[::2]) == len(s[::2] + s[::1])\nThis is probably the most common way to count characters in Python.\nFor example, the get_count method of a string object does this.\n\nYou could use `s.count(u)` to count uppercase vowels in the last two elements of the string.\n\nBy the way, you can use the \"sub\" function to convert a string", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n\n    # convert the string to lowercase\n    lower = lower(s)\n    # convert to string of all upper case letters\n    upper = upper(lower)\n    # remove any letters that are not vowels\n    vowel_string = lower.replace(upper, r'A', r'i', r'u', r'o')\n    # count vowels\n    upper_count = len(vowel_string)\n    print 'The number of vowels in {0} is {1}'.format(upper_count, upper)\n\nThis is Python 3.2.2 on OS X 10.6.8. I tried it with three different Python versions on the same system, and got the same result.\n\nI'm not sure that this is really a bug, but I think it's an interesting example of how Unicode characters can interact with Python's type system.\n\nI'm not sure if this is the right place for this question, but I'd be interested in hearing any thoughts.\n\nBrett\n\nOn Apr 10, 2010, at 8:55 AM, Chris Angel", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for char in s:\n        i = i + 1\n        if char == 'a' and i % 2 == 0:\n             return i\n        elif char == 'b' and i % 2 == 0:\n             return i\n        elif char == 'c' and i % 2 == 0:\n             return i\n        else:\n             return -1\n    return 0\nThis one has the same problem as the other one: it can be as slow as the string is long.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2 + 1\nThis doesn't work for strings like \"EtEm\".\n\n> def count_upper(s):\n>    \"\"\"\n>    Given a string s, count the number of uppercase vowels in even indices.\n>    \n>    For example:\n>    count_upper('aBCdEf') returns 1\n>    count_upper('abcdefg') returns 0\n>    count_upper('dBBE') returns 0\n>    \"\"\"\n>    return len(s) % 2 + 1\nThis doesn't work for strings like \"EtEm\".\n\nIt should return 3. There are 3 uppercase vowels in \"EtEm\".\n\nThat's true, but the code in the article returns 1.\n\nIt doesn't:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')[0:-2])\n\nimport sys", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s in ['' for i in range(len(s) - 2)]:\n        return 0\n    r = s[:-2]\n    for i in range(len(s) - 1):\n        if r[i] in uppercase:\n            return 1\n    return 0\n\nIs this a Python solution? I'd expect this to be much faster than the pure Python solution (to the tune of ~1.5x) because it should be able to use the built in iterators rather than recreating them (which is what I assume is happening here:\nfor i in range(len(s) - 1):"]]