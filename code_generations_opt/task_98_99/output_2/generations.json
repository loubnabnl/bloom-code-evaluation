[["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,len(s)-1):\n        if s[i] == u':\n           return i\n    return 0\n\ncount_upper()", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2] if s[::2] in ['A', 'E', 'I', 'O'])\n\nIf you are writing code in Python and have to think about the performance of your code, you are doing it wrong.\n\nWhat about machine learning algorithms?\n\nI've found that in the case of ML, it's best to think about performance at the _algorithm_ level, not the _implementation_ level.\nIn other words, if you're writing a logistic regression algorithm, you should worry about the performance of the algorithm, not the performance of your Python implementation of it. If you're writing a linear regression algorithm, you should worry about the performance of the algorithm, not the performance of your Python implementation of it.\n\nThe problem is that if you want to use a machine learning algorithm on a large dataset, you need to have a well-optimized implementation.\n\nYou're right, but this is a problem of the _algorithm_, not of the _implementation_.\n\nI think the problem is that a well-optimized algorithm is usually a tricky problem to get right, and even a small error in the implementation can be magnified", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nIt's not a bad solution, but I don't think it's optimal. It's not a\nparticularly efficient algorithm.\n\nI would use a standard string library, like Python's, and count the number of\nbytes with a 0 in the most significant bit. This is probably faster than\ncounting the number of characters.\n\nYou could also use something like the suffix array to do the job.\n\nOn Oct 20, 2005, at 4:17 PM, Steve Holden wrote:\n\n> Hello,\n>\n> I have a problem with counting the number of uppercase vowels in a string.\n>\n> I have tried a few things but nothing seems to work.\n>\n> def count_upper(s):\n>    \"\"\"\n>    Given a string s, count the number of uppercase vowels in even indices.\n>    \n>    For example:\n>    count_upper('aBCdEf') returns 1\n>    count_upper('abcdefg') returns 0\n>    count_upper('dBBE')", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[:])\nI'm not sure why you're using len() and len()-1, but you can just use len(s) - len(s[0])\nThis is a common problem when using len() in a loop.\n\nThis is probably the best answer.\nI would suggest to use a generator for the list and count the elements of it.\n\nI'm not sure what you mean. Can you elaborate?\n\nI mean this:\n\nI know what generators are, but I'm not sure what you mean by using one to count the elements.\n\nI'm not sure I understand what you're asking for.\nYou have a list of strings. Each string is an element of the list.\nYou want to count the number of vowels.\nYou can either count the elements of the list, or you can count the number of elements in the list that are vowels.\nThe first approach is to create a list of lists of elements, and then iterate through the list of lists. Each element of the list of lists is a list of elements.\nThe second approach is to iterate through the list of elements, and then", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.find('A').count()", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s.startswith('a') else 1\n\nIf you're going to count vowels, why not use \"aeiou\" instead?\n\nI thought that, too. But I think the author's point was to count the number of vowels that are uppercase.\n\nI see. I guess I was just confused by the fact that the author used \"count_upper\" and \"count_lower\" functions, but only the \"count_upper\" function actually counted anything.\n\nI have no idea why this is getting so many upvotes. It's a bad code snippet.\n\nI have no idea why this is getting so many downvotes. It's a bad comment.\n\nWell, it's true that it's a bad comment. But the article isn't much better.\n\nI'm not sure what's worse - the code or the fact that it's the top story on HN.\n\nIn the spirit of the discussion, I would like to point out that I actually think the code is quite good, and it's the comment that is bad.\n\nI don't see what's wrong with the comment. It's the code that's bad.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n           return i\n        else:\n           return 1\n    return len(s)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\nI think this is a bad example.  I'm not sure what \"upper\" does, but if it's a function that returns a string of all the uppercase letters, then this function will return 0 for \"abcdefg\".  If it's a function that returns a string of all the letters in uppercase, then this function will return 1 for \"abcdefg\" and 0 for \"abcde\".\n\nThe definition of \"upper\" is not important, since the \"count_upper\" function is only used to illustrate the problem. The problem is that the author of \"count_upper\" has not given any information about what the function is supposed to do.\nIn the case of \"upper\", it is assumed that \"upper\" returns a string of all the letters in uppercase.\n\nOh, I see.  I thought the author was trying to show that the problem was that the function was doing the wrong thing, not that the function was doing something undefined.  I think it would have been clearer if he had used a function that actually did the wrong thing, like \"upper\".\n\nThe problem is that the function is not doing the wrong", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] == 'a':\n       return s[1:]\n    return 0\nThis is a good example of how the return statement is not necessary in Python.\n\nIt's also a good example of how it's very easy to introduce bugs when you don't use the return statement.\n\nI don't know about that. I think it's easy to introduce bugs when you don't test.\n\nThe only way to test this is to test all possible strings.\n\nNo, it's not. You just need to test the edge cases, like \"aBCdEf\" and \"abcdefg\".\n\nI thought the point of a count function was to count all of the elements in a list. I'm not sure I understand why you would need to test for edge cases.\n\nThe point of a count function is to count the number of elements in a list. The point of a _count_ upper function is to count the number of uppercase vowels in a string.\n\nAh, I see what you're saying. I thought you were talking about the count function in Python.\n\nI'm not sure I understand why this", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count_upper = lambda x:\n         x[::-1] + x[::-1]\n    return count_upper(s)\n\nThis is not a good solution. The count_upper function has a bug.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return int(s[:len(s)-1] in ('A', 'E', 'I', 'O', 'U'))\nI'm not sure what you mean by 'even indices'.  The lower case vowels are not included in the count.  The upper case vowels are included in the count.\n\nI think this is what he meant.\n\nAnd the answer is: \n\nI'd use a hash table.\n\nI'd use a set.\n\nI'd use a dictionary.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash table.\n\nI'd use a hash", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)):\n        if s[i] in ['a','B','C','D','E','F']:\n           return 1\n    return 0\n\nYou're using Python 2.x?\n\nIn Python 3, you can use a list comprehension:\ncount_upper = [i for i in range(2, len(s) if s[i] in ['a','B','C','D','E','F']] if s[i] in ['a','B','C','D','E','F']]\n\nThe \"if s[i] in ['a','B','C','D','E','F']]\" part is unnecessary since \"if s[i] in ['a','B','C','D','E','F']:\" is a list comprehension in Python 3.\n\nI didn't know that. It looks like list comprehensions are a lot more powerful in Python 3 than in Python 2.x.\n\nYeah, they're one of the things I miss most about Python 3.\n\nI wrote a similar function", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2])\n\nIn Python 3, this is probably best written as:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nThat's not a Pythonic way to do it. You'd be better off with:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    n = 0\n    for c in s:\n        if c in ['A', 'E']:\n          n += 1\n    return n", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) % 2\n\nI'd have used len(s.upper()).upper() instead.\n\nI'd have used:\nreturn len(s.upper()) - len(s.lower())\n\nI like your solution better.\n\nI'd have used:\nreturn len(s.upper()) - len(s.lower()) + 1\n\nI'm not sure if this is a joke or not, but if it is, it's hilarious.\n\nI'd have used:\nreturn len(s.upper()) - len(s.lower()) + 1\n\nThat's not a function, it's a statement.\n\nI'd have used:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2 == 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split('.'))\n\nThis is a very naive implementation. It doesn't take into account\nthings like 'aBc' and 'ABC'.\n\nIt should be possible to write a more sophisticated algorithm, but I\ndon't know of any offhand.\n\nMike</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] == 'A':\n       return len(s[1:])\n    else:\n       return 0\n    return 1\n\nThat's not a Pythonic solution.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)):\n        if s[i] == 'A':\n           return i\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.find('a').count()\n\nI'm not sure if this is the most efficient way of doing it. I'm not sure if this is the best way to count vowels in general.\n\nI was just wondering if anyone else had any cool little python one liners that are useful.\n\nI would recommend just using the built-in string functions. It's pretty easy to write a function that takes a string and returns a list of strings, so the above can be rewritten as:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[:2]) + 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 0\n    else:\n        return len(s) - len(s[0])\n    return count_upper(s)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    s = s.upper()\n    s = s.lower()\n    for i in range(2, len(s)):\n        if s[i] == u'A' or s[i] == u'e':\n            return 1\n        else:\n            return 0\n    return len(s)\nThis is a good one. Thanks.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        if s[i] in uppercase:\n           return 1\n    return 0\n\nThis is a really bad example. The problem with it is that you can't write code like this. It's not just that it's not idiomatic Python, it's that it's not idiomatic English.\nThe problem with the code is that it's not clear what the function is supposed to do. It's not clear what \"count the number of uppercase vowels in even indices\" means. It's not clear what \"in uppercase\" means. It's not clear what \"even indices\" means.\nThe problem with the example is that it's not clear what the example is supposed to be illustrating. It's not clear what the \"in uppercase\" means. It's not clear what \"even indices\" means.\nThe problem with the example is that it's not clear why the example is supposed to be illustrating anything. It's not clear what the \"in uppercase\" means. It's not clear what \"even indices\" means.\nThe", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) == len(s[::2]) + len(s[::1])\n\nThe article is from 2008.\n\nWow, I'm so glad that I read the comments before I tried to use it.\n\nI did the same thing. I was trying to figure out why my code wasn't working and then I read the comments.\n\nI'm not sure if this is a joke or not.\n\nI'd like to see the code for the comments.\n\nI would have preferred an actual example.\n\nI am a bit confused. What is the purpose of this function?\n\nIt's a joke.\n\nI know it's a joke. I'm just wondering what the joke is.\n\nI think the joke is that the comments are the code.\n\noh, I get it now.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,len(s)-1):\n        if s[i] == uppercase:\n           return i\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] in uppercase:\n           count += 1\n    return count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2])\nThis is a nice one, I'll have to remember it.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) == 1\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n    return len(s[::2]) == 0\n    def count_upper_lower(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_lower('aBCdEf') returns 1\n    count_upper_lower('abcdefg') returns 2\n    count_upper_lower('dBBE') returns 0\n    \"\"\"\n    return count_upper(s) + count_lower(s)\n    def count_", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2])\n\nSo... what exactly is the purpose of this? Why not just use the built-in len() function?\n\nThis is a great example of how to implement a simple function in Python.\n\nWhy?\n\nBecause it's a good example of how to implement a simple function in Python.\n\nI'm not sure I see the point.\n\nIt's a good example of how to implement a simple function in Python.\n\nIs there a link to the actual source code?\n\nThe source code is here:\n\nThis is a great example of how to implement a simple function in Python.\n\nPython is a great example of how to implement a simple function in Python.\n\nThis is a great example of how to implement a simple function in Python.\n\nThis is a great example of how to implement a simple function in Python.\n\nThis is a great example of how to implement a simple function in Python.\n\nThis is a great example of how to implement a simple function in Python.\n\nThis is a great example of how to implement a simple function in Python.\n\nThis is a great example of how", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.find('A', 2) + s.find('B', 2) + s.find('C', 2) + s.find('D', 2) + s.find('E', 2)\n\nThis is a fairly common problem, and it's worth pointing out that it's not so simple to solve. For example, if you want to count the number of vowels in the string, you have to count the number of vowels in each word, and then sum them up.\n\nThe problem is that there's no way to tell how many vowels there are in a word without knowing how many letters there are in the word. You could do it by counting each letter in the word as a vowel, but that's not very accurate. You could do it by counting each letter as a vowel if it's the first letter, and then not counting it as a vowel if it's not the first letter, but that's not very efficient.\n\nA good solution would be to find a way to count the vowels in a word without knowing the number of letters in the word. This is actually a fairly difficult problem, because the number of vowels in a word is not always even.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 2:\n        return 1\n    return len(s) - 1\n\nI don't know if that's a joke or not, but it's not correct.\n\nHow is it not correct?\n\nBecause it returns 1 for the string 'abcdefg', which is not even.\n\nYou are right, I didn't think about it.\n\nI think it's a joke.\n\nI think so too, but I'm not sure.\n\nIt is a joke.\n\nIt is a joke, but it is a joke that would be more likely to be written by someone who had only just learned Python, so it's not a very good joke.\n\nI think it's a good joke. It's a little funny, it's a little true, it's a little cute.\n\nI'm not sure if this is a joke, but if it is, it's a bad joke.\n\nIt is a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) + len(s[::2])\n\nThis is not a \"count\" function. This is a \"number of characters\" function.\n\nI agree. It's a function that returns a number. It's not a function that counts things.\n\nI think the point is that it's a function that counts things, but it's not a counting function.\n\nA \"count\" function would be something like:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[0:2])+len(s[1:2])+len(s[2:])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == 2\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 1\n    \"\"\"\n    return len(s.lower()) == 2\n\nAs far as I can tell, the first function is equivalent to:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nThis isn't a Python question, it's a math question.\n\nI'm not sure why you are being downvoted. It is a math question. You could do this in any language.\n\nYou could do it in any language, but the question is about Python, and it is a good opportunity to learn about the Python data structures.\n\nI agree. But the question was about the math, not the language.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[0:s.index(0)]) + len(s[s.index(1)]) + len(s[s.index(2)]) + len(s[s.index(3)])\n    # note: the above is not exactly the same as the C implementation of str.count()\n    # because it doesn't account for the case where s[0] = 'a'\n    # and s[1] = 'b', for example\n    # this is the case that the C implementation of str.count() does account for\n    # but it also requires a little more memory", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) if s in ['A'..'Z'] else len(s) - 1\n\nYou're not counting vowels, you're counting letters.\n\nSorry, I meant characters.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    else:\n        return 0\n    return 1\n\nI don't know if this is the right way to do this, but it works.\n\nHere's the code:\n\nimport re", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) + 1\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 1\n    \"\"\"\n    return len(s.lower()) + 1\n    def count_uppercase(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_uppercase('aBCdEf') returns 0\n    count_uppercase('abcdefg') returns 1\n    count_uppercase('dBBE') returns 1\n    \"\"\"\n    return len(s.upper()) - 1\n    def count_lowercase(s):", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    return len(s) - 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(upper(s))\nI've used this for a while, and I find it works very well for my purposes.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s.startswith('A'):\n        return len(s[0:2]) + 1\n    else:\n        return 0\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n    if s.startswith('a'):\n        return len(s[0:2]) + 1\n    else:\n        return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split('.')[1:])\n\nThis is really cool! I've been looking for a way to do this in Python. I've been doing it in Ruby by using a regular expression to split the string into words, and then doing a similar counting function. This is much simpler.\n\nI've been doing the same thing in Python for a while now. I've also been using this to split sentences into individual words.\n\nYou can also do this using regular expressions.\n\nI was just about to post the same thing.\n\nI used to do this with a regex.\n\nHow do you count the number of vowels in a string?\n\ncount_upper() is the function I was referring to.\n\nI think the GP was referring to the fact that count_upper() is only checking for the presence of vowels, not counting the number of vowels in the string.\n\nThat's what I get for replying without reading the comments. I was thinking it was a \"how do you count vowels\" question.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\nThis is the python version I was looking for.\nI have used this before but I forgot the syntax.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(s[::2] for s in s[::2:])\n\nI think it's a neat trick, but I'd rather see the same code in a single line:\n>>> count_upper('aBCdEf')\n1\n>>> count_upper('abcdefg')\n0\n>>> count_upper('dBBE')\n0\n>>> count_upper('abcdefgD')\n1\n\nI like this, but I think it's a little more elegant:\n>>> from string import count_upper\n>>> count_upper('aBCdEf')\n1\n>>> count_upper('abcdefg')\n0\n>>> count_upper('dBBE')\n0\n>>> count_upper('abcdefgD')\n1\n\nI like this too, but I think it's a little more elegant:\n>>> from string import count_upper\n>>> count_upper('aBCdEf')\n1\n>>> count_upper('abcdefg')\n0\n>>> count_upper('dBBE')\n0\n>>> count_upper('abcdefgD')\n1\n\nI like this too, but I think it's a", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) > 0:\n        return len(s)\n    else:\n        return 0\n\nThis is a classic example of premature optimization. If you need to count the number of vowels, you should be using a regex instead of a string comparison.\n\nThis is an example of a classic example of premature optimization. If you need to count the number of vowels, you should be using a regex instead of a string comparison.\n\nThis is a classic example of a classic example of premature optimization. If you need to count the number of vowels, you should be using a regex instead of a string comparison.\n\nThis is a classic example of a classic example of premature optimization. If you need to count the number of vowels, you should be using a regex instead of a string comparison.\n\nThis is a classic example of a classic example of premature optimization. If you need to count the number of vowels, you should be using a regex instead of a string comparison.\n\nThis is a classic example of a classic example of premature optimization. If you need to count the number of vowels, you should be using", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[:2])\nThe code in this example is not very good. It is not even efficient.\nIt is probably the worst possible way to count the number of vowels in a string.\nHowever, it is an example of the problem the author is trying to solve.\nThis is not a \"new\" problem. It has been solved many times before.\nHere is a Python script that does it in a more efficient way:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # The string is split into words, and the words are converted to\n    # lists of words.\n    for s in s.split():\n        words = []\n        for word in s:\n           words.append(word)\n           word_count = 0\n           for i in range(len(word)):\n              word_count += word[i]\n             if word[i] in word_count:\n                 word_count = word_count + 1\n    return word_count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == len(s.lower())", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nThat's a really bad way to do it.\n\nThe code is not mine. I am just following the instructions in the book.\n\nThat's a really bad book.\n\nWhy? I am trying to learn Python, and this book is recommended.\n\nIt's a good book for learning, but it's a bad book for trying to learn good Python.\n\nI am not sure what the difference is.\n\nIt's the difference between learning to use a hammer and learning to be a carpenter.\n\nI am not sure what the difference is.\n\nA hammer is a useful tool. A carpenter builds things.\n\nI am not sure what the difference is.\n\nA carpenter is a useful tool. A hammer builds things.\n\nI am not sure what the difference is.\n\nA carpenter is a useful tool. A hammer builds things.\n\nI am not sure what the difference is.\n\nA carpenter is a useful tool. A hammer builds things.\n\nI am not sure what the difference is.\n\nA carpenter is a useful tool. A hammer builds things.\n\nI am not", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[0:2]) - len(s[2:])\n    + len(s[0])\n    + len(s[1])\n    + len(s[3:])\n    + len(s[4:])\n    + len(s[5:])\n    + len(s[6:])\n    + len(s[7:])\n    + len(s[8:])\n    + len(s[9:])\n    + len(s[10:])\n    + len(s[11:])\n    + len(s[12:])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) > 0\nThe proper way to write this is:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2])\n    + len(s[::2])\n    + len(s[::2])\n    + len(s[::2])\n    + len(s[::2])\n    + len(s[::2])\n    + len(s[::2])\n    + len(s[::2])\n    + len(s[::2])\n    + len(s[::2])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')[1:])\n\nI think this is a neat idea. I'm not sure how useful it is though.\n\nIt's useful if you want to count the number of vowels in a string without using a regex, and without using a loop.\n\nI'm sure there are other ways to do it without regexes, but I don't think there's another way to do it without loops.\n\nThere's a few ways to do it without loops, but they're all more complicated. The most obvious way is to use a list comprehension:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' '))", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nThis is a really nice example of the ternary operator.\n\nI always liked this one:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(2,len(s)-1):\n       if s[i] == 'A':\n          count += 1\n    return count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\nI would have used `count_upper_exact`\nI'm not sure if that's the \"best\" way, but it's a lot faster than this.\n\nIt's not a lot faster, and it's a lot more fragile.\n\nDepends on the codebase, but I've seen it be a factor of 100-200x faster.\n\nI wrote a similar function a while ago, but I used it to count vowels in a string. I was surprised to see that this is actually a NP-complete problem, but I found a way to make it work in linear time:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.find('A').count('A') + s.find('B').count('B') + s.find('C').count('C') + s.find('D').count('D') + s.find('E').count('E') + s.find('F').count('F') + s.find('G').count('G') + s.find('H').count('H') + s.find('I').count('I') + s.find('J').count('J') + s.find('K').count('K') + s.find('L').count('L') + s.find('M').count('M') + s.find('N').count('N') + s.find('O').count('O') + s.find('P').count('P') + s.find('Q').count('Q') + s.find('R').count('R') + s.find('S').count('S') + s.find('T').count('T') + s.find('U').count('U') + s.find('V').count('V') + s.find('W').count('W", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 2:\n        return 1\n    else:\n        return 0\n\nA comment that explains the code is not a sufficient explanation. It is a terrible explanation. The comments are not a substitute for the code.\n\nThe problem with the explanation is that it doesn't explain what the code does, it explains why it does it.\n\nI think it does explain what the code does.\nIt says that if the input is a single character, then return 1. Otherwise return 0.\n\nI think it's a little more subtle than that. The function is written in a way that says \"if the input is a single character, then return 1, otherwise return 0.\"\nBut, if you read the code, it says \"if the input is a single character, then return 1, otherwise return 0. But if the input is a single character, then return 1, otherwise return 0.\"\n\nWhat you are saying is that the code is written in a way that is not obvious to you.\nI think it is perfectly obvious what the code does.\n\nYes, the code is written in a way that is", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == len(s.lower())\nI like this one.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split('\\w+'))\n\nAh, this is a classic. I wrote this for a programming competition in college, and got to the semi-finals. The final round was a live competition in front of a panel of judges. I was pretty proud of it, but I got a \"meh\" from the panel. I think they were expecting something more complicated.\n\nIt's a very good solution, but I think you could have made it a bit more idiomatic Python by using the \"split\" method of the string object, rather than explicitly splitting on \"\\w+\".\n\nI think the point is to show that you can get the same result with a very simple solution.\n\nIt's funny that you mention this, because I was just thinking about this today.\nI was trying to write a function that would take a list of words and return the number of vowels in the words. It turns out that this is a bit more complicated than it seems.\nHere's what I came up with:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nI don't understand what this is trying to do. Is it trying to count the number of characters that are uppercase in the string?\n\nYes, exactly.\n\nThe code snippet doesn't work, though. It returns 0 for \"abcdefg\" and 1 for \"aBCdEf\".\n\nThanks. I just noticed that. I'll fix it.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # If the string is in ASCII, then all vowels are uppercase.\n    if s.startswith('a'):\n       return len(s) - len(s[:2])\n    # If the string is not in ASCII, then all vowels are lowercase.\n    if s.startswith('b'):\n       return len(s) - len(s[:2])\n    # If the string is in UTF-8, then the vowels are converted to uppercase\n    if s.startswith('u'):\n       return len(s) - len(s[:2])\n    # If the string is in UTF-16, then the vowels are converted to uppercase\n    if s.startswith('x'):\n       return len(s) - len(s[:2])\n    # Otherwise, all vowels are lowercase.\n    return len(s)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == 2\nI've always been partial to:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s)\n\nAs a side note, I think it would be more correct to use len(s) instead of\ncount_upper(s) in this example.\n\nWhy?\n\nBecause len(s) is a function that returns the length of the string,\nwhereas count_upper(s) is a function that takes a string and returns the\nnumber of vowels in even indices.\n\nAh, I see.\n\nIn Python, \"len\" is the function that returns the length of a string, and\n\"count_upper\" is a function that takes a string and returns the number of\nuppercase vowels in even indices.\n\nI find this code to be very Pythonic.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)):\n        if s[i] == 'A':\n           return i\n    return 0\n\nI think the point of the exercise is to find the most elegant way to do it.\n\nI agree. But I think the elegant way to do it is to use a list comprehension:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 0\n    else:\n        return len(s) > 1\n\nIt is a common misconception that Python is whitespace sensitive. This is not the case. It is syntax sensitive.\nFor example, the following two lines are syntactically identical:\nfor i in range(10):", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n       return 0\n    else:\n       return len(s) - 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.find(\"A\"*(len(s)-1))+s.find(\"B\"*(len(s)-1))+s.find(\"C\"*(len(s)-1))+s.find(\"D\"*(len(s)-1))+s.find(\"E\"*(len(s)-1))+s.find(\"F\"*(len(s)-1))+s.find(\"G\"*(len(s)-1))+s.find(\"H\"*(len(s)-1))+s.find(\"I\"*(len(s)-1))+s.find(\"J\"*(len(s)-1))+s.find(\"K\"*(len(s)-1))+s.find(\"L\"*(len(s)-1))+s.find(\"M\"*(len(s)-1))+s.find(\"N\"*(len(s)-1))+s.find(\"O\"*(len(s)-1))+s.find(\"P\"*(len(s)-1))+s.find(\"Q\"*(len(s", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nI wonder if this could be rewritten as a function that takes a string and a character range, and returns the number of characters in the range that are in the string.\n\nI don't know if it would be faster, but it would be clearer.\n\nIt would be clearer and more correct, but it's not faster. The function is basically a recursive descent parser, so the input is read once, and the output is read once.\n\nI don't see how it's clearer.\n\nI think it's clearer because the function name implies what it does.\n\nI thought this was going to be a counter that counted the number of uppercase letters in a string. I was disappointed.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')[0])\n\nI didn't read the article, but I'll bet it's not very good.\n\nYou're right. It's a good way to get an idea of how to write a good code, though.\n\nI read this article and I think the author is wrong. I don't think the code is readable. I think it's a bad example of readable code.\n\nIt's readable if you are familiar with the language.\n\nI disagree. I'm very familiar with Python, and I don't think it's readable.\n\nWell, I agree with you.\n\nThe code isn't readable, but it's a good way to learn how to write readable code.\n\nI think the article is wrong. The code is readable.\n\nI think the author is wrong. The code is readable.\n\nI think the author is wrong. The code is readable.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.find('A').count() + s.find('B').count() + s.find('C').count() + s.find('D').count() + s.find('E').count() + s.find('F').count()", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nI'm not a Python expert, but I don't think this is the right way to count vowels.\n\nPython has no native support for Unicode. It is limited to ASCII and that's a problem for many languages.\n\nI'm not sure I understand what you're saying. Are you saying that Python can't count the number of vowels because it only supports ASCII?\n\nNo, I'm saying that Python can't count the number of vowels because it doesn't have a built-in way to count the number of vowels in a string.\n\nPython does have a built-in way to count the number of vowels in a string.\n\nI'm not a Python expert, but I don't think this is the right way to count vowels.\n\nPython has no native support for Unicode. It is limited to ASCII and that's a problem for many languages.\n\nI'm not sure I understand what you're saying. Are you saying that Python can't count the number of vowels because it only supports ASCII?\n\nNo, I'm saying that Python can't count the number of vowels because it doesn't have a built-in", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s.startswith('a'):\n       return len(s) - 1\n    else:\n       return len(s)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s)\nI can't believe people are actually using this.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) > 0 and s[0] == 'A' and s[1] == 'B' and s[2] == 'C' and s[3] == 'D' and s[4] == 'E' and s[5] == 'F' and s[6] == 'G'\n    and s[7] == 'H' and s[8] == 'I' and s[9] == 'J' and s[10] == 'K'\n\nSo, it's not a bug, it's a feature.\n\nThis is a good example of a bug, since it does not behave as expected.\n\nI'm not sure it's a bug. I'd say it's a feature.\n\nI'd call it a bug, but it's a feature.\n\nThe feature is that it's a bug.\n\nIt's a feature, but it's a bug.\n\nThe feature is that it's a feature.\n\nIt's a bug, but it's a feature.\n\nIt's a feature, but it's a bug.\n\nIt's a feature, but it's a bug.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' '))\n\nThis is more like a comment than a definition, and it doesn't really have anything to do with the code.\n\nNo, it's a definition.\n\nIt's not a definition of the function. It's a description of the function.\n\nI can't tell if you're being pedantic or not.\n\nI'm not. The definition is the part that says how the function works. The comment describes what the function does.\n\nI can't tell if you're being pedantic or not.\n\nI'm not. The definition is the part that says how the function works. The comment describes what the function does.\n\nI can't tell if you're being pedantic or not.\n\nI'm not. The definition is the part that says how the function works. The comment describes what the function does.\n\nThis is more like a comment than a definition, and it doesn't really have anything to do with the code.\n\nNo, it's a definition.\n\nIt's not a definition of the function. It's a description of the function.\n\nI can't tell if you're being pedantic or not", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == len(s.lower()) + 1\n\nI was hoping for something a bit more like this:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    n = len(s)\n    for i in range(n):\n        if i == 2:\n           return 0\n         else:\n            return 1\n\nIn Python 3, the following is faster:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2])\nThis is a really good idea, but I'm not sure it's the most efficient way to do this.\nI would probably do something like this:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.index('A').count() + s.index('B').count() + s.index('C').count() + s.index('D').count() + s.index('E').count() + s.index('F').count()\n\nI think it's a good example of the power of Python.\n\nI'm pretty sure this can be written in one line of Perl, too.\n\nSure, but it would take two.\n\nI'm pretty sure that can be written in one line of Perl, too.\n\nSure, but it would take two.\n\nI'm pretty sure that can be written in one line of Perl, too.\n\nSure, but it would take two.\n\nI'm pretty sure that can be written in one line of Perl, too.\n\nSure, but it would take two.\n\nI'm pretty sure that can be written in one line of Perl, too.\n\nSure, but it would take two.\n\nI'm pretty sure that can be written in one line of Perl, too.\n\nSure, but it would take two.\n\nI'm pretty sure that can be written in one line of Perl", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper() for s in s.upper() if s.upper()[::-1] == 'a')\n\nYou can do it more efficiently by using the fact that the length of a string is always a multiple of 8.\n\nThe above implementation is using a loop to iterate over the string. It would be more efficient to use a dictionary of all the characters in the string. This can be done using the string.split() method.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.split('.')[0]\nThis is the correct answer.  It's the only one that doesn't use the \"upper\" function.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(set(s) for set(s[i:i+len(s)-1:]) in xrange(len(s)) if set(s[i:i+len(s)-1:]) in [u for u in 'A', 'B', 'C', 'D', 'E', 'F'])\n    #", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.find('A').count() + s.find('B').count() + s.find('C').count() + s.find('D').count() + s.find('E').count() + s.find('F').count() + s.find('G').count() + s.find('H').count() + s.find('I').count() + s.find('J').count() + s.find('K').count() + s.find('L').count() + s.find('M').count() + s.find('N').count() + s.find('O').count() + s.find('P').count() + s.find('Q').count() + s.find('R').count() + s.find('S').count() + s.find('T').count() + s.find('U').count() + s.find('V').count() + s.find('W').count() + s.find('X').count() + s.find('Y').count() + s.find('Z').count()\n    # Note: This will also work for non-ASCII characters.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')) == 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2])\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 1\n    \"\"\"\n    return len(s) - len(s[::2])\n    def count_lowercase(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lowercase('aBCdEf') returns 2\n    count_lowercase('abcdefg') returns 1\n    count_lowercase('dBBE') returns 2\n    \"\"\"\n    return len(s) - len(s[::2])\n    def count_", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(',')[0]) + len(s.split(',')[1])\n    + len(s.split(',')[2])\n\nI think I'd go with:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    n = len(s)\n    for i in range(n):\n        if s[i] == u:\n            return i\n    return 0\nI'm not a Python expert, but this looks like a memory leak waiting to happen.\n\nIt's not, since the variables are local to the function.\n\nI'm not sure what you mean by that. I'm not a Python expert, but I do know that in Python, there are no such things as \"local variables\". There are only global variables and local variables.\n\nI believe they're referring to the fact that the count_upper function is a local function, and so it's variables will be garbage collected after the function exits.\n\nAh, I see. I didn't know that.\n\nThis looks like a good way to make a list of all the words in a text file that have a certain set of letters.\nYou could then make a word list of words that contain a certain set of letters and then make a list of all the words in the text file.\n\nI don't know why this was downvoted", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2,len(s)-1):\n        if (s[i] in ['A'..'Z']) and s[i] in s[i+1] and s[i+1] not in s[i+2]:\n           return s[i]\n    return 0\n\nThis is a nice exercise, but it's not an algorithm. It's a string-processing utility.\n\nIt's an algorithm, just not a general purpose one.\n\nI disagree. It's not an algorithm. It's a string processing utility.\n\nThe concept of an algorithm is not tied to a specific language. It's a method that takes a string and returns another string.\n\nThis is a string processing utility. It's not an algorithm.\n\nIt's an algorithm, just not a general purpose one.\n\nI disagree. It's not an algorithm. It's a string processing utility.\n\nThe concept of an algorithm is not tied to a specific language. It's a method that takes a string and returns another string.\n\nThis is a string processing utility.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)):\n        if i == len(s)-1:\n           return i\n    return 0\n\nThis is a fun one to try out.\n\nI'm not sure why this is getting downvoted. I thought it was a fun exercise.\n\nI don't get it. What's the point of this?\n\nIt's a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah, but what's the point?\n\nThis is a fun exercise.\n\nYeah,", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nI'm not sure I understand how that works. Isn't len(s) always the length of the string? How does it get the number of vowels in an even index?\n\nlen(s) is the length of the string.\nlen(s)[2:] is the length of the string excluding the first and last characters.\nlen(s)[0:2] is the length of the string excluding the first character.\nlen(s)[0:len(s)-1] is the length of the string excluding the first two characters.\nlen(s)[len(s)-1:len(s)] is the length of the string excluding the first three characters.\n...\nlen(s)[len(s)-1:len(s)-2] is the length of the string excluding the first four characters.\n...\nlen(s)[len(s)-2:len(s)-3] is the length of the string excluding the first five characters.\n...\nlen(s)[len(s)-3:len(s)-4] is the length of the string excluding the first six characters.\n...\nlen(s)[len", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2])\n\nThis is a bad example, because it's easy to write a string which contains no vowels and has all the vowels in the same position.\n\nI don't see how this is a bad example.\n\nIt's a bad example because it's trivial to write a string that will pass the test.\n\nI agree, but I don't think the example is bad because of that. The test is supposed to check for a certain kind of problem, not for a certain kind of string.\n\nIt's a bad example because it's trivial to write a string that will pass the test.\n\nI agree, but I don't think the example is bad because of that. The test is supposed to check for a certain kind of problem, not for a certain kind of string.\n\nThe example is bad because it's trivial to write a string that will pass the test.\n\nI agree, but I don't think the example is bad because of that. The test is supposed to check for a certain kind of problem, not for a certain kind of string.\n\nIt's a bad example because it's trivial to write a string", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) == len(s.lower())\nThis is the simplest solution I can think of.\n\nI think it's a good idea to use the string itself as the data structure.\n\nIt's not a bad idea, but it's not very idiomatic. The standard library\nalready has a string type, so there's no need to reinvent the wheel.\n\nIs this idiomatic?", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nNot sure if I should be ashamed or not that I didn't notice that one. Thanks for the pointer.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2\n\nI think this should be:\nreturn len(s.split(' ')) / 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) + 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2 == 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n       return 0\n    return len(s)", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) / 2\n\nThis works in Python 2.6.5 on OS X.\n\nIt also works in Python 3.2.3 on OS X.\n\nI think this is a good example of why you should use Python 3.\n\nThis is a good example of why you should use Python 3.2.3\n\nThe current Python 3.3 release is quite stable.\n\nThat's true, but the 3.2.3 release is still supported and is the most recent supported version of Python 3.\n\nDoes this really count as a \"hack\"? It's a very simple, straightforward function.\n\nI'd say no. The function is simple and straightforward, but the use of a Python 2 function in a Python 3 program is definitely a hack.\n\nIt's a hack in the sense that it's a workaround for a problem that is only a problem because of a deliberate design decision.\n\nI'd say it's a hack because it's a workaround for a problem that is only a problem because of a deliberate design decision, but the workaround itself is not a deliberate design decision.\n\nI'm not sure what the point of this post is. The", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] in ('A','E') and s[1] in ('B','E') and s[2] in ('C','E') and s[3] in ('D','E') and s[4] in ('F','E') and s[5] in ('G','E') and s[6] in ('H','E') and s[7] in ('I','E') and s[8] in ('J','E') and s[9] in ('K','E') and s[10] in ('L','E') and s[11] in ('M','E') and s[12] in ('N','E') and s[13] in ('O','E') and s[14] in ('P','E') and s[15] in ('Q','E') and s[16] in ('R','E') and s[17] in ('S','E') and s[18] in ('T','E') and s[19] in ('U','E') and s[20] in ('V','E') and s[21] in ('W','E') and s[22] in ('X','E", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s.lower() in ('a', 'e', 'i', 'o', 'u'):\n       return len(s) - len(s[0])\n    return 0\n\nHow is this better than the original?\n\nIt's a one-liner.\n\nThat's not an answer.\n\nI think the OP's point was that it's a one-liner that is cleaner and easier to read than the original.\n\nThat's not an answer.\n\nI think the OP's point was that it's a one-liner that is cleaner and easier to read than the original.\n\nThat's not an answer.\n\nI think the OP's point was that it's a one-liner that is cleaner and easier to read than the original.\n\nThat's not an answer.\n\nI think the OP's point was that it's a one-liner that is cleaner and easier to read than the original.\n\nThat's not an answer.\n\nI think the OP's point was that it's a one-liner that is cleaner and easier to read than the original.\n\nThat's not an answer.\n\nI", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nI'd be more comfortable with this if it was a generator expression.\n\nI think this is a good idea. It's not often that I need a function that counts vowels, but if I do, I don't want to have to write it from scratch.\n\nI'm not sure about the generator expression. It's just one line of code, and it's not like it's going to be used in a loop.\n\nThe only reason I could think of to use a generator expression is to save a few bytes of memory.\n\nOr to ensure that the code is readable by anyone who doesn't have the exact same version of Python as you do.\n\nThis is a nice utility function, but it's not very efficient.\nIt would be better to use a generator expression to generate the list of vowels, and then use the built-in count() function to count the vowels.\n\nI just want to say that I really appreciate the name of this function.\n\nIs it just me, or is this a pretty useless function?\n\nIt's not just you. It's completely useless.\n\nIt's useful to count vowels.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n           i = i + 1\n    return i\n\nThis is a terrible way to count uppercase vowels.\n\nCare to explain why? I'm still learning.\n\nIt's not a good way to count uppercase vowels because it doesn't count all the uppercase vowels. For example, consider \"bcd\". It returns 2 because of the d. But it should return 3 because it counts the b as well.\n\nI agree that's a problem. But how would you count all the uppercase vowels?\n\nYou could start with the first character, and if it's a vowel, you count it. If not, you move to the next character.\n\nI have a better solution.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nThat's all there is to it.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 2:\n       return len(s[0])\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s) - 2, 2):\n       if s[i] == u'A':\n          return i\n    return 0\n\nI know this is a joke, but I'm actually curious: why would you do this?\n\nI've seen this before, and it's a pretty interesting example of the power of Python's \"magic\" (the language itself, not any particular library).\nThe first time I saw it, I didn't believe it was possible. Then I did some research, and found out that the \"magic\" is actually quite simple:\n1) The \"range\" function returns the indices of the start and end of a range.\n2) The \"if\" statement is a special construct that allows you to write a condition and a block of code that will be executed if the condition is true.\n3) The \"return\" statement is a special construct that allows you to return a value from a function.\n4) The \"lambda\" statement is a special construct that allows you to define a function on the fly.\n5) The \"for\" statement is a special construct that", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s) - 1):\n        if len(s) == 2:\n          return i\n          return 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) if s.upper() else 0\nI don't understand what this does. If s.upper() returns True, it means that the string is uppercase, so how does that make sense?\n\nIt's a function to count the number of vowels in a string. It counts the number of vowels in an even-indexed position in the string.\n\nI think what he means is:\ns.upper() == True", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' '))\n\nThis is an example of a \"generator function\" in Python. It is a function that returns a generator object. The function is \"count_upper\" and it returns a generator object named \"count_upper\" that takes one argument, the string \"s\".\nThe \"count_upper\" function returns a generator object which takes a single argument, the string \"s\". The \"count_upper\" function returns a generator object that returns the number of uppercase vowels in even indices.\nThe \"count_upper\" function returns a generator object that returns the number of uppercase vowels in even indices.\n\nI don't understand. Isn't that just a normal function?\n\nIt's a function that returns a generator object, so it's a \"generator function\".\n\nOk, but what's the difference?\n\nThe difference is that the function returns a generator object.\n\nI still don't understand.\n\nIt's a function that returns a generator object.\n\nI'm starting to think that the author just made up a name for a normal function.\n\nI'm starting to think that you're just trolling.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) % 2\n\nI am not sure why you need to count the number of uppercase vowels in even indices. The definition is very ambiguous.\n\nIt's a bit of a joke. The \"def count_upper(s)\" is the standard Python way to define a function. The joke is that the function is not named, but instead has a description of what it does.\n\nI was wondering if there was a joke. I have never used Python.\n\nI thought it was just a typo.\n\nI'm going to write a tool to count the number of times a user types \"I'm going to write a tool to count the number of times a user types \"I'm going to write a tool to count the number of times a user types \"I'm going to write a tool to count the number of times a user types \"I'm going to write a tool to count the number of times a user types \"I'm going to write a tool to count the number of times a user types \"I'm going to write a tool to count the number of times a user types \"I'm going to write a tool to count the number of times a user types", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) < 3:\n       return 0\n    else:\n       return len(s) - 2\n\nIt's a little weird that you're using len(s) to count the vowels.\n\nIt's not weird.\nlen(s) is the number of characters in s, and you only need to count the vowels, not the other characters.\n\nIt is weird because it's a non-obvious way of counting the vowels.\n\nI don't see why it's non-obvious. It's a very simple and straightforward way to count the vowels.\n\nWell, it's not obvious to me. I'm sure it's obvious to you, but I'm not sure what the point is of a programming challenge if you're just going to give the answer to anyone who asks.\n\nI don't think it's obvious to anyone. I had to look at the code to understand what it was doing.\n\nI don't think the answer is obvious, but I don't think the question is either.\n\nI'm sorry, I didn't know that the questions were supposed to be", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) - len(s.lower())\nThis is the correct answer.  I don't know why people are suggesting to use a dictionary.  This is the same as the following, which is a dictionary:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    def count_upper_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_vowels('aBCdEf') returns 2\n    count_upper_vowels('abcdefg') returns 1\n    count_upper_vowels('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(2,len(s)-2):\n        if s[i] == u'A':\n            count += 1\n        else:\n            count += 1\n    return count\n\nIn python 2:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # Count the number of uppercase vowels in even indices.\n    upper_count = 0\n    for i in range(2, len(s)):\n        upper_count += s[i:i+2]\n    return upper_count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(map(lambda x: x.upper(), s))\nI like this one.  I don't like the fact that it counts the number of vowels, though.  It should count the number of characters.\nYou can always add `letters = [c for c in s.upper() for c in letters]` to the end of the function.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nWhat's the use case for this?\n\nI've seen it used in the wild a couple of times. The idea is to count the number of distinct words in a string, and then break the string up into words based on the word count.\n\nThere's a similar function called count_lower which counts the number of lowercase vowels in odd indices.\n\nThat's really cool! I didn't know that.\n\nThe author of the post, and the person who made the original submission to HN, is the same person.\n\nThat's right. I submitted it here because I thought it was a nice example of a short Python function that does something very useful.\n\nIt's also a good example of a function that is not very useful.\n\n_It's also a good example of a function that is not very useful._\nThat's an interesting opinion. I can think of at least one use case for it.\n\nYou're right. I can think of a use case for it too. That doesn't make it useful.\n\nI'm sorry, but I don't understand what you mean by \"useful\".\n\nI mean", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nI like this one. I feel like it's a more elegant solution than my solution.\n\nI don't see how this is elegant at all. It's a textbook solution to a textbook problem.\n\nI don't think it's elegant, but it's certainly the most succinct.\n\nIt's not succinct. It's not even Pythonic. It's a direct translation of the C/C++ solution.\n\nIt's succinct in that it's the shortest Pythonic solution to the problem.\n\nI don't think it's Pythonic at all. It's not idiomatic at all.\n\nI'm not sure I understand what you mean by \"Pythonic\" in this context.\n\nIt's a common idiom in Python to use a tuple to represent a list of values.\n\nI don't think you can really say that this isn't a list of values. It's a list of values that happens to be stored in a tuple.\n\nThe problem is that a list is immutable. You can't change a list once it's been created. You can't add or remove elements from a list.\n\nIf you want to add or remove", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n    /\n    import operator\n    def count_upper_lower(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper_lower('aBCdEf') returns 1\n    count_upper_lower('abcdefg') returns 0\n    count_upper_lower('dBBE') returns 1\n    \"\"\"\n    return len(s.lower())\n    /\n    import operator\n    def count_lower_upper(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower_upper('aBCdEf') returns 1\n    count_lower_upper('abcdefg') returns 0\n    count_lower_upper('dBBE') returns 0\n    \"\"\"", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.split(' ')\n    if len(s.split(' '))!= 2:\n        return 0\n        return len(s.split(' '))\n    return len(s.split(' ') * 2)\n\nThis will count the number of vowels, not the number of uppercase vowels.\n\nI think you're right. I meant to say count the number of vowels in even indices.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s)-1,2):\n        if s[i] == 'A':\n           return i\n    return 0\n\ncount_upper() is not very useful by itself. If we want to do something\nuseful, we need to create a new function that takes a string and a function\nas arguments. This function will take the string and the function and return\nthe result of the function applied to each character of the string.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[:i] for i in range(2)) + 1\n\nThis is a classic example of a recursive algorithm.  I recommend reading the wikipedia page on recursion.\n\nThe wikipedia page on recursion says:\nThis is not a recursive algorithm, as it does not use recursion to compute the result.\n\nYou're right, I misread the question.  I thought he wanted the algorithm that would count the number of vowels in the string, not just the number of uppercase vowels.\n\nI think the algorithm you are looking for is called a suffix tree.\n\nYou could use this:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s)\n\nThe problem with this code is that it is not using the length of the string, but the number of characters. The correct solution is:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' '))\n\nI'd be more likely to use a dictionary:\ncount_upper = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0}\n\nI don't see any advantage to that.\n\nIf you use a dictionary you can use it as a function argument.\n\nI like the idea of using a dict in this case, but I don't see why it would be more useful as a function argument.\n\nYou can pass it to other functions which need to count vowels or something.\n\nI don't think I'd ever want to count vowels in a string, and if I did, I'd", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s in range(1, len(s) - 2):\n    return len(s) + 2 if s[0] == 'A':\n    return 1 + count_upper(s[0]) + count_upper(s[1]) + count_upper(s[2])\n\nIf you're interested in this kind of thing, I would recommend \"Algorithms\nfor Programmers\" by Robert Sedgewick. I found it to be a great introduction\nto algorithms.\n\nIt's a great book, but I wouldn't call it an introduction. It's much more\nof a reference book than an introductory one.\n\nI agree, it's a great book, but it's a reference book, not an introduction.\n\nI'm not sure if you're agreeing with me or not, but I'll take the upvote anyway :)\n\nI was agreeing with you. :)\n\nThis is a great way to learn how to write Python.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] == 'A':\n        return len(s[1:])\n    else:\n        return 0\n\nThe code is pretty self explanatory.  It's a little bit messy, but it's\nthe only thing that's worked for me so far.  I'm trying to figure out how\nto get the Python interpreter to do this for me, but I'm still working on\nit.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2])\nThis is a very simple example, and it's not particularly elegant, but it's one of the most useful functions I've written in Python.  It's great for quickly determining how many words in a string are proper nouns, or how many letters in a string are vowels.\nThis is the kind of thing I would never write in C.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n       return 1\n    else:\n       return 0\n    return len(s)\n\nThis is a really bad idea. It's much better to use a dictionary.\n\nThat's the point.\n\nI'd like to see the author's implementation of this algorithm.\n\nI'd like to see the author's implementation of the original algorithm.\n\nI can't believe you got downvoted for this. I don't think I've ever seen a more relevant comment.\n\nI can't believe you got downvoted for this. I don't think I've ever seen a more irrelevant comment.\n\nI can't believe you got upvoted for this. I don't think I've ever seen a more irrelevant comment.\n\nI can't believe you got upvoted for this. I don't think I've ever seen a more irrelevant comment.\n\nI can't believe you got upvoted for this. I don't think I've ever seen a more irrelevant comment.\n\nI can't believe you got downvoted for this. I don't think I've", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s[0] == 'A':\n       return 1\n    if s[1] == 'B':\n       return 1\n    if s[2] == 'C':\n       return 1\n    if s[3] == 'D':\n       return 1\n    if s[4] == 'E':\n       return 1\n    if s[5] == 'F':\n       return 1\n    if s[6] == 'G':\n       return 1\n    return 0\n\nYou're missing a closing paren.\n\nThanks, fixed.\n\nI like this a lot. I have a similar function that I use to count how many times a string contains a particular substring. It's based on a variation of the Boyer-Moore string search algorithm. I use it to find all of the instances of a particular word in a string of text. It's much faster than doing a full string search.\n\nI use a", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2] + 'A')\n    + len(s[::2] + 'E')\n    + len(s[::2] + 'F')\n    + len(s[::2] + 'G')\n\nI'm confused about the use of the + operator here. What is the meaning of the + operator in this context?\n\nIt's just a short way of saying \"add these three things together\".</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\nThis is the first time I've seen this convention.  What does the s.upper() call do?  I would have thought it would just return the string itself.  Or are you counting the number of characters in the string?  Or is it some other convention?\nIt's just the first letter of the string.\nAh, thanks.  I guess that makes sense.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # count the number of vowels\n    a = s.split()\n    for i in range(2,len(a)):\n         if a[i] == 'a':\n             count_upper(a[i:])\n    return len(a)\n\nHere's a Python solution, using the built-in string method count():\n>>> s = \"aBCdEf\"\n>>> count(s)\n2\n>>> count_upper(s)\n1\n\nI think the solution in the article is a lot more elegant.\n\nI think the Python version is more readable, and doesn't require any\nspecial knowledge of the language.\n\nThe Python version is more readable if you already know that Python has a\nbuilt-in function count(). If you don't know that, you have to read the\nPython documentation to find out how to get the length of a string, then\nwrite a function to count the vowels, then write another function to count\nthe vowels in even indices.\nThe solution in the article is more readable if you", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) if s.startswith('a') else len(s) if s.startswith('B') else len(s) if s.startswith('C') else len(s) if s.startswith('D') else len(s) if s.startswith('E') else len(s) if s.startswith('F') else len(s) if s.startswith('G') else len(s) if s.startswith('H') else len(s) if s.startswith('I') else len(s) if s.startswith('J') else len(s) if s.startswith('K') else len(s) if s.startswith('L') else len(s) if s.startswith('M') else len(s) if s.startswith('N') else len(s) if s.startswith('O') else len(s) if s.startswith('P') else len(s) if s.startswith('Q') else len(s) if s.startswith('R')", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) + 2\n\nI don't know how I would feel about this if I was an interviewer.\n\nI agree with you. It's not a good way to solve the problem, but I'm not sure I'd feel comfortable rejecting someone for writing it.\n\nWhy not? I feel like this is one of the best ways to reject someone. If they can't understand that a good solution will be more elegant than this, they're probably not a very good programmer.\n\nI've seen this kind of thing come up with a lot of people. I'm not sure that it's an indication of their programming ability.\nI've seen it come up with people who are good programmers. It's just that they are used to solving problems in a different way.\nI've seen it come up with people who are not good programmers, but who are very good at solving problems with code.\nI've seen it come up with people who are good programmers, but who are very good at solving problems with code in a different way.\n\nI think it's a very good indication of their programming ability.\n\nI agree with this. It's not an indication of their programming ability per se, but", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n       return 0\n    i = 0\n    while s[i]:\n       i += 1\n    if s[i] == 'a':\n       return i\n    else:\n       if s[i] == 'E':\n          return i\n       elif s[i] == 'I':\n          return i\n       else:\n          return 0\n    return i", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nI'd like to see the code that implements this.\n\nIt's a one liner, so it's not that exciting.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    while i < len(s):\n        i += 2\n        if s[i] == u:\n           return i\n    return 0\nThis is a really bad solution.  You are going to run into problems with the fact that there are multiple words that begin with the same string.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nI think the author should have chosen a better title.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better language.\n\nI think the author should have chosen a better name.\n\nI think the author should have chosen a better", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return 0\n    return len(s) - 1\n\nI don't see why you would use this over the builtin len().\n\nI'm assuming the intent was to return the number of characters in the string that are uppercase, and not the number of characters in the string.\n\nThis is the most beautiful thing I've seen all day.\n\nI'm not sure I understand the point of the article.\n\nI think it's just a bit of fun. I like it.\n\nWhy is this so awesome? I don't get it.\n\nI think it's because of the recursive nature of the code.\n\nI don't know if this is awesome or just sad.\n\nI think it's both.\n\nI think it's sad that someone would spend so much time writing something so useless.\n\nI think it's awesome that you can write something so useless and so awesome at the same time.\n\nThis is hilarious.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) > 0:\n        return len(s[0:len(s)-1])\n    return 0\nWhy not just return len(s)?\nBecause that would be too easy.   I'm pretty sure this is a joke.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[1:]) + len(s[2:]) + len(s[3:]) + len(s[4:]) + 1\n\nThe reason why this is a bad idea is that you are counting the same string multiple times. It is not a bug, it is a feature.\n\nI don't think I'd call it a feature, but it's not a bug either.\n\nThe feature is that you can add a newline to a string, and the length doesn't change.\nThe bug is that a newline isn't considered a character, and hence isn't counted.\n\nI'm not sure why you think a newline isn't considered a character. It's just not a _printable_ character.\n\nYou're right, I meant printable.\n\nThis is a really good example of why you should always test your code.\n\nI agree that testing is good, but I think that's a little harsh.\nIf the author had tested the code, it still would have passed. The problem is that they're counting the same string twice.\n\nI don't think so.\nThe author would have seen the problem when they wrote the", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(1, len(s)):\n        if s[i] == uppercase:\n            return i\n    return 0\n\nThe code for count_upper is pretty easy to understand, but it's not very efficient. It takes O(n) time and O(n) space. The time complexity comes from having to iterate over the string, and the space complexity comes from having to keep the count of vowels in the string.\n\nThe problem with the code is that it doesn't take advantage of the fact that it only needs to iterate over the even indices of the string. If we iterate over the indices in reverse order, we can reuse the code for the even indices.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nI think that's the most concise way.\n\nthanks, but I want to count the vowels in the string, not the upper case version of the string.\n\nI'm not sure what you mean by that.\n\nI want to count the vowels in the string \"ABCDEF\" not \"ABCDEFg\"\n\nI'm not sure how you would do that.\n\nwhy not? I mean, I can't figure out how to do that. I want to count the vowels in the string.\n\nCount the vowels in the string \"ABCDEF\".\n\nI'm not sure how you would do that.\n\nCount the vowels in the string \"ABCDEF\".</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) / 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s.startswith('ABCD') else 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'B':\n           return i\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)-1):\n        if s[i] == u'A':\n           return i\n          return 0\n    return 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        s = s[:-i]\n        if s[i] in uppercase:\n           return i\n         return 0\n    return len(s)\n\nThis is a trivial solution, but not very efficient. The problem is that\nit will loop through the entire string.\n\nYou can do better by using the power of generators.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2])\nWhat's the problem?\n\nI'm not a python programmer, but I'm assuming the issue is that the function returns a list, but the function name is count_upper, which implies that it should return a single integer.\n\nAh, thanks. I've never used python. I guess that would be a bit annoying.\n\nI think the issue is that the name of the function is count_upper, but the function returns a list, not a single integer.\n\nThe name of the function is count_upper, not count_uppers.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] == 'a' or s[i] == 'A':\n           count += 1\n    return count\n\nI can't think of a use case for this.\n\nI can. It's a useful way to determine if a string is a palindrome.\n\nIn python 2, we can use the built-in palindrome function:\n>>> print(palindrome(\"aBcD\")  # True\n>>> print(palindrome(\"aBcD\")  # False\n\nIn Python 3, we can use the built-in _built-in_ palindrome function:\n>>> print(str.is_palindrome(\"aBcD\"))  # True\n>>> print(str.is_palindrome(\"aBcD\"))  # False\n\nI don't think that's a fair comparison. The first example is a one-liner, the second is an expression with a bunch of parentheses.\n\nYou're right. I should", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) - len(s[::2])", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 0\n    else:\n        return len(s) - len(s[0])\n    def count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 1\n    \"\"\"\n    if len(s) == 1:\n        return 0\n    else:\n        return len(s) - len(s[1])\n    def count_middle(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_middle('aBCdEf') returns 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) + 1\nI think you meant to say:  return len(s[::2]) + 2\n\nOops, thanks for spotting that!\n\nI like the idea of using a hash table for the index, but I think the\nimplementation could be improved.\nThe problem is that the hash function is not stable. The hash function\nis always computed using the same set of characters, so you need to\nguarantee that the hash function is not biased towards any particular set\nof characters.\nA simple way to do this is to use a hash function that is based on the\ncharacters in the string. For example, if you want to count the number of\nlowercase letters, you can use a hash function that counts the number of\ntimes each character occurs in the string:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 0:\n       return 0\n    else:\n       return sum(int(ord(c)) for c in s if ord(c) >= ord('a'))\n       else:\n       return sum(int(ord(c)) for c in s if ord(c) >= ord('A'))\n\nIs there any way to tell what the code is actually doing? I'm not sure I understand how it works.\n\nIt's the count of the number of characters in the string that are uppercase, starting from the index 0. The first thing it does is to check if the string is empty. If it is, then it returns 0.\nOtherwise, it loops through the string, and for each character it checks if it's uppercase or not. If it's uppercase, it counts it, and if it's not, it counts the next character.\n\nIt's not the count of the number of characters, it's the number of characters in the string that are uppercase.\n\nI can't figure out how it", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2\n\nI'm not sure if this is what you're looking for.\n\nAlso, I'm not sure if you're looking for a count of vowels in a string,\nor a count of vowels in a string of a certain length.\n\n-s\n\nOn Thu, Oct 18, 2007 at 10:45 PM, Rupak Biswas <rupak.biswas@gmail.com> wrote:\n> Hi,\n>\n> I'm not sure if this is the right place to post this, but here goes. I am\n> looking for a function that counts the number of vowels in a string.\n>\n> For example, given the string 'aBCdEf', I want to count the number of\n> vowels in it.\n>\n> Any help in this regard would be greatly appreciated.\n>\n> Thanks,\n> Rupak\n>\n>\n> ------------------------------------------------------------------------\n>\n> _______________________________________________\n> Python-list mailing list\n> Python-list@python.org\n> http://mail.python.org/mailman/listinfo/python-list\n>\n>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return s.split()[::2]\n\nSo the answer is 1 for abcdefg and 0 for abcdefg.\n\nNot exactly. The first split returns ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'] and the second split returns ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\nSorry, you are right.\n\nThis is a nice little exercise.\nThe question is: how do you _use_ it?\n\nI find this kind of thing useful when I need to do something like \"number of words in a sentence", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return int(s.index(ord(s.upper())))\nYou might want to use a lowercase s.lower() in there.\nI think the OP is trying to get the number of vowels, not the number of uppercase vowels.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nThis is a trivial solution, but it seems to be the fastest.\n\nThe first time I ran it, it took 0.01 seconds. The second time it took 0.01 seconds. The third time it took 0.01 seconds. The fourth time it took 0.01 seconds. The fifth time it took 0.02 seconds.\nThe sixth time it took 0.01 seconds. The seventh time it took 0.01 seconds. The eighth time it took 0.01 seconds. The ninth time it took 0.01 seconds. The tenth time it took 0.02 seconds.\nThe eleventh time it took 0.02 seconds. The twelfth time it took 0.02 seconds. The thirteenth time it took 0.02 seconds. The fourteenth time it took 0.02 seconds. The fifteenth time it took 0.02 seconds. The sixteenth time it took 0.02 seconds.\nThe seventeenth time it took 0.02 seconds. The eighteenth time it took 0.02 seconds. The nineteenth time it took 0.02 seconds. The twentieth time it took 0.02 seconds. The twenty-first time it took 0.02 seconds.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) / 2\nThis is a horrible version.  It's not even correct.  It will count the number of vowels, not the number of uppercase vowels.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nFor the curious, the code is from a Python exercise:\n\nI've always liked this one:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\nI think the `count_upper` function is the only one that does not have a comment.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split('\\w+'))\n\nThe method count_upper() returns the number of uppercase letters in a string.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2])\n    # 0\n\nThis is a common idiom in Python. It's like a C-style for loop, but\nwith a for-loop in the for loop.\n\nThis is also a great way to make a recursive function without using\nrecursion.\n\nI like to think of it as a for-loop in a for-loop.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.split(' ')) == 2\n\nThis is similar to what I was thinking.\n\nAnd you have the same problem. A split is not a function.\n\nI wasn't sure if it was a function or not, but I thought the idea was sound. Thanks.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\nThis is actually one of the more interesting problems I've seen in a while.\n\nI agree. It's not a bad exercise for a beginning programmer.\n\nA better exercise would be to write the code in a way that is maintainable, readable, and extensible.\n\nA better exercise would be to write the code in a way that is maintainable, readable, and extensible.\n\nI'm trying to get better at programming, and I'm still at the point where I don't know what that means.\n\n\"maintainable\" means that you can make changes to the code without breaking it, and \"readable\" means that it's easy to understand what it does. \"Extensible\" means that it's easy to add new features to it.\n\nI was joking. I know what those words mean.\n\nIt was a good exercise.\n\nI'm trying to get better at programming, and I'm still at the point where I don't know what that means.\n\n\"maintainable\" means that you can make changes to the code without breaking it, and \"readable\" means that it's easy to understand what it does.", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return sum(s.upper())\nI like this one better.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 2:\n        return 1\n    elif len(s) == 1:\n        return 0\n    else:\n        return len(s)\n\nThis is a bad idea. If you have a string with a bunch of consecutive spaces, and you want to count the number of characters in that string, you get 0.\n\nYou could use it like this:\ncount_upper('a\\nbcdefg')\n\nI guess. But you don't want to have to do that.\n\nIf you're counting the number of characters in a string, then the number of characters in a string is what you want.\n\nIt's a bad idea to count the number of characters in a string that contains a bunch of consecutive spaces.\n\nI'd have thought it was a bad idea to count the number of vowels in a string that contains a bunch of consecutive spaces, but maybe that's just me.\n\nI don't understand this, why would you ever need to count vowels in a string?\n\nPerhaps you're trying to determine if a", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return int(s.upper())\nI would have expected something like:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2]) + 1\n\nThis is why I love Python.\n\nThe first example is an example of a good idiom, but the second one isn't. It's not idiomatic Python because it's not Pythonic.\n\nBut it is a good example of why Python is cool. It's easy to read and understand.\n\nIt's easy to read and understand because it's not idiomatic.\n\nIt's not idiomatic because it's not Pythonic.\n\nIt's not Pythonic because it's not idiomatic.\n\nIt's not idiomatic because it's not Pythonic.\n\nIt's not Pythonic because it's not idiomatic.\n\nIt's not idiomatic because it's not Pythonic.\n\nIt's not Pythonic because it's not idiomatic.\n\nIt's not idiomatic because it's not Pythonic.\n\nIt's not idiomatic because it's not Pythonic.\n\nIt's not idiomatic because it's not Pythonic.\n\nIt's not Pythonic because it's not idiomatic.\n\nIt's not idiomatic because it's not Pythonic.\n\nIt's not idiomatic", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())\n\n>>> count_upper('abcdefg')\n0\n>>> count_upper('ABCDEF')\n1\n>>> count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n1\n\n>>> count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890')\n1\n>>> count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789')\n0\n>>> count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789ABCDEF')\n1\n>>> count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n1\n>>> count_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ123456789')\n0\n>>> count_upper", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return 0 if s[i]!= 'A'\n    return 1 if s[i]!= 'E'\n    return 2 if s[i]!= 'I'\n    return 3 if s[i]!= 'O'\n    return 4 if s[i]!= 'U'\n    return 5 if s[i]!= 'W'", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s)\n    if s[0] == 'a':\n       return len(s) - 1\n    elif s[1] == 'b':\n       return len(s) - 2\n    elif s[2] == 'c':\n       return len(s) - 3\n    elif s[3] == 'e':\n       return len(s) - 4\n    elif s[4] == 'f':\n       return len(s) - 5\n    elif s[5] == 'g':\n       return len(s) - 6\n    elif s[6] == 'h':\n       return len(s) - 7\n    elif s[7] == 'i':\n       return len(s) - 8\n    elif s[8] == 'j':\n       return len(", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if s.lower() in ('a','b','c','d','e','f'):\n       return len(s.upper())\n    else:\n       return 0\nI don't know if this is the best way to do it, but it's the first thing that came to mind.\n\nI am not sure if this is the best way to do it either, but the only way I could think of at the time.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) == len(s[::2])\nI think this is the simplest way to do it.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper()) / 2\n    #count the number of uppercase vowels in even indices.\n    #\n    def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return len(s.upper()).count(s.lower())\n    #count the number of uppercase vowels in even indices.\n    #\n    def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    # The upper case vowel is the letter 'A'\n    count_upper = []\n    for i in range(2, len(s)):\n       if s[i] in 'A':\n          count_upper.append(1)\n          break\n    return count_upper", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    def get_even_indices(s):\n    \"\"\"\n    Given a string s, return an iterator over the even indices.\n    \"\"\"\n    for s in s.split(' '):\n       return s[:2]\n    return get_even_indices(s)\n    def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    for i, v in enumerate(get_even_indices(s)):\n       if v in s:\n          return i\n    return 0", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s) % 2", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'B':\n           count += 1\n    return count", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    count = 0\n\n    for i in range(len(s) - 1):\n        if s[i] in uppercase:\n           count += 1\n    return count\n\nUsage:\n>>> import count_upper\n>>> count_upper('abcdefg')\n1\n>>> count_upper('abcd')\n0\n>>> count_upper('abcde')\n0\n>>> count_upper('abcdef')\n0\n\nI don't know how to count the number of uppercase vowels in odd indices.</s>", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    for i in range(2, len(s)):\n        if s[i] == uppercase:\n           return i\n    return 0\n\nI don't understand what you mean by \"even indices\".\n\nIn python, indices are zero-based, so i==2 is an even index.\n\nThanks.\n\nI think it's important to note that the author is referring to a case where the number of vowels is 1. For example, \"abcd\" has 1 vowel. This is not true for the general case.\n\nI've always thought that the best way to do this is to use a hash table, and then increment the hash value when you have a vowel.\n\nThe problem with that is you have to hash the entire string. This is bad for a lot of reasons, but the main one is that you have to keep a hash table of the entire string, which can get very large.\n\nThat's why you use a hash table of the length of the string, and the key is the number of vowels.\n\nI don't think I understand. You would have", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    n = 0\n    for i in range(len(s)):\n        if s[i] in [A-Za-z]:\n           n += 1\n    return n\n\nThat's not an algorithm, it's a function. An algorithm is a step-by-step procedure for solving a problem.\n\nIt's not even that. It's a function that doesn't even count vowels, it just returns the number of characters in the string.\n\nIn a way, it's an algorithm.\n\nIt's not an algorithm, it's a function. An algorithm is a step-by-step procedure for solving a problem.\n\nIt's not even that. It's a function that doesn't even count vowels, it just returns the number of characters in the string.\n\nIn a way, it's an algorithm.\n\nIt's not an algorithm, it's a function. An algorithm is a step-by-step procedure for solving a problem.\n\nIt's not even that. It's a function that doesn't even count vowels, it just returns the number", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return 1\n    for i in range(len(s) - 2):\n        if i == 0:\n           return 0\n        else:\n           return 1\n    return len(s)\n\nI would add a second version of the function that takes a string and a counter.\n\ncount_upper(s, c)\n\nreturn c\n\nIf you are interested in a more general version of this, consider the following:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2])\n\nI like to use it to count the number of \"words\" in a string.\n\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 2\ncount_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ') returns 1\ncount_upper('abcdefghijklmnopqrstuvwxyz') returns 2\n\nI find this useful for doing things like checking whether a string is valid SQL, or a valid URL.\n\ncount_upper() is also great for counting the number of times a word occurs in a string. For example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 2\ncount_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZ') returns 1\ncount_upper('abcdefghijklmnopqrstuvwxyz') returns 2\n\ncount_upper() is also great for counting the number of times a word occurs in a string. For example:\ncount_upper('aBCdEf') returns 1", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    i = 0\n    for i in range(len(s)):\n        i = i + 1\n        if i > len(s) - 1:\n           break\n           if i % 2 == 0:", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s.upper())", "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\" \"\"\"\n    return len(s[::2] - s[::-1])\nThis is a pretty awful solution.  There is a lot of overhead for nothing.  You could do this in one line and it would be much faster and easier to read.        def count_upper(s):         return len(s[::2] - s[::-1])\nYou don't even need to do that, you could just use the count_upper() function from the string module."]]