[["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(11)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n if n < 2 else fib(n - 2) + fib(n - 1)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n       return 1\n    else:\n       return fib(n - 2) + fib(n - 1)\n\nThis is a bit of a strawman, as the actual problem is usually a bit more complicated.\nFor example, you might have a function like this:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n - 1) + fib(n - 2)\nI have no idea what's going on here.\n\nI think it's supposed to be:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n * fib(n-1)\nI'm not sure what you're trying to accomplish with this, but it looks like you're trying to write a fib function that is a generator. The problem is that you're returning a tuple, which is fine for a generator, but you're returning the result of the previous function call.\n\nThis is a very interesting way of looking at it. I would have called it a \"loop\".\n\nI'm not sure I understand what you mean by \"loop\". I'm not familiar with the terminology.\n\nA loop is a function that returns a value, and then calls itself.\n\nI don't know if that's what I'm doing. I'm just returning the result of the previous function call, which is fine for a generator.\n\nI'm not sure if it's a \"loop\" in the strict sense, but it's definitely a \"generator\".\n\nI like it!\n\nThanks!</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def nth_fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> nth_fib(8)\n    21\n    >>> nth_fib(2)\n    13\n    \"\"\"\n    return nth_fib(n)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n       return 1\n    else:\n       return fib(n-1)+fib(n-2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1\nYou might want to do a quick test to see if it's actually returning 1.\n\nI'm not sure what you mean by this.\n\nI'm pretty sure he meant this:\n>>> fib(1)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib\nFile \"<stdin>\", line 2, in fib", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 2:\n       return 1\n    else:\n       return fib(n-2) + fib(n-1)\nThis is a nice way to get a list of fibonacci numbers.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n-1\nThat's just the first example I thought of, but I think you get the idea.\n\nYou can also use this to simulate the behavior of a function that returns the n-th Fibonacci number:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    if n == 0:\n       return 1\n    return fib(n - 1) + fib(n - 2)\n\nThis is one of the worst solutions I have seen.\n1\\. It's not even idiomatic.\n2\\. It's not even correct.\n3\\. It's not even in the right language.\n4\\. It's not even in the right paradigm.\n5\\. It's not even in the right paradigm.\n6\\. It's not even in the right paradigm.\n\nThis is one of the worst comments I have seen.\n1\\. You're not even a nice person.\n2\\. It's not even constructive.\n3\\. It's not even in the right language.\n4\\. It's not even in the right paradigm.\n5\\. It's not even in the right paradigm.\n6\\. It's not even in the right paradigm.\n\nThis is one of the worst replies I have seen.\n1\\. You're not even a nice person.\n2\\. It's not even constructive.\n3\\. It's not even in the right language.\n4\\. It's", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1\n\nAha. I guess you could do that, but it's not very Pythonic.\n\nI think it's pretty Pythonic.\n\nI'd say it's pretty much the definition of Pythonic.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    n = 0\n    return n == 1? 1 : fib(n - 1) + fib(n - 2)\n\nPython is very flexible. You can do this:\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n>>> fib(11)\n89\n>>> fib(12)\n179\n>>> fib(13)\n\n>>> fib(20)\n\n>>> fib(21)\n\n>>> fib(22)\n\n>>> fib(23)\n\n>>> fib(24)\n\n>>> fib(25)\n\n>>> fib(26)\n\n>>> fib(27)\n\n>>> fib(28)\n\n>>> fib(29)\n\n>>> fib(30)\n\n>>> fib(31)\n\n>>> fib(32)\n\n>>> fib", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1 if n == 0\n    return fib(n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1 if n == 0\n    return fib(n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number squared.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    22\n    >>> fib2(8)\n    220\n    \"\"\"\n    def fib3(n: int):\n    \"\"\"Return n-th Fibonacci number cubed.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    22\n    >>> fib3(8)\n    220\n    \"\"\"\n    def fib4(n: int):\n    \"\"\"Return n-th Fibonacci number raised to the power 4.\n    >>> fib4(10)\n    55\n    >>> fib4(1)\n    22\n    >>> fib4(8)\n    220\n    \"\"\"\n    def fib5(n: int):\n    \"\"\"Return n-", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\nThe problem with the above is that it's not clear that fib(n) is supposed to return the nth Fibonacci number.\nIf you're not familiar with Python, you'd think it's a function that returns the fibonacci sequence.\n\nI'm not sure I see the problem. The first line of the function is", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(8)\n    21\n    >>> fib(6)\n    13\n    >>> fib(3)\n    5\n    >>> fib(5)\n    21\n    \"\"\"\n    if n <= 1:\n       raise ValueError(\"Fibonacci number must be non-negative\")\n    return 0\n    return 1\nThis is a good example of why Python's duck typing is a bad idea. It's also a good example of why Python's exceptions are a bad idea.\n\nI agree with the exception part, but I'm not sure I see the problem with duck typing.\n\nIf you're not sure you see the problem with duck typing, you should read the Wikipedia article on it, and then the Python docs on it.\n\nI understand what duck typing is, I just don't see what the problem is with it in this case.\n\nIt's a good example of why duck typing is a bad idea.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    n = 0\n    return fib(n-1) + fib(n-2)\n\nSee also\n\nFibonacci numbers\nFibonacci sequence\nFibonacci sequence in mathematics\n\nReferences</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(1)\n    0\n    >>> fib(2)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(3)\n    1\n    >>> fib(4)\n    3\n    >>> fib(4)\n    2\n    >>> fib(5)\n    5\n    >>> fib(5)\n    4\n    >>> fib(6)\n    8\n    >>> fib(6)\n    7\n    >>> fib(7)\n    13\n    >>> fib(7)\n    12\n    >>> fib(8)\n    21\n    >>> fib(8)\n    20\n    >>> fib(", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1 if n == 0 else fib(n - 1) + fib(n - 2)\nThis is a pretty naive implementation.\nIt's missing a lot of important cases.\n\nYeah, it's not perfect. I don't think it's meant to be the one and only fib() function, but more of an example of how you would use the decorator.\n\nIt's not the only one in Python, either.\n\nI was wondering when someone would notice that. I was thinking of adding a comment to that effect, but decided not to.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number, shifted by 2.\n    >>> fib2(3)\n    23\n    >>> fib2(3)\n    35\n    >>> fib2(2)\n    13\n    \"\"\"\n    def fib2_0(n: int):\n    \"\"\"Return 0-th Fibonacci number, shifted by 2.\n    >>> fib2_0(3)\n    23\n    >>> fib2_0(2)\n    13\n    \"\"\"\n    def fib2_1(n: int):\n    \"\"\"Return 1-th Fibonacci number, shifted by 2.\n    >>> fib2_1(3)\n    35\n    >>> fib2_1(2)\n    23\n    \"\"\"\n    def fib2_2(n: int):\n    \"\"\"Return 2-th Fibonacci number, shifted by 2.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    def fib3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n    def fib4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib4(10)\n    55\n    >>> fib4(1)\n    1\n    >>> fib4(8)\n    21\n    \"\"\"\n    def fib5(n: int):\n    \"\"\"Return n-th Fibonacci number.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n - 1\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n - fib(n-1)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n - fib(n-1)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib_step(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_step(10)\n    55\n    >>> fib_step(1)\n    1\n    >>> fib_step(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib_step(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_step(10)\n    55\n    >>> fib_step(1)\n    1\n    >>> fib_step(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\nThis is the worst kind of code. It's wrong, but it's not wrong in a way that's obviously wrong. It's wrong in a way that's just wrong enough that you might not notice.\n\nIt's wrong because it's not obvious to you that the author didn't mean to return fib(n-1) + fib(n-2) but rather fib(n-1) + fib(n-2) + fib(n-3) and so on.\n\nI don't think that's what's wrong with it. It's wrong because it's wrong.\n\nI don't see why the above is wrong. I think it's a perfectly good and correct function.\n\nThe problem is that the function doesn't return the correct value. It returns the n-th Fibonacci number, but it doesn't return the n-th Fibonacci number.\n\nIs there a way to tell that it is the n-th Fibonacci number?", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def nth_fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> nth_fib(3)\n    13\n    >>> nth_fib(1)\n    1\n    >>> nth_fib(10)\n    55\n    \"\"\"\n    def fib_as_int(n: int):\n    \"\"\"Return int(n-1)+n.\n    >>> fib_as_int(10)\n    55\n    >>> fib_as_int(11)\n    66\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return int(n-1)+n\n\nThe code is very readable, and the resulting code is very", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __init__(self, n: int):\n        self.n = n\n    def next(self):\n        return self.n\n    def fib(self):\n        if self.n == 1:\n           return 1\n        if self.n == 2:\n           return 1\n        if self.n == 3:\n           return 1\n        return self.n + self.n - 1\n    return fib", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number, using recursion.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    def fib3(n: int):\n    \"\"\"Return n-th Fibonacci number, using recursion.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n    def fib4(n: int):\n    \"\"\"Return n-th Fibonacci number, using recursion.\n    >>> fib4(10)\n    55\n    >>> fib4(1)\n    1\n    >>> fib4(8)\n    21\n    \"\"\"\n    def fib5(n: int):", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1 if n < 2 else fib(n-1) + fib(n-2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1 if n < 2 else fib(n-1) + fib(n-2)\nI'm pretty sure this is a joke, but it's hard to tell.\n\nIt's a joke. See also:\n\nI think it's a joke.\n\nIt's a joke.\n\nI think it's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.\n\nIt's a joke.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    return 0\nThis is not a solution, as it has a divide-by-zero error. The problem is, that the recursive call does not return, it just returns the result of the function, which is zero in this case.\n\nYou are right, I've updated the code. Thanks!\n\nThis is a classic example of a recursive algorithm.\n\nYes, I know, but I thought it would be interesting to see how the code looks like when you add the \"non-recursive\" keyword.\n\nI am surprised that the \"non-recursive\" version is more complicated.\n\nThe non-recursive version", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n if n == 0 else fib(n-1) + fib(n-2)\nThis is actually a function, not a method.\n\nThanks! I've fixed it.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n    >>> fib(1)\n    1\n    >>> fib(2)\n    2\n    >>> fib(3)\n    5\n    >>> fib(4)\n    8\n    >>> fib(5)\n    13\n    >>> fib(6)\n    21\n    >>> fib(7)\n    34\n    >>> fib(8)\n    55\n\n(This is a bit off-topic, but I wonder if it would be possible to make a 'better'", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __call__(self, n: int):\n    \"\"\"Return the n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n       return 0\n    return fib(n - 2) + fib(n - 1)\n    if __name__ == \"__main__\":\n       fib(10)\n       fib(1)\n       fib(8)\n\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n\nThis is one of my favourite examples of how Python is a really great language for teaching programming. In my experience, it's the language that's most accessible to non-programmers.\n\nI would argue that Ruby is even more accessible.\n\nPython is more accessible to non-programmers because it's easier to write and read code", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    1\n    >>> fib(4)\n    2\n    >>> fib(5)\n    3\n    >>> fib(6)\n    5\n    \"\"\"\n    return fib(n-1) + fib(n-2)\n\nThis is incorrect.\nThe fibonacci function is defined for the _n_ -th fibonacci number, not the _n_ th fibonacci number.\n\nYes, but the function is not being passed to fib, it is being passed to fib(n: int).\n\nI think you need to read the question again. It clearly states that fib is a method of the fibonacci class, not a function.\n\nI think you need to read the question again. It clearly states that fib is a method of the fibonacci class, not a function.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __init__(self, n: int):\n    self.n = n\n    def next(self):\n    return self.n - 1\n    def __call__(self, n: int):\n    return next(self)\n    def fib(n: int):\n    return fib(n - 1) + fib(n - 2)\n    return fib\n\nI'm not a python expert, but I don't see how this is an improvement over the original.\n\nIf you're not a Python expert, you're probably not aware of the fact that the Python standard library has a function named fib.\n\nI'm not a python expert, and I know that the standard library has a function named fib.\nI'm not sure what point you're trying to make.\n\nI think the point is that the function in the article is named in such a way as to make it appear that it is part of the standard library.\n\nI think the point is that the function in the article is named in such a way as to make it appear that it is part of the standard library.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n - 1) + fib(n - 2)\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\nI'm not sure why this is on the front page. It's not even remotely interesting.\n\nI think it's because it's the first time I've seen a lambda used to define a function.\n\nI'm not sure I understand your comment. Lambdas are used to define functions in the same way that functions are defined in any other language that supports them.\n\nI think he means that it's the first time he's seen a lambda used to define a function _in Python_.\n\nYeah, that's what I meant. I've never seen that before.\n\nI think this is the first time I've seen a lambda used to define a function in any language.\n\nI've seen it a couple of times in C#, but that's pretty much the only language I've seen it in.\n\nIt's one of the most common ways to define a function in Lisp.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)\nI have a slightly different version that I use in C#, but it's basically the same thing.  I like it because it's pretty readable and you can see exactly what it's doing.  It's also a good example of a recursive function.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n       return 1\n    return fib(n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n       return 1\n    return fib(n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    5\n    >>> fib(5)\n    8\n    \"\"\"\n    return 1\nI'm not sure if I understand the point of the post. The code is obviously broken.\n\nThe point is that it's the same as the original fib function.\n\nAh, I see.\n\nIt's broken, it's not the same as the original fib function.\n\nIt is the same.\n\nIt's not, the original fib function returns the nth Fibonacci number.\nThe version you posted returns 1.\n\nIt's a joke. It's not supposed to be the same.\n\nYes, I get that it's a joke, but it's not funny because it's not the same.\n\nIt's a joke, not a proof.\n\nThe point is", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n == 1? 1 : fib(n-1) + fib(n-2)\n\nWow, that's really bad. You're missing a semicolon at the end of the first line, and you have a typo in the second line.\n\nI was looking for the same thing, but I think this is a troll.\n\nThis is a troll.\n\nI love the \"you should use python\" suggestion.\n\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you should use python\"\n\"you", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n == 1? 1 : fib(n-1) + fib(n-2)\nThat's a fun little exercise.\n\nIt's a fun little exercise, but it's not the Fibonacci function. The Fibonacci function is defined by recursion, not by iteration.\n\nSure, but I think the OP's point was to show how the recursive version can be written in a non-recursive way.\n\nIt can't, though. The OP's version is not a function at all, it's a procedure. It's not even a procedure that returns the Fibonacci number, it's a procedure that returns the nth Fibonacci number.\n\nI think the OP's point was to show that the fibonacci number can be computed in a non-recursive way.\n\nI think the OP's point was", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)\n\nThe author is missing the point of what a \"fibonacci\" function is.\n\nI'm not sure why you think that. The author is using the fibonacci numbers as an example of a recursion problem, not a fibonacci function.\n\nThe fibonacci numbers are not a recursion problem. The fibonacci numbers are a sequence, not a function.\n\nThe fibonacci numbers are a recursion problem.\n\nAnd that's why the author is missing the point of what a \"fibonacci\" function is.\n\nI'm not sure why you think that. The author is using the fibonacci numbers as an example of a recursion problem, not a fibonacci function.\n\nThe fibonacci numbers are not a recursion problem. The fibonacci numbers are a sequence, not a function.\n\nThe fibonacci numbers are a recursion problem.\n\nAnd that's why the author is missing the point of what a \"fibonacci\" function is.\n\nI'm not sure why you think that. The author is using the fibon", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib_n(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_n(10)\n    55\n    >>> fib_n(1)\n    1\n    >>> fib_n(8)\n    21\n    \"\"\"\n    return n", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib_add(n: int, m: int):\n    \"\"\"Return n+m-th Fibonacci number.\n    >>> fib_add(8, 4)\n    13\n    >>> fib_add(1, 1)\n    0\n    >>> fib_add(8, 1)\n    13\n    >>> fib_add(1, 8)\n    1\n    \"\"\"\n    def fib_sub(n: int, m: int):\n    \"\"\"Return n-m-th Fibonacci number.\n    >>> fib_sub(8, 4)\n    13\n    >>> fib_sub(1, 1)\n    0\n    >>> fib_sub(8, 1)\n    13\n    >>> fib_sub(1, 8)\n    1\n    \"\"\"\n    def fib_mul(n: int, m: int):\n    \"\"\"Return n*m-th Fibonacci number.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n-1\n\nThis is the most concise solution I've seen so far, but I don't think it's the most readable.\n\nHow about this:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\nI think this is the most concise way to write the fibonacci function.\n\nI think the best way to write it is with the following:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n - 1) + fib(n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    if n < 2:\n       return 1\n    return fib(n - 1) + fib(n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    n = 0\n    while n < 10:\n        n += 1\n        return n\n    return fib(0)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 1:\n        return 1\n    return fib(n-1)+fib(n-2)\nThis is pretty awful, because it's not tail recursive.\n\nIf you have a tail recursive solution, please submit a pull request!\n\nI think this is the best solution I've seen:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    return fib(n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    return fib(n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\n\nWhat's the point of the code?\n\nI'm not sure I understand the question. I think it's just a demonstration of Python's duck typing.\n\nI think the question is why do you need to write that?\n\nThe question is why is it a function?\n\nI guess I was just trying to show that duck typing is a good thing.\n\nI like this, but I think it could be made even more concise by using the built-in math module.\n\nOr, you know, just using the built-in Python interpreter:\n>>> fib(10) 55\n>>> fib(1) 1\n>>> fib(8) 21\n\nI'm not sure why you were downvoted, I also think this is the most concise way to do this in Python.\n\nIt's because it's not the most", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 2:\n       return 0\n    else:\n       return fib(n - 1) + fib(n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(3)\n    12\n    >>> fib(4)\n    22\n    >>> fib(5)\n    34\n    \"\"\"\n    if n == 1:\n       return 1\n    if n == 2:\n       return fib(n-2) + fib(n-1)\n    else:\n       return fib(n-1) + fib(n-2)\nI'm not sure I understand the point of this.\n\nI was trying to teach myself Python and thought this would be a good way to practice.\n\nI don't think this is the best way to learn Python.\n\nI've got a couple of friends who are learning Python right now, and I'm trying to find some fun, simple projects for them to work on.\nAny suggestions?\n\nI think the best way to learn Python is to have a real problem, then solve it. The problem you have", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    >>> fib(6)\n    8\n    >>> fib(7)\n    13\n    \"\"\"\n    return fib(n - 1) + fib(n - 2)\n\nThe Fibonacci sequence is a sequence of numbers defined by the recurrence relation\n\nFibonacci numbers are named after Leonardo of Pisa (Fibonacci) who studied the sequence in the 12th century.\n\nThe first few values of the sequence are:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\n\nI'm not sure I understand the point of this.\n\nIt's a joke. A \"fibonacci\" is a joke term for a programming language feature that is rarely used but that everyone is aware of.\n\nI thought the joke was that the Fibonacci sequence is trivial to implement in any language, and the fact that the example was so simple is what made it funny.\n\nI'm not sure I understand the point of this.\n\nIt's a joke. A \"fibonacci\" is a joke term for a programming language feature that is rarely used but that everyone is aware of.\n\nI thought the joke was that the Fibonacci sequence is trivial to implement in any language, and the fact that the example was so simple is what made it funny.\n\nI'm not sure I understand the point of this", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1) + fib(n-2)\nThis is not the right way to do it. You need to use the recursion, not the iteration.\n\nI would have to agree. I also think that this is a good example of why you should not try to write a recursive function by hand.\n\nI'm not sure I understand the downvotes, but I'll explain anyway.\nRecursion is a tricky thing. It can be done in many different ways, and often it is hard to tell which one is the most efficient.\nThe only way to be sure that you have a good recursive implementation is to use an automatic tool. There are several of them, but I usually use the one that comes with my language of choice (in Python, it's called \"recur\" and it's part of the standard library).\n\nI", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    if n == 0:\n       return 1\n    else:\n       return fib(n-1) + fib(n-2)\n\nI'm not sure I understand your point. The function doesn't return anything, so it's not a function at all.\n\nWell, it's a function in the same way that the output of a print statement is a function.\n\nThe output of a print statement is not a function at all.\n\nIt's not a function, but it is a function call.\n\nI think the GP was saying that the output of a print statement is not a function call, because it doesn't return anything.\n\nThe output of a print statement is not a function call. It's a statement.\n\nI think you're both right, but you're both missing the point.\nIn the same way that the output of a print statement is a function call, the output of the fib function is also a function call.\n\nI'm not sure that's correct. The output of the print statement is not a function call because it doesn't return anything", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1 if n == 0\n    return fib(n - 1) + fib(n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(5)\n    8\n    >>> fib(3)\n    13\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    return fib(n-2) + fib(n-1)\n\nThe last line is a bit of a surprise, but it's the recursive call that does the work.\n\nIn Python, the fibonacci function uses the same strategy.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n-1\nCan you explain what this does? I'm not sure I understand it.\n\nIt's a recursive function that returns the n-th Fibonacci number.\nThe function calls itself with the previous result, and the next number to calculate.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return (n - 1) * (n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def nfib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> nfib(10)\n    55\n    >>> nfib(1)\n    1\n    >>> nfib(8)\n    21\n    \"\"\"\n    return fib(n)\nI don't get it. How is this different from the other implementation?\n\nIt's not, it's just shorter.\n\nI don't know about that. I'd say it's shorter because it's simpler and doesn't need to include a function that returns the n-th fibonacci number, and that it's also more idiomatic, but I wouldn't say it's shorter.\n\nIt is shorter, as in less characters.\n\nWell, yes, but that's only one of the things that make it shorter. I'd say it's also shorter because it's more idiomatic, and because it doesn't need to include a function that returns the n-th fibonacci number.\n\nThis is a good example of why I wish Python's syntax was more flexible, so", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1) + fib(n-2)\nThe problem with this is that it's inefficient. It will call fib(n-1)\nand fib(n-2) at every call, even if n is the same. This means that\nn-1 and n-2 are constantly being recalculated, even if they haven't\nchanged.\nThe fix is to cache the results of the fibonacci function. This\nwill be very efficient, as long as you don't need to change the\nresult. If you do need to change the result, you will have to\nrecalculate fib(n-1) and fib(n-2).", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    n = 0\n    while n < 2:\n       n = n + fib(n-1)\n    return n\n\nThis is a bad example, because the last two lines are exactly the same as the first two. The only difference is that the last two lines have a redundant return statement.\n\nI think it's a good example because it shows how a small change in the logic can affect the readability of the code.\n\nI agree. I like this example because it shows how the simplicity of the first two lines can hide the complexity of the last two.\n\nI agree. I like this example because it shows how the simplicity of the first two lines can hide the complexity of the last two.\n\nI agree. I like this example because it shows how the simplicity of the first two lines can hide", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1) + fib(n-2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1) + fib(n-", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __init__(self, n: int):\n    \"\"\"Initialize the Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    self.n = n\n    self.f = 0\n    self.f_next = 1\n    self.f_prev = 0\n    def add(self, f: int):\n    \"\"\"Add the current value to the Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(9)\n    34\n    >>> fib(10)\n    55\n    >>> fib(1)\n    2\n    >>> fib(8)\n    22\n    >>> fib(9)\n    35", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    if n == 1:\n       return 1\n    else:\n       return fib(n - 1) + fib(n - 2)\n    return fib\n\nThis is a common pattern for me. I know I'm going to be calling the function a lot. I know I'm going to be calling it with the same parameters. I know that the function will be small. So I put it in a module, and use it as a decorator.\nI don't know if this is the \"right\" way to do it, but it's how I do it.\n\nI don't think that's the right way to do it. You're basically saying you're going to be calling the same function a lot, so you're going to make a function that calls itself.\nThe right way to do it would be to make a function that calls the original function.\n\nI don't think you can do that in Python.\n\nYou can, but it's not as easy as in other languages.\n\nI do this in Python a lot. I'm not sure if it", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    n = 0\n    while n < 2:\n        n = n + fib(n-1)\n    return n\n    def fibonacci_numbers(n: int):\n    \"\"\"Return a list of fibonacci numbers.\n    >>> fibonacci_numbers(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fibonacci_numbers(1)\n    [1, 1]\n    \"\"\"\n    return [n for n in fibonacci_numbers(n)]\nThis is a terrible implementation, because it's not tail recursive.\n\nThis is a terrible comment, because it's not constructive.\n\nI thought it was constructive. It's a good opportunity for the author to learn about the difference between iterative and recursive solutions.\n\nI can't see any difference between the two. Could you explain?\n\nWhen you write a recursive function, you should try to make sure that it can be implemented iteratively as well.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n-1\n    return fib(n-1) + fib(n-2)\n\nThis is the kind of code that makes me think that the author has never written a line of production code in his life.\n\nThe author is a professor at Cornell University, and the author of a book on Python:\nhttp://www.cis.upenn.edu/~bcpierce/\nI think he knows what he's doing.\n\nI'm sure he knows what he's doing. I'm also sure that he's never written a line of production code in his life.\n\nI've written a lot of production code in my life. I'm also a professor at Cornell.\n\nI'm a professor at a large state university.\n\nI'm a professor at a small liberal arts college.\n\nI'm a professor at a small liberal arts college that's also a state university.\n\nI'm a professor at a small liberal arts college that's also a state university that's also a state prison.\n\nI'm a", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n - 1) + fib(n - 2)\n\nThat's a little bit better. I'd suggest replacing the last line with\nreturn fib(n - 1) + fib(n - 2)\n\nBetter yet, use a list comprehension.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 2:\n       return 1\n    else:\n       return fib(n-1) + fib(n-2)\n\n>>> fib(5)\n    55\n>>> fib(4)\n    25\n>>> fib(3)\n    12\n>>> fib(2)\n    8\n>>> fib(1)\n    1\n>>> fib(0)\n    0\n\nAnd this is why I can't stand Python. It's not a good language for teaching.\n\nYou're right. I'm sure this is the only example of a Python programmer using an if statement to handle the edge case of n being zero.\n\nThis is not a good example. It's not idiomatic.\n\nIt's idiomatic to the point where you can find it in the documentation:\n\nIt's not idiomatic to the point where it's in the Python Cookbook, and it's not idiomatic to the point where it's in the Python tutorial.\n\nI'm sorry, but I just don't see how \"it's not in the Python tutorial\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 1\n    return fib(n - 2) + fib(n - 1)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n - 1) + fib(n - 2)\nThe code is pretty clear. The function fib(n: int) returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a function that returns the n-th Fibonacci number.\nI was expecting a", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 0:\n        return 0\n    else:\n        return 1\n    ####\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        return 0\n    else:\n        return n\n    ####\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        return 0\n    else:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1)+fib(n-2)\n> def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1)+fib(n-2)\n> def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1)+fib(n-2)\n> def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    return fib(n-1) + fib(n-2)\nThis is a great example of why Python is not a good language for teaching beginners programming. It is a great language for teaching advanced concepts to experienced programmers, but it's too easy for beginners to write code that is both syntactically and semantically wrong.\n\nIt's a great language for teaching _some_ advanced concepts to experienced programmers. I know a lot of people who have a lot of difficulty with the whitespace.\n\nThat's true, I should have been more clear about that. I think Python is an excellent language for teaching functional programming and metaprogramming, but it's not a good language for teaching beginners the basics of OO programming.\n\nI think this is a great example of why people should learn to program before they learn to program in a language.\n\nI think this is a great example of why people should learn to program before they learn to program in a language.\n\nI think this is a great example of why people should learn to program before they learn to program in a language", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 0 if n == 0\n    return 1 if n == 1\n    return fib(n - 1) + fib(n - 2)\n\nI'm not sure if it's a good example, but it's the first thing I thought of.\n\nI'm not sure I get the point of this.\n\nIt's a joke about how bad the python standard library is.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1) + fib(n-2)\nI don't see the problem here.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 0:\n       return 1\n    else:\n       return fib(n-1) + fib(n-2)\n\nI'm not sure I understand the point of this. This is a very simple program, and I don't see any benefit of using a generator to compute the Fibonacci sequence.\n\nI think the point is that the fibonacci sequence is a classic example of a recursive problem.\n\nI'm not sure I see how this is a classic example of a recursive problem. It's a classic example of a recursive solution.\n\nThat's not a very good generator. It doesn't seem to be able to handle even the simplest of input.\n\nI think the idea is to show that you can use generators to do recursion.\n\nI'm not sure I see the point of that either.\n\nI think it's a good example of how generators can be used to solve a problem that is typically solved with recursion.\n\nI'm not sure I see the point of that either.\n\nI think it's a good example of how generators can be used to solve a problem that is typically", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 1:\n       return 1\n    else:\n       return fib(n-1) + fib(n-2)\nI don't know if this is the right place to ask, but why are the n-1 and n-2 there? Shouldn't they be 1 and 0?\n\nYes, they should be. The code is incorrect.\n\nI'd like to see an example of the algorithm being used to solve a real-world problem.\n\nThat's a good idea. I'll add one.\n\nI find that a lot of these \"useful\" functions are actually more confusing than helpful.\n\nThe author should fix the indentation.\n\nI'll look into it.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(10)\n    55\n    >>> fib(11)\n    89\n    \"\"\"\n    return 0\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(11)\n    89\n    \"\"\"\n    return 1\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(10)\n    55\n    >>> fib(11)\n    89\n    \"\"\"\n    return 1\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1\nI don't know if this is the right answer, but it's a valid answer.\n\nI have a feeling that the OP's question was intended to be more like \"What is the _correct_ answer?\" rather than \"What is an answer that the interpreter will accept?\".\n\nI was going to say the same thing. I mean, the question is asking \"what is the answer\", not \"what is the right answer\".\n\nThere's a difference?\n\nSure. \"What is the answer\" is a question about the behavior of the language, while \"what is the right answer\" is a question about the correctness of the program.\n\nI think the problem is that there's no way to have a non-ambiguous answer to \"what is the right answer\".\n\nThe answer is that there isn't a right answer.\n\nThere are two right answers. One is the one the interpreter gives you, and the other is the one the computer scientist gives you.\n\nIs the computer scientist's answer the same as the one the programmer gives you?\n\nThis is the correct answer.\n\nI don't think this is the right answer.\n\nI don't think this", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n if n == 0 else fib(n-1) + fib(n-2)\nThis is not a bug.\n\nI think he's asking about the fact that the function is returning a tuple, not a single value.\n\nAh, I see. I'd say that's a bug, or at least a really poor design decision.\n\nI don't think that's a bug. It's a feature.\n\nIt's a feature that the function returns a tuple?\n\nWell, not a feature, but a consequence of the fact that the function returns a tuple. It's a consequence that you might not like, but it's not a bug.\n\nI don't see how it's a consequence.\n\nThe function returns a tuple, and the tuple has two elements, so it makes sense that the function returns a tuple.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n - 1) + fib(n - 2)\nThat's not a very good definition of fib(n).\n\nWhat's wrong with it?\n\nI guess it's not clear that it's a recursive function.\n\nI thought it was a recursive definition.\n\nIt is, but I think it's a bit more natural to write it as:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    if n == 0:\n        return 0\n    return fib(n-1) + fib(n-2)\n\nThere's a bug in this code. If you have n = 0, then it returns 0. It should return 1.\n\nI think this is the correct way to fix it:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def nthFib(n: int):\n    \"\"\"Return the n-th Fibonacci number.\n    >>> nthFib(5)\n    55\n    >>> nthFib(1)\n    1\n    \"\"\"\n    return nthFib(n)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\nWhat's wrong with this code? \n\nI think it's the \"return n\" that's the problem.\n\nI know, but what's wrong with it?\n\nThe problem is that you're returning a value without using it.\n\nI don't get it.\n\nThe function returns a value, but you don't do anything with it.\n\nThat's not a problem, that's a feature!</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    n = 1\n    while n <= 2:\n       n = n + fib(n-1)\n    return n", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\n\nI am not sure if you are being sarcastic or not, but that's not how I would do it.\n\nI am not. I don't see how a function with a single line of code is anything but a bad joke.\n\nYou are right, it is a bad joke.\n\nI think it's a pretty good joke, but it is also a bad joke.\n\nI think it's a bad joke, but it is also a pretty good joke.\n\nI think it's a pretty good joke, but it's also a bad joke.\n\nI think it's a bad joke, but it's also a pretty good joke.\n\nI think it's a pretty good joke, but it's also a bad joke.\n\nI think it's a bad joke, but it's also a pretty good joke.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib_n(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_n(10)\n    55\n    >>> fib_n(1)\n    1\n    >>> fib_n(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return fib_n(n-1) + fib_n(n-2)\n    # This is not right, but it will do.\n    # As a bonus, this also works for the Fibonacci numbers with leading 0\n    def fib_n_with_leading_0(n: int):\n    \"\"\"Return n-th Fibonacci number with leading 0.\n    >>> fib_n_with_leading_0(10)\n    55\n    >>> fib_n_with_leading_0(1)\n    1\n    >>> fib_n_", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    return fib(n - 1) + fib(n - 2)\n    def fib3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n    return fib(n - 2) + fib(n - 1)\n    def fib4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib4(10)\n    55\n    >>> fib4(1)\n    1\n    >>> fib4(8)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return (n+1) % 2\n\nI'm not sure if it's just me, but I think this is the most Pythonic way to write it.\n\nI think you mean the most \"Pythonic way to write it that makes it look like C\".\n\nI think you mean the most \"Pythonic way to write it that makes it look like C, but without the C-isms\".\n\nPython is a great language. I'm happy to see it has found its niche. I've been using it for a few years now. I wouldn't want to use it for everything, but it's a great language for a lot of things.\n\nI agree. It's a great language for a lot of things. But there are some things it's just not good at.\n\nI'm curious, what things are those?\n\nI'm", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    n = int(input(\"Enter a number: \"))\n    return n if n < 2 else fib(n-1) + fib(n-2)\nI don't think you can use `int` as a variable name.\nThat's why it's a bad example.\nI don't think he was trying to show an example.  I think he was trying to show the code that he had written.\nI think he was trying to show an example of his code.\nI think he was trying to show an example of his code that he had written.\nI think he was trying to show an example of his code that he had written in order to show an example of his code.\nI think he was trying to show an example of his code that he had written in order to show an example of his code that he had written in order to show an example of his code.\nI think he was trying to show an example of his code that he had written in order to show an example of his code that he had written in order to show an example of his code that he had written in order to show an example of his code.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 1:\n        raise ValueError('n must be greater than 1')\n    return fib(n - 1) + fib(n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1 if n < 2 else fib(n-1)+fib(n-2)\nYou're missing a closing curly brace on line 5.\n\nI just fixed it, thanks.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return (n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return (n - 1) + fib(n - 2)\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return (n - 1) + fib(n - 2)\n\nI am pretty sure this is a joke, but I don't get it.\n\nIt's a joke that some people would get stuck trying to use the \"fib\" function, because they'd get the \"fib(10)\" error.\n\nAh, I thought it was", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return (n-1) * fib(n-2) + fib(n-1)\nThe problem with this is that it's very slow. It's better to use the following algorithm, which is O(n) in the number of elements in the sequence:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n * fib(n - 1) + fib(n - 2)\nThe real problem with this is that it doesn't work for negative numbers.  I'd prefer something like this:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n if n < 2 else fib(n-1) + fib(n-2)\nThat's not the fibonacci sequence.\n\nThe fibonacci sequence is not defined for negative integers.\n\nIt's also not defined for 0, but that's not a problem, because the function is defined to return the n-th fibonacci number, and 0 is not n.\n\nI'm not sure what you mean. The Fibonacci sequence is defined for 0.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1\n    if n < 2\n    return n\n    else:\n    return fib(n-1) + fib(n-2)\n\nThis is a very interesting example. It shows how a bug can be introduced by a refactoring.\n\nIn Python, if you write the code like this:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n        if n == 1:\n           return 1\n         else:\n           return fib(n-1) + fib(n-2)\n\nI have a feeling that I have seen this before, but I can't seem to find it. I would be interested to know what the reasoning behind this is.\n\nIf you want to know why they do this, this is one of the best articles I've read on the subject:\n\nI think this is a pretty good article. It doesn't", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def nth_fib(n: int):\n    \"\"\"Return fibonacci number corresponding to n.\n    >>> nth_fib(8)\n    21\n    >>> nth_fib(1)\n    1\n    \"\"\"\n    return fib(n-1) + fib(n-2)\n\nThis is a really bad example because you're using the built-in function \"fib\" to do the work for you.\nThe problem is that you don't know how many times \"fib\" is going to call itself.\nSo, if you want to know the nth Fibonacci number, you need to write your own function that does that.\nHere's a better example:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)\nYou can do better than that.  Your function has a runtime of O(n^2), whereas the correct answer is O(n).  In fact, the correct answer is O(log n), but that's a bit harder to code.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n - 1) + fib(n - 2)\nI think the author missed the point of the Fibonacci series.\n\nI think the author is just trying to show that the fibonacci series is the nth number in the fibonacci series.\n\nHe's not showing that. He's showing that it's the nth number in the fibonacci series _if_ you start at 1, which is not the case.\n\nI'm not sure what the point of this is.\n\nI think the point is to show that the fibonacci series is the nth number in the fibonacci series.\n\nI think the point is to show that the fibonacci series is the nth number in the fibonacci series.\n\nI think the point is to show that the fibonacci series is the nth number in the fibonacci series.\n\nI think the point is to show that the fibonacci series is the nth number in the fibonacci series.\n\nI think the point is to show that the fibonacci series is the nth number in the fibonacci series.\n\nI think the point is to", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n - 1) + fib(n - 2)\nI'm not sure if this is a joke, but the point of the fibonacci sequence is that it's an infinite series. So this implementation will never terminate.\n\nIt's a joke.\n\nI think this is my favorite of the lot:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    n = 0\n    while n < 2:\n        n = n + fib(n-1)\n    return n\n\nThis is a very common mistake in programming. The author of this article is probably a beginner. He should have used a more sophisticated approach, such as the following:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return fib(n-1) + fib(n-2)\nThis is actually the only solution that works in Python 3. The other solutions are based on the fact that `return` can be used as a statement, which is true for Python 2, but not for Python 3.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 2:\n        raise ValueError('n must be odd')\n    return fib(n-1)+fib(n-2)\nI think this is a good example of the problem with the Pythonic style. The second line is trying to do two things, one of which is not a function. It is also trying to do too much.\nA more \"traditional\" way to write this would be:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)\n\nThis is the pythonic way to write this function, but the C/C++ way is better.\n\nI'm sure the C/C++ way is better in some sense, but why?\n\nIt's not that the C/C++ way is better, it's that the Python way is _not_ the C/C++ way.\n\nThe C++ way is a lot more readable than the Python way, IMO.\n\nThe Python way is a lot more readable than the C++ way, IMO.\n\nI think both of you are right. The C++ version is more readable for C++ programmers, but the Python version is more readable for Python programmers.\n\nThe C++ version is more readable for anyone who has used C or C++.\n\nI've used both, and I find the Python version more readable.\n\nI've used both, and I find the C++ version more readable.\n\nI've used both, and I find the C++ version more readable.\n\nI've used both, and I find the C++ version more readable.\n\nI've used both", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    n = 0\n    while n <= 2:\n       n = n + fib(n - 1)\n       return n\n\nThis function is not tail recursive and will not be efficient to compute.\n\nThat's not the point of the exercise. It's to illustrate the fact that you can use recursion to compute Fibonacci numbers.\n\nIt's a good illustration, but it would be even better if it used tail recursion.\n\nI don't think that's the point of the exercise.\n\nIt's a good illustration of how to write a recursive function that is not tail recursive.\n\nIt's a good illustration of how to write a recursive function that is not tail recursive.\n\nThe recursion is correct. It is just not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail recursive.\n\nIt is not tail", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)\nThe code is not self-documenting. It doesn't explain what it does. It is not easy to read. It doesn't use any Python idioms. It doesn't use any Pythonic syntax. It is not easy to refactor. It is not easy to maintain.\n\nI'm not sure that's a fair criticism.\nIt's a bit too terse, but it's not that hard to understand.\nAnd it's not like there's a shortage of Python idioms in there. It's just that the idioms are different from what you're used to.\n\nIt's not a fair criticism because the code is not meant for you. It's meant for people who don't know Python.\n\nIf it's meant for people who don't know Python, then it should be written in a way that is easy to understand for people who don't know Python.\n\nIt is written in a way that is easy to understand for people who don't know Python.\n\nI don't think it is.\n\nThe first two lines explain what the function does. The next two lines explain the parameters. The next two lines", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __init__(self, n: int):\n         self.n = n\n         self.sum = 0\n         self.index = 0\n    def recurse(self):\n         self.n = self.n + self.n\n         self.sum += self.n\n         self.index += 1\n         if self.index >= self.n:\n              return self.index\n              self.sum = self.sum * self.index\n              self.index = 0\n    return self.sum", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n == 1: n * fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __init__(self, n: int):\n    self.n = n\n    def __call__(self, n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n       return 1\n    else:\n       return fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n-1\nI know what you mean, but I think the point is that the Fibonacci function should be a \"pure\" function, meaning it should be able to be executed in a vacuum.  So you could say:      fib(10)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(100)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\nI see a lot of these, and I don't understand why they're so popular.  I mean, why do you want to write a function that just returns the thing you're trying to find?  What's the point?  It's like writing a function that just returns the number 1.\nThe point is that if you're going to be using it a lot, you might as well save yourself the typing.  It's not always about saving keystrokes, but it's definitely about saving keystrokes.  You're not going to be calling it with n being 100, but you might be calling it with n being 3, or 9, or 27.  There are a lot of places where you could put in the n and get the result you want without having to type the n every time.\nBut it's not just typing the n,", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n-1\nThat's a pretty terrible fibonacci implementation.\n\nI agree, it's not very good. However, it's a good example of how to write a function that can be run on any type, not just integers.\n\nI don't think that's the case. In Python, at least, you could write a function that is called fib(x: int) that returns the n-th fibonacci number.\n\nTrue, but it's not idiomatic.\n\nI don't think it's idiomatic in any language, but it's not idiomatic in Python for a different reason than in other languages.\n\nI think the reason is the same in any language: You'd be writing a function that only works for one type, and the type is not given by the function name.\n\nI don't think that's the reason. It's more like \"you have to write a function to return a tuple, and it's just a waste of time to write a function that returns a tuple for only one type\".\n\nI think the reason is more like \"you have to write a function to return a tuple, and it's just a waste of time to write a", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n == 1? 1 : fib(n - 1) + fib(n - 2)\n\nThis is a very bad Fibonacci implementation. You will get the wrong answer for n=8.\n\nI don't know much about python, but it looks like the fib(8) call is using a while loop, and the n == 1 condition is inside the loop. It looks like it is checking n == 1 before it calls fib(8).\n\nThe n == 1 condition is a Boolean, so it should be evaluated before the loop, not inside it.\n\nI know nothing about Python, but I'd be surprised if it didn't have some form of tail call optimization.\n\nIt does, but it's not enabled by default.\n\nAnd even when it is, it only applies to the last function call in a function.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return (n - 1) * fib(n-1) + fib(n-2)\nThere are better ways to do this.\n\nI would have gone with:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n == 1? 1 : fib(n - 1) + fib(n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(8)\n    21\n    >>> fib(1)\n    1\n    >>> fib(1)\n    1\n    >>> fib(1)\n    1\n    \"\"\"\n    return n - 1\n\nThis is a very naive implementation of fibonacci.  It is possible to create a much more efficient implementation.  For example, it is possible to find the nth fibonacci number by computing a sequence of fibonacci numbers and then finding the nth in the sequence.\n\nAnother way to implement fibonacci is to use the recurrence relation:\n\nf(n) = f(n-1) + f(n-2)\n\nand then to use a stack or queue to compute the sequence.\n\nSee also\nFibonacci sequence\n\nReferences</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n if n < 2 else fib(n-1) + fib(n-2)\nThat's a pretty bad fib function. If you want a good one, use the one in the standard library:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 2:\n       return 1\n    else:\n       return fib(n - 1) + fib(n - 2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __init__(self, n: int):\n    self.n = n\n    def __call__(self, n: int):\n    return self.n\n    def nth_fib(self, n: int):\n    return fib(self.n - 1) + fib(self.n - 2)\n\nThis is a Pythonic way of doing it.\n\nPython is very good at hiding the ugliness of some things.\n\nI think this is a little unfair. The Pythonic way is to use a generator expression.\n\nOr a list comprehension.\n\nI've seen this style used in other languages, but I'm not sure what the benefit is. Is it just to make the code look more like pseudocode?\n\nNo, it's to make it look like a recursive function call. It's the same reason that people use if/else statements instead of if/elif/else/endif in C.\n\nI don't think it's the same reason.\nThe if/else statement is a statement, not a function. It's a statement that looks like a function call,", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def nth_fib(n: int):\n    \"\"\"Return fib(n-1)+fib(n-2)\n    >>> nth_fib(10)\n    55\n    >>> nth_fib(1)\n    2\n    >>> nth_fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def nth_fib(n: int):\n    \"\"\"Return fib(n-1)+fib(n-2)\n    >>> nth_fib(10)\n    55\n    >>> nth_fib(1)\n    2\n    >>> nth_fib(8)\n    21", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return (n - 1) % 2\n\nHere is another implementation of fibonacci using recursion:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 1:\n        return 0\n    return fib(n-1) + fib(n-2)\nThis is the same as:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return fib(n-1) + fib(n-2)\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    return fib2(n-1) + fib2(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n       return 0\n    return fib(n-1) + fib(n-2)\n\nThis is a classic example of a code smell.  This is a very common pattern in code that is hard to maintain.  In this case, the code is using a global variable to store the value of fib(n-1) and fib(n-2).  If the value of n is changed, the code will fail.  This is a bad idea.  The code is also hard to read and understand.  It is not immediately obvious what the value of fib(n) is going to be.  This is because the value of fib(n-1) and fib(n-2) are not immediately obvious.  The code also has no error checking.  If there is a typo", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\nI'm curious, why do you define fib(1) and fib(8) in the same way?\n\nThe first line is a definition of a function, the second line is a call to that function.\n\nI understand that, but why do you define a function that only takes one argument and returns the first n-th Fibonacci number?\n\nIt's just a bad example. The author has probably just copy pasted it from the docs.\n\nI'm a bit confused as to why this is a \"bad example\".\nThe way I see it, the author has defined a function that takes one argument and returns the first n-th Fibonacci number.\n\nI think the confusion comes from the fact that the author has defined the function twice.\n\nYes, I understand that, but I don't see how that makes", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __init__(self):\n       self.n = 0\n       self.f = 0\n       self.i = 1\n       self.fib = []\n       self.fib_len = 0\n\n    def fib(self, n):\n       if n == 0:\n          return self.f\n       if n == 1:\n          return self.fib_len\n       else:\n          return fib(n-1) + fib(n-2)\n       if n == 0:\n          return self.f\n       return self.fib", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1 if n < 2 else fib(n-1) + fib(n-2)\nYou could just use the built-in `fib` function.\n\nI prefer to write the fibonacci function as:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def __call__(self, n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 2:\n       return 1\n    else:\n       return fib(n-1) + fib(n-2)\n    return 0\n\nCan you spot the bug?\n\nIt's a pretty good bug. It's subtle, but it's not too subtle. I think it's a great example of how a bug can be very difficult to spot and even harder to fix.\n\nTo understand why this bug is so difficult to spot, it's important to understand a few things about Python. The first thing to understand is that Python is a dynamically typed language. What this means is that Python is not a strongly typed language. It doesn't do static type checking. It doesn't say \"Hey, you're trying to add two integers together, but integers are supposed to be whole numbers,", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n if n < 2 else n+fib(n-1)\nI'm not sure I like this.\n\nI think the problem with this code is that it's just a bit too clever. I don't think it's a good idea to use a recursive function to compute a simple function.\n\nThat's not what makes it bad.\n\nWhat makes it bad is that it's a one-liner.\n\nI think the idea is that the one-liner is the first step in a larger process. You can't expect a programmer to write the entire program in one line.\n\nI'm not sure I follow. Why would you write the entire program in one line?\n\nI think the idea is that this is the first step in a larger program.\n\nThis is a nice one-liner, but I'm a bit surprised that", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1\n    def fibonacci(n: int):\n    \"\"\"Return fibonacci number with n as the first number.\n    >>> fibonacci(10)\n    55\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(8)\n    21\n    \"\"\"\n    return fib(n-1) + fib(n-2)\n    def fibonacci_prime(n: int):\n    \"\"\"Return fibonacci number with n as the first prime number.\n    >>> fibonacci_prime(10)\n    13\n    >>> fibonacci_prime(1)\n    1\n    >>> fibonacci_prime(8)\n    13\n    \"\"\"\n    return fib(n-1) + fib(n-2)\n    def fibonacci_prime_prime(n: int):\n    \"\"\"Return fibonacci number with n as the first prime number prime number.", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n\nThat's not the fibonacci sequence. That's a function that returns the fibonacci sequence.\n\nThe author of the article has a good point. A lot of people think that you can write \"def fib(n: int):\" and it will magically return the n-th fibonacci number.\n\nI think the author is also the author of the original post, so I think the point was to show how simple it is to implement a fibonacci function.\n\nI know. I was just saying that the article is a good one.\n\nI don't see how this is a problem. I've never met anyone who thinks that a function definition is the same as the function itself.\n\nI do, but then again, I'm not a professional programmer. I also sometimes don't bother to declare variables before I use them", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(n)\n    55\n    >>> fib(n-1)\n    21\n    \"\"\"\n    return 1 if n == 0 else fib(n-1) + fib(n-2)\n\nI find this one interesting:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    else:\n        raise RuntimeError(\"Fibonacci number not defined for negative values.\")\n\nThis is not the Fibonacci sequence, it's the Fibonacci _number_. The sequence is 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, etc.\n\nI am curious about the implementation. How does it handle negative numbers?\n\nI believe it just returns 1.\n\nIt does not. It raises an exception if n is negative.\n\nI'm not sure what to make of this. Is it a joke?\n\nNo. It's a very useful function to have in your arsenal.\n\nI was referring to the code quality. I'm not a python programmer, but I can tell it's not the way I'd write it.\n\nI'm a Python programmer and I can't tell what is wrong with the code.\n\nIt's not terrible, but it could", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return 1\n    if n == 0:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\nI can't figure out why this is funny.\nI'm not a Python programmer, but I do know that `fib(10)` is not the\nn-th Fibonacci number.\n\nThis is not a Python program.\n\nThe humor in this is that the Fibonacci sequence is a recursive sequence.\n\nI'm still not getting it. What does this have to do with recursion?\n\nIt's a recursive implementation of the fibonacci sequence.\n\nI don't see how it's recursive. It's a loop.\n\nIt's not a loop.\n\nYou are correct, it's not a loop. It's a recursive function.\n\nIt's a recursive definition of the fibonacci sequence.\n\nI think that's what he said.\n\nIt's a recursive definition of the fibonacci sequence.\n\nIt's a recursive definition of the fibonacci sequence.\n\nIt's a recursive", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return fib(n-1) + fib(n-2)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\nThe second definition is not better than the first. It's worse.\n\nThe first one is just a hack that is a little shorter.\n\nWhat's wrong with it?\n\nIt doesn't handle the case where n is zero.\n\nIt does.\n\nIf n is zero, the function returns 1.\n\nThe author should learn about higher-order functions.\n\nThe author is aware of higher-order functions.\nThe author is not aware of how to use them in Python.\n\nWhat's wrong with them?\n\nI don't know Python, but I suspect they're not as easy to use as in Haskell.\n\nThey are not.\n\nI think the author is wrong. It's not that Python doesn't have enough types, it's that it has too many.\n\nCan you give an example of a type that Python has that you think is unnecessary", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    if n == 0:\n        return 0\n    return fib(n-1)+fib(n-2)\nThis is a bit of an aside, but I'm always a little amused when I see a fibonacci implementation that doesn't use recursion. It's not really a performance issue, but it's not a trivial algorithm, either.\n\nThis is the only fibonacci implementation I've ever seen that doesn't use recursion.\n\nThis is the only one I've seen that _does_ use recursion, and I've seen quite a few.\n\nI think it depends on the language, in python it's pretty common to see it implemented as a function.\n\nIn Python, it's implemented as a function because it's a function. I've never seen a recursive implementation of fib in Python.\n\nIt's a common mistake to use a recursive algorithm when the problem is easy enough to solve without recursion. A recursive algorithm is harder to write, harder to understand, and harder to debug.\n\nI don't think it's a mistake. It's just a different way of solving a problem.\n\nIf you have a recursive", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 0 if n < 2 else fib(n-1)+fib(n-2)\nI guess the one that you have is probably a bit more readable, but I prefer the one with the explicit return statement. It's easier to tell at a glance what it does.\n\nI agree, the explicit return is more readable.\n\nI'd rather have a function that returns a function that returns the fibonacci sequence.\n\nYou have the wrong idea of what a function is. A function is not a function that returns a function. A function is a function that takes some arguments and returns a value.\n\nA function is a set of statements that can be called with some arguments.\n\nI'd rather have a function that returns a function that returns the fibonacci sequence.\n\nYou have the wrong idea of what a function is. A function", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib_int(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_int(10)\n    55\n    >>> fib_int(1)\n    1\n    >>> fib_int(8)\n    21\n    \"\"\"\n    return fib(n - 1) + fib(n - 2)\n    + fib(n - 3)\n    + fib(n - 4)\n    + fib(n - 5)\n    + fib(n - 6)\n    + fib(n - 7)\n    + fib(n - 8)\n    + fib(n - 9)\n    + fib(n - 10)\n    + fib(n - 11)\n    + fib(n - 12)\n    + fib(n - 13)\n    + fib(n - 14)\n    + fib(n - 15)\n    + fib(n - 16)", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return n-1\nI don't know why, but I just love this code.\n\nIt's a bit of an anti-pattern to use a function name with a built-in\nname, and a built-in name with a function name. It's more readable\n(and more Pythonic) to just use `fib(n)` and `fib(1)`.\n\nNot really. That's just a convention.\n\n\"It's a convention\" is not a very good defense of something.\n\nIt's a convention that is followed in Python, but not in a lot of other languages.\n\nI wonder if the author of this article has ever used Haskell. It's a language that's quite similar to Python, and I've found it to be very good at expressing functional programming idioms.\n\nI'm working on a", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    return 1 if n == 0 else n * fib(n-1) + fib(n-2)\nI think this is what you're looking for.\n\nI'm not sure why this was downvoted. This is exactly what the OP asked for.</s>", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    1\n    >>> fib(4)\n    1\n    >>> fib(5)\n    1\n    >>> fib(6)\n    1\n    >>> fib(7)\n    1\n    >>> fib(8)\n    2\n    \"\"\"\n    return n if n <= 1 else fib(n-1)+fib(n-2)\n\nThe \"return n if n <= 1 else fib(n-1)+fib(n-2)\" code is redundant. You can just write \"return n if n <= 1 else 1\".\n\nThat is not quite right. If n is zero, then you want to return 1, but if n is not zero, then you want to return n-1.\n\nSure, but the same applies for n == 1", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return 1\n    def fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\nI like this.\n\nI feel like this is the right answer.\n\nYes. The only problem is that", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    return n**(n-1)\nThis is the one I use. It's not as pretty as the other ones in this thread, but I find it very readable.\n\nI use this one:", "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\" \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55"]]