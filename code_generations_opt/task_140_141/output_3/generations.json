[["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    for char in text:\n        if char not in '\\a\\b\\f\\n' and not char in'':\n            return char\n        if char in'':\n             return '-' + char\n        text += char\n    return text\n\nI don't get it. I want to find spaces and replace them with underscores, but I don't see how this is helping.\n\nYou haven't seen the original code. The spaces are replaced with _, but two consecutive spaces are removed.\n\nCan you explain that to me?\n\nTwo spaces in a row are removed. They will be replaced with a _.\n\nI'm sorry, I'm not getting this.\n\nThe code above replaces all spaces with _. If there are two consecutive spaces, it removes them and replaces with -\n\nI understand that. What I don't understand is how to implement this in Python.\n\nThere is a space function:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    def _strip_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores.\n    Remove leading and trailing underscores, but otherwise \n    preserve the input.\n    \"\"\"\n    text = re.sub(r'\\s+', '_')\n    return text.split()\n\nI like it, but I'd do it slightly differently:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThere's no reason to make the format output pretty, just use the built in formatters for your language.", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    lines = text.split()\n    for line in lines:\n        if len(line) == 3 and not line[-1] =='':", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThat's a perfect example of the worst \"bashism\" ever.\nFixing something that is not broken.\n\nNot to mention that it could be done in fewer lines of code with other languages\n\nI wrote something similar for Python (  ) -- mainly because my editor makes it easy to indent and leave spaces, so I would type a couple lines of python, indent, and then realize that I had forgotten to fill in the spaces!\n\nMy solution is to use a whitespace aware editor, such as vim. I'm sure most editors support this, but I don't know of any editors that don't.\n\nThe problem with this solution is that I like vim, but I'm a noob. I can do a decent amount of stuff, but it's all super slow.\n\nI'm not sure that I understand the problem. Are you saying that you are a noob with Vim? If so, why not just use it like it's a normal text editor for a while until you know how to use it?\nIf you are saying that you're not a noob with vim and can use it really well, but it's still slow, I'd like to see some specifics on what exactly you do to", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nReferences\n\nExternal links\nhttp://www.python.org/dev/peps/pep-3148/</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is how we were doing it. Although I am wondering what is the point of using _ to separate the words if you are going to replace them with spaces?\n\nWe were doing it because spaces are a character, and we did not want to split them from the text and then have to join them.\n\nAh ok, I can see your point.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nI'm guessing that's an old copy/paste, but it would be best if you either 1) posted the code, or 2) wrote it from scratch.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is from a real codebase. It's a minor annoyance to fix, but what's worse is that it's a potential security risk.\n\nThanks for the info - what's the vulnerability?\n\nWell, for example, if you have a bunch of code like this:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    print(\"Fixing...\")\n    for char in text:\n        print(\"%c \" % char)\n        if char =='':\n             text = text[:2:]\n              else:\n               text = text[-1:]\n                text = text[-1:] + text[-2:]\n                text = text.strip()\n                print(\"\\n %s\" % text)\n\nLooks like the author is trying to introduce Pythonic solutions to a problem that doesn't really need it.\n\nYes. The two-space indentation is one of the features of Python. The author is using Python to introduce a non-Pythonic solution, for what seems like a very trivial problem.\n\nThat's not entirely true.", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # replace all spaces with underscores\n    text = text.replace(\" \",\"_\")\n    if len(text) == 2:\n        text = text.replace(\" \", \"-\")\n    return text\nThis code is now fixed.\n\n\tRichard B Sanders\n\t06/05/2001 08:03 AM\n\n\t\t To: Tana Jones/HOU/ECT@ECT\n\t\t cc:\n\t\t Subject: Re: NDA\n\nYou did a great job.  Thanks.\n\n\tTana Jones\n\t06/05/2001 07:55 AM\n\n\t\t To: Richard B Sanders/HOU/ECT@ECT\n\t\t cc:\n\t\t Subject: Re: NDA\n\nHe called back and asked that I send him a marked version of the NDA\nmarked to show which sections he needs to initial.  He said he's faxing\nit right back to me.  I'll let you know.\n\nFrom: Tana Jones on 05/31/2001 09:58 AM\nTo: Richard B Sanders/HOU/ECT@ECT\ncc:\nSubject: NDA\n\nDo you", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n             # get the string to work on\n            string_to_fix = text\n            # check if we need to do anything at all\n            if string_to_fix.count(' ') == 1:\n                 return\n             else:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    for c in text:\n        if c =='':\n           return c\n        if c == '\\t' :\n            return c\n        if c =='' and c =='':\n            return c\n        if c == '-':\n            return c\n\nI think you may be missing the point. The author is simply showing that the way that people are taught to write code is not always the best way to do it.\n\nI'd say \"it's bad form to start a sentence with a number\" is a rule that only applies to English.\n\nI disagree. If you're writing code, you should be writing it in a clear manner and following some basic rules. Starting a sentence with a number is not \"some basic rule\" in any language.\nI don't know if you're aware of this, but in the English language, a number, like \"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    if text:\n        for i in range(1, len(text)-2):\n           spaces = [u''for u in text.split() if u[0] =='']\n           spaces.append(u' ')\n           spaces_with_n_spaces = set(spaces)\n           spaces_with_n_spaces.add(u' - ')\n           spaces = [u'' for u in spaces_with_n_spaces]\n           spaces = spaces.replace(' ','_')\n    return text</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    return''.join(map(chr, spaces, text))\n\nReferences</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    s = ''\n\n    while True:\n        if s == \"\":\n           return\n        s ='' * s + \" \"\n         if len(s) > 2:\n             s = fix_spaces(s)\n\nThere you go.\n\nIt's not that simple. I think you'll find that fixing spaces in text is surprisingly difficult.\n\nOn that same note, text-transformations is a great module with lots of fun text manipulation tools.\n\nI'm also a fan of the \"what the fuck\" library (WTFLib). It's really good for testing your regex abilities.\n\nYou're right, I do want to learn regex.\n\nthe perl6 regex docs are very good and easy to read.\nI also have a soft spot for the perl6 regex docs because i was one of the first authors of them.\n\nThere's also regex101, which can be helpful to look at.\n\nI used to use the perl6 regex docs a", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    word = text.lower()\n    # split the string into words\n    for word in word_list:\n        # split the word into lowercase letters\n        lower = word.lower()\n        spaces = lower.split(\" \")\n        # if the string has more than 2 consecutive spaces,", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    def fix_spaces_for_commas(text):\n    \"\"\"\n    Given a string text,  replace all spaces with - in \n    the string that contain commas, and if  a string has", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nI prefer a regex for this. It's more readable, and you can actually use it for other things.\n\nAgreed. I'd also take a shot at making the output more readable and consistent, but that's just my taste.\n\nIt's neat, but I'm not sure that it's worth the time spent writing code to do this. I'd rather just fix the spaces manually.\n\nThis would be great if you are taking the output of a script/program and want to concatenate strings without having to manually fix the spaces.\n\nIt's an interesting idea, but this is a very poor implementation of it. There are a number of issues:\n\\- it's much more readable to write:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nI'd replace the +- with spaces and see what the output looks like.\n\nThanks, but I'm not quite sure what you mean. Could you elaborate?\n\nI was trying to test your code. I think it should read", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nSee also: \n\nAh yes. I think I've seen this one before. I don't think it should be too hard to implement, but I'm not sure how useful it is.\n\nIt would be useful for writing a parser, in which case the only thing that matters is the result.\n\nIt's kind of interesting. I just tried it on a few things and it didn't really work at all on my inputs.\n\"Howdy\" = \"Howdy\"\n\"Howdy.\" = \"Howdy\"\n\"Howdy, world!\" = \"Howdy, world!\"\n\"Howdy, world!\" = \"Howdy, world!\"\n\"Howdy, world! Howdy, world!\" = \"Howdy, world! Howdy, world!\"\n\nIt works on:\nHowdy, world! Howdy, world!\nHowdy, world! Howdy, world!\nIt does not work on:\nHowdy, world! Howdy, world!\nHowdy, world! Howdy, world!\n\nFrom the code, the author probably doesn't want to get a string literal from spaces.\n\nYes, I'm guessing that's the case too, but", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # An improvement of `fix_spaces_2`:\n      # It handles non-ASCII characters.\n      #\n      #", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    return lambda s:\n         s = text.split(',').reverse()\n         return s.strip().replace(' ','-')\nThat's a nice and easy way to do it. I would just do `return lambda s: s = text.split(',').join('').reverse()` though.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n\"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    return text.split(' ').filter(x)\nBeautiful.  I'm going to learn Python just so I can use this.  I've been\nlooking for something like this for a long time.\n\nWhy did you quote the entire comment?\n\nWhy did you quote the entire comment?\n\nMy bad. I thought I'd quoted the line I was replying to. I see now that I\nhadn't.\n\nHow about:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nfrom collections import defaultdict", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    # First, we need to make sure that spaces are not in quotes.\n    if not text.startswith(\"\"\"\") and text.endswith(\"\"\"\") and text[-2:] == \" \":\n         return\n    # Make sure that no space is between 2 consecutive spaces.\n    if text[-1:].find(x) == x and text[-1:].find(x) == x:\n         return\n    # If we found two consecutive spaces, replace them with -.\n    if len(text) > 2:\n         text[1:] = \"-.\"\n    return</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nA while back I wrote a quick and dirty version of this in python. I wish I had saved it.\n\nI remember someone posted a link to a gist of a similar program on HN and I've been using it for years:\nhttp://gist.github.com/jrohde/5395360\n\nThis is useful.\nBut I don't understand the need for the underscore. Just use a regular space. Then you'll know if it's a space or not from the position in the string.\nIf it's a space you're after, use a regular space. If you're replacing spaces you could just strip them out.\n\nIt was written as a joke, you must admit.\n\nI've used that before, it's a great way to get the gist of a given string.\n\nFYI it's not real.\n\n>Given a string text, replace all spaces in it with underscores\nThat should be spaces.\n\nJust use the popular online tool, \"Replace a space with a blank space\"\n\nThis actually doesn't work for me in Chrome. Firefox has no problem with it, though.\n\nI think spaces are too good to be replaced by", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    text = text.replace(\" \",\"_\")\n    text = text.replace(\", \",\"-\")\n    text = text.replace(\" \",\"-\",\"\")\n    return text\n\nYou could also do it in one pass with re.sub()\nre.sub(' \" ',\"_\")\nre.sub(' \" ',\"-\")\nre.sub(' \" ',\"-\",\"')\nreturn text\n\nThere's a much better way to do this, but I think the parent is just demonstrating a quick way to do it.\nThe better way to do it would be using regular expressions, and it would be as simple as:\nfix_spaces(s) = '\"' * s.count(' ')\nThis will also allow for spaces to be replaced with other characters like '^' or '_'.\n\nWhy not just use Python?\n>>> s = \"Example\" >>> s.replace(\" \",\"_\") >>> s \"Example_\" >>> s.replace(\" \",\"-\") >>> s \"Example-\" >>> s.replace(\" \",\"-\",\"\") >>> s \"Example-\",\" >>> s = \"Example\" >>> s.replace", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    text = text.replace(\",\", \"_\")\n    # Example 3\n    if text[:3] == \" \":\n        text = text[2:]\n    # Example -3\n    return text", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    \"\"\"\n    for s in text:\n        # Replace the first space\n        if len(s) > 1:\n            s = s[1:]\n             # Replace all other spaces\n             fix_spaces(s[-1:])\n             return s\n\nSo we have a string that's easy to read, and we have a function to clean it up for us. The code is short, simple, and it works.\n\nBut we can do better. First, we can make the code shorter. The first part of the function is pretty useless, since it works the same whether the string is one word or twenty. It might as well be one line:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    def __getitem__(self, i):\n        if (i == 0):\n            return text[0:i]\n        elif (i == 1):\n            return text[0:i-1]\n        else:\n            return text[i:]\n\n    def replace(self, text):\n        text = \" \"\n        for word in text:\n            text = word.strip()\n            text += word.replace(self.__getitem__, word)\n\n        return text\n\n    def fix_spaces(self, text):\n        return replace(self.__getitem__, \" \")\n        def compress(self, text):", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    d = re.split(r\"\\\\s+\", text)\n    t = d.group(1)\n    for t in t:\n        for c in t.split():\n           if c.isdigit():\n               t += \"-\" * 2\n               if c =='':\n                 t += c\n                t += \"-\"\n\n    return t\n\nNice.\n\n\"The quick brown fox jumps over the lazy dog\"\n== \"The quick brown fox jumps over the lazy dog\"\n\"The quick brown fox jumps over the lazy dog.\"\n== \"The quick brown fox jumps over the lazy dog.\"\n\"The quick brown fox jumps over the lazy dog!\"\n== \"The quick brown fox jumps over the lazy dog!\"\n\"The quick brown fox jumps over the lazy dog!\"\n== \"The", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    def fix_spaces_word(word):\n    \"\"\"\n    Given a string word, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \n    fix_spaces_word(\"Example\") == \"Example\"\n    fix_spaces_word(\"Example 1\") == \"Example_1\"\n    fix_spaces_word(\" Example 2\") == \"_Example_2\"\n    fix_spaces_word(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    if word.startswith(' '):\n        return word\n    return fix_spaces(word)\n\nThe fix_spaces() function is a minimal example of a string formatting function.\n\nSee also\nString formatting in Python\n\nReferences</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # for spaces that are not at the end of a string, remove them first\n    for n in range(1, len(text)-1):\n        text = text[n:]\n        return text\n> \"Example 1\" == \"Example_1\"\n> \" Example 2\" == \"_Example_2\"\n> \" Example 3\" == \"_Example-3\"\nWorks just fine.\n>>> # However, it always seems to find a space even when there is none, and it can't seem to find a space when there is one.\n>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThe author is clearly either a Python programmer or someone who understands Python well enough to have picked it as a target language.\n\nThis is pretty much what I was going to say. It's a pretty good example of code that looks right but is actually wrong.\n\nOn the other hand, I don't think you'd write a Python program like this.\n\nI've had to in order to make the generated documentation for it look right.\n\n_' Borrowing the techniques of other programming languages is a good way to write Python. What I mean is that I don\u2019t think we should shy away from using idioms from other languages to improve the readability of our Python code.'_\nAnd then he does this:\n\"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n          def fix_spaces(text, max_spaces=2):\n           \"\"\"\n            Given a string text, replace all spaces in it with underscores,\n             and if a string has more than 2 consecutive spaces,\n              then replace all consecutive spaces with -", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is a classic case of writing the code for the input you think you will get, not the input you are actually getting. The problem with this approach is that you're not really testing what you think you are, you're testing something that you _hope_ you will get. This is likely to result in brittle code.\nI'd recommend coming up with a test that demonstrates the _actual_ problem you're trying to solve, and then write a test for that. This could be as simple as a single test case, or as complex as a bunch of test cases, each for a different case.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    i = 0\n    while i < len(text):\n         text = text[i:i+2]\n          i += 2\n          if text[i] > 2:\n              text = text[i:i+2]", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nBut that is a good point. I hadn't thought of that. My use-case for this was to convert a string to a space delimited key-value dictionary.\n\nThis is so cool. Thanks!</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    k=len(text)\n    while k>0:\n        if k==1:\n                 return text\n        if len(text)%2==0:\n                  return text[k:k+1]\n        if k==2:\n                   return \"- \"*text[k:k+2]\n        k-=1\n    return text\nThank you, came here looking for a fix to this.\n\nIf you need this often, you can use _ instead of _- in the last line.\n\nYou can also just use the find/replace tool in most text editors to do this.\n\nA much more powerful way is to use Perl's \"s/foo/bar/g\" to make a regexp for finding consecutive spaces and then using the regexp to match and replace the spaces.", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space, this is a space", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # This takes two parameters.\n    def fix_spaces(text, skip_chars=2):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example 3\") == \"_Example-3\"\n    \"\"\"\n    # It's easier to just get the spaces from the string than to try to\n    # find each space in the string.\n    for space in text:\n       # Find each space in the string.\n       # Note that we need to specify a skip_chars parameter, as we need\n       # to skip over any non-space characters in", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    if len(text) > 2:\n        text = text.replace(\",\", '_')\n        text = text.replace(' ','-'*2 for _ in range(2))\n\nThis is a bit naive. For example:\nfix_spaces(\"Example 1\") == \"Example 1\"\nfix_spaces(\"Example 1.5\") == \"Example 1.5\"\nfix_spaces(\"Example 1.5 1.5\") == \"Example 1.5 1.5\"\nFixing spaces would be better done by using the following substitution table:\n>>>  \"Example 1\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    if len(text) > 3:\n        text = text.lower()\n        text = \" \".join(chr(ord(chr(a))) for a in text)\n    return text\n\nThe need for a lower() step is probably because you are overloading 'len'.\n\nI would tend to agree that he's overloading 'len'. I would also argue that this would be an instance of premature optimization.\n\nI find the argument that this is premature optimization a little weird. It's not like the code is crazy unreadable or anything. It's a few lines, it's not like he's done something crazy to make the code a mess.\n\nSo I guess if something is bad, it's bad, but if it's good, it's still bad because it's premature?\n\nI think there is a difference between something being \"bad\" and being \"premature\".\nIt can be good code that has been written early, but it can also be bad code that is just \"premature\".\nI also think it depends on the amount of code you have written. The more code you have written,", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # Replace consecutive spaces with -\n    for i in range(2,len(text)-1):\n         # replace consecutive spaces\n           text[i:i+1] = -\n    return text\nThat's the problem with string formatting. The only way to format a string is to know in advance everything that's going to happen to it.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    if len(text) > 2:\n        spaces = ''\n        for i in range(len(text)):\n           if spaces == '':\n              spaces = ''\n             else:\n                spaces = spaces +''\n                text = \" \".join(spaces)\n                spaces = spaces + '_'\n\nFor all those who want the above in a function that does not require a named argument (and so is less likely to be used in an erroneous manner):", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    for i in range(len(text)):\n        if i == 2:\n           # replace consecutive spaces with -\n            text = text.replace(' ','-')\n    else:\n            # replace all spaces with _\n            text = text.replace(',','')\n    return text\nThis is just as easily written in Python:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nI would prefer a more direct approach to this problem.  For example:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    for s in text:\n          for _ in range(2, s):\n                if s not in (' '):\n                     s = s.replace(' ','_')\n                        else:\n                          s = s.replace(' ','-')\n                             if s not in (' '):\n                              s = s.replace(' ','-')\n                               break", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nFixed.\nThanks for fixing that.\n\nwhat does this have to do with python?\n\nIt's an example of Python code.\n\ni think it would have been better to pick a pythonic way of doing this, rather than just doing a regex.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    return''.join(re.sub('','-',text) for text in text.split())\n\nThis is the general version that works for any number of spaces.\n\nIt's simple and efficient, but it has one major drawback: it will eat any\ntrailing spaces.\n\nHere's an improvement, that takes the same amount of code, but is a bit\nslower:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    # Useful as a replacement for the '=' operator.\n    def __str__(self):\n       return self.__class__.__name__\n\nfor line in input_file:\n    # This is the part which actually does the work.\n    # The `while True` loop is needed so that the scanner will\n    # not continue to process the input file while the\n    # search is in progress.\n    while True:\n       line = input_file.readline()\n       for word in line.split(':'):\n           if word[0] == '-' and word[1] =='':\n                word = word[:2]\n               self.__class__.__name__ = word\n   \n    # Return a clean file with all spaces replaced by -.\n    print 'original:', original", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    \"\"\"\n    text = re.sub('_','', text)\n    return [re.sub(' ','-', text) for text in text]\n\n    \"\"\"\n    def wc(text, separator='\\n'):\n    \"\"\"\n    Return the word count of a text, when the separator is newline.\n    \"\"\"\n    word_count = 0\n    total_words = 0\n    for word in text:\n        word_count += 1\n        total_words += word.count()\n    return word_count / total_words", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    # A list of characters\n    chars = []\n\n    # A counter that keeps track of the number of consecutive spaces\n    i = 0\n\n    # Iterate over the string text and build a list of consecutive spaces\n\n    for i in range(len(text)):\n\n         char = text[i]\n\n         if char =='':\n\n                 break\n\n                      chars.append(char)\n\n    # Check whether the current string has more than 2 consecutive spaces\n\n    if len(chars) > 2:\n\n          i = i + 1\n\n          # Replace all consecutive spaces with -\n\n              for c in chars:\n\n                     chars[c].replace(chars", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nx = \"Example\";\nx = fix_spaces(x);", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n        def __repr__(self):\n         return \"(\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # Fix all spaces and trailing spaces\n    for space in range(0,len(text)-2):\n        text = text[:-space]\n        if text[:-space] =='':\n           text = text[:-space:]\n           text = text.replace(' ','-')\n           text = text.replace(' ','_')\n\nWow, the difference between the Python and Ruby implementations is remarkable.\n\nIn Python, you can use the String class, which is quite nice. In Ruby, you need to use a regexp. I'm not sure which is better. I think Python's implementation is easier to read, but I would never use it. It just doesn't scale.\n\nWhat makes you think that the Ruby implementation doesn't scale?\n\nIn general, regexp performance in Ruby is horrid. The regexp used to do the string matching is much more complex than the one used in Python.\n\nI would expect that Python's implementation would be much slower", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n        # This space-fixing algorithm seems to work well.\n        return ''.join(re.sub(' ','_',text))\n\nHey, that's my line! I've used it in a few of my programs, I thought it was original.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    return \"\"\n\n    def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    return \"\"\"\n        \"\"\"\n\n    \"\"\"\n    def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nreturn lambda s: re.sub(s, r\"(\\s\\+)([^\\s]*)\", \"\")\n\nThe OP already has a better solution in his/her example.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    from string import space\n    for s in text:\n         if s[0] =='':\n             s = s[1:]\n             space(s[1:])\n             space(s[2:])\n              if s[3] =='':\n                     space(s[3:])\n                     space(s[4:])\n                     space(s[5:])\n                      if s[6] =='':", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    text = text.replace(\"\\t\",\"_\")\n    while text.find(\" \")!= -1 and\n        text.find(\" \") == 2:\n        text = text.replace(text.find(\" \"), \"-\")\n    return text\n\nExample using fixed spaces:\n>>> print(fix_spaces(\"The quick brown fox jumps over the lazy dog\"))\n\"The quick_brown_fox_jumps_over_the_lazy_dog\"\n>>> print(fix_spaces(\"Hello World\"))\n\"Hello_World\"\n\nFix spaces is a Python program that provides an easy way to convert a\nstring containing spaces to one containing only underscores.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nI prefer", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is very cool. You should add an explanation to the README to make it easier to understand what is going on.\n\nIt's a pretty simple regex. I thought I explained it pretty well. I'll try to expand on it a little bit in the README.\n\nYes, I'm sure it is simple. I just meant that it might be worth adding a one or two sentence summary in the README to make it clearer what the function does.\n\nI see what you mean. I'll give that a try and see how it looks.\n\nI've used  to do this sort of thing. It looks like this is a little faster, but probably only matters in bigger files.\n\nI'm using this library, for a few lines.\n\nReminds me of \n\nVery similar. I actually took this code from his article.\n\nThe python one:\n\nVery similar to that one. I actually took this code from his article.\n\nIn bash we have \"trim\", \"find\" and \"grep\" for this.\n\nThis is a lot more powerful than trim, find, and grep.\n\nWhat's the difference between this and sed's's", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nreturn replace(text, \" \", \"_\")\n\nI just have a \"replace\" function that replaces all spaces with a -.\nThat's the bare minimum.\n\nDoes it replace them in an order that's consistent with how you entered them?\n\nAnd does it handle other characters besides spaces?\n\nI don't need it to, but I've never seen a \"replace\" function that did just spaces. It always handles other characters.\n\nFor those who don't like fixing spaces:\nI use ctrl + k (repeat ctrl+k to add more chars to be removed) when I'm doing an editor for a big document or writing in a rich text editor. This works for any number of spaces.\n\nI did the same thing for a while but ended up switching to using vim with the smart_replace plugin. It's a lot more powerful, faster, and less keystrokes (you don't have to use ctrl+k). I highly recommend it.\n\nI'm a fan of the hyper key. I put it right next to my right thumb so I can hit it with my thumb. It's a little awkward at first, but it's one of those things you just have", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    \"\"\"\n    text = text.replace(\" \",\"_\")\n    for i in range(2,len(text)-1):\n        text = text.replace(text.find(' '),'-')\n        if text.find(' ') == 3:\n             text = text.replace(text.find(' '),'-')\n             text = text.replace(text.find(' '),'-')\n    return text\n\n>>> fix_spaces(\"Example\") == \"Example\"\nTrue\n>>> fix_spaces(\"Example 1\") == \"Example_1\"\nTrue\n>>> fix_spaces(\" Example 2\") == \"_Example_2\"\nTrue\n>>> fix_spaces(\" Example 3\") == \"_Example-3\"\nFalse\n>>> fix_spaces(\"Example\") == \"Example 1\"\nTrue\n>>> fix_spaces(\"Example 1\") == \"Example 2\"\nTrue\n>>> fix_spaces(\"Example 2\") == \"Example 3\"\nFalse", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nUsage:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    if len(text) == 2:\n        text = text[0:-1]\n\n    else:\n        text = text[1:-1]", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    fix_spaces = lambda s:\n    \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    return string.replace(' ','_'+str(len(text))+'_')</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    \"\"\"\n    if len(text) > 2:\n        return '_'\n    elif len(text) == 1:\n        return '- '\n    elif len(text) == 2:\n        return '-'\n    else:\n        return text", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    return text.replace(\" \",\"_\")\nI don't think it's a very good method name for what it does.\n\nA similar function in the OpenOffice.org toolkit is called \"strip\".\n\nWhen I was a CS undergraduate, I used to make a game out of trying to find bad method names in libraries. It's surprisingly difficult; for instance, you'd think that a method named \"rotate\" would have something to do with rotating things, but in fact it was a small script that I wrote to rotate one of my monitors by 90 degrees.\n\nThere's a story that Edsger Dijkstra's thesis had a footnote stating that the whole thing was a joke.\nThe reason: In the computer science department of the university in which he was studying, they had a tradition of naming functions with the prefix \"frob\". In particular, a very common function for counting the number of characters in a string was named \"countfrob\".\nThe author of this piece of code, as a joke, called it \"countfrob\" also. When he got his degree, he sent the univerity a paper that had only one footnote: \"This paper is a joke. Proof:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is a really common operation when working with databases. I often need to extract the text from a field and transform it in order to be able to use it in an SQL query. It has a lot of applications outside of the database, too.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # - Print the string with new spacing\n    print(text)", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    result = []\n    for word in text:\n        if word in [' ', '_']:\n           result.append(word)\n            result[word].append(' ')\n         else:\n            result[word] ='- '\n    return result\nYou should probably add a check that the string you're trying to fix isn't the empty string.\n\nI'd probably have just used:\nfor word in text:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # return all instances of the above\n    return [str.findall(\" \\t\\n*\\t\") for str in text]\nWhat's the point of this? Why not just use csv.DictReader.insert?\n\nI can't speak for the author, but I can tell you why I would have written that.\ncsv.DictReader.insert would not work for me because I would have to handle the edge cases of \"1,2\" becoming \"1,2\" instead of \"1, \" and \"1, 2\". I could certainly write some code to do that, but it's much more straightforward to use a string replacement.\n\nThat makes sense. I think that this would be a better answer than \"it works for me\".\n\nWow. That's pretty cool. You could also use it for a kind of very basic regular expression.\n\nI can't tell if this is a serious question. I mean, yes, of course you could. It's an obvious solution and I'm not sure it really needs to be pointed out.\n\nIt's a serious question. I can see myself doing this sort of thing quite often in a CLI script where", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is correct. There is no space after the first underscore,\nbecause it is the first underscore in the string.\n\nYou can use a common technique of using a space to separate\nconsecutive underscores.", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    return text.replace(spaces, '_')\nIt's not a big deal, but it should be \"_\" instead of \"-\" for the single character \"-\"\n\nFixed. Thanks for the heads up.\n\nI like the idea. I've seen similar tools out there, but I've never used one. I like that it has a GUI that you can drag and drop stuff onto. However, I can't see a good use for this. Can someone suggest some cases where they'd like to use this?\n\nI am interested in using this to easily apply formatting to a large number of files (to save time). I have yet to try it, but from the description I think it would be a great tool for this purpose.\n\nI've been looking for something like this for a while. I always have to manually replace the spaces with - and that gets annoying.\n\ngreat tool. really nice.\n\nThanks!\n\nExcellent!\n\nThanks!\n\nBeautiful</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    \"\"\"replace_with_underscores(text)\n    \"\"\"\n    def replace_with_underscores(text):\n       return \"\\_\" + text\n   \n    return fix_spaces(text)\nthis is an example of a bad code. readability is more important than obfuscation.\n\nWell, I'm not so sure I'd call it bad.\nThe fix_spaces function is a one-line function. I don't think it's that bad to use that function directly in a one-liner.\nHowever, if this was the only example of the fix_spaces function then I'd say you were right.\n\nThe line is all right, the definition is a little less good, but it works.\n\nThere are some things that a computer can do better than a human.\nThere are also some things that a computer can do better than a computer.\n\nAnd there are some things that humans can do better than a computer.\n\nThe real solution is to use the \"Regexp Replace\" feature of the IDE.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n          return \"- \" + text\n\nI\u2019m sure you\u2019ll agree that the code above is very concise. It\u2019s also a solution to a problem that is useful, but I\u2019m not sure you could call it a great piece of software.\n\nThe problem\n\nImagine you\u2019re writing a game that you want to sell on the App Store. You need to be able to convert the user\u2019s input in a text field to a clickable button. To do this, you\u2019ll need to use the UIButton class.\n\nA UIButton has one property, text, which holds the text of the button. Because you\u2019ll be changing the text of the button, you\u2019ll need to be able to get the text from the button.\n\nimport UIKit\n\nfunc initButton(button: UIButton) {\n  button.text = \"Click me\"\n  button.isHidden = false\n}\n\nfunc initGame() {\n  let btn = UIButton(frame: CGRect(x: 0, y: 200, width: 100))\n  btn.isHidden =", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    spaces = []\n    for line in text:\n        if line:\n            if line[0] =='':\n                    spaces.append(line[1])\n               else:\n                      spaces.append(line[1:])\n                       if spaces.length == 2:\n                         spaces.append(' ')\n                        else:\n                         spaces.append(line[-1])\n    return spaces\n\nWhat you're", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    def replace(text, replace, insert_limit=2):\n    \"\"\"\n    Replace all spaces in text with _,\n    and insert a given character (the character '_' by default)\n    after then'th consecutive space (the default is 2).\n    \"\"\"\n    for i in range(insert_limit):\n       text = text[1:]\n       _ = text[1:]\n       replace = str(replace)\n       insert_char = '_'\n       insert_char += 1\n    return replace + _ + insert_char\n\nI've implemented this a few times, and it's a pretty small job, but it has saved me hours of work.\n\nCoffeeScript would make this even easier:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n         # a stripped-down version of the above\n        return''.join(re.sub(' ','-',str(x)) for x in text)\nThis is not really a \"stripped-down version\" of the above. It is just a different function that takes a different input and a different output.\n\nIt's a stripped-down version in the sense that it's just a single function, rather than an entire library.\nAlso, this version is able to handle spaces in more complicated ways than the original, such as replacing spaces that come between words with other spaces, or between words and punctuation.\n\nHere's a version that goes one step further. It doesn't just replace spaces with underscores, it replaces all punctuation with _ (underscore).", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is a very naive way of doing it, but it should be a good starting point to come up with a solution for your problem.\nNote that your spaces will not be \"precise\", because spaces will be converted to underscores and then to hyphens (if needed).\n\nI know that the actual code has to be more complicated, but this is a good start.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nIf you actually want to remove all spaces, you should use this:\n\n>>> s = \"Example\"\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>> s.replace(\" \",\"_\")\n>>>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    for word in text:\n         if word[0:2] == \" \":\n              return word\n               if word[0:2] == \" \":\n                    return word[3:]\n                   if word[0:2] == \" \":\n                       return word[3:]\n                    else:\n                      return word[3:]\n\nSee also\n Unabridged dictionary\n\nExternal links\n\n Unabridged dictionaries\n Thesaurus, Encyclopedia, Dictionaries, and Related Resources at LibraryThing.\n\nes:Diccionario abreviado</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nPython:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # If there is a space at the start of the string, then replace that\n    # space with a single underscore\n    if (text.startswith(' ')):\n        # Just remove the leading space\n    text = text.replace(' ',' ')\n    # If the string has more than two consecutive spaces, then\n    # replace all the consecutive spaces with a single -\n    if (len(text) > 2):\n        # Find all the consecutive spaces\n            for i in range(len(text)):\n                 text = text.replace(0,'-')\n                  text = text.replace(i,0)\n                  text = text.replace(i,1)\n                  text = text", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    def get_spaces(text):\n    \"\"\"\n    Given a string text, return a list of all the spaces in it, \n    with a given maximum number of consecutive spaces.\n    For example, if we are given text = \"Example\", then we \n    get a list ['','','','','','','','','','','','',  '','','','','','','','','','','','',  '','','','','','','','',  '','','','','','','',  '','','','','','','','','','','',  '','','','','','','','','','','','',  '','','','','','','','','','','','','',  '','','','','','',", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nExample 1\nExample_1\nExample 2\nExample-3\n\n(Line breaks have been inserted for readability)\n\nObviously, this is a contrived example, and in real life, you may want to handle other edge-cases that I didn't think of.\nI don't think you will have to write this yourself unless you have to handle special cases. Just stick to something like\nre.subst(\" \", \"_\", text)\nand you should be fine.\n\nthanks, i will try your suggestion</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nreturn fix_spaces(re.sub(' ', \" \"))\n\nFix spaces with \"-\" or \"_\"\n\nPythonic\n\n\"-\" (dash) is a single character in Python, and \"_\" (underscore) is a\nsequence of two characters.\n\nJavaScript does not have separate characters for \"-\" and \"_\", so the\nfix_spaces function takes a character and returns another character.\n\nRegexp\n\nThe Pythonic regexp,", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    \"\"\"\n    # Get the current line.\n    # We want to get rid of any spaces before the first non-space character.\n\n    line_start = text[:4]\n\n    # We want to get rid of any spaces between words,    # but not at the start or end of the word.\n\n    spaces = text.strip()\n\n    # Get rid of consecutive spaces.\n       for i in range(1, spaces.count(**line_start**)[-1]):\n          text[i+1:4] = text[i+1:4] - spaces\n\n    # Get rid of all the spaces in the line.\n    for i in range(1, line_start+1):\n          text[i+1:4] = text[i+1:4] - spaces\n\nThis is just a simple utility function to clean up text that's been wrapped in a module. It finds the start and end of each line, and removes all the spaces in", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    word = \" \".join(re.findall(\" \"))\n    # Word is a list of space-separated words.\n    for i in word:\n        if (i not in text):\n           remove_empty(word)\n           remove_empty(text)\n           text.append(word)\n    return text", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThis is a classic. I love it, and I'll use it (if I can remember it).\n\nI wonder if it's faster than Python's space_replace method.\n\nIt's certainly a lot easier to type.\n\nA bit off topic, but there's a great Python/SQL resource here:\n\nIs this for real? It seems like a joke (or maybe I'm just bitter because I didn't make it).\n\nI wrote something similar to this a while ago, but it's not pure Python. The idea is to use a regular expression to find the longest repeated substring in a string. So, it's less efficient than this pure Python solution.\n\nUsing regular expressions this way is a horrible idea. The underlying implementation (regexp or otherwise) will decide whether to build the regexp based on the contents of the string, not just the string length.\nThis can lead to some fun behavior where the result of the match depends on whether the string is _longer_ than the regexp, and it's very difficult to debug, because the only way to get the expected behavior is to disable any optimizations.\n\nOf course it's a horrible idea. It's called a hack,", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThe test code can be executed by:\npython test.py\n\nimport unittest", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nWe can save this to a file named fix_spaces.py and run it by:\n$ python fix_spaces.py\nExample\nExample 1\nExample 2\nExample 3\n\nIt will be more elegant to put this in a function:", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # remove any punctuation, including the dash.", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThat's a good one. Is it really a \"bug\" though?\n\nPerhaps not in the same sense as the others listed here, but I'd certainly prefer my program to work correctly.\n\nIf you want it to work correctly, then you should use single quotes, since that's how they're handled in Python.\n\nI can't believe how easy this is to do:\nfrom __future__ import braces_match", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    s = \"example\"\n    while len(s) < 3:\n        s = fix_spaces(s)\n        print s\n        s = s.replace(\" \",\"-\")\n\nThis doesn't seem to work when the string has any kind of non-word characters in it:\n>>> fix_spaces(\"abcdef\") == \"abcdef-\"\n>>> fix_spaces(\"\\x56\\x00\") == \"-\\x56\\x00-\"\n>>> fix_spaces(\"\\x56\\x00\\x56\\x00\") == \"-\\x56\\x00\\x56\\x00-\"\n>>> fix_spaces(\"\\x56\\x00\\x56\\x00\\x56\\x00\") == \"-\\x56\\x00\\x56\\x00\\x56\\x00-\"\n>>> fix_spaces(\"\\x56\\x00\\x56\\x00\\x56\\x00\\x56\") == \"-\\x56\\x00\\x56\\x00\\x56\\x", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    \"\"\"\n    for line in open(text):\n         for word in line.split():\n             word = word.rstrip()\n\n             if word =='':\n                   word = word.replace(\" \",\"_\")\n\n                if word[1:] =='':\n                       word = word.replace(\" \",\"-\")\n\n                 if word[2:] =='':\n                        word = word.replace(\" \",\" \")\n                  return word", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    print(\"example\")\n    spaces = \"\"\n    for char in text:\n          if char in ['','-']:\n                spaces +='_'\n           else:\n               spaces +='- '\n               else:\n                spaces += char\n               if spaces:\n                     print(\"Example\")\n                     print(\"Example 1\")\n                     print(\"Example 2\")\n                      print(\"Example", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nreturn re.sub(\"\\\\s+\", \"_\", text).replace(\" \",\"-\")\n\nI am not sure if this is more efficient than other methods, but it is easy to read and understand.\n\nThis is not good python. You can do better. There are many ways to do this. For example:\ns = \"Example\"\nfix_spaces(s)", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    if len(text) == 0:\n        return text\n    else:\n        return text.replace(\" \",\"_\")\nThis is ugly, but it works. (the underscore rule is wrong, but it's a hack).\nThat being said, you really should use the standard python library.\nimport re", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    text = re.sub(r' ','-',text)\n    for space in text:\n          if space > 2:\n               text = text -'' + space\n               break\n    return text", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    spaces = text.lower().rstrip(' ')\n    spaces = spaces.split(\",\")\n    for space in spaces:\n       if space not in spaces[0]:\n          spaces[0][space] ='- '\n    return spaces</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThe first line is the problem.\nBecause of the difference between Python 2 and 3.\nThe second line is the solution.\nBecause of the difference between Python 2 and 3.\n\nThe first line is the problem.\nBecause of the difference between Python 2 and 3.\nThe second line is the solution.\nBecause of the difference between Python 2 and 3.\n\nWell, the first line is not that big of a problem, and the second line is indeed a solution to the first line... but it's not a solution to the problem. It's a workaround for a problem that shouldn't be there in the first place.\n\nWell, the first line is not that big of a problem, and the second line is indeed a solution to the first line... but it's not a solution to the problem. It's a workaround for a problem that shouldn't be there in the first place.\n\nI don't think we can fairly judge without seeing the rest of the program.\n\nMy point is that this is a symptom of what's wrong with Python3: a lot of things are different (whether they're better or worse is another matter), and some of the new things behave differently from the old things.\nIn", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    \"\"\"\n    return re.sub(r'\\n', '_', text)\n   .replace(\"\\n\", \"-\", text)\n\nSee also</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # for each character, if there are 2 spaces in a row,\n    # remove the 2nd one and return it as a return value\n    for i in range(len(text)):\n        if text[i] =='':\n            return text[i+1:i+2]\n    return text\nThis is a cool solution, but it doesn't take into account the possibility that a string may have more than two consecutive spaces.  I like the idea of removing spaces with two consecutive spaces, but perhaps it should be generalized to handle strings with more than two consecutive spaces.  Also, note that this doesn't account for the case where a string has two consecutive spaces, but the spaces aren't in a row.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    def _repr(self):\n    \"\"\"\n    Given a string, return a representation of it, which is a string\n    containing all spaces replaced with underscores, and all \n    consecutive spaces replaced with -", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    for n in range(1, len(text) - 1):\n        if text[n] =='':\n            text[n] = '_'\n         else:\n            text[n] = text[n - 1] + '-'\n    return text</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nIt's quite easy to write yourself if you're willing to add an extra `if` to the loop and support a flag to control whether it's applied.\nPython's default implementation uses the `string.replace` function.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    return spaces.filter(lambda s: spaces_between_s(s))\n\nWell, of course that works!\n\nThe question is whether it's a good solution.\nThe question is whether it's an understandable solution.\nThe question is whether it's a solution that's useful for the problem.\n\nAt the very least it's pretty clear what's going on, and it's the kind of solution that could be explained to a newcomer in a couple of minutes.\n\nI had a feeling that if I posted the code I would get some good feedback. I agree with you, it is an understandable solution.\nIt is not a solution that is useful for the problem. It is a temporary solution. I am currently building a web app that will read a spreadsheet and then output it in HTML. The current problem is that the data is coming in as a tab delimited file. The data is a table of names and addresses. I am attempting to split the rows of data to only display the first name and the last name. I did this with regex, but then I realized that I could use python to do it instead. I will post this on HN as well.\n\nI would have thought that a", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    return (text.find(lambda x: x.lstrip())\n    and (x.find(lambda y: y.lstrip()).count()\n    or x.find(lambda y: y.lstrip()).count() + 2)\n    or len(x.find(lambda y: y.lstrip()).strip()) > 1)\n\nI would use the same approach as this comment suggests. I would also avoid using the space character, use \"\\t\" instead.\n\nWhy? This approach is pretty standard and well understood.\n\nI'd say that the use of the term \"flaw\" is a bit unfair here. The code does exactly what it is supposed to do. That said, as others have mentioned, it is not efficient (for most people, an order of magnitude slower than the naive solution is considered inefficient), and it has a fundamental design flaw.\nThere are a couple of options. I'd suggest the following:\n\\- Use a generator expression to convert the input to an intermediate form. That will make the problem much easier to solve.\n\\- Once you have the intermediate form, convert it to a list using the string module.", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nand", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return replace(text, \" \" + \"\\s\", \"\\-\")\nNow this is awesome.\n\nNot really. The real answer is \"python sucks at it's own whitespace\". The only reason you can't use spaces is because python has a really stupid idea of how whitespace is supposed to work.\n\nThe _real_ real answer is \"It's not about python sucking, it's about the string API being designed in a way that makes it possible to extend it. In fact, it was designed so you can", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\nreturn text.replace(space, \"_\").replace(spaces, \"-\");\n\nNote that this still leaves the problem of people who don't like using spaces.\n\nI just use camelCase in my code. That way, it's always camelCased.\n\nI like snake_case, so I don't have to worry about \"Is this supposed to be in camelCase or snake_case?\"\n\nAre you sure you're not talking about the capitalization of snake_case?\n\n_snake_case_ is all caps. That is, the _name_ of the case is in all caps.\n\nI think I just got the joke.\n\nThis is the reason why I use spaces.\n\nI like spaces because they are very readable, but if you want to use tabs, just do it in a consistent manner.\n\nI think you meant to say that you like spaces because you are used to spaces.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    if len(text) == 1:\n        return text\n    else:\n        result = ''\n    for char in text:\n        if char =='':\n           if not text[char - 2:] =='':\n               result += '_'\n             else:\n               result += '-'\n               result += char\n    return result", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nThat's the other way around. I'm looking for a function that _removes_ consecutive spaces, so that I can get rid of two consecutive spaces in a string, like this:\nfix_spaces(\"Example\") == \"Example\"\n\nAh, sorry, I misread the question.\n\nDoes it have to be python?\n\nNo, but it must be OO.</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\n    from collections import defaultdict\n    from itertools import islice\n    def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example 3\") == \"_Example-3\"\n    \"\"\"\n\n    #   First fix all consecutive spaces with -\n    #", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nMore examples:\nfix_spaces('This is a string that I want to fix') == 'This is a string that I want to fix_'\nfix_spaces('This is a string that I want to fix_') == 'This is a string that I want to fix_ _'\nfix_spaces('This is a string that I want to fix_ _') == 'This is a string that I want to fix_ _'</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n\nI know, I know. I am a horrible person. But I had to do it.\n\nThis has been floating around for awhile. \n\nIt's all fun and games until you start getting bug reports about spaces in database values.\n\nThe most horrible thing is that I've had to write code to fix this issue.\n\nOh my god, that is evil.\n\nI don't think it's evil. It's a useful little trick for dealing with data where you know there are certain characters that are always going to be problematic. It's a lot easier to use this method than to write code to normalize the data.\n\nActually, I think that it's evil. It's not the correct way to fix this problem. For example, what if you have a string that contains \"Example\" that you want to change to \"Example_1\"?\n\nYou're right, but in my case I've got to deal with data that's generated by a legacy system, and often the data has a lot of redundant spaces in it.\nMy point was that while it's not a good idea to rely on this trick for everything, it's a perfectly valid (although evil) approach for data that's got a", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n   \n    return replace(text, \" \", \"__\")  # (space with underscore)\n\nI'm always amazed that people will go to great lengths to solve this problem instead of just using Word's built-in Find/Replace (Alt+H+F).</s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"\n    # a space is a space character (0x20)\n    return [text]\n></s>", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\"", "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\" \"\"\""]]