[["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    for i in range(n):\n        for j in range(m):\n            if i < j:\n                  return i\n                   else:\n                     return i + j\n    return -1\n\nSee also:\nhttps://en.wikipedia.org/wiki/Rounding_error\nhttps://en.wikipedia.org/wiki/Rounding_%28computing%29\nhttps://en.wikipedia.org/wiki/Roundoff_error\n\nThis is a good example of a problem that is easy to solve, but hard to explain.\n\nI've been thinking about this a lot recently, because of the discussions around the election of Donald Trump and the rise of the \"alt-right\".\nI think the problem is that the explanation is so complicated that most people don't really understand it, and so don't have a good way to deal with", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n, m = (n, m)\n    if m > n:\n        return -1\n    return sum(map(int, range(n, m)) ** 0.5) ** 0.5", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n\n    def rounded_min(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    minimum of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_min(1, 5) => \"0b00\"\n    rounded_min(7, 5) => -1\n    rounded_min(10, 20) => \"0b00111\"\n    rounded_min(20, 33) => \"0b110110\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n\n\nI'm not a python guy, but I think that you are missing", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = 0\n    for i in range(n):\n        a += 1\n        if a % 2 == 0:\n              a = a/2\n               if a % 2 == 0:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return m - n\n\nThat's a terrible solution.\n\nIf you're going to say that, you should say why.\n\nThe problem is that the result can be negative, and the code doesn't handle that case.\n\nI think you should use an error condition to deal with this case:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0b1111111100001\n\nI've always found that the best way to learn a new language is to try and write a program in it. That's why I decided to try and write the average function in Ruby.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = 0\n    while n > m:\n        a = a + n\n        if a == m:\n           return -1\n           b = a * 2\n            if b == 1:\n                return b\n             else:\n                 return -1\n    return a\n\nThe Python code is slightly more verbose, but the important parts are the same.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n+m)/2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = 0\n    while n > m:\n        if n % m == 0:\n            a = a + n\n            else:\n              a = a + (n % m)\n               if n % m == 0:\n                    return a\n    return -1\n\nI'm not sure what the point of this is. It's not faster than a simple loop, and it's much more difficult to understand.\n\nThis is not meant to be faster. This is meant to be easier to understand.\n\nI'm sorry, but I don't understand how this is easier to understand.\n\nIt's easier to understand for me because I don't have to think about the loop bounds. I don't have to think about whether the loop is going to be inside or outside of the bounds.\n\nI don't understand how this is easier", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def __mul__(self, other):\n    \"\"\"Return the sum of two integers.  If one of the integers is zero,\n    return the other integer.\n    If one of the integers is negative, return the other integer.\n    If one of the integers is greater than the other, return the other\n    integer.\n    If one of the integers is zero and the other is negative, return the\n    integer with the smaller absolute value.\n    If one of the integers is zero and the other is positive, return the\n    integer with the larger absolute value.\n    If one of the integers is negative and the other is positive, return\n    the integer with the larger absolute value.\n    If both integers are positive, return the integer with the larger\n    absolute value.\n    If one of the integers is negative and the other is positive, return\n    the integer with the smaller absolute value.\n    If both integers are negative, return the integer with the larger\n    absolute value.\n    If", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    m = n / 2\n    return round(m, 2) + round(m, 1)\n\nThe correct answer is 0b11010.\n\nThe program has a bug, in that it fails to handle a case where n is less than m.  The correct solution is to return -1.\n\nSee also\n\nPython programming language\n\nExternal links\n Python: What is the average of 2 and 3?\n Python: What is the average of 2 and 3? (Python 3.3)\n Python: What is the average of 2 and 3? (Python 2.7)\n Python: What is the average of 2 and 3? (Python 3.4)\n Python: What is the average of 2 and 3? (Python 3.5)\n Python: What is the average of 2 and 3? (Python 3.6)\n Python: What is the average of 2 and 3? (Python 3.7)\n Python: What is the average of 2 and 3? (", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = n\n    while a < m:\n        a = a + n\n        if a == m:\n           return -1\n    return a\n\nI'm curious why you have a return a at the end.\n\nI think it's so that the code is slightly more readable.\n\nThat's the point of the whole post.\n\nIf you want to see a more readable example of this, check out the source code for the Python standard library's built-in random number generator:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return int(int(n * m)) / m\n\nTo me, this is the best way to do it. It's the most concise, and it's the easiest to read.\n\nI agree. I'm surprised that there are no comments on the article.\n\nI think the correct answer is not to use any of those.\n\nI agree with that, but I think it's interesting to see the different ways of doing it.\n\nNot sure why you're being downvoted. I agree that it's interesting to see the different ways to do it.\n\nI think the reason is that this is a \"Show HN\" post. It's not really supposed to be interesting, it's supposed to be a useful code snippet that you can use in your own code.\n\nThis is the best. It's concise, it's clear, it's obvious, it's easy to read, it's easy to maintain, it's easy to extend, it's easy to understand, it's easy to debug, it's easy to test, it's easy to port, it's easy to write. It's the best.\n\nI'm not sure if you're being sarcastic, but I think", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def __call__(self, n, m):\n        return (self.n * self.m) / 2\n        return -1\n    def __str__(self):\n    return '{0} {1}' % (self.n, self.m)\n    return '0b' % (self.n, self.m)\n\n>>> rounded_avg(1, 5)\n    0b11\n>>> rounded_avg(7, 5)\n    -1\n>>> rounded_avg(10, 20)\n    0b1111\n>>> rounded_avg(20, 33)\n    0b11010\n\nThe following is a Python program that demonstrates the use of the rounded_avg function.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return ((n & (m-1)) ** 2) + (n & m)\n\nI don't get it. What does the code do?\n\nIt rounds the numbers to the nearest integer and converts that to binary.\n\nAha.\n\nIt's not particularly interesting to me, but I've got to hand it to the author for the \"beautiful\" code. It's not as if the code is shorter than the explanation.\n\nIs this the same as:\n>>> round(7.5, 2)\n6\n>>> round(10.0, 2)\n7\n>>> round(10.5, 2)\n10\n>>> round(10.7, 2)\n11\n>>> round(10.9, 2)\n12\n>>> round(11.0, 2)\n12\n>>> round(11.5, 2)\n13\n>>> round(11.7, 2)\n13\n>>> round(11.9, 2)\n14\n>>> round(12.0, 2)\n14\n>>> round(12.5, 2)\n15\n>>> round(12.7, 2)\n15\n>>> round(12.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (m - n) / 2\n\nI think it's an interesting exercise to write this using a real programming language, e.g. Python or Ruby.\n\nI agree, I wrote it in Python (for the lulz)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n < m:\n        return n\n    return m / (n + m)\n\nIt's a bit more efficient, and you can see the code at:\n\nI've found that it's sometimes useful to be able to take the floor of a\nnumber, and I didn't see that in the article. So I wrote this:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    for i in range(n+1, m+1):\n        sum += n\n        if n > m:\n            return sum + rounded_avg(i, m)\n    return sum", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) ** 2 + (n - m) ** 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def __call__(self, n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    return m + n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n * m + 1) / 2\n\nI don't understand how you can claim that this is the most efficient way. It's not even the fastest way:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return [int(n) for n in range(n) if n <= m]\n\nThe article is not about the code, but about the general idea of using a binary representation.\n\nI don't think the article is about that at all. It's about the fact that the code is a bit too simple.\n\nI don't think that's the case. The article says:\n_\"This is a very simple, but elegant, solution to the problem of finding the\naverage of a set of numbers, and it is the only one that uses a binary\nrepresentation.\"_\nIt's certainly not the only solution that uses a binary representation.\n\nI don't think the article is about that at all. It's about the fact that the code is a bit too simple.\n\nI don't think that's the case. The article says:\n_\"This is a very simple, but elegant, solution to the problem of finding the\naverage of a set of numbers, and it is the only one that uses a binary\nrepresentation.\"_\nIt's certainly not the only solution that uses a binary representation.\n\nThe article is not about the code, but about the general idea", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = 0\n    while n > m:\n        a = a + n % m\n        n -= n % m\n    return a", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    a, b, c, d, e = [n, m], [n, m], [n, m], [n, m], [n, m]\n    for i in range(m+1, n):\n        a = a + b\n        b = b + c\n        c = c + d\n        d = d + e\n    return a", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    while n > m:\n        if n % 2 == 1:\n            return -1\n            n -= 1\n            return n % 2\n\nThis is a pretty silly implementation. It only works for positive integers, and it only works if n and m are relatively prime.\n\nIt's a silly question. What's the point of the question?\n\nThe point is to have fun.\n\nI'm not sure this is the best way to have fun.\n\nI'm having fun.\n\nI'm not sure this is the best way to have fun.\n\nI'm having fun.\n\nI'm not sure this is the best way to have fun.\n\nI'm having fun.\n\nI'm not sure this is the best way to have fun.\n\nI'm having fun.\n\nI'm not sure this is the best way to have fun.\n\nI'm having fun.\n\nI'm not sure this is the best way to have", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = n\n    m = m\n    while n > m:\n        if n%2 == 0:\n            return -1\n         else:\n            n = n/2\n            m = m/2\n    return n + (m/n) * m\n\nPython code:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    return n + m - 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n if n > m else m / 2 + 1\n\nI don't know why this is on the front page. It's a horrible way to compute the average. You can't even write a proper program to compute the average of numbers that don't have a common divisor.\n\nYes, you can. It's just not as efficient.\n\nI don't think you can. The problem is that you can't divide by a number that isn't a power of 2. So you can't divide by 5, or 7, or 11, or anything like that.\n\nYou can divide by 5, you just need to find the remainder and then add 1.\n\nIn case anyone is wondering, this is how you do it in Python:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n / m)**2\n\nYou can use this as a function in your program, or as a method on a class.\n\nIt's not always the best idea to do this, because if you're using floats, you'll get more precision with a naive approach. However, for integers, you'll get the same precision.\n\nIt's also possible to do this with the standard library functions floor() and ceil(), but this requires a little more work.\n\nThe above example is using Python 2.3, but it should work for Python 2.2 and later.\n\nIt's also possible to use the cmath module, which allows you to do this sort of thing much more easily.\n\nExample:\n\n>>> import cmath\n>>> cmath.ceil(7.5)\n0b11010\n>>> cmath.floor(7.5)\n0b111111\n\nNote that the ceil() and floor() functions are not part of the standard library, but are available in cmath.\n\nIf you're using Python 2.2, you'll need to use cmath.ceil() and cmath.floor() instead of the above.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n*(m-n)/2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0b1 << n\n    + 0b1 << m\n\nI had to look up the ternary operator, and I had to look up the meaning of the \"0b\" prefix.\n\nI don't get it. What's wrong with it?\n\nIt's a bit of a mess.\nI don't think it's so bad that it requires a new operator. It's just a bit too verbose.\nI'd just call it \"round\" and get rid of the \"avg\" part.\n\nI like it. The code looks like it's using the ternary operator to assign values to the bits of an int, which is exactly what it's doing.\n\nThe ternary operator is a bit of a mess.\n\nThis is the best explanation of the ternary operator I've ever seen.\n\nIt's a bit of a mess.\n\nIf you don't understand the ternary operator, you don't understand C.\n\nIt's a bit of a mess.\n\nIf you don't understand the ternary operator, you don't understand C.\n\nIt's a bit of a mess.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    for i in range(n):\n        if n%i == 0:\n             return i", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 1 if n > m else -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    # Make the answer a binary number\n    return (n ** 2) & 1\n\nThis seems to be a very simple algorithm, but the C implementation is not trivial.\n\nIt is not a trivial algorithm.\n\nThe algorithm itself is trivial, but the code to implement it is not.\n\nExactly.\n\nThe algorithm itself is trivial, but the code to implement it is not.\n\nYou can implement it with a for loop and some arithmetic. It's not really that hard.\n\nYou can implement it with a for loop and some arithmetic. It's not really that hard.\n\nI know, but it's still not trivial.\n\nI know, but it's still not trivial.\n\nI know, but it's still not trivial.\n\nThis is a very nice algorithm.\n\nThis is a very nice algorithm.\n\nThe algorithm itself is trivial, but the code to implement it is not.\n\nThis is a very nice algorithm.\n\nThis is a very nice algorithm.\n\nThe algorithm itself is trivial, but the code to implement it is not.\n\nThis is a very nice algorithm.\n\nThis is a very nice algorithm.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def binary_to_decimal(n):\n    \"\"\"You are given an integer n, and your task is to convert it to decimal.\n    If n is greater than 10, return 0b10000000.\n    If n is greater than 100, return 0b1000000000.\n    If n is greater than 1000, return 0b1000000000.\n    If n is greater than 10000, return 0b1000000000.\n    If n is greater than 100000, return 0b100000000000.\n    If n is greater than 1000000, return 0b11000000000.\n    If n is greater than 1000000, return 0b11000000000.\n    If n is greater than 10000000, return 0b1111000000000.\n    If n is greater than 1000000, return 0b1111000000000.\n    If n is greater than 10000000, return 0b1111000000000.\n    If n is greater than 1000000, return 0b1111000000000.\n    If n is greater than 10000000, return 0b1111000000", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    # round to nearest integer\n    if n > m:\n       return -1\n    # convert to binary\n    return n & (m - n)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = n\n    b = m\n    return a + b\n\nThat's not what I get, I get 0b11010.\n\nYou've got a bug in your code. You are using the wrong function.\n\nYou're right, I didn't write that correctly. I'm using the function from the article, not yours. I'll fix the code.\n\nOh, right. I hadn't realized that the article was using a different function. My bad.\n\nThe article is using the same function, the article is wrong.\n\nI think the article is right, but I didn't explain it properly.\n\nI think the article is wrong, and the article is wrong, but I didn't explain it properly.\n\nI think the article is wrong, but I didn't explain it properly.\n\nI think the article is wrong, but I didn't explain it properly.\n\nI think the article is wrong, and the article is wrong, but I didn't explain it properly.\n\nI think the article is wrong, but I didn't explain it properly.\n\nI think the article is wrong, but I didn't explain it properly.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return ((m + n) ** 2) / (m - n)\n\nThis is not an average function. It is a function that returns a random number between 1 and the sum of its arguments. It is not a good idea to call it an average function.\n\nThis is an average function. It is not a good idea to call it a random number generator.\n\nIt is a random number generator. It is not a good idea to call it an average function.\n\nIt is not a good idea to call it anything.\n\nIt is a good idea to call it anything.\n\nIt is not a good idea to call it a good idea to call it anything.\n\nIt is a good idea to call it anything.\n\nIt is not a good idea to call it anything.\n\nIt is a good idea to call it anything.\n\nIt is not a good idea to call it anything.\n\nIt is a good idea to call it anything.\n\nIt is not a good idea to call it anything.\n\nIt is a good idea to call it anything.\n\nIt is not a good idea to call it anything.\n\nIt is a good idea to call", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def _round_to_binary(n):\n    \"\"\"Round n to the nearest integer.  If n is already an integer,\n    return n.\n    \"\"\"\n    if n < 0:\n        return -n\n    return n\n    def _convert_to_binary(m):\n    \"\"\"Convert the binary representation of the integer m to a decimal\n    number.\n    \"\"\"\n    return m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0.0 if n < m else (n - m) / 2.0\n\nI'm not sure why this is on the front page of HN, but this is the kind of thing I'd expect from a first year CS student.\n\nI'm not sure why this is on the front page of HN, but this is the kind of thing I'd expect from a first year CS student.\n\nI'm not sure why this is on the front page of HN, but this is the kind of thing I'd expect from a first year CS student.\n\nI'm not sure why this is on the front page of HN, but this is the kind of thing I'd expect from a first year CS student.\n\nI'm not sure why this is on the front page of HN, but this is the kind of thing I'd expect from a first year CS student.\n\nI'm not sure why this is on the front page of HN, but this is the kind of thing I'd expect from a first year CS student.\n\nI'm not sure why this is on the front page of HN, but this is the kind of thing I'd expect from a first", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    return int( (n + m) / 2 )", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return m - n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n\n    return (n, m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return m + n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def round(n):\n        return (n - 1) * (n - m) / 2\n    def binary(n):\n        return n & 0b1 << n\n\n_/\\_\n\n/ /\n\n/ \\\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /\n\n/ /", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    a = 0\n    for i in range(m):\n        a = a + rounded_avg(i, m)\n    return a\n\nI just added a new version to my site:\n\nI like it. I'd change the domain name though.\n\nI agree. I'll probably just point to the gist for now.\n\nI'm not sure this is a good idea. I think it's a bad idea to take advantage of the fact that people are used to dealing with floats (and doubles) as numbers.\n\nI like the idea of using the domain name as the name of the function, but I think you should be more explicit about what's going on. Perhaps call the function \"round_avg\" or \"round_to_binary\", and use the domain name as the function name, like so:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if m > n:\n        return -1\n    a, b = int(n) + int(m)\n    return int(a) + int(b)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return ((n + m) / 2)\n    def floor(n):\n    \"\"\"You are given a positive integer n, and your task is to return the\n    integer closest to n.  If n is zero, return zero.\n    Example:\n    floor(3) => \"0b1\"\n    floor(5) => \"0b1\"\n    floor(8) => \"0b1\"\n    \"\"\"\n    return n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n*(n+1)/2 + m*(m+1)/2\n\nI'm a bit surprised that the author didn't include the following as an option:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return ((n - m) / 2) + ((n * (m - n) + m * (n - m)) / 2)\n\nI like how you've got the code to the left of the explanation. I'm not sure what you're doing with the division and multiplication, but I'm guessing that the division is to get rid of the fractional part of the result, and the multiplication is to make sure the result is always in the range of 0 and 1.\n\nI think the division is to get rid of the fractional part of the result, and the multiplication is to make sure the result is always in the range of 0 and 1.\n\nI think you've got it.\n\nI've seen a few posts here where people have said things like \"I don't like the division because it could cause rounding errors.\" That's true, but the division is only there to ensure that the result is always in the range of 0 and 1.\n\nIf you were to use a non-divide-by-2 method, you'd need to add some additional code to ensure the result is always in the range of 0 and 1.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    # Convert to binary\n    return int(n * 2 ** (m - n)) >> 1\n\nThis is the code that I have for now. I'm having trouble with the last part, where I have to get the average and round it to the nearest integer.\n\nI'm trying to do this without using a for loop, because I don't know how to do that.\n\nI'm having trouble with the last part, where I have to get the average and round it to the nearest integer.\n\nI'm trying to do this without using a for loop, because I don't know how to do that.\n\nWhat do you mean you don't know how to do that? You can do that in any language.\n\nI'm trying to do this without using a for loop, because I don't know how to do that.\n\nWhat do you mean you don't know how to do that? You can do that in any language.\n\nI'm trying to do this without using a for loop, because I don't know how to do that.\n\nWhat do you mean you don't know how to do that? You can do that in any language.\n\nI", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n + m\n\nIf you're only taking the first n+m numbers, you can get away with a lot less code:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    a = n\n    while n > 0:\n        if m > a:\n            a = a - m\n             b = a * 2\n             if b > a:\n                  a = a - b\n                 b = b / 2\n                 if b > 0:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if m > n:\n        return -1\n    else:\n        return n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    if m > n:\n        return m\n    if m == n:\n        return n\n    return n + m\n\nThat's it. It is a bit long and it doesn't use any of the language features, but it works and it is quite efficient.\n\nI wrote it in about 10 minutes, so it's not the best code in the world.\n\nI'm not sure I'm understanding the problem correctly, but I'll give it a shot anyway.\n\nThe problem is to compute the average of all the integers from 1 through 20, inclusive.\n\nThe simplest way to solve this problem is to iterate over the integers, and to sum the results of each iteration.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n / m) + 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n * (n+1)) + m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    for i in range(m):\n        if n > m:\n           return -1\n        else:\n           return i * (m - n) / 2\n    return -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    result = 0\n    for i in range(m):\n        result += n\n        if n > m:\n            result = -1\n    return result\n\nIt would be interesting to see what the output of this function would be for a range of numbers.\n\nIt would be interesting to see what the output of this function would be for a range of numbers.\n\nThe output would be \"0b11\" for the first case, \"-1\" for the second case, and \"0b1111\" for the third case.\n\nHere's a more interesting version:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2\n\n>>> from decimal import Decimal\n>>> round_avg = Decimal('0b11')\n>>> round_avg(1)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return round(n / m, 2)\n\nLooks like the author of the article is trying to teach a class, so it's probably a case of teaching the students to use a library instead of reinventing the wheel.\n\nI think it is more of a case of the author trying to teach a class, and the author's class is about reinventing the wheel.\n\nI think it's a case of the author trying to teach a class, and the author's class is about reinventing the wheel.\n\nIt's a good thing the author is teaching a class on reinventing the wheel, because that's exactly what the author is doing.\n\nI'm not sure I understand. The author is trying to teach a class on reinventing the wheel?\n\nThe author is teaching a class on reinventing the wheel.\n\nI think the author is trying to teach a class on reinventing the wheel.\n\nI think the author is teaching a class on reinventing the wheel.\n\nI think the author is trying to teach a class on reinventing the", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0b110111010101\n\nI think the right answer is:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = 0\n    for i in range(n+1, m+1):\n        if i % 2 == 0:\n            a += a / 2\n            a = a % 2\n            if a == 0:\n                return a\n              return -1\n\nI'm not sure if this is a bug or a feature, but I'm pretty sure that the first example is not the intended output.\n\nI think it's intended. The first number is 1, which is converted to 0b11. Then the next number is 5, which is converted to 0b101, and the final number is 1, which is converted to 0b10.\n\nThe first number is not 1, it's 0b11.\n\nI'm not sure I get it.\n\nThe article is just a joke.\n\nI think it's a joke that's not very funny, and", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0 if n < m else -1\n    return int(round(avg(n, m))) + int(round(avg(n - 1, m)) + int(round(n - 2, m)))", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n+m/2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n+m+1\n\nI'm not sure I understand the point of this.\n\nIt's a joke about how much programmers hate IEEE floating point.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) * (n + m - 1) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    n_values = sum(n)\n    m_values = sum(m)\n    for i in range(n_values):\n        for j in range(m_values):\n            if (n % i == 0):", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = min(n, m)\n    b = 0\n    while n > m:\n       b = b + (n - m) % m\n       if b > m:\n          return -1\n       else:\n          return b", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    while n > m:\n       if n % 2 == 0:\n          return -1\n       else:\n          return m\n    return int(rounded_avg(n, m))\n\nI don't understand why you are using bitwise operators to compute the average.\n\nIt's a bad example, but I think it's useful for illustrating the point.\n\nThat's not the point. The point is that the _average_ of a set of numbers is the _sum_ of the numbers divided by the _size_ of the set.\nThe number of bits in a number is irrelevant.\n\nI think the point is that the \"average\" of a set of numbers is a _well-defined_ thing. That is, the operation of adding the numbers together and dividing by the size of the set is a well-defined operation.\nIt's a bit of a stretch to call the resulting number the \"average\" of the set, since it's not", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def round(n):\n    \"\"\"Return the integer closest to n that is greater than or equal to 0.\n    If n is negative, return -n.\n    Example:\n    round(5) => 5\n    round(-1) => -1\n    round(6) => 6\n    round(-1) => -6\n    round(7) => 7\n    round(-1) => -7\n    round(8) => 8\n    round(-1) => -8\n    \"\"\"\n    return n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    a = 0\n    while n > m:\n        a = a + (n - m) / 2\n        if a > 0:\n            return a\n            if n == m:\n               return -1\n    return a\n\nThis is a bad algorithm. It's very likely to produce a wrong result, for example when n=m.\n\nI don't see how this is different from what's in the standard library.\n\nThe standard library has the correct algorithm.\n\nYes, I know. I meant that the algorithm in the standard library is bad.\n\nIt's not bad. It's just not as good as the algorithm the author of the article suggests.\n\nThe author's algorithm is bad because it's susceptible to the problem of rounding errors.\n\nHow is the author's algorithm any more susceptible to rounding errors than the standard library's", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    m = n\n    return int(round(m, 2))\n\nThe first version is probably the simplest, but it's not very efficient for large numbers.\n\nWhat is the most efficient way to do this?\n\nIf you're willing to use a library, you can use the Python standard library's math module.\nimport math", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n - m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (int(n) + int(m) + int(n + m)) / 2\n\nThe code is from:\n\nI'm not sure how this is better than the built-in numpy.avg(x, y) or\nnumpy.std.mean(x, y).\n\nIt's not.\n\nIt's a nice idea, but the code is pretty poor. It's not very idiomatic Python.\n\nI'm not sure I understand what you mean. What's not idiomatic about it?\n\nThe way it is written, it is hard to read and understand.\n\nNot sure what you mean. I find it quite easy to read and understand.\n\nI'm not sure I understand what you mean. I find it quite easy to read and understand.\n\nI'm not sure I understand what you mean. I find it quite easy to read and understand.\n\nI'm not sure I understand what you mean. I find it quite easy to read and understand.\n\nI'm not sure I understand what you mean. I find it quite easy to read and understand.\n\nI'm not sure I understand what you mean. I find it quite", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n - m) / 2.0 + (n % 2)\n\nThat's a nice one. It's a bit of a shame that you have to know the number of bits per integer.\n\nI've always been interested in the number of bits of an integer. If you're interested in this, you might like this:\n\nThanks for the link, I hadn't seen that before.\n\nI've written a similar program in Python:\n\nNice. I've been looking for a good way to do this in Python for a while.\n\nI've also written a C program that does this.\n\nI wrote a Python program to do this a while back.\n\nThis is very interesting. I've been looking for a way to do this in Python for a while.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n & (1<<m)) | (n >> m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n\n    return n + m\n\nThis is a pretty good one. I had a similar problem at my last job, and my solution was almost identical.\n\nI don't get it. Is it just a joke?\n\nNo, it's a joke that's not funny.\n\nIf you're looking for a joke that's not funny, I've got a bunch.\n\nI'm sure you do.\n\nThis is actually a pretty good joke.\n\nI don't get it. Is it just a joke?\n\nNo, it's a joke that's not funny.\n\nIf you're looking for a joke that's not funny, I've got a bunch.\n\nI'm sure you do.\n\nThis is actually a pretty good joke.\n\nI don't get it. Is it just a joke?\n\nNo, it's a joke that's not funny.\n\nIf you're looking for a joke that's not funny, I've got a bunch.\n\nI'm sure you do.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    n = round(n, m - 1)\n    m = round(m, n - 1)\n    return (n & 1) + (m & 0x1)\n    def round(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    round(1, 5) => \"0b11\"\n    round(7, 5) => -1\n    round(10, 20) => \"0b1111\"\n    round(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n % m == 0:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n + m\n\nI've never seen the use of \"0b\" in Python before. Is that a common thing?\n\nI've seen it before, but only in the context of hexadecimal numbers.\n\nI've seen it in contexts where there's no need for the binary encoding.\n\nI'm not sure I understand what you're saying. Are you saying that \"0b\" is redundant in this context?\n\nYeah, the Python standard library already encodes numbers as binary internally.\n\nI'm not sure this is true. Python integers are generally stored as signed 32-bit integers, but I don't think they're necessarily stored in binary internally.\n\nThey are in fact stored in a binary encoding internally.\n\nI can't find a reference for this. Do you have one?\n\nA reference is not necessary. Python is an interpreted language, so it needs to be able to execute a sequence of bytes, and the bytes are stored in a binary encoding.\n\nThat's not proof.\n\nIt's not proof, but it's a good indicator.\n\nI've always thought it was a bad indicator, because you can have a language with bytecode that", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n - m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return int(n + m / 2) * (n + m / 2 + 1) + 1\n\nI think that's a pretty neat way of doing it.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return ((n + m) / 2) & (n + m)\n\nI don't get it. How is this different from the one I posted?\n\nYour function rounds the result to the nearest integer, which is not always what you want.\n\nI see. I would like to see the python version.\n\nPython version:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return (n + m) / 2.0", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = n/2\n    m = n + 1\n    if n > m:\n       return -1\n    n = n/2 + 1\n    m = n + 1\n    while n > m:\n        n = n/2 + 1\n        m = n + 1\n        if n == m:\n           return -1\n    return n/2 + m\n\nThis is a pretty naive algorithm.\n\nWhy?\n\nBecause it rounds the input to the nearest integer, and then converts that to a binary representation, and if n is greater than m, it returns -1.\nThis algorithm is not correct.\n\nWhat is the correct algorithm?\n\nThe correct algorithm is to round the input to the nearest integer, and then convert that to a binary representation, and if n is greater than m, it returns 1.\n\nThat's not correct either.\n\nYes it is.\n\nIt's not correct for the reason that the OP stated", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0bdef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return n + m * rounded_avg(n - m, m - 1)\n\nI'm not a fan of the \"return -1\" thing. It's not clear what it's supposed to mean. I'd rather see something like:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    n = floor(n / m)\n    return n / m\n\nThe code is from the python cookbook and it's a simple one liner that I find very useful. It rounds the number to the nearest integer and converts it to binary.\n\nI have a couple of questions:\n1\\. Is there a similar one liner in ruby that does the same thing?\n2\\. Is there a way to convert to binary without having to use the floor function?\n3\\. I'm wondering if there is a better way to convert the number to binary.\n\nThanks,\n\nA\n\nOn Sat, Jan 14, 2012 at 9:09 AM, Sam <sam@xxxxxxxxx> wrote:\n> def rounded_avg(n, m):> \"\"\"You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m).> Round the answer to the nearest integer and convert that to binary.> If n is greater than m, return -1.> Example:> rounded_avg(1, 5)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0bdef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    n = n / 2\n    m = m / 2\n    for i in range(n):\n        for j in range(m):\n             a = a + (j + i) % 2\n               if a % 2 == 0:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def rounded_avg_binary(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_binary(1, 5) => \"0b11\"\n    rounded_avg_binary(7, 5) => -1\n    rounded_avg_binary(10, 20) => \"0b1111\"\n    rounded_avg_binary(20, 33) => \"0b11010\"\n    \"\"\"\n    return n * (m - n) + 1\n\nThis function is the reverse of the one in the original post.\n\nThe original function is the one that I want, but I can't seem to get it right.\n\nI've tried a few different ways of doing it, but I'm not sure if I'm on the", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0b11\n\nNice.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) * (m + n) / 2\n\nI'm not sure what your question is. You might want to ask it again, and make it more clear what you're trying to achieve.\n\nI'm trying to understand the algorithm. I know that the algorithm is implemented in C.\nI'm not sure what to do with the formula.\n\nYou have to implement it.\n\nI did. I'm just not sure what to do with the formula. I want to understand the formula and how it works.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return int(n) + int(m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return float(int(m) + int(n) + int(n)) / 2\n\nThat's not the right answer.\n\nI know, I know.  It's just an example.\n\nI'd be interested in seeing what the correct answer is.\n\nIt's correct, and the right answer is in the link.\n\nI think it would be interesting to see how much faster it is in python compared to C.\n\nThe python version is very slow compared to the C version. It's almost 4x slower.\n\nWhy?\n\nPython has a lot of overhead. The python version is doing a lot of extra work to handle the looping and the conversion to binary.\n\nI guess I'm not understanding the overhead of converting to binary.\n\nThe C version is doing this:\nint(n) + int(n) + int(n) / 2\nThe python version is doing this:\nfloat(int(m) + int(n) + int(n)) / 2\nThe python version is converting the number to a float and then dividing it by 2.\n\nI don't know if this is the case for python, but I know in", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2.0\n\nThis is a classic example of a \"rounding error\".\n\nI would think the better example is that it is a classic example of why you don't round.\n\nIt's not a rounding error, it's a conversion error.\n\nI can't imagine why anyone would want to use this.\n\nI'm a fan of this one. It's a bit more useful than the more common \"round to the nearest integer\" example.\n\nI prefer the `round()` method to `rounded_avg()`, for the same reason I prefer `int()` to `int(x)` or `float()` to `float(x)`: if the function is ever passed a value that it can't handle, it will return `None` instead of a broken value.\n\nThat's not a good reason, because you can just add a try:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return m\n    return n * m / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return n / m\n\nI can't believe there are so many people who don't know about modulo.\n\nAnd even more who don't know about the modulo operator.\n\nThis is what I was thinking. If you're going to go to all that trouble, why not just use the modulo operator?\n\nBecause then you can't have a really cool function name.\n\nI think the bigger problem is that people don't realize that you can round numbers.\n\nIf you are rounding to the nearest integer, you are also rounding to the nearest whole number.\n\nI am not sure about that.\n\nYou're right, I was wrong.\n\nI'm not sure what to think about this.\nOn the one hand, the code looks like it's doing a lot of stuff you could do with a few lines of code. On the other hand, the code is so simple that it's hard to believe it's not doing something important.\n\nThis is my problem with a lot of python code. It looks like it's doing a lot of stuff, but it's not.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (int(n) + int(m)) / 2.0", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return -1 if n > m\n    for i in range(n):\n        for j in range(m):\n             if n%i == m%j:\n                    return i+j\n    return i+j\n\nHere's the code in Python:\n>>> def rounded_avg(n, m):\n...", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    # Round to the nearest integer\n    if n > m:\n       return -1\n    # Convert to binary\n    return int(round(n / m, 2))\n\nThis is not a real solution, but it's a good illustration of the problem.\n\nIn other words, the input is an array of n integers. The output is a single integer in binary.\n\nThe output will always be a power of 2 (2^n).\n\nThe solution can be found in Python, C, C++, C#, Java, JavaScript, and many other languages.\n\nThe Python solution is:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n\n\nThis is an example of a recursive algorithm.\n\nPython supports recursive functions.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return int(floor(int(n + m)) / 2)\n\nThis is the most efficient method I've found so far:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    a = int(n)\n    b = int(m)\n    return (a + b) / 2.0\n\nIf you do this in Python you get", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n + (m + 1) / 2\n\nThis is not a very good example of a \"stupid\" algorithm.\n1\\. It's not a stupid algorithm. It's a well-known algorithm.\n2\\. It's not \"stupid\" because it's inefficient. It's \"stupid\" because it's\ninefficient _and_ it's not very understandable.\n\nI think this is a good example of a stupid algorithm. It's a good example of a stupid algorithm because it's not a very good algorithm.\n\nI think you're missing the point. The point is that it's not an algorithm at all. It's just an arithmetic expression.\n\nI think you're missing the point. The point is that it's a stupid algorithm. It's a good example of a stupid algorithm because it's not a very good algorithm.\n\nI think you're missing the point. The point is that it's not an algorithm at all. It's just an arithmetic expression.\n\nI think you're missing the point. The point is that it's a stupid algorithm. It's a good example of a stupid algorithm because it's not a very good algorithm.\n\nI think you", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def __call__(self, n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to\n    compute the average of the integers from n through m (including n and\n    m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n*m + 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    n, m = range(n, m)\n    return int(int(n * int(m + 1) / 2 + 1) / 2)\n\nI don't know if this is a good idea or not, but I've found that I get better results by storing the results of the previous iteration in a variable, then using the results of that to do the next iteration.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (m - n) / (n - m)\n\nThis is a great example of the \"Python is easy\" principle. This is a short function that does something that is not trivial. It's not trivial in any language, but it's more trivial in some languages than others. In Python, this is a short, simple function.\n\nI have seen a lot of people come from other languages, and they will often write a function that is long and complex, and they'll say \"This is a really simple function.\" And I'll say \"No, it's not. It's a complex function.\"\n\nIn Python, I would say this function is simple. In other languages, it might be a complex function.\n\nIt's not that Python makes this function simple, it's that Python doesn't make it complex.\n\nI think that's the \"Python is easy\" principle.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return n + m\n\nThis is a bad example of how to write a Python program.\n1) It doesn't show off any of Python's strengths.\n2) It's not even a good example of a trivial algorithm.\n3) It's not even a good example of a trivial algorithm that doesn't require a\nlot of thinking.\n4) It's not even a good example of a trivial algorithm that doesn't require a\nlot of thinking and that uses a lot of Python's standard library.\n5) It's not even a good example of a trivial algorithm that doesn't require a\nlot of thinking and that uses a lot of Python's standard library and that is\nshort enough to be readable.\n6) It's not even a good example of a trivial algorithm that doesn't require a\nlot of thinking and that uses a lot of Python's standard library and that is\nshort enough to be readable and that uses a lot of Python's standard library\nand that uses a lot of Python's standard library and that is short enough to\nbe readable and that uses a lot of Python's standard library and", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return [int(n) + int(m) for n, m in zip(n, m)]", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    a = 0\n    while n > m:\n        a += n\n        if n > m:\n            a = a / 2\n             return a\n\nThis is the first time I've seen a Python solution to this problem. I've always seen it solved in C/C++.\n\nThere are some nice python solutions:\n\nI've always liked this one:\n\nI love this!\n\nI don't think this is a good solution. If you want to average a range of numbers, the best way is to use a double-ended queue and do the averaging as you read from the queue. If you are using an array, you are wasting time calculating the average every time you add a number to the array.\n\nI'm not sure if you're being sarcastic or not, but that's exactly what the linked article does.\n\nI'm not being sarcastic. I'm pointing out that the linked article is not a", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    while n > m:\n        if n % m == 0:\n            n = n / m\n            m = m / n\n            return n\n    return -1\n\nThis is a really bad solution. If you are going to write a function that is going to be used in a non-trivial way, you should put some thought into what the function is going to do.\nThis function is not even right for the problem at hand. The problem is to return the average of n and m. The function does not return the average of n and m. It returns the average of n through m.\nIf the author had thought about the problem, they would have realized that the correct function is", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    while n > m:\n        if n == m:\n           return -1\n        n = n / m\n    m = n + 1\n    return n\n\nThere's a bunch of ways to do this, but I'll use a bitwise approach:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2 + (n / 2) * (m / 2)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n - m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = n or m\n    return (n + m) / 2\n\nSo, the algorithm is correct, but it is very inefficient.\n\nThe naive algorithm (which is the one that the article describes) has a running time of O(n^2) and the algorithm in the article has a running time of O(n log n).\nSo, the algorithm in the article is much more efficient than the naive algorithm.\n\nThe article's algorithm is still very inefficient. The naive algorithm has a running time of O(n) and the article's algorithm has a running time of O(n log n).\n\nThe naive algorithm has a running time of O(n) but the article's algorithm has a running time of O(n log n)\n\nThe naive algorithm has a running time of O(n) but the article's algorithm has a running time of O(n log n)\n\nThe naive algorithm has a running time of O(n) but the article's algorithm has a running time of O(n log n)\n\nThe naive algorithm has a running time of O(n) but the article's algorithm has a running time of O(n log n)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    n = m\n    for i in range(n):\n        m = m + 1\n        if n % m == 0:\n            return m\n            m = m / n\n    return m\n\nThis is a really bad implementation of the problem.\nThe problem is to find the average of the integers from 1 through n inclusive.\nYou are rounding the input to an integer, and then calculating the average of the integers from 1 through m inclusive.\nYou are also rounding to an integer, which is the wrong thing to do.  You should be rounding to the nearest integer, which is not the same as rounding to an integer.\n\nThe algorithm is O(n^2) in the number of input elements.\n\nI'm not sure that it's actually O(n^2). It's at least O(n^2) in the number of input elements, but it's also O(n) in the number", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return n / m\n\nThis is a _much_ better way to write it, and it's very easy to read, too.\n\nThe author's code is only marginally more difficult to read than the Python code.\n\nI don't know about that.\n\nI prefer the Python code. It's more concise and easier to understand.\n\nI disagree. I think it's much more readable with the C-style.\n\nI also prefer the C-style, but I think it's fair to say that the Python code is easier to understand.\n\nI think the C-style is easier to understand, but that's just my opinion.\n\nI think the C-style is easier to understand, but that's just my opinion.\n\nI think the C-style is easier to understand, but that's just my opinion.\n\nI think the C-style is easier to understand, but that's just my opinion.\n\nI think the C-style is easier to understand, but that's just my opinion.\n\nI think the C-style is easier to understand, but that", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 1.0*(int(n) + int(m))\n\nThat's a good one. I usually just use the floor function.\n\nThis is the best one I've seen so far.\n\nI always use this one:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n+m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return -1.0 + (n - m) / 2.0\n\nWhat's the point of this?\n\nI was just thinking of a simple algorithm for calculating the average of a sequence of integers.  I decided to make the algorithm more complicated by rounding the answer and then converting it to binary.  That's the joke.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0 if n < m else -1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    return int(round(avg(n, m), 2) & 1) & 0b1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n ** 2) + m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0bdef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n < m:\n        return -1\n    n = n - 1\n    while n > m:\n        if n % 2 == 0:\n           n = n / 2\n           m = n + 1\n           n /= 2\n           m %= 2\n           return (n - rounded_avg(n - 1, m))\n    return n\n\nI'm not sure if this is what you're looking for, but it's a start.\n\nI have a feeling you're looking for a way to turn an int into a binary number.\n\nThis is probably not what you're looking for, but I'm posting it anyway.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return m + n % 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0.0 if n > m else 1.0*(n + m)\n\nSee also\nAverage (mathematics)\nRounding (arithmetic)\n\nReferences\n\nExternal links\n\nThe Python Tutorial: Average\nPython Reference: Round\n\nAverage</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if m > n:\n        return -1\n    while n > m:\n        n = n / m\n        if n == 0:\n           return -1\n        else:\n            return n\n    return n\n\nI'm not sure why you're being downvoted. I think it's a great solution.\n\nBecause it's not a solution, it's a workaround.\n\nIt's a solution that is very clever and very fast.\n\nIt's not very clever, it's very simple. It's also not very fast, because it requires an O(n^2) loop.\n\nIt's clever because it doesn't use any built-in functionality in Python. It's not very fast, but it's not that slow. It's much faster than a naive implementation that would use a loop or recursion.\n\n_It's clever because it doesn't use any built-in functionality in Python._\nThat's not clever. That's", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return float(n ** 2 + m ** 2) - float(n ** 2 + m ** 2) / 2\n\nI'm not a python programmer, but I would have thought that you could just return the sum of the integers from n through m.\n\nI agree, but I think the point of this is to avoid using division.\n\nI don't see why division would be a problem?\n\nBecause division is slow and Python has a fast (and correct) approximation built into the language.\n\nPython is slow, but division is not.\n\nPython is slow, but division is not.\n\nI think you meant to say that division is fast, and Python is slow.\n\nI think you meant to say that division is fast, and Python is slow.\n\nPython is fast, but division is not.\n\nIt's not that python is slow, it's that division is fast.\n\nPython is fast, but division is not.\n\nI think you meant to say that division is fast, and Python is slow.\n\nPython is slow, but division is not.\n\nI think you meant to say that division is fast, and Python is slow.\n\nPython", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def round(n):\n    \"\"\"Round the input to the nearest integer.  Return the rounded\n    integer.\n    \"\"\"\n    if n < 0:\n        return -n\n    if n == 0:\n        return 0\n    if n == m:\n        return m\n    return n\n    def convert_to_binary(n):\n    \"\"\"Convert the integer n to binary.  Return the binary number.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == m:\n        return -m\n    return int(n)\n    def avg(n, m):\n    \"\"\"Return the average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n * m + 1) / (n + m)\n\nThis is a simple solution. I have seen a similar one to this in a different language. The main advantage is that it is really simple to implement. The main disadvantage is that it doesn't give the correct result for the first two inputs.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n\n    # convert to binary\n    binary = bin(n)\n    # round down\n    return binary & (m - n)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    round = int(round(n))\n    b = int(b(m))\n    return round + b + n + m\n\nThis is really neat.\nI'm not sure how useful it would be in practice, but I like the idea.\n\nI've found it useful in practice. It's a pretty simple extension of the concept of the floor function, and it's a nice way to approximate an average.\n\nI don't think it's an extension of the concept of floor. It's more like a combination of floor and round.\n\nIt is an extension of the concept of floor. Floor takes a number n and returns the largest integer less than or equal to n. If n is 0, floor returns 0.\nRounded_average takes a number n and a number m, and returns the largest integer less than or equal to n. If n is greater than m, it returns -1.\n\nThe floor function is defined as\nfloor(x) = x if x > 0 else 0\nThe rounded_avg function is defined as\nrounded_avg", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    return int(round(n / m, 3)) + int(round(m / n, 3))\n\nI like it. It's a simple, elegant algorithm.\nI think it's a good example of a problem where the answer is not obvious.\n\nI agree, I had no idea how to do it. I think I would have used a different algorithm.\n\nI think it's a good example of a problem where the answer is not obvious.\n\nI agree, I had no idea how to do it. I think I would have used a different algorithm.\n\nThis is a good example of a problem where the answer is not obvious.\n\nI agree, I had no idea how to do it. I think I would have used a different algorithm.\n\nI think it's a good example of a problem where the answer is not obvious.\n\nI agree, I had no idea how to do it. I think I would have used a different algorithm.\n\nI think it's a", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (int(n * m) + int(m)) % 2\n\nI'm not sure I understand the point of this code. It's just a round-trip to int().\n\nIt's just a toy example. I think it's pretty clear that it is not a practical solution to the problem.\n\nI think the point of the exercise was to write a Python version of the C++ code.\n\nThe Python version isn't even close.\n\nI'm not sure it's fair to say it's not even close. It's a toy example, but it's also the first thing I thought of when I saw the problem.\n\nI think it's fair to say that, because it's not close. It's not even close to being a good solution. It's not even close to being a reasonable solution. It's not even close to being a solution.\n\nI guess it's fair to say that it's not a good solution. I think it's a reasonable solution, though.\n\nI think that's a fair assessment. It's not a good solution, but it's a reasonable one.\n\nI think it's fair to say that it's not a good solution.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    m = m + 1\n    n = n - 1\n    return int(n + m) & 1\n\nI think this is a bad idea.\n\nThe reason is that the author is using a hash table for the result. This is very likely to cause a hash collision, and then the hash table will be very likely to be full, and then it's likely to be a complete mess.\n\nI'm sorry, but I'm not understanding. What is a hash table?\n\nThis is a hash table:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    # This is the loop that will do the rounding\n    for i in range(m):\n        if n % i == 0:\n           return -1\n        else:\n           n = i\n           return n\n\nI think it's better to use a loop rather than a recursive function.\n\nfor i in range(m):", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    return int(rounded_avg(n, m))\n\nI'm sure there are some more efficient ways to do this, but this is my first crack at it.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) / 2\n\nI'm not sure I understand what's happening here. Why is it returning -1 for 7 and 5?\n\nI think it's because 7 is greater than 5, so it rounds to -1.\n\nIt's the opposite: it's rounding down to the nearest integer, and for 7 and 5 it's the same.\n\nThis is a nice tool. I think I'll use it in my next project.\n\nThis is a nice tool. I think I'll use it in my next project.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    # We can't represent numbers in binary greater than 31, so we'll\n    # round the result to the nearest integer.\n    # If the number is less than 31, we'll simply return the number.\n    if n > 31:\n        return -1\n    return m\n\n>>> round(avg([1, 2, 3, 4], [5, 6, 7, 8, 9])*2)\n0b11\n>>> round(avg([1, 2, 3, 4], [5, 6, 7, 8, 9], 10))\n0b11010\n>>> round(avg([1, 2, 3, 4], [5, 6, 7, 8, 9], 10)*2)\n0b111100\n>>> round(avg([1, 2, 3, 4], [5, 6, 7, 8, 9], 10), 2)\n0b110110\n>>> round(avg([1, 2, 3, 4], [5, 6, 7, 8, 9], 10), 3)\n0b110111\n>>> round(", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (int(n) + int(m) / 2) % 2 == 0\n\nWhat is this doing?\n\nIt's an implementation of the average algorithm.\n\nWhat is the average algorithm?\n\nIt's the algorithm to compute the average of a sequence of numbers.\n\nWhy is it called the average algorithm?\n\nBecause it's the algorithm that is used to compute the average of a sequence of numbers.\n\nHow does it work?\n\nIt's a recursive algorithm.\n\nWhat's a recursive algorithm?\n\nIt's an algorithm that calls itself.\n\nWhat does that mean?\n\nIt means that the algorithm calls itself.\n\nHow does it call itself?\n\nIt calls itself with a parameter.\n\nWhat's a parameter?\n\nA parameter is a variable that is passed from a function call to a function call.\n\nHow does the average algorithm call itself with a parameter?\n\nIt calls itself with a parameter called \"n\" and a parameter called \"m\".\n\nWhat's a \"n\"?\n\nA \"n\" is a parameter.\n\nWhat's a \"m\"?\n\nA \"m\" is a parameter.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return (n + m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return n + m\n\nSee also\n Integer arithmetic\n\nExternal links\n Python's documentation on the round() function.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    result = 0\n    while m > n:\n        if n % 2 == 0:\n            result = result + rounded_avg(n-m, m)\n            if n % 3 == 0:\n                result = result + rounded_avg(n-m, m, n-m+1)\n              if n % 4 == 0:\n                  result = result + rounded_avg(n-m, m, n-m+2)\n                if n % 5 == 0:\n                   result = result + rounded_avg(n-m, m, n-m+3)\n                 if n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0b11000 + 0b11001 + 0b11010 + 0b11011 + 0b11100", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def __init__(self, n, m):\n    self.n = n\n    self.m = m\n    self.answer = []\n    self.round = 0\n    self.round_b = 0\n    self.round_c = 0\n    self.round_d = 0\n    self.answer.append(n)\n    self.answer.append(m)\n    self.answer.append(n+1)\n    self.answer.append(m+1)\n    self.answer.append(n+m)\n    self.answer.append(m+n)\n    self.answer.append(n+m+1)\n    self.answer.append(m+n+1)\n    self.answer.append(n+m+2)\n    self.answer.append(m+n+2)\n    self.answer.append(n+m+3)\n    self.answer.append(m+", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return int(n) + int(m)\n\n(with apologies to the original poster)\n\nI have a feeling that this is a joke.\n\nIt's not a joke, it's a test.\n\nI'm not sure it's a very good one. I was expecting something more difficult.\n\nI think the idea is to see if the person is smart enough to not just use a loop.\n\nI would not have used a loop. I would have used a recursive function.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a small modification.\n\nI would have used a loop, but with a", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = 0\n    while n <= m:\n        a += n\n        if n > m:\n            return -1\n            b = (a >> 1) & 0b1\n             c = a & 0b1\n             return (b + c)\n    return a", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n/m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n*m + (n+1)*m + (n-1)*m + (n-2)*m +...", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return n + m\n    # Round to the nearest integer.\n    return floor(n / m)\n\nI like it, but I think I'd prefer to use an arbitrary number of bits rather than two.\n\nI like the idea of using a fixed number of bits.\n\nI'd just use the first bit.\n\nI would use 0b11 for n > m and 0b11010 for n < m.\n\nThe question is: what's the point?\n\nI like the idea of using a fixed number of bits.\n\nThe question is: what's the point?\n\nI like the idea of using a fixed number of bits.\n\nThe question is: what's the point?\n\nI like the idea of using a fixed number of bits.\n\nThe question is: what's the point?\n\nI like the idea of using a fixed number of bits.\n\nThe question is: what's the point?\n\nI like the idea of using a fixed number of bits.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m)/2\n\nI'm not sure I understand the last line. It seems like you're dividing by 2 twice in the same expression.\n\nIt's not dividing by 2, it's flooring to the nearest integer.\n\nAh, I see. Thanks.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0bdef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    result = 0\n    for i in range(n+1):\n        result += m\n        result *= 2\n        if i == m:\n            result = -1\n    return result\n\nThis is a good example of a bad solution to a problem that should not be solved with code.\n\nI'd rather see a solution like this than the \"use a library\" solution.\n\nThis is a problem that should not be solved with code.\n\nWhy not?\n\nBecause it's a bad solution to a problem that should not exist.\n\nI disagree. Sometimes it is nice to have a solution that works on arbitrary inputs without having to worry about the details of the problem.\n\nI guess it's a matter of opinion, but I think that's a bad solution to a problem that should not exist.\n\nThat's a very odd thing to say. Why should there be a problem that should not exist?\n\nBecause it's a solution to a problem that should not exist.\n\nYou are not making any sense.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0.5 + (n - m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    a = n\n    while a <= m:\n        if a % 2 == 0:\n            a = a % 2\n             b = a + a % 2\n             c = b + b % 2\n             d = c + c % 2\n             e = d + d % 2\n             f = e + e % 2\n             g = f + f % 2\n             h = g + g % 2\n             i = h + h % 2\n             j = i + i % 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n ** m + 1) & 0b1 << m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = n\n    m = m\n    while n > m:\n        if n % 2 == 0:\n            n = n / 2\n            return -1\n         m = m / 2\n         if n == m:\n            return n\n    return n\n\nThis is not correct.\n\nIndeed, the correct answer is 0b10111010, not 0b11010110.\n\nIt's not correct because it rounds the _average_ to the nearest integer, not the _numbers_ in the average.\n\nIncorrect.\nThe \"rounding\" in the function is done by converting the decimal to binary.\n\nI'm not sure what you mean by \"converting the decimal to binary\".\nThe function does not round the numbers in the average to the nearest integer, it rounds the _average_ to the nearest integer.\n\nIt's not the _average_ that's being rounded", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n+m)/2.0", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return n + (m - n) / 2\n\nI don't get it.\n\nIt's a joke.\n\nI'm glad you explained that, I was confused.\n\nI'm confused too.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.\n\nI think it's a joke.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n - m) / (n+m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return -(m - n) * 2 + (m + n) / 2\n\nI'm not sure I understand the use case for this function, but here's a\nmore \"elegant\" solution.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n / m) * (2**(-n)) + (n / m)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    m = int(m)\n    return (n + m) / 2.0 + int(n) - int(m)\n\nI'm a bit confused about the last line. What does the int(n) - int(m) do?\n\nIt's the bitwise complement of n - m.\n\nI think the following is clearer:\nreturn (((n + m) / 2.0) + 1) - (((n - m) / 2.0) + 1)\n\nI like this solution better.\n\nI don't. It's much harder to read, and it's not clear that it's the same.\n\nWhy is it harder to read?\n\nBecause it's a bunch of new operators that aren't used anywhere else.\n\nI'd argue that it's actually easier to read, but I'm not going to argue about it.\n\nThe problem with these questions is that they're not really testing for anything. They're testing for your ability to write a function with a given interface.\nThe answer I gave is almost identical to the one you gave, but the question is testing for", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) % 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return m*(n+1)/2\n\nThat's not the same as the article's code.\n\nI think it's a reasonable approximation.\n\nI think the article's code is better, and more compact.\n\nI've heard that this is one of the hardest problems to solve.\n\nit's not that hard.\n\nWell, this is a very interesting problem.\nI think the best way to solve this problem is to use a sorting algorithm.\n\nI'm going to go out on a limb here and suggest that this is not the best way to solve this problem.\n\nI'm going to go out on a limb here and suggest that this is a very bad way to solve this problem.\n\nI'm going to go out on a limb here and suggest that this is a very bad way to solve this problem.\n\nI'm going to go out on a limb here and suggest that this is a very bad way to solve this problem.</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    if n > m:\n        return -1\n    return int(m) + n\n\nThe only case where this is not correct is when n and m are both negative, or when n is greater than m.\n\nThe standard library's random module has a function called round that does the same thing.\n\nIn case you're curious, this is what you get with this code:\n>>> round(1, 5)\n\t\t0b11\n>>> round(7, 5)\n\t\t-1\n>>> round(10, 20)\n\t\t0b1111\n>>> round(20, 33)\n\t\t0b11010\n>>> round(1, -5)\n\t\t-1\n>>> round(-7, -5)\n\t\t-1\n>>> round(10, -20)\n\t\t-1\n>>> round(-20, -33)\n\t\t-1\n>>> round(1, 5)\n\t\t0b11\n>>> round(7, 5)\n\t\t-1\n>>> round(10, 20)\n\t\t0b", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return ((n & 1) + (m & 1)) & 1", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    while n > m:\n        n = int(n - m)\n        if n > 0:\n           return -1\n         else:\n            return n\n    return int(round(avg(n, m)))\n\nWhy not just use the built-in integer division operator?\n\nI'm not sure what you mean. I'm not using Python.\n\nIn python, you can use the built-in division operator (the % sign) to get an integer result.\n\nIf you're interested in this, you should also look at the _C_ function _divmod_, which is the same as _round_, but with more features.\n\nYou're right that the division operator can be used to get a result that is the same as rounding, but that's not what I'm doing here.\nI'm not using the division operator because I'm using a different method for rounding than the one that the division operator uses. I", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0bdef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n - m) / 2.0", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    else:\n        return 0\n    # round the answer to the nearest integer\n    return (n + m) / 2", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return 0b1 << (n+1) - m + 1\n\nI'd suggest replacing the `0b1` with `0b1 << n` to avoid overflow.\n\nI'd suggest replacing the `0b1` with `0b1 << n >> m` to avoid overflow.\n\nI'd suggest replacing the `0b1` with `0b1 << n >> m >> n` to avoid overflow.\n\nI'd suggest replacing the `0b1` with `0b1 << n >> m >> n >> m` to avoid overflow.\n\nI'd suggest replacing the `0b1` with `0b1 << n >> m >> n >> m >> m >> n` to avoid overflow.\n\nI'd suggest replacing the `0b1` with `0b1 << n >> m >> n >> m >> m >> n >> m` to avoid overflow.\n\nI'd suggest replacing the `0b1` with `0b1 << n >> m >> n >> m >> m >> n >> m` to avoid overflow.\n\nI'd suggest replacing the `0b1` with `0b1 << n >> m >> n >>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    m = m - n\n    return ((n + m) % m) + (m % n)", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return m\n    return n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return ((n + m) * (n - m)) / 2\n\nThis is a horrible way to calculate the average. The average of 1 through 5 is 5.5. The average of 7 through 10 is 7.5. The average of 10 through 20 is 17.5. This function doesn't even round correctly.\n\nYour function should use the following logic:\nround(avg(n, m))\nwhere avg(n, m) is your function above.\n\nYou are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n\nThis is a horrible way to calculate the average. The average of 1 through 5 is 5.5. The average of 7 through", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a, b = n, m\n    return a + b", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) ** 2 + (n - m) ** 2\n\nThis is a simple example of a primitive recursive function.  The function is defined by the recursion of the definition of the function.  The function takes two parameters, n and m, and returns the average of the integers from n through m, inclusive.  The function rounds the answer to the nearest integer and converts that to binary.  If n is greater than m, the function returns -1.  The function is primitive recursive because the recursion is done with a single parameter, n.  The recursion is of the form:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return [1 for n in range(n+1, m+1) if n % m == 0] + [m for m in range(n+1, m+1)]\n\nThe code is not bad, but it's not obvious what the goal is. I would add a comment to explain what the code is doing, and to emphasize that the function returns the average rounded to the nearest integer.\n\nI don't like the way it uses a range of integers instead of a range of floats.\n\nI don't like the way it uses a range of integers instead of a range of floats.\n\nI think that is a good point. If we do that, we might as well use the float type.\n\nI would also consider using a list of integers instead of a range.\n\nI would also consider using a list of integers instead of a range.\n\nThe code is not bad, but it's not obvious what the goal is. I would add a comment to explain what the code is doing, and to emphasize that the function returns the average rounded to the nearest integer.\n\nI don't like the way it uses a range of integers instead of a range of floats.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    return m / n\n\nI am not sure I understand how this works. Can you explain?\n\nIt's a simple function that takes two numbers, n and m, and returns the average of the numbers from n through m.\n\nIt's a simple function that takes two numbers, n and m, and returns the average of the numbers from n through m.\n\nYes, but the code inside the function is what I am wondering about.\n\nI think the code is pretty self-explanatory.\n\nThe code is self-explanatory, but I am not sure how it works. I thought it was a bug, but it works.\n\nIt works because it's correct.\n\nYes, but I am wondering what it is doing.\n\nIt's taking two numbers, n and m, and returning the average of the numbers from n through m.\n\nYes, but how?\n\nIt's taking two numbers, n and m, and returning the average of the numbers from n through m.\n\nYes, but how?\n\nIt's taking two numbers, n and", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    a = n\n    b = m\n    while a > b:\n         if a % 2 == 0:\n              return a / 2\n              b = a\n    return b\n    print \"Rounded average of \", rounded_avg(1,5), \" is \", rounded_avg(7,5), \"\n    print \"Rounded average of \", rounded_avg(10,20), \" is \", rounded_avg(20,33), \"\n    print \"Rounded average of \", rounded_avg(10,33), \" is \", rounded_avg(20,33), \"", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    n = int(n)\n    while n > m:\n         if n % 2 == 0:\n             return -1\n            n -= 1\n            if n == m:\n               return m\n             n = n / 2\n             return n", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n + m) % (n + m - 1)\n\nThis is similar to the example in the book, but it is a bit more readable.", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    a = n\n    b = m\n    c = 0\n    while c < a:\n        c += a\n        if a == b:\n            b = c\n            c = b + (a - b) / 2\n            a = c\n            b = c + b\n    return b\n\nThere's a typo:\nb = c + b\nShould be:\nb = b + b\n\nYou're right! I'll fix it.\n\nI wonder what the average number of comments on Hacker News is.\n\nWell, it's more than one.\n\nThe best part is that the code is so short it can be used as a bash alias.\n\nI made a script to calculate the average of a list of numbers.\nIt works like this:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    for i in range(n, m):\n        if i % 2 == 0:\n            return i\n         else:\n            return -1\n    return i\n\nWhy do you use a loop?\n\nBecause it's a _shorter_ way of doing it than the other way I could think of.\n\nI mean, you could just do:", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    def n_to_binary(n):\n    \"\"\"Return the binary representation of integer n.\n    Return the lowest two bits of the binary representation.\n    Example:\n    n_to_binary(1) => \"0b01\"\n    n_to_binary(2) => \"0b00\"\n    \"\"\"\n    return (n & 0x7f) & (n & 0x3f)\n    def m_to_binary(m):\n    \"\"\"Return the binary representation of integer m.\n    Return the lowest two bits of the binary representation.\n    Example:\n    m_to_binary(2) => \"0b01\"\n    m_to_binary(3) => \"0b00\"\n    \"\"\"\n    return (m & 0x7f) & (m & 0x3f)\n    def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return floor(n/m) + floor(n/m) + floor(n/m) + floor(n/m) + 1\n\nThat's a lot of flooring.\n\nI'm not sure what you mean by \"that's a lot of flooring\". Do you mean it's too much?\n\nYes.\n\nIf you were to use the naive solution, you'd have to do the same amount of flooring, but you'd also have to test for overflow.\n\nI'm not sure what you mean by \"the naive solution\".\n\nThe naive solution is to add the numbers modulo n, then add the remainders.\n\nI'm still not sure what you mean by \"the naive solution\".\n\nI'm not sure what you mean by \"I'm still not sure what you mean by \"the naive solution\"\".\n\nWhat's the problem?\n\nThe problem is that you're not making any sense.\n\nYou're not making any sense.\n\nWhy are you talking to yourself?\n\nWhy are you talking to yourself?\n\nYou're not making any sense.\n\nYou're not making any sense.\n\nYou're not", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n ** 2) + (m ** 2)\n\nSee also\nList of special numbers (includes a few other ways of finding the average of n and m)\n\nReferences\n\nExternal links\n\nPython module for calculating the average of two numbers\nPython module for calculating the average of two numbers using the ROUND function</s>", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if m == 0:\n        return -1\n    for i in range(n):\n        if i < m:\n           return i\n        else:\n           return -i\n    return m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n * m + 1) % 2\n\nIt's a little more complicated than that. You have to know how to round.\n\nIt's not that complicated. You could use a library function that does it for you.\n\nI have a function called round_up that rounds up to the next integer. I use it in a lot of places where I'm rounding.\n\nI use the standard library's round() function.\n\nI use a simple function that rounds to the nearest integer.\n\nI use the standard library's round() function.\n\nI use a simple function that rounds to the nearest integer.\n\nI use the standard library's round() function.\n\nI use a simple function that rounds to the nearest integer.\n\nI use the standard library's round() function.\n\nI use a simple function that rounds to the nearest integer.\n\nI use the standard library's round() function.\n\nI use a simple function that rounds to the nearest integer.\n\nI use the standard library's round() function.\n\nI use a simple function that rounds to the nearest integer.\n\nI use the standard library's round() function.\n\nI use", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    return (n * m + 1) % m", "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\" \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return n\n    return n/m"]]