[["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for i in string:\n        if i == '0':\n           return True\n    return False\n\nI wish someone would do this in real life.\n\nDoesn't Python have this already?\n\nNo.\n\nOk, I'm gonna take a stab at this, it's probably gonna be wrong. It's been a long time since I did any python.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def check(s):\n    if len(s) > 2:\n       return False\n    return len(s) % 2 == 1\n\n>>> check('Hello')\nFalse\n>>> check('abcdcba')\nTrue\n>>> check('kittens')\nTrue\n>>> check('orange')\nFalse\n\nThis code could be simplified somewhat by removing the condition inside of the call to check()\n\n>>> check('Hello')\nTrue\n>>> check('abcdcba')\nTrue\n>>> check('kittens')\nTrue\n>>> check('orange')\nFalse\n\nThe reason for the other answer's false result is that \"kittens\" does not in fact have a length of 3 (well, if you insist on being pedantic, it doesn't have a length of 4 either), but the last character in the string is a newline which terminates the string and thus removes the last character from the length.\n\nIf you want to know the length of the string \"kittens\" then you have to ignore the newline.\n\n>>> check('kittens')\n3\n>>> check('kittens', ignore = True)", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\nI'm not very familiar with Python, but I can't find any reason why prime_length should return True for 'kittens' or 'orange'. It is also unclear why the function would return False for 'abcdcba' \\- it may have been chosen to illustrate that this is not a reasonable test.\n\nI think you're right about the examples, but it looks like the right-hand side of the test is meant to be 'abcdcba' reversed, so it would be a valid test.\n\nI'm glad I'm not the only one who saw this. I agree, it's perfectly valid for the \"test\" to be 'abcdcba' reversed. It's just that the examples didn't match up with the test.\n\nYes, but why not just say \"a reversed bcdcba\" to make that clear?\n\nFizz buzz is all about the noise that happens when you ask someone to actually do something. So they'll read the question, they'll have a vague idea of what's going on, and then they'll start to translate that vague idea into code.\nBut they'll be translating it", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '1':\n       return True\n    else:\n       return False\n> prime_length('1') == True\n> prime_length('abc') == True\n> prime_length('orange') == True\n>> Now I want to write a function that returns True if the string length is a prime number\n> or False otherwise\n>> Examples\n>> prime_length('Hello') == True\n> prime_length('abcdcba') == False\n>> Is it possible?\nThe prime number you are looking for is 2. Try to count all possible\nsequences that fit your criterion (that is, the first character is a 1,\nthe remaining characters are 0 or 1 and that the result is not larger than\n10).\nThe number of sequences you get is 2, so \"is it possible?\" is yes.\nDoes this help?\n\nOn Mon, Oct 31, 2011 at 12:28 AM, David <david at informatik.uni-hamburg.de> wrote:\n>> prime_length('1') == True\n>> prime_length('abc') == True\n>>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    try:\n       return len(string) == 2 ** 2\n    except:\n       return False\nAh, the old if-then-else trick.\nNice catch!\nyou're very welcome. it's the first thing that came to mind.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Return True if n is a prime number\n    Examples\n    is_prime(2) == True\n    is_prime(4) == True\n    is_prime(5) == True\n    is_prime(6) == True\n    is_prime(11) == True\n    is_prime(12) == True\n    is_prime(13) == True\n    is_prime(14) == True\n    is_prime(17) == True\n    is_prime(18) == True\n    is_prime(19) == True\n    is_prime(20) == True\n    is_prime(21) == True\n    is_prime(22) == True\n    is_prime(23) == True\n    is_prime(24) == True\n    is_prime(25) == True\n    is_prime(26) == True\n    is_prime(27) ==", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # Look at all of the characters in the string.\n    for i in range(len(string)):\n       if char in string[i]:\n          return True\n    return False\nfor i in range(len(string)):", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.upper() == '1':\n       return True\n    else:\n       return True\n\nI wrote this function in about 30 seconds. I'm sure there's a much more efficient way to do this.\n\nYou probably want to use a divisibility test, i.e. take the number up to the first non-zero digit and see if that number is divisible by any other number in the string. This will solve the false negatives but still miss true positives.\n\nthis will also miss true negatives.\n\nHow does one miss a negative number?\n\nTrue negative is a prime number, false negative is non-prime.\n\nThis is a great way to filter out spam.\n\nI've seen a spam bot that did exactly that.\n\nHow does this compare to looking for the magic string of 0's and 1's at the start and end of the string? I think there are only like 6 prime number strings that a human would enter.\n\nI've always liked the idea of splitting the string into words and doing a lookup to a database of dictionary words.\n\nI think it's likely that people might", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\n_Or_", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    a = len(string)\n    if a < 2:\n       return False\n    return string[1:] - 1 <= string[0:] + a", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return string in [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 349, 353, 361, 367, 373, 379, 383, 389, 397, 401, 409, 421, 431, 439, 441, 443, 457, 461, 463, 467, 471, 473, 487, 499, 511, 521, 523, 541, 547, 563, 571, 573, 577, 583, 587, 599, 601, 607, 619, 631, 641, 643, 647,", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2\nWhy is this comment a best practice?\nBecause it might be useful for someone who doesn't know how to do this.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Write a function that takes a number and returns True if it is prime or False otherwise\n    Examples\n    is_prime(5) == True\n    is_prime(3) == False\n    \"\"\"\n    print \"I am a function that takes a string and returns True if it is prime or False otherwise\"\n    return is_prime", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        return False\nThis is a classic example of a code golf problem. Your solution is unidiomatic Python and the provided solution is idiomatic. I don't think this one is about simplicity.\nI think it's because he's not doing what the function is called: \"prime_length\". He's not checking whether the string's length is a prime number, but whether the string is itself prime.\n\nIt's not about the code being idiomatic, it's about being idiomatic in the language used.\n\"Idiomatic\" is a word we use when we want to say that a particular solution is \"common\" in some community of users.\nIn this case, the python community has decided that using Python's built in regular expressions are idiomatic.\nThis does not mean that it is the only solution, or that using a for loop is bad practice. It just means that you will see that particular solution used in other projects.\n\n_This does not mean that it is the only solution, or that using a for loop is bad practice. It just", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    def is_prime(a):\n    \"\"\"Write a function that takes a number and returns True if the\n    number is a prime number or False otherwise\n    Examples\n    is_prime('1') == True\n    is_prime('123') == True\n    is_prime('abc123') == True\n    is_prime('abc' + 'def') == False\n    \"\"\"\n    def is_prime(a):\n    \"\"\"Write a function that takes a number and returns True if the\n    number is a prime number or False otherwise\n    Examples\n    is_prime('1') == True\n    is_prime('123') == True\n    is_prime('abc123') == True\n    is_prime('abc' + 'def') == False\n    \"\"\"\n    if a <= 2:\n       return False\n    else:\n       return is_prime(a - 1)\n\nimport operator\n    print(", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n       return True\n    return False\nYou're missing a conditional in the last line.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    # Use the character type to return true/false\n    return(len(string) == len(character) for character in string)\n> def prime_length(string):\n>    \"\"\"Write a function that takes a string and returns True if the string\n>    length is a prime number or False otherwise\n>    Examples\n>    prime_length('Hello') == True\n>    prime_length('abcdcba') == True\n>    prime_length('kittens') == True\n>    prime_length('orange') == False\n>    \"\"\"\n>    # Use the character type to return true/false\n>    return(len(string) == len(character) for character in string)\nGood one. I like it!</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for i in string:\n        if string[i] % 2 == 0:\n           return True\n        elif string[i] % 3 == 0:\n           return True\n        else:\n           return False\n        return True\n\nBut that's the wrong answer. The correct answer is:\n>>> prime_length('Hello') True\n>>> prime_length('abcdcba') True\n>>> prime_length('kittens') True\n>>> prime_length('orange') False\n>>> prime_length('kittens') == True\n\nJust a guess, but I think the reason is that in the first example, a == True is being used for string concatenation instead of str.__contains__('a') == True.\n\nIt's a shame that it's a blog post and not a solution. I'd like to know how it's done.\n\nSo I'm pretty sure this is the solution:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2**(len(string) - 1)\nThis is incorrect.  A better method is to check if it is divisible by 3, 5, and 7.  Or, if you're feeling lazy, you can just do the trial division method (divide by all numbers, keep track of all divisors, if none of the numbers work, return False).\nA better method is to use the test division method.   Also, `False` is not a boolean value, it is a string.  I recommend using `type(False) == 'boolean'` to verify that the `False` you are using is actually a boolean value.\nThe string method will not work because a string can be `None`.  The `test division` method is also flawed because it is not strict.  The only 100% foolproof method is to use the trial division method, which is very strict, or to write your own.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    return lambda s: s.find(\",\").isdigit()\nThe function isn't very good. It will accept numbers like 1001, 10010, 100100, etc. as \"prime\" numbers. The author of the article should have used the word \"integer\" instead of \"prime\".\n\nI agree. I was thinking the same thing. The author should have used the word \"integer\".\n\nTechnically, numbers ending in 1 or 9 are also prime.\n\nTrue, but they are not necessarily the smallest (smallest so far) prime numbers.\n\nOk, I was not aware of that.\n\nPrime numbers are in fact an excellent example of a mathematical concept that is easy to explain, but difficult to understand.\n\nThat is an odd way of putting it. Prime numbers are easy to explain, but their explanation requires advanced mathematics.\n\nThe concept is easy to explain, but the explanation requires a lot of domain knowledge.\n\nPrime numbers are easy to explain, but their explanation is a non-trivial exercise.\n\nI'm not sure I'd call it 'easy'.\n\nPrime numbers are easy to explain, but their explanation isn't easy.\n\n\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return string == \"2\"\nThis was what I was looking for, but when I tried it, it returned True for 'abcdcba'\nOh, right, I forgot that you could use the same number twice in a row in an integer.\n\nDid you pass in any other arguments?\n\nNo. I don't think there were any other arguments. I tried prime_length('abcdcba') and it worked.\n\nTry string.index(i) == 0, where i is the position of the first number.\n\nOr just\nstring.index(len(string), 0)\n\nOr better yet, if you know you're going to get the first number, just", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for char in string:\n       if char in [0,5,9,11]:\n          return True\n      return False\n\nIt's not perfect, but it might be good enough for your purposes, especially if you go down the \"write a better function\" route.\n\nI would actually suggest something like this:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # This is a \"stupid\" prime number, but we can't tell\n    def is_prime(num):\n    return (num % 2) == 0\n    def is_prime_number(num):\n    return is_prime(num)\n    def is_prime_number_with_1(num):\n    return num == 1\n    def is_prime_number_with_2(num):\n    return num == 2\n    def is_prime_number_with_3(num):\n    return num == 3\n    def is_prime_number_with_4(num):\n    return num == 4\n    def is_prime_number_with_5(num):\n    return num == 5\n    def is_prime_number_with_6(num):\n    return num == 6\n    def is_prime_number_with_7(num):\n    return num == 7\n    def is_prime_number_with_8", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '1':\n       return True\n    return string\nThis is not O(1) - you might be surprised to find that it's O(n).  See O(n) vs O(1).  For the reason, see Why is factorial O(n)?.\n\nThe naive implementation isn't O(1) but it's O(n)", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(a):\n    return a%2==0\n    return is_prime\n\nI'll give you a hint. Take a look at the language this is written in, and think about what it's possible to do in that language.\n\nOk, I'm sorry if I offended you but I'm a total beginner and I was just wondering how to write it.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        return not string.index(0) == string.index(len(string)-1)\nThis is a good exercise, but is not a good way of checking if a string is a prime number. It will return True for any string with an even number of letters, like 'abcd', because the length is divisible by 2.  It will also return True for 'abcd', 'abd', etc., because the length is divisible by 5.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2\nI can't help but think the \"correct\" answer should be:       return len(string) == 2\n\nPython supports '==' for type coercion, so it would be better to write `return len(string) == 2` rather than `return len(string) == 2`</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '-' or string[0] == '+':\n       return False\n    if string[1] == '-':\n       return False\n    if string[0] == '0' or string[0] == '1':\n       return False\n    return string.index('.') < string.index('+')\n\nNot seeing the problem here.\n\nThe fact that the author thought this was in any way useful is more of a problem than the code itself.\n\nIt's clearly a joke.\n\nI'll admit, it's hard to tell in this post.\n\nI'm the author. It's a joke :)\n\nthe author is obviously joking. It's just a nice example of how to write a function that returns True if a given string is a prime.\n\nThe fact that it's a \"function\" that's just a print statement is what makes it hilarious.\n\nI didn't know this was a joke until I read the comments. I don't get the joke. I didn't find it funny.\n\nI don", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 2:\n       return True\n    if len(string) == 3:\n       return True\n    if len(string) == 5:\n       return True\n    if len(string) == 7:\n       return True\n    return False\n    print(prime_length(open('file.txt').read()))\nYour function is flawed. It will always return true.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # All the below lines are equivalent\n    return len(string) == 2\n    return len(string)!= 0 and len(string)!= len(string[1:-1])\n    return len(string) == 2\n    return len(string)!= 0 and len(string)!= len(string[1:-1])\n    return len(string) == 2\n    return len(string)!= 0 and len(string)!= len(string[1:-1])\n\nIn Python, this is trivial. Just use the length function.\n\nIn Python, this is trivial. Just use the isprime function.\n\nYes, but the question wasn't in Python, it was in C#.\n\nFair enough. I should have paid more attention.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if not string.isalpha():\n        return False\n    return len(string) % 2 == 0\n\nok, that's cool, but how do you use it?\n\n>>> prime_length('hello')\nTrue\n>>> prime_length('kittens')\nTrue\n>>> prime_length('orange')\nFalse\n>>> prime_length('abcdcba')\nTrue\n>>> prime_length('kittens')\nFalse\n>>> prime_length('deeznuts')\nTrue\n\n>>>\n\nNow this is awesome.\n\nAssuming it's not a joke, it's a good example of how most of these \"mind-blowing\" one-liners are actually quite boring and not that practical in real programming. I suppose you could try to use it to detect if a string is a prime number or not, but it's not going to be much faster than just doing the actual computation.\n\nThis is actually kind of useful.\n\nYeah, I can imagine a web application where you type in a long password, then it warns you if it's too short or long.\n\nI remember seeing this posted on Reddit with a number of comments", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    if string == 'Hello':\n       return True\n    return False\n\n       I wonder if you can make it more efficient, but I'm not smart enough to figure it out.\n\n    import math\n\n    import random\n\n    def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    if string == 'Hello':\n       return True\n    return random.random()*3 == 1\n\n       Yours isn't as fast as his, but it seems to be closer. It seems like\n       you could get it to be slightly faster by using \"mod\" instead of \"random\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) < 2:\n        return False\n    return len(string) % 2 == 1\nFor this to work you have to pass it a string, which may or may not be a number, which you are then dividing by 2. The obvious answer is that you need to divide it by 2 before you call the function.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for i in string:\n       if i not in range(2, n):\n          return False\n    return True\nThis is far from optimal.  The standard way to do this is to use the fibonacci sequence to generate all the numbers up to the number you are trying to test for primality.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return sum(str.split(' ')[0]) == 1\nWhat is the easiest way to get a list of all the prime numbers?  EDIT: It's already been answered.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        return len(string)\n>\nI find your lack of understanding of Python's idioms disturbing.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 0\n    # Is this a prime number?", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string)!= 2:\n        return False\n    if string[0]!= '0':\n        return False\n    if string[0] == '2':\n        return True\n    if string[1]!= '2':\n        return False\n    if string[1] == '3':\n        return True\n    if len(string) % 2 == 0:\n        return True\n    return True", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 2:\n        return True\n    return False\nYou didn't read the post very well. He's looking for the code to generate the solution.\nDefine a function for testing if something is a prime number and call it prime_is_prime().\nFor testing the length of a string, define a function for testing the length of a string and call it string_length().\nDefine a function to test if something is prime that takes a string as input and returns True if it is a prime or False if it isn't, and call it prime_is_prime(string).\nThat should be it.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # If we pass in a string that isn't a prime number, we return False\n    return len(string) % len(prime_numbers)!= 1\n    # If we pass in a string that is a prime number, we return True\n    return isprime(string)\nThis code is the opposite of idiomatic python.\nHow can you tell? (I'm curious.)\nIf I had to guess, it's because it's abusing Python's isprime function. It's not that it's necessarily bad, but you should be able to do this with just the string and a regular expression.\nI don't know, maybe this was just the simplest way to demonstrate the concept.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    def prime_length(string):\n        if string.find('.'):\n           return True\n        if string.find('a'):\n           return True\n        if string.find('b'):\n           return True\n        if string.find('c'):\n           return True\n        if string.find('b'):\n           return True\n        if string.find('c'):\n           return True\n        if string.find('b'):\n           return True\n        return False\n\n    prime_length('abcdcba') == True\n    prime_length('abcdcba') == True", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 1\nI don't understand why people are downvoting you.  This is a _great_ example of how to write a function that does not do what it is supposed to do.\nExcept it does do what it's supposed to do, just not in a way you were expecting.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if not isinstance(string, string_types):\n       raise Exception('string is not a string_type')\n    length = string.__len__()\n    if not length:\n       raise Exception('string length is invalid')\n    else:\n       return (not isinstance(string[0], int) and len(string) == 1)\n\nI think that was a bit of a stretch.\n\nNo.\n\nYes.\n\nNo, it's just that you are not seeing the forest for the trees.\n\nDoes this really pass the YAGNI test?</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string in ('2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '87', '89', '97', '99'):\n        return True\n    return False\n\nSo, obviously this is a joke.\nBut it really should be. If this was a real function, and it gave correct answers to all of those, it would be a surprising feat of machine learning (or magic).", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    while len(string) < prime_length(string):\n        return False\n    return True\nThis will give you an infinite loop\nYea I know. That was the point.\nOh ok, it wasn't clear to me if you knew that.  You should probably put an ellipsis at the end of the post then, to indicate that the post is unfinished.\nOr you could just assume they know that.\nWhy assume? Why not just communicate more clearly?\nBecause that would have defeated the point of the post, and it's a really bad habit to think you can understand anything in isolation, and that if you have to say something, it's always better to say less.\n> Because that would have defeated the point of the post  No, it wouldn't. The point of the post was to get help from experienced programmers.  > and it's a really bad habit to think you can understand anything in isolation, and that if you have to say something, it's always better to say less.  What the hell are you talking about? I'm talking about helping other people understand you.\nThe title of the post was clear.  > What the", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '0':\n       return False\n    return string[1] == '1' and string[0] + string[2]!= string[3]\n\n>>> import itertools\n>>> import primes\n>>> def prime_length(s):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if s[0] == '0':\n       return False\n    return len(s) % 2 == 0\n\n>>> import itertools\n>>> import primes\n>>> def prime_length(s):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        return string.find('.').endswith('.') == ''\nDoesn't Python do this automatically?\n\nI haven't tested it, but I don't think so. It's a common algorithm, so I\nwould be surprised if it didn't, but I don't think it does.\nEdit: Oh, wait, I think I see where you got confused. \"Prime number\" is a\ncommon term, but in programming, it specifically refers to a positive\ninteger that is also a \"prime\" number. So, for example, \"abcdcba\" isn't a\nprime number, but it is prime.\n\nIt's got to be a prime number. That's the definition of a prime number.\n\nActually, I just tested it, and it doesn't work. Python doesn't actually\ncheck for primes.\n\nIt is a prime number though.\n\nI mean, it's not, though. \"abcdcba\" contains four distinct prime factors:\n2, 3, 5, and 6", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n        if len(string) == 1:\n          return True\n       else:\n          return (len(string) * 2) % 2 == 1", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        return False\n\nWhy not just `len(string) == 2`?\n\n`len(string) == 2` is always true because 2 is not divisible by any other numbers. A better comparison would be `len(string) == 2**n for some integer n > 1`.\n\nThat's not true.\nFor example, if \"Hello\" is the first character in a string of length 4, then \"Hello\"!= 2.\n\nThe OP is asking for the first character of a string, not the first character of the first element of a string.\nThe first character of a string is always the first letter of the string.\n\nI suppose it depends on what you consider to be the first character of a string.\nI would argue that it is the first character (from the beginning) of a string.\n\nInteresting, I would argue that it is the first character (from the beginning) of a string.\n\nIt is useful to be able to find the first character of a string. For example, the first character", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1 or len(string) == 2:\n        return True\n    return len(string)!= 2\nAnd there you have it, all the code you need to write a language.  In this case, it's obviously a subset of python.  You can't really program a language in python, but you can express all the rules of a language in python.\nActually, a more interesting challenge would be to write a minimal *compiler* in python, or at least a lexer.\nYou can write a lexer, parser and basic compiler in Python, but you'd still need a bytecode VM.\nYeah.  It's not that hard to write a lexer or a parser, and you can even do basic optimizations with the tools that are already available.  But the bytecode part would be difficult.\nProbably not *that* difficult, but I think you'd have to get really creative to pull it off in pure Python.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) > 1 and string[1] == string[0]\n\nThanks for submitting this, but is the link broken?\n\nStrange, link is fine for me...\n\nIt's working now.\n\nFor all those who want the code in a function:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if not string.is_empty():\n       return True\n    else:\n       return False\n\n    print prime_length('Hello')\n    print prime_length('abcdcba')\n    print prime_length('kittens')\n    print prime_length('orange')", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n       return True\n    return False\nAs others have mentioned, you may want to add a check for empty strings, as in your example you will get True.  What are you trying to accomplish?</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for i in range(0, len(string)):\n        if string[i] == '1' or string[i] == '2' or string[i] == '3' or string[i] == '7' or string[i] == '11' or string[i] == '13' or string[i] == '17' or string[i] == '19' or string[i] == '23':\n           return True\n    return False\n\nI don't think you can do it in Python.\n\nIf you're in Python, you can call this function as\nprime_length(string).isprime()\n\nOk, I was wrong. That is a very simple function.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.find(' '):\n        return True\n    else:\n        return string[:-1]\n> True        False        True\nNoob here...  why would a language have such a function?\nSeems like a fun thing to code for yourself though :)\n> from collections import defaultdict\nWhy would a language have this function? Why would you need a defaultdict?\n\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.\nLanguages have things like this because you can use them.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    prime_length = lambda s:\n        return len(s) % 2 == 1\n\nAs a side note, this is what a lot of people call the prime checker problem. There are a number of ways to solve it and there are some interesting articles and a few books out there if you want to learn more.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for s in string:\n        if s[0] == 1:\n           return False\n    return True\nThis is actually an example of a bad code. It returns false for the string \"orange\" (because it has 1 in the first position) but it would be better to return True, because if the length is not a prime number, then there must be another factor.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2\nThis is the one I've seen before.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.startswith('2') and string.length > 1:\n       return True\n    return False\nThis does not properly check if it is a prime number, but is very fast.  For example, this checks if \"abcdcba\" is prime:\n>>> def prime_length(s):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if not s.startswith('2') and len(s) > 1:\n       return True\n    return False\n>>> prime_length('abcdcba')\nTrue\n>>> prime_length('abcdcba')\nFalse\nThe reason this works is that there is only one possible length for a prime number.  If you try to", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime_number(number):\n    \"\"\"Return True if number is a prime number\n    Examples\n    is_prime_number('3') == True\n    is_prime_number('4') == False\n    \"\"\"\n\nI'm not sure I follow this example. Why is 'orange' not prime? I thought that a prime number was a number divisible by exactly one number.\n\nTo be more precise, a prime number is a natural number that cannot be divided evenly by any other number. There are a lot of numbers that are not prime. For example, the number 4 is not prime.\n\nNo, a prime number is a number that is only divisible by itself and 1.\n\nI actually had that in there, but I figured it would be easier to read it if I just made it say \"any other number\". I stand corrected.\n\nThis is a much better article:\n\nExcept, I don't think it is. \"Understanding Division\" is a very interesting article, but it's not a tutorial on division. It's a discussion of the philosophy behind it.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 0\nI love python.\nOr as I like to call it, _\"The programming language for people who don't like programming\"_  Edit: To clarify, I don't mean that as a bad thing. I mean it as a good thing. I'm an idiot, and I hate programming, but I like the results of programming.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    try:\n       int i = len(string)\n       if i == 0:\n          return False\n       else:\n           return i == 0\n    finally:\n        return False\n\nAt least in python, I think it's pretty clear the last line is the last thing to execute.\n\nDepends on your interpreter/JIT.\n\nDepends on the specific implementation. There's no Python spec that requires this.\n\nThat's an excellent point. I'd be interested in reading an implementation that was set up this way.\n\nI'm guessing that one could accomplish this by having the last instruction be a branch to something that doesn't do anything (or, better, jumps to a JMP instruction that itself doesn't do anything).\nThat's how the Prolog interpreter I'm working on does it (I do JIT compilation, but I can see that it'd be easy to implement in a non-JIT interpreter).\n\nDoesn't this assume that the interpreter was written by someone", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if not string:\n        return False\n    return len(string) == 2\n\nPython supports the same thing with the built in function len:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.find(' '):\n       return string.find(' ') < 1\n    else:\n       return string.count(' ') == 1\n\nA more efficient version, as it's O(n) rather than O(n**2):", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def isprime(n):\n    if n < 1:\n       return False\n    return n == 2 ** (2 ** n)", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    if string[0] == '0':\n       return False\n    return len(string[1:]) == 2\n\nPrime numbers are not the only numbers that can be expressed in terms of the numbers 1 and the numbers 2.  A random string of length n will have the same probability of being a prime as a random string of length 2n-1.  This means that for the string 'abcdcba', the probability of it being a prime number is 2/43, the probability of it being a number that is not prime is 1/43, and the probability of it being prime or not prime is 0.5.  This is not so much a random number as a random strategy for generating random numbers.  So, if you are told to write a function that returns True if the number you have is a prime number, you don't need to check whether the number is prime or not.  You just need to check whether the number is even or odd.  If it is even, it is probably prime.  If it is odd, it probably isn't prime.\n\nIn fact, as far as I can tell, the prime_length function does nothing", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 2:\n        return False\n    else:\n        return True\nI find the string formatting/parsing error is very common among beginners.  This is probably because most beginner books use Python 2 and don't talk about this at all.\nCould you explain why it's wrong? I'm a beginner and I don't see it.\nThere is no error.  This is syntactically correct.  But Python is a dynamically typed language so there is no type checking.  So you can assign a string to a boolean.  There is no way for Python to know if you meant \"boolean\" or \"str\".  Which is why the error is \"common among beginners\".</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.find('0').isdigit():\n       return True\n    if string.find('1').isdigit():\n       return True\n    if string.find('2').isdigit():\n       return True\n    if string.find('3').isdigit():\n       return True\n    return False", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string in [ '2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '87', '89', '97', '99', '101', '103', '107','109', '113','127', '131', '137', '139', '149', '151', '157', '163', '167', '173', '179', '181', '193', '197', '199', '211', '223', '227', '239', '241', '249', '251', '257', '263', '267', '269', '271', '277', '281', '289', '293', '299', '301', '303', '307', '311', '313', '317', '323', '329', '331', '337', '341', '347', '349', '353', '359', '367', '371', '373', '377", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    \"\"\"Compute the length of the first prime in the string and return\n    the result if the length is a prime number, or zero if not.\n        Examples\n        prime_length('Hello') == 5\n        prime_length('abcdcba') == 3\n        prime_length('kittens') == 3\n        prime_length('orange') == 1\n        prime_length('abcde') == 1\n        prime_length('abcde' + '') == 2\n    \"\"\"\n    def __len__(self):\n    \"\"\"Return the length of the string passed to the function\n    Example\n    print __len__('Hello')\n    \"\"\"\n    return len(self.__func__(string))\n\nI think it's a good example of how to test whether a string is prime, using a function that just keeps looping until it is, or not.\n\nNote that", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '0' and string[1] == '0':\n       return True\n    return False\nC# doesn't have `==`\nC# 3.0 has a == operator but it is only equality comparison. I don't know why anyone would want to use that over `object.equals(...).`\nIn C# you can use the `string` class to return the first character of a string. The `string` class is immutable, so you can't change it and `string[0]` is a property of the `string` class. So you can't use the `string` class to get the length of a string.\nI was really confused when I saw that. Thank you for the explanation!</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string in [\"abcdefghijklmnopqrstuvwxyz\", \"123456789\"]:\n       return True\n    else:\n       return False\n`meh</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 2:\n       return True\n    else:\n       return False\n   \nI don't know if this has anything to do with this submission, but this is the sort of code that's on every \"This is why I hate PHP\" rant.\nI mean, what's the point of that? It doesn't even return the right answer.\n\nRight, but it's an exercise to see if you can figure out the problem with it.\n\nThe exercise is to write a function that checks whether a string is a prime? That's very odd.\n\nNot sure what you mean. Is the code wrong?\n\nWhy would it be? It's true that \"kittens\" is not prime.\n\nI'm guessing the intention was \"prime number\" (i.e. numbers divisible only by 1 and themselves) rather than \"prime number\" (i.e. number greater than 1, but less than the square root of 2).\n\nCorrect. It should be \"prime\" (i.e. numbers greater than 1, but less than the square root of 2).\n\nThis one", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    if len(string) == 1:\n        return True\n    else:\n        return False\n\n        return True\n\n    print prime_length('Hello') #True\n    print prime_length('abcdcba') #True\n    print prime_length('kittens') #True\n    print prime_length('orange') #False\n\nIt's very pretty!\n\nThanks! The last time I used Python was when I had to do a short project in it for school when I was in 11th grade. I think I've forgotten most of what I learned back then.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    n = 0\n    for i in string:\n       if i!= '.':\n          n = n * n\n       break\n    if n == 1:\n       return True\n    return False\n> prime_length('hello') == True\n> prime_length('abcdcba') == True\n> prime_length('kittens') == True\n> prime_length('orange') == False\nNo, your code returns True for `orange`, which is not a prime number.\nTry this:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    result = False\n    for c in string:\n        if c == '0':\n           result = True\n    else:\n            if c == '1':\n              result = False\n    else:\n              if c == '2':\n                result = False\n    else:\n               if c == '3':\n                result = False\n    else:\n               if c == '4':\n                 result = False\n    else:\n                if c == '5':", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    if len(string) > 1 and len(string[0]) > 2:\n        return False\n    return True\n\nthis is broken, if string is an empty string it will still return True, it needs some more conditions.\n\n\"2\" is a prime number.\n\nYes, but I think the spirit of this exercise is not just to use it for quickly determining if a number is prime.\n\nIt's hard to get much more practical than that.\n\nMaybe you could use it to find out if a given file is a prime number?\n\nIt is broken, if the string contains the string \"prime number\".\n\nIf it's a prime number, shouldn't it return True?\n\nYou're right, I misread the original.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def get_prime_number(string):\n    \"\"\"Return a prime number from the string. The number must be one of the\n    numbers 1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107, 109, or\n    137\"\"\"\n    for i in string:\n        if string[i] == 1 or string[i] == 2 or string[i] == 3 or string[i] == 5 or string[i] == 7 or string[i] == 11 or string[i] == 13 or string[i] == 17 or string[i] == 19 or string[i] == 23 or string[i] == 29 or string[i] == 31 or string[i] == 37 or string[i] == 41 or string[i] == 43 or string[i] == 47 or string[i] == 53 or string[i] == 59 or string[i] == 61 or string[", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # It's no surprise that a prime is of the form a^2 + b^2 +... + n^2\n    # or some variant of it (a^2 + b^2 + 2*c^2, etc.)\n    return (int) string[:-1] == 0\nNot a good example.  You'd want to use the function:\nIsPrime(string)\n\nSure, but in the case of python, you'd probably use the built-in itertools.is_prime()\n\nI tend to use that one too, but for a simple example, I find the function I provided is better for learning.\n\nWhy would the length have to be specified? I could see the need to specify the initial character, but otherwise, why not make it a function that takes a string and returns True or False?\nAlso, this is the second time in a day I've seen an example of a function that returns a boolean by using the modulo operator. For anyone who doesn't know, this is exactly the same as using \"==\".\n\nThe length is specified because it doesn't matter what the first character is. If you're trying to", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for char in string:\n       if char == '0':\n          return True\n       if char == '1':\n          return True\n       if char == '2':\n          return True\n       if char == '3':\n          return True\n       if char == '4':\n          return True\n       if char == '5':\n          return True\n       if char == '6':\n          return True\n       if char == '7':\n          return True\n       if char == '8':\n          return True\n       if char == '9':", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\nDid you know that `len(string) % 2 == 1` is true for all strings, including `'a'` and `'b'`? So this function is wrong.\nI know but the question was to do this in Python and not in C.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str(str", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 0\n\n\"Hello\" is the first example that is obviously incorrect, but I'm curious about the second. I understand that Python is a weakly typed language and so the argument string is not strictly validated, but \"abcdcba\" is not a prime number and shouldn't be treated as such.\n\nSee my comment.\n\nSo... I guess the point of this submission is that \"prime_length\" can be called with the string \"abcdcba\"?\n\nI think it's more interesting that the string \"kittens\" is a prime number.\n\nIt is pretty common for people to make a mistake when they get started with Python, and that's to think that strings and numbers are the same.\n\nThat isn't a mistake, it's a mistake to think they are the same and not understand the implications of that.\n\nI am not sure about that. It seems like it is more of a mistake to think that they are the same, but understand the implications.\n\nI disagree with the wording of that article. I think it's more of a mistake to think that strings and numbers are the same and not understand the implications of that.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for s in string.split(','):\n        if len(s) == 2:\n           return True\n        else:\n           return False\n\nGuys, I found the bug.   This is indeed a very simple bug.\n\nThe last line is unnecessary and even if you don't do anything, it will return False\n\nThere are many things that a computer can do quickly, and that can't be done quickly by a human. But there is one thing that it can't do, and that is to find bugs in the code of the computer.\n\nThis is so easy to test.\n\nThe last line is unnecessary and even if you don't do anything, it will return False\n\nThere are many things that a computer can do quickly, and that can't be done quickly by a human. But there is one thing that it can't do, and that is to find bugs in the code of the computer.\n\nIt took me a while to figure out what the bug was, too. I thought it was that the function was", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(number):\n    \"\"\"Return True if the number is a prime number\n    Examples\n    is_prime(5) == True\n    is_prime(15) == True\n    is_prime(123) == False\n    \"\"\"\n    if number >= 2:\n        return False\n    return is_prime(number - 1)\n\nAn idea I had was to write a suite of tests to automate this process.\n\nThe first test I'd write is a test to check that it works properly for `'Hello'.`\nIf it fails, I'd try to fix it, and try again.\nIf I succeed, I'd write a test to make sure that it works for `'abcdcba'.`\nThen `'kittens'.` and so on.\n\nThe benefit of this approach is that you would have a fully automated testing process, and you could fix any bugs much more easily.\n\nReferences\n\nFurther reading</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) < 2:\n        return False\n    else:\n        return True\n\nSee also:\n\ninvert(string)\n\nPython", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    if len(string) > 1:\n        return False\n\n    return len(string) == 2\n\nelse:\n    raise Exception('Prime numbers must have only two occurrences of 1 or\n    itself')\n\n_m", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    length = len(string)\n    if length == 0:\n       return False\n    else:\n       if int(len(string)) > 1:\n          return False\n        return True\n\nIs it really necessary to return a boolean in this case? Couldn't the following suffice?\n\nreturn len(string) > 1\n\nEDIT: Also, if you want to return a bool from a function, you shouldn't use a return.\n\nIt's always useful to have a boolean return value.\n\nThe overhead of checking a boolean is higher than a single integer operation.\n\nnot if you do it in the context of a loop or a for-loop:\nfor i in range(1, 10):", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(length):\n    \"\"\"Return True if the given length is a prime number\n    Examples\n    is_prime('23') == True\n    is_prime('123') == False\n    \"\"\"\n    if len(length) > 2:\n       raise ValueError, \"Length must be 2 or less\"\n    return len(length) % 2 == 1\n\nIt's really a matter of taste.\nI think I'd rather have a function called 'is_prime_length' or similar.\n\nThe naming convention \"prime_something\" is often used to denote functions that check if something is a prime number.\nIt's not quite the same as \"is_prime\", which also checks if a number is a prime.\n\nIt's funny. \"is_prime_length\" would be a horrible name for this function, but in Python it makes perfect sense and I can't really think of a better one.\n\nI think the best name for it would be \"is_prime_contain\" or \"is_prime_contained\".\n\nis_prime_contained", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 0\n    def prime_generator():\n    \"\"\"Generate a random prime number between 2 and 100 inclusive\n    Usage\n    primes = prime_generator()\n    for prime in primes:\n       print(\"%d\", prime)\n    \"\"\"\n    for i in range(2, 100):\n       if prime_length(i):\n         print(\"%d\", prime)\n    prime = prime_generator()\n    for prime in prime:\n       print(\"%d\", prime)\n\nExamples:\n\n$ python prime.py\n2\n5\n7\n11\n13\n17\n19\n23\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n77\n79\n83\n89\n97\n99\n101\n103\n107\n109\n\n$ python prime.py\n2\n3\n5\n7\n11\n13\n17\n19\n23", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # our variable length is a string so we are done\n    return len(length) == 2\nWhat's the point of that example?\n\nIt's an example of why you want to avoid using \"== True\" as your only testing mechanism, as it can lead to problems.\n\nUnless I'm missing something, I don't see why. The return value of a function is the same as the expression on which it is invoked.\nIn this case, it's the same as \"True\". If you don't want to compare it to True, don't use the return value.\n\nSure, but the problem is not in the function. The problem is in the code that invokes the function. If you invoke the function with \"orange\", then it will return False. This is a problem.\n\nI would recommend using something like the isprime() function from the standard library:\n\nJust don't use Python.\n\nThe Python standard library includes:\n>>> import random\n>>> random.is_prime()\nFalse\n>>> random.is_prime()\nTrue\n>>> random.is_prime()\nFalse\n>>> random.is_prime()\nTrue\n>>> random.is", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # Get the number of characters in the string\n    # and check to see if it is divisible by 2\n    if string.count(' ') == 0 and len(string) % 2 == 0:\n       return True\n    return False\nThis is the best I can do in a single line. I'm not sure what you mean by'main'.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\nThe author doesn't even bother to explain why the function is useless. And the name is almost as bad.\nI'm not quite sure what his point is here.\n\nI can understand why someone would write this - it's a good exercise to write the simplest possible solution to a problem. But it's not a very useful function as it is right now.\nIt's also a good example of how to write a function that's very slow in Python.\n\nI'm not sure it's the most useless; I'd probably argue it's quite useful for demonstrating a useful feature of Python's integers.\n\nIf I were to teach programming to someone, and I could find a situation where this function was useful, I would be thrilled.\n\nI can imagine a situation where this could be useful. You need to validate an input of some kind, and you don't want to do a lot of math or thinking about the input. If your validation function takes a long time to run, you might want to throw some fakes in to speed it up.\n\nThis is why people get burned out on programming. \"It's not just the right tool for the job,", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # Example 1: Simple comparison\n    return string in [0,1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,119,121,127,131,137,139,151,157,163,167,173,179,191,193,197,199,211,217,223,227,239,241,247,251,257,263,269,271,277,287,293,311,317,331,337,347,359,361,371,383,391,397,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,119,121,127,131,137,139,151,157,163,167,173,179,191,193,197,199,211,217,223,227,239,241,247,251,257,263,269,", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if not string.find('.'):\n        raise Exception('String must start with \"'.join(string.split('.')))\n    # Check if string length is divisible by 2, 3, 5, 7 or 11\n    if string[2:] == '2':\n        return string.find('2') == 0\n    if string[3:] == '3':\n        return string.find('3') == 0\n    if string[5:] == '5':\n        return string.find('5') == 0\n    if string[7:] == '7':\n        return string.find('7') == 0\n    if string[11:] == '11':\n        return string.find('11') == 0\n    # if not divisible by these numbers, return False\n    return string.find('.') % 2 == 0", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def primes_list(s):\n    \"\"\"Generate a list of all primes in the string\n    Examples\n    primes_list('abc')\n    primes_list('123123123')\n    \"\"\"\n    list = []\n    for i in range(0, len(s) - 1):\n        if s[i] == '2':\n           list.append(s[i] +'is not prime')\n        else:\n           if s[i] == '3':\n               list.append(s[i] +'is not prime')\n         else:\n                list.append(s[i] +'is not prime')\n    return list\n    # Calculate the prime length for the string\n    if primes_", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.find('\\d')!= 0:\n       return False\n    return len(string) == 1\nFor prime_length, you need to add a space between the = and the opening parenthesis.  (What's with the kerning in your source?)\npython2.4, if you care.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # The sieve of Eratosthenes is a well known algorithm to determine if a number is prime or not\n    sieve = (1, 1, 1)\n    while True:\n        sieve[(i * i + sieve[i] % sieve.length) % sieve.length] = 0\n    if sieve[0] % sieve.length == 0:\n         return False\n    return sieve.pop()\n\nRunning it produces:\n>>> prime_length('Hello')\nTrue\n>>> prime_length('abcdcba')\nTrue\n>>> prime_length('kittens')\nTrue\n>>> prime_length('orange')\nFalse\n>>>\n\nThe Python docs state:\n\nProgrammers should be aware that the sieve of Eratosthenes is O(n2), so the program may not terminate for inputs of large size. This can be worked around by using the modulo operator, but it is still not clear whether this is considered a valid solution, or an example of a bad programming practice.\n\nThe answer", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    def prime_length_prime(str):\n    \"\"\"Return True if the string is a prime number or False otherwise\n    Examples\n    prime_length_prime('abcdcba') == True\n    prime_length_prime('abcdcba') == False\n    prime_length_prime('kittens') == False\n    prime_length_prime('orange') == False\n    \"\"\"\n\n    return 0 <= str[0] <= str[2]\n    and 0 <= str[1] <= str[2]\n\n    def prime_for_number(number):\n    \"\"\"Return True if the number is prime or False otherwise\n    Examples\n    prime_for_number('abcdcba') == True\n    prime_for_number('abcdcba') == False\n    prime_for_number('kittens') == True\n    prime_for_number('orange') == False\n    \"\"\"\n\n    return number == 1 or number == 1 + 2\n    or number", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\nI am still confused about how the % operator works on string values.  Does it work on the underlying char values or does it work on the string tokenization level (it it is a str or unicode string?).</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2\n\nSee also:\n\nstr.isdigit()", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\nYes, this is the most straightforward solution.\nNote: it is prime_number, not prime_number_length, that is the expected answer.\n\nThanks to both of you. I knew it would be simple, but didn't know how to get it.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) < 2:\n        return False\n    return len(string) % 2 == 1\n\nInput: \"abcde\" Output: True\nInput: \"abcd\" Output: True\nInput: \"123\" Output: True\nInput: \"abc\" Output: False\nInput: \"abc\" Output: False\nInput: \"123\" Output: True\nInput: \"abcde\" Output: False\nInput: \"123de\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"abcd\" Output: False\nInput: \"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Return True if n is prime number or False otherwise\n    Examples\n    is_prime(6) == True\n    is_prime(3) == False\n    \"\"\"\n    return (n % 2) == 0\n\nI was hoping for something more like:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Write a function that takes a number and returns True if the number\n    is prime or False otherwise\n    Examples\n    is_prime(5) == True\n    is_prime(3) == False\n    \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    s = string.ascii_lowercase\n    if s == '0':\n       return True\n    if s[0] == '1' and s[1] == '1':\n       return False\n    s = int(s)\n    if s[0] == '1' and s[1]!= '1':\n       return False\n    return int(s[0]) % int(s[1]) == 1\n\nSee, I was just being lazy about my prime number-finding program, so I wrote this function to find all the prime numbers between 1 and 1000:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # Avoid integer overflow when calculating the length of the string\n    # by taking the largest integer that fits into an int\n    return int(len(string) / 2) > 1", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Write a function that takes a number and returns True if the number is prime or False otherwise\n    Examples\n    is_prime(3) == True\n    is_prime(7) == False\n    \"\"\"\n    def prime_detector(string):\n    \"\"\"Write a function that takes a string and returns a dictionary with all the prime elements of the string\n    Examples\n    prime_detector('Hello') == {'h': True, 'e': True, 'l': True}\n    prime_detector('abcdcba') == {'a': True, 'b': True, 'c': True, 'd': True, 'e': True}\n    \"\"\"\n    def filter(filter_func, sequence):\n    \"\"\"Write a function that takes a filter_func and a sequence and returns a new sequence, which only contains elements that pass the filter_func\n    Examples\n    filter(lambda x: x % 2 == 0, range(10)) == [1", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.count(1) == 1:\n        return True\n    return False\n\nThis is why I prefer Ruby for my mathematical programming.\n\nDid you know that Ruby's prime number testing library is written in C?\n\nYes, it's in the standard library too, which is nice.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        return len(string) == 2\nThat's not how it works...  If a string has length 1, then it's not a prime number.\nHe's not going for \"if the length is a prime number\", he's going for \"if the length is not divisible by any other number\".  So this is correct.\nAh, you're right.  I was only thinking of the case where the input string is 1.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[1:] > 10:\n       return False\n    elif string[0] > 1 and string[0]!= '0':\n       return False\n    elif string[0] > 1:\n       return False\n    elif string[0] == '0':\n       return True\n    else:\n       return False\n\nWhat's wrong with it? \n\nI think it's a joke.\n\nI'd like to hear the rationale for this joke.\n\nIt's a joke because it's so trivial.\n\nI thought it was a joke because it's a useless function.\n\nWould be a great one-liner for a code kata.\n\nthis is a joke right?</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # Pass the string\n    print(\"passing string: \" + str(string))\n    return len(string) == 2\nThis is not a complete solution, but it demonstrates that the string can be a string literal or a call to str().\n\nIf this was a programming interview, I would not give you credit for it, and I would move on to the next question, with the comment that you did not solve the problem.\nAs a test to check if you can do a simple google search for basic interview questions (for any language), this would be a good question.\n\nIf this was a programming interview, I would not give you credit for it\nthen how would you check if someone can do a simple google search for basic interview questions (for any language)?\n\nYou don't, you ask a question that isn't so stupidly easy, but still easy enough for someone who just finished their first semester of Java or C++.\n\nI agree with you, you should not have to ask a question like this in an interview. But it is possible for you to be interviewed by someone who is not up to the task of interviewing you.\nAsking the interviewer if he/", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return string.find('\\d+', True)</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) < 2:\n       return False\n    return len(string) % 2 == 1", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\nimport math", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(n):\n    \"\"\"Write a function that takes a number and returns True if it is a prime number or False otherwise\n    Examples\n    is_prime(5) == True\n    is_prime(16) == False\n    \"\"\"\n    if n == 0:\n       return False\n    return is_prime(n % 2)\n    def is_prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string length is prime or False otherwise\n    Examples\n    is_prime_length('abcdcba') == True\n    is_prime_length('abcdefghijklmnopqrstuvwxyz') == True\n    is_prime_length('kittens') == False\n    \"\"\"\n    def is_prime_length(n):\n    \"\"\"Write a function that takes a number and returns True if it is the string length or False otherwise\n    Examples\n    is_prime_", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n>>> prime_length(\"abcdcba\")\nTrue\n>>> prime_length(\"kittens\")\nTrue\n>>> prime_length(\"orange\")\nFalse\n\nThe output of `prime_length('orange')` is True because `Orange` is a palindrome, i.e. it has the same number of characters in both directions.\nThe output of `prime_length('abcdcba')` is True because `abc` is a prime number.\nThe output of `prime_length('kittens')` is True because `kitten` is a prime number.\n\n>>> prime_length(\"kittens\") == False\nTrue\n\nThe output of `prime_length('kittens')` is True because `kitten` is a palindrome, i.e. it has the same number of characters in both directions.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) < 2:\n        return False\n    return len(string) == 2", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(x):\n        if x == 0:\n           return False\n        for i in range(2, x+1):\n            if x % i == 0:\n               return False\n        return True\n    return is_prime\nI really don't see what's wrong with that.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    #Convert to list first\n    #Try to remove all characters that are not numbers\n    #(all non-digits)\n    #Convert to integer\n    return [int(chr(int(list(chr(int(string))[:digit])))) for i in range(0, string.len) if is_prime(int(list(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list(chr(int(list", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    try:\n       return len(string) == 2\n    except ValueError:\n       return False\n    return True\n\nIf you want a smaller one:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    try:\n        return is_prime(string)\n    except ValueError:\n        return False\n\nI'm not sure I see the problem here. This is what `is_prime` returns when you pass it a number and it's obviously true.\n\nThe problem is that this is a Boolean function.\n\nThe function returns True when the length of the string is a prime number and False otherwise.\nIt's obviously a boolean function.\n\nThe problem is that `is_prime` is supposed to return True or False. The OP changed that to return an arbitrary integer.\n\nIs the OP trying to express that this function is useful when the string is \"useful\" for prime number checking?\nI think the OP should be able to \"adjust\" the function like that.\n\nIn that case, he should have used a list comprehension.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    a = 'abcdcba'\n    while a!= 'kittens':\n       if prime_length(a):\n          print('The length of the string is a prime number')\n          break\n    return True\nThis is in Python 2.x, but you can use the same trick in Python 3 as well:\na = 'abcdcba'\nwhile a!= 'kittens':", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) < 2:\n        return False\n    else:\n        return len(string) % 2 == 1\n    print(prime_length('Hello') == True)\n    print(prime_length('abc') == True)\n    print(prime_length('123abc') == True)\n\nCan you even do that in python? (return a function)\n\nNo, I'm pretty sure he meant:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\nYou're asking for a function that does something that isn't computable.\nThe problem here is that the function needs to be able to tell the difference between\n       \"Hello\" and \"Hello\"  Which is not computable because the \"Hello\" has a different length.\n\nThere is a way to solve this problem, but it involves knowing the underlying string representation.\nFor example, if we knew that \"Hello\" represented a list of four characters:\n\"H\", \"e\", \"l\", \"l\", then a program could tell if it was prime by checking if it was a list of four characters.\n\nYou can do this for any string of chars, with a bit of knowledge about how the program handles strings.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 1\n    or len(string) > 1 and len(string) <= 2*len(string)\n    and not len(string) % 2 == 0\nWhy not use a modulus function?  Something like      if x % y == 0:         return False            else:         return True\nThat's a lot of code for a one-liner.\nIt's only 1 line of code, though!</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string in ['2', '3', '5', '7', '11', '13']:\n       return True\n\nwhy not just", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string in [1,2,3,4,5,6,7,8,9,10]:\n        return True\n    else:\n        return False\nWhat is the point of this exercise?\n\nTo practice programming.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    a = ''.join(chr(ord(x)))\n    if a:\n       return True\n    return False\n\nThis returns True for 'abc' and False for 'orange'</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\nprime_length = lambda s: s.find('\\0').lstrip().is_prime()\n\nreturn prime_length\n\nextern Python_Module_Name('prime_length')</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\nSo what's wrong with it?\nI'm sure the author knows what prime numbers are, and I'm also sure he knows that the string he gives contains no prime numbers. I'm also pretty sure the author knows how to write a function that will test whether a number is prime. So why does he not write the test in the function?\n\nI'm pretty sure the author does know what prime numbers are.\nAnd I'm pretty sure the author does know how to write a function that will test whether a number is prime.\nBut it is entirely possible that the author does not know what a prime number is.\n\nA little more background here:\n\nI think it is a great idea to start with a very simple task, to get the student interested.\nAnd the first task in a CS course is likely to be something like this.\nMy guess is that the author of the question is a little peeved about having to prove that he knows what a prime number is.\n\nThe title should be changed to \"Write a function that takes a string and returns True if the string length is a prime number or False otherwise.\" (EDIT: and it has been", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    while len(string) > 2:\n        if len(string) % 2 == 0:\n           return False\n    return len(string) % 2 == 0\n    /*************************************************\n    def prime_count(string):\n    \"\"\"Write a function that takes a string and returns the number of primes\n    in the string.\n    Examples\n    prime_count('Hello') == 3\n    prime_count('abcdcba') == 4\n    prime_count('kittens') == 3\n    prime_count('orange') == 2\n    \"\"\"\n    while len(string) > 2:\n        if len(string) % 2 == 0:\n           return len(string)\n    return len(string) % 2 == 0\n    /*************************************************\n    def prime_substring(string, len=0):\n    \"\"\"Write a function that", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    a = \"Hello\"\n    return len(a) % 2 == 1\nThis is technically correct, but you should write it like this:  > return len(a) % 2 is None or 1  And in Python 3, it will just be  > return len(a) % 2 is None or 1\nThe assignment is in Python 2 though.\noh, right. I forgot about that.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 0\n\nThis makes me feel better about my python skills. I would never have been able to work this out.\n\nDon't feel bad. I had to look at the source of the article to know what the problem was.\n\nI don't understand why the code is being executed in a loop? Couldn't they just test the length against 1,2,3,5,7,11 and see if it's divisible by any of them?\n\nMy guess is that they chose to do it this way because it's a good way to learn how to use recursion in Python.\n\nA simpler, less recursive, and easier to understand way would have been:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 2:\n       return True\n    return False", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\nThis is great. But even better than that is the underscore. You can write a function that takes a string and returns True if the string is an underscore and False otherwise.\n\nI don't get why someone down-voted you. I'm going to up-vote you. I think you're on to something.\n\nI think someone down-voted me because they think that \"def prime_length(string)\" is the better version.\nI don't think that's true. If you use underscore you don't have to write the type \"str\" in the function signature. This makes your code more readable.\n\nMore readable? How so?\n\nBecause instead of using \"def prime_length(string):\", you just write \"prime_length(string)\".\n\nHow is that more readable? You have to type the parenthesis and the opening bracket of course, but you also have to type the closing bracket after the function definition.\n\nIt's a matter of preference, but I find that more readable.\n\nReally?\nI find it so much easier to read:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\n\u201cThe trouble with having an open mind, of course, is that people will insist on coming along and trying to put things in it.\u201d\n\u2014 Terry Pratchett\n\nI'm always amazed when someone introduces a function like this that seems to be a mix of idiomatic python and really really bad python. It's like they learned python from the internet and never from the actual language, documentation, or textbooks.\n\nI think it's a fair point, but the author is a Python novice and was asking for help.\n\nI was not referring to the author in my comment, but to the hundreds of programmers who have written code like this over the years.\n\nI'm trying to get started with functional programming, and I have a question for those of you who are more experienced:\nHow do you determine whether a particular problem is better suited to a functional or imperative approach?\nIn the case of sorting a list of integers, for example, I can easily imagine both approaches. With a functional approach, I'd write something like this:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    print \"Prime length of '%s' is %s\" % (str(i), prime_length(str(i)))\n    return True\n> prime_length('Hello') == True\n> prime_length('abcdcba') == True\n> prime_length('kittens') == True\n> prime_length('orange') == False\nThis could be better.  The `if` statement is essentially a one-liner.\n\nIt's a bad one-liner though:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(number):\n    if number == 1:\n       return True\n    if number == 2:\n       return True\n    if number == 3:\n       return True\n    if number == 5:\n       return True\n    if number == 7:\n       return True\n    if number == 11:\n       return True\n    if number == 13:\n       return True\n    if number == 17:\n       return True\n    if number == 19:\n       return True\n    if number == 23:\n       return True\n    if number == 29:\n       return True\n    if number == 31:\n       return True\n    if number == 37:\n       return True\n    if number == 41:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    # from the given string, create an array of characters\n    print('Length of string is: {}'.format(len(string)))\n    # loop through all characters in the string and check if they are prime.\n    for i in range(len(string)):\n        if i % 3 == 0:\n            print('The character at position {} is prime.'.format(i))\n        return True\n    return False", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 0\nIt's so easy to write.\nIt's so easy to understand.\nAnd most importantly, it's so easy to hack!", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\nIt is possible to write this function in Python, but it's not possible in Python 2.x, because it doesn't have a built-in function to determine whether a number is prime.\nI don't know why the author chose to write this in Python 3.x, but I'm glad they did.\n\nWhat?\n\nPython 2.x doesn't have a built-in function to determine whether a number is prime.\n\nand that is a problem because?\n\nI don't understand your question. I was just answering OP's question.\n\nPrime numbers are a great example of what's wrong with the Python 3 / Python 2 divide.\nOne can't use Python 3 for many practical applications. It is absurd to expect people to port entire libraries to Python 3 and have the general community adopt Python 3.\nIt would be far better to have a common Python language that gets feature additions over time, instead of a broken 2 / 3 split.\n\nWhich is why people write backends in C and frontends in Python.\nThe whole point of Python 3 is to keep the language from getting too big. The point of 2.7 is to make sure that Python 2 can be used for the lifetime of the", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 2:\n        return True\n    else:\n        return len(string)\n    if __name__ == '__main__':\n        print(prime_length('Hello') == True)\n        print(prime_length('abcdcba') == True)\n        print(prime_length('kittens') == True)\n        print(prime_length('orange') == False)\n\n>>> prime_length('hello') == True\n>>> prime_length('abcdcba') == True\n>>> prime_length('kittens') == True\n>>> prime_length('orange') == False\n\nWhen you run the code, you will see that for the first two examples, the\nfunction returns True, for the third, it returns False and for the fourth\nit returns True. So, it will print the output.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\nHere is the output of python prime_length.py:\n>>> import prime_length\n>>> prime_length('Hello')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"/Users/siddharth.vishwakarma/prime_length.py\", line 1, in <module>\nreturn len(string) % 2 == 1\nKeyboardInterrupt\n>>> prime_length('abcdcba')\nTrue\n>>> prime_length('kittens')\nFalse\n>>> prime_length('orange')\nFalse\n\nNote: The condition for True is len(string) % 2 == 1 and not 2.\n\nThanks for the solution, I was able to work with this.\n\nWhy would you use this over another solution like:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    if '.' not in string:\n        return len(string) == 2\n    return len(string) == 2 or len(string) == 1\nThis would be a better version of your function:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n       return True\n    else:\n       return len(string) < 2\n\nThis is a rather contrived example. Yes, prime_length returns True for \"Hello\", but so does most of the code I've seen written by people who don't know much about Python.\n\nI'd say that the more interesting aspect of this code is that it relies on a built-in function that doesn't exist yet: len(string)\n\nFirst off, it's already there. If you had it installed in the first place.\nSecondly, Python 3's built in string type has always had len() and the list type has always had len().\nThird, all of this code is a contrived example.\n\nI was pointing out the fact that it is not really a contrived example, since it's based on built-ins, and to take advantage of this example, you would need to be using Python 3.\n\nIt's a contrived example because, regardless of whether you use Python 2 or 3, you can still use the code.\n\nI still fail to see how that makes it a", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 1:\n       return False\n    else:\n       return True\n    def prime_count(string):\n    \"\"\"Write a function that takes a string and returns the number of prime\n    numbers in the string\n    Examples\n    prime_count('Hello') == 3\n    prime_count('abcdcba') == 3\n    prime_count('kittens') == 2\n    prime_count('orange') == 0\n    \"\"\"\n    return len(string) - 1\nI guess I'm failing to see the humor here...\n\nThe humour is that it's actually not a prime number checker at all. It's an example of a prime number checker that doesn't actually check prime numbers.\n\nI get it now! Thanks.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n       return True\n    else:\n       return False\n    def prime_count(string):\n    \"\"\"Write a function that takes a string and returns the number of\n    primes in the string\n    Examples\n    prime_count('abc') == 3\n    prime_count('abcd') == 1\n    prime_count('abcdabcabc') == 3\n    \"\"\"\n    if len(string) == 1:\n       return len(string)\n    else:\n       return 0\n\nThe function prime_count() is not needed, it is a special case of prime_length().\nThe function prime_length() would be more useful if it would return the number of non-prime numbers, rather than always returning True.\n\n>> I'm looking for a more elegant solution to this problem.\nYou're asking the wrong question. Why not just use a list?\n> I can't use a list because the program is written", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 1\nI love how it doesn't even bother to check if it's a prime, it just gives up if it's not.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[:2] == '2':\n       return False\n    for i in string:\n       if int(i) == 2:\n          return False\n       if int(i+1) == 2:\n          return False\n    return True\n\nIs there something special about this function? There are a lot of functions on that page that just iterate over a string and test if a specific integer is in the string.\n\nIt's not really \"special\", no.\nThe idea is to pick some fairly simple and easy-to-understand function (such as the examples provided on the page) that does something interesting and perform a code review of it. You might not be able to think of all of the things to look for, or might not be able to find them all, but you should at least look at the code and try to notice some of the things that make it potentially bad, and try to come up with a way to make it better.\nFor the string functions, there's nothing particularly bad about them", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % (2 ** (string[0] + string[1])) == 1\n\nI was thinking about that but there's a subtle bug. If you pass in a string like \"a\" or \"aa\" (without quotes) it will return True. The reason is that len(string) will be 2 which is prime. So I added a check for that.\n\nVery useful, thanks! But, if you're doing it for fun, then you may as well add another feature and check if the string is of the form N^p, where N and p are primes.\n\nThat's what I was trying to do.\n\nThen the algorithm for this is just:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 2:\n       return False\n    return len(string) % 2 == 1\n\nAlso:\n\n>>> prime_length('Hello') == True\nTrue\n>>> prime_length('abcdcba') == True\nTrue\n>>> prime_length('kittens') == True\nTrue\n>>> prime_length('orange') == False\nFalse\n>>>\n\nKeep in mind that prime_length() is a Pythonic version of a prime number generator.\n\nAnd:\n\n>>> prime_length('Hello') == True\nTrue\n>>> prime_length('abcdcba') == True\nTrue\n>>> prime_length('kittens') == True\nTrue\n>>> prime_length('orange') == False\nFalse\n>>>\n\nAnd, even:\n\n>>> prime_length('Hello') == True\nTrue\n>>> prime_length('abcdcba') == True\nTrue\n>>> prime_length('kittens') == True\nTrue\n>>> prime_length('orange') == True\nTrue\n>>>\n\n... for a sufficiently small value of True.\n\nI don't understand how this is related to", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '0':\n        return True\n    if string[1] == '1':\n        return True\n    if string[2] == '2':\n        return True\n    if string[3] == '3':\n        return True\n    return False\n\nIn order to determine the length of a string, you can use len.\n\ne.g.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n       return True\n    else:\n       return True\n\nIs it a prime?</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if length(string):\n        return len(string) % 2\n\n[snip]\nFrom: \"Michael Foord\" <mfoord at gmail.com>\n> On Sun, Apr 21, 2013 at 6:14 AM, Greg Wilson\n> <greg at gregwilson.com> wrote:\n>\n> > [snip]\n>\n> > From: \"Michael Foord\" <mfoord at gmail.com>\n> >\n> > > On Sun, Apr 21, 2013 at 6:14 AM, Greg Wilson\n> > > <greg at gregwilson.com> wrote:\n> > >\n> > > > [snip]\n> > > >\n> > > > From: \"Michael Foord\" <mfoord at gmail.com>\n> > > >\n> > > > > On Sun, Apr 21, 2013 at 6:14 AM, Greg Wilson\n> > > > > <greg at gregwilson.com> wrote:\n> > > > >\n> > > > > > [snip]\n> > >", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 2:\n       return True\n    return False\n\nThat's the first thing I've seen on HN that I don't get. It's in the form of an if statement, but it's not an if statement, nor does it have anything to do with an if statement.\n\nThe easiest way to look at it is as a \"if string is 2 chars long\" statement.\nIt was one of the solutions to the interview question \"write a function to take a string as argument and return True if the string is of length 7 or less and False if it's not.\"\n\nHm... it's been a while since I last saw a prime_number_is_a_number.com interview question.\n\nI was asked this question in my first programming interview (for a job in C# at a mid-size.NET shop). I said, \"You can't do that.\" The interviewer told me I was wrong. I argued with him for a bit, but eventually just gave in and wrote a prime_number_is_a_number.com solution.\nFor the record, I didn't get that job.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    return string.length == 1\n\nYou have a bug:\n>>> prime_length('Hello') == False\n>>> prime_length('abcdcba') == False\n>>> prime_length('kittens') == False\n\nIt only counts from 1.\n\nTrue, fixed.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n\n    def is_prime(n):\n    return n == 2**n\n\n    for n in range(2, prime_length(str(n)))):\n        if is_prime(n):\n           print \"Prime number!\"\n\n    else:\n           print \"Not a prime number!\"\n\n        for i in range(2, prime_length(str(i)))):\n           if is_prime(i):\n             print \"Prime number!\"\n\n        for i in range(2, prime_length(str(i)))):\n            if is_prime(i):\n              print \"Prime number!\"\n\n        for i in range(2, prime_length(str(i)))):\n            if is", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.find('a') == False:\n        return False\n    else:\n        return string.find('a')!= string.find('a')\n\nI don't understand the Python community's insistence that this style of programming is at all a good thing.\n\nI don't understand the Python community's insistence that this style of programming is at all a bad thing.\n\nBecause it's terrible?\nIn other languages you can write code like this:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string.find('\\d') == 0:\n        return True\n    else:\n        return string.find('\\d')!= 0\nOne could make a case for this as good style.  No matter how you count, if you find 0, that's a prime number.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\nThis is all sorts of broken. Prime numbers are usually divisible by 2.\n\nThe point is that the number of prime numbers is a well-defined number, so it doesn't really matter.\nIt's not, though. \n\nThe question is \"write a function that takes a string and returns True if the string length is a prime number\".\n\nIt's about the comment, not the code.\n\nThe original code has a bug, the comment is not wrong.\n\nThe author of the code says it has a bug, the author of the comment says that the comment is wrong.\n\nProgrammers have a saying, \"The code is not in a comment.\"\n\nAlso: \"Comments are not in the code.\"\n\nOh, so it's about the code, not the comment.\n\nYes, it is about the code, and the comment.\n\nAnd the original code is wrong.\n\nYou keep saying that, but I don't see you pointing out the bug.\n\n_primes_generate() returns a list. This is a classic problem of premature optimization.\n\nActually, the code that OP", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '1' or string[0] == '2':\n        return True\n    return string[0]\n\nMore efficient:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 1\n\nThe best part is that it's not a joke.\n\nAnd the problem is?\n\nThe problem is that the author seems to believe this is a good use of Python.\n\nThe author is giving an example of how to use a feature of the language.\nI didn't find the problem.\n\nPerhaps you didn't notice that the example is syntactically valid Python code.\n\nEven if it wasn't, if people find it useful, it's a good use of the language.\n\nI wish I had seen this before I wrote my simple prime-number-generator[1] that uses a dictionary full of primes.\n\nIt looks like it's written in Jython.\n\nIt is, but that doesn't matter much. I think that using a dictionary of primes is a great way to do it.\n\nI was curious how it would be implemented in Jython, since it's not a Python standard lib. I'm not familiar with Jython.\n\nThis is why I think everyone should learn Haskell:\n\nAnd what does this have to do with Python?\n\nCan't tell if you're joking.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 2:\n        return False\n    return True\nYeah this is the right answer.  I think the interviewer was looking for \"prime_length('abcdcba')\" to be False, and you get there by checking \"len(string) > 2\"\nPrime numbers are divisible by 1 and by themselves. So the first number is ok, but the second one is not.\nYeah I know, I just meant that if you use that answer the interviewer is likely to think you're a moron.\nNot really. The other way is easy to misunderstand and is less readable. It's also easier to forget to check for the case of numbers that are not divisible by 2.\nThe other way is actually more readable, since it's a one liner, and you don't need to check the number's divisibility by 2 (since that's an assumption).      prime_length(string)     == True     if string[0] == '1' and len(string) == 1             else", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n       return True\n    else:\n       return False\n\nNot only is this a bad question (the \"best\" answer could be written in a couple of lines), but it's also a bad answer.\n\nThat's a terrible solution. It's prone to corner cases and breakages.\nI'll give a better solution:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 2:\n        return False\n    return len(string) > 1\nSo I assume you are learning python and not math?</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    def is_prime(string):\n    \"\"\"Write a function that takes a string and returns True if the\n    string is a prime number or False otherwise\n    Examples\n    is_prime('Hello') == True\n    is_prime('abcdcba') == False\n    is_prime('kittens') == False\n    is_prime('orange') == True\n    \"\"\"\n    def is_prime(string):\n    if string in [1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,119,127,131,137,149,151,157,163,167,173,179,191,197,211,223,229,237,239,241,257,263,269,271,277,283,289,293,301,311,317,323,331,337,359,361,373,377,389", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return string.find('.')[:0] > 1\nThat's not the Pythonic way of doing it. The Pythonic way would be:      return string.find('.')[0] > 1</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    for i in string:\n       if i == len(string):\n          return False\n    return True", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2\n>      def prime_subset(prime_length, string, repeat=None):\n    \"\"\"Write a function that takes a string, prime_length(string), and\n    repeat and returns True if the string is a prime number or False\n    otherwise\n    Examples\n    prime_subset('Hello', prime_length, 2) == True\n    prime_subset('abcde', prime_length, 1) == False\n    prime_subset('abcde', prime_length, 3) == True\n>      def prime_not_subset(prime_length, string, repeat=None):\n    \"\"\"Write a function that takes a string, prime_length(string), and\n    repeat and returns True if the string is not a prime number or False\n    otherwise\n    Examples\n    prime_not_subset('Hello', prime_length, 2) == True\n    prime_not_subset('abcde', prime_length, 1) == False", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    else:\n        return len(string)!= 2\n\nThe article's author says that this implementation has a pathological case for large strings. He's right - but a real pathological case is where the function returns True for a string of length 3.\n\nI think he means the length of the string minus one.\n\nWell, the string is \"kittens\" in the original example, and in that case, the length of the string minus one is \"kitten\". \"kitten\" is not a prime number.\nThe correct implementation is to return False for strings of length 3.\n\nWhat about \"kitten kittens\" or \"kitten kitty\"?\n\nYou are right. I was looking at it from a \"don't do funny things with the input string\" point of view, and the way \"kitten kittens\" is presented doesn't count.\nI don't know why the author of the article thought it was a good idea to hard-code the length of the string in a test-case. That's a very common mistake when you are first learning to", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n       return True\n    elif len(string) == 2:\n       return False\n    elif len(string) == 3:\n       return False\n    elif len(string) == 4:\n       return False\n    elif len(string) == 5:\n       return False\n    elif len(string) == 6:\n       return False\n    elif len(string) == 7:\n       return False\n    elif len(string) == 8:\n       return False\n    elif len(string) == 9:\n       return False\n    elif len(string) == 10:\n       return False\n    elif len(string) == 11:\n       return False\n    elif len(string) == 12:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 2:\n        return False\n    return len(string) == 2\nYou could write a function that takes a string and returns True if the string is a valid prime, but not if the string is a prime.\n\nI don't see why you couldn't use it with a string representing a number. Is there a reason you think you can't?\nThe string \"Hello\" is equal to the string \"1\". So if the string is a number, the function should return True.\n\nI don't understand. Are you saying you need a function that can take a number and return true if it's prime? Why not just use prime_number()?\n\nNot sure if this is what you are looking for but I wrote a prime number generator that takes an integer and returns the next prime number.\nhttp://bit.ly/2uL4XeZ\n\nI haven't tested this but the code looks like it would work.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2\n\nJust in case anyone is wondering:\n>>> prime_length('Hello') == True\n>>> prime_length('abcdcba') == True\n>>> prime_length('kittens') == True\n>>> prime_length('orange') == False\n\nThat's awesome!\n\nIt's a shame that it doesn't do what the real implementation does, which is checking if there are any factors in a given length.\nI'd like to have a version that'd check for factors in a given string.\n\nGiven the amount of time it took me to write the original solution in Perl, I don't think I'll be adding any more features.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if string[0] == '0':\n        return True\n    return False\nprime_length(\"Hello\")\nTrue\nprime_length(\"abcdcba\")\nTrue\nprime_length(\"kittens\")\nTrue\nprime_length(\"orange\")\nFalse\nHaha. Well played.</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 0\n\nPython and Scheme are not the same. I think you've misunderstood the point of the exercise.\n\nThere's a bug:\nimport string\nprime_length = string.__class__.__builtin__.__define__(\"__prime_length__\", lambda s: len(s) % 2 == 0)\n\nI wish they had made the first example with a slightly different exercise to see how people would solve it.\n\nI guess they want you to create a class?\n\nyes, that is a class method</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2\n\nAnd it seems this article is an introduction to Python. Nice!\n\nYes, exactly. Python is one of the best languages to start with in my opinion.\n\nIf I remember correctly, the first version of Python had prime_length() as a builtin function, but it was removed because it was a bit too specific (although I could imagine a lot of other uses for it).\n\nit's not too specific; it's just a toy example of a very specific thing.\n\nThere's also \"prime_count\", a convenience function for counting the number of prime numbers in a list:\n\nYes, and it's even faster than prime_count():\n\nJust as an aside, Python's split() can be used to test whether a string is a prime number:\n\nI think I'll just use Python's built-in primality tests\n\nNot the best approach if you're trying to be fast.\n\nI'm not sure I understand this:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) % 2 == 1\n\nI thought this was going to be an interview question, and that I was going to be mad at you for not having an infinite loop in it.\n\nAlso you can use isprime() from the math module, which is faster\n\nI remember reading somewhere that isprime() is not as fast as it can be.\n\nI can't imagine there is much optimization possible, given that it is in Python.\n\nIsn't Python a JIT language? I would imagine this is an ideal scenario for JIT optimization.\n\nNot for any of the built-in functions.\n\nThat's not the impression I get from the article;\nI'm very curious as to what you meant.\n\nIn the Python world, a \"built-in\" is a function you don't have to import.\n\nAlso, in the Python world, a \"built-in\" is a function which is \"built-in\" to the Python interpreter.\nThe Python standard library does not include any of the C extension modules.\n\nWhat I find more interesting than that is that it is a built-in function in the standard library in the first place.", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return len(string) == 2 or len(string) == 3 or len(string) == 5 or len(string) == 7 or len(string) == 11 or len(string) == 13 or len(string) == 17 or len(string) == 19 or len(string) == 23 or len(string) == 29 or len(string) == 31 or len(string) == 37 or len(string) == 41 or len(string) == 43 or len(string) == 47 or len(string) == 53 or len(string) == 59 or len(string) == 61 or len(string) == 67 or len(string) == 71 or len(string) == 73 or len(string) == 79 or len(string) == 83 or len(string) == 89 or len(string) == 97 or len(string) == 101 or len(string) == 109 or len(string) == 113 or len(string) == 127 or len(string) == 131 or len(string) == 137 or len(string) == 139 or len(string) == 149 or len(string) == 151 or len(string) == 157 or len(string) == 161", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 2:\n        return False\n    return len(string) % 2 == 1\n\nI'm pretty sure this is broken, but I'm not sure why. If you can see the error, can you please explain it?\n\nYour code does not return the length of the string. It just checks if the length is odd.\n\nThank you! I tried a bunch of different versions of the function, but none of them worked. (I tried looking up stuff on google, but nothing worked...)</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    return 2 <= string[0] <= string[1] <= string[2] <= string[3] <= string[4] <= string[5] <= string[6] <= string[7] <= string[8] <= string[9] <= string[10] <= string[11] <= string[12] <= string[13] <= string[14] <= string[15] <= string[16] <= string[17] <= string[18] <= string[19] <= string[20] <= string[21] <= string[22] <= string[23] <= string[24] <= string[25] <= string[26] <= string[27] <= string[28] <= string[29] <= string[30] <= string[31] <= string[32] <= string[33] <= string[34] <= string[35] <= string[36] <= string[37] <= string[38] <= string[39] <= string[40] <= string[41] <= string[42] <= string[43] <= string[44] <= string[45] <= string[46] <= string[47] <= string[48] <= string[49]", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    #### Locate the first non-digit character\n    if char_num_first(string, 1):\n        return 1\n    return 0\n    #### If there is more than one digit, then we can not be sure\n    else:\n        if string[1:]:\n           return 1\n         else:\n           return 2\n\nNote that the function will not find the correct value for every input. For example, \"Hello\" and \"abcdcba\" will return True and \"kittens\" will return False.\n\nHowever, the function is guaranteed to have the same behavior for every string: it will only report a prime number if it actually is one.\n\nThis program will find the correct prime number for each string:", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) > 1:\n        return False\n    return len(string) == 2 ** int(len(string))\nI have no idea what this is supposed to do...</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 2:\n        return True\n    return False\nThis is not what I was expecting...</s>", "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return True\n    return False"]]