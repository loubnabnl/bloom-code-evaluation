[["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in range(len(l)):\n       if l[i] + l[i+1] == 0:\n          return True\n    return False\n\nDoes anyone have an idea why this would return False instead of True?\n\nThe problem is that the OP is attempting to compare whether two elements are equal. This is not what \"Pairs.sum_to_zero\" does. This function is for comparing whether two lists contain equal elements (i.e. elements that sum to zero).\n\nOh I see, so in this case it's just checking whether the two integers within the list are equal, but not necessarily their sum.\n\nIt's checking whether they're equal.\n\nI was wondering why this was getting upvoted. Is it a trend to post bad code that you wrote in an attempt to get it fixed? (I see no indication that the OP is trying to get this fixed.)\n\nWhy is it bad code?\n\nI was able to work out what was going on with it, but I would never write code like this, and I would never have written code like this when I", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    #", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    x, y = zip(l, (0, 0))\n    if y == 0:\n       return False\n    for i in range(x.shape[0]):\n       if x[i] == y:\n          x[i] = x[i] + 1\n       else:\n          x[i] = x[i] - 1\n    return True\n\nThis is a very clever algorithm and I don't think this counts as cheating. It's just a really well-constructed puzzle.\n\nThanks!</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n\nThe author of the original article didn't provide any tests for pairs_sum_to_zero, so it could be broken in any number of ways.\n\nI think there is something wrong in this algorithm:\n>>> pairs_sum_to_zero([1, 3, 5, 0], [1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([1, 3, 5, 0], [-2, -1])\nFalse\n>>> pairs_sum_to_zero([1, 3, 5, 0], [-1, -2, 1])\nTrue\n\nI would like to add that \"pairs_sum_to_zero\" is a horrible name, as it is not obvious to the reader that it is a method that takes a tuple and returns True if the tuple has pairs that sum to zero.\n\nWhile that's true, I'd like to point out that this is the same exact thing that happens when people use \"assert\" instead of \"if\" in their code.\n\"pairs_sum_to_zero\" is a horrible name, but the fact that the function is easy to understand is a byproduct of the function being easy to use.", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    l = range(len(l))\n    p = list()\n    for i in l:\n        for j in l:\n           if i+j == 0:\n                p.append(i)\n                p.append(j)\n           else:\n                p.append(i)\n                p.append(j)\n    return p.size() == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero_if_true(l):\n    \"\"\"\n    pairs_sum_to_zero_if_true takes a list of integers as an input.\n    it returns a pair of lists of integers:\n    1) all elements of l that sum to zero\n    2) all elements of l that do not sum to zero\n    If the input list is empty, then the first list is empty.\n    >>> pairs_sum_to_zero_if_true([1])\n    [(0, 0, 0, 0)]\n    >>> pairs_sum_to_zero_if_true([0, 1, 2, 3])\n    [(0, 0, 0, 0), (1, 0, 0, 0)]\n    >>> pairs_sum_to_zero_if_true([])\n    [(0, 0, 0, 0)]\n    >>> pairs_sum_to_zero_if_true([1, 2, 3, 4])\n    [(1, 0, 0, 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for _ in range(len(l)):\n    if l[i] == l[j]:\n       return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2\n\nIt seems like it would be better to just use the `and` operator.\n\nI think it's interesting that they could not have written this program without using the `and` operator. I wonder if it's possible.\n\nThe condition for the `and` operator is a list of conditions. It can't be written without using list comprehensions, which can't be written without the `and` operator.\n\nCouldn't you have written the list comprehension without the `and` operator? I'm not a Python expert, so I may be missing something, but it seems like the list comprehension is the root of the problem, not the `and` operator.\n\nThe point is that list comprehensions are built around the `and` operator. And you can't write list comprehensions without the `and` operator.\n\nThe point of the article was that Python's and operator is unnecessary, because we can accomplish the same with list comprehensions.\nTo do that, you need the `and` operator.\nSo you can't write list comprehensions without the `and` operator, and you can't write the `and` operator without the `and` operator", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return l == (l[1] + l[2])\n\nI believe the check for 1 is unnecessary, because 1 and 1 sum to 0.\n\nYou're right. I was thinking about it in terms of it being a list of 1s\nbut that isn't the case for pairs_sum_to_zero.\n\nI don't see why that's the case. Can you clarify?\n\nI'm assuming the list is 1, 1, 2, 3, 5, 7, 8.\n\nAh, I see. But in that case, it's a trivially true statement that it's\npossible to find two elements such that their sum is zero.\nThe post's code:\nreturn l == (l[1] + l[2])\nis true for all lists that contain at least two elements.\n\nA list of 1's is a list of pairs of integers.\n\nWhat's a good online implementation of the Python interpreter, so I can test some of these things?\n\nThere isn't one. There are very good online Python interpreters, but I don't think any of them implement the whole language.\n\nReally? That's surprising. Is the", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(map(int, pairs_complement(l))) == 0\n\nAnother way to do this is to iterate through the list, create a sorted list, remove all duplicates, and check to see if the list is sorted.", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    pairs = []\n    for element in l:\n        if element > 0 and element < l[0]:\n           pairs.append(element)\n           if element < 0 or element > l[0]:\n               pairs.append(0)\n          return pairs == 0\n\nI'd suggest trying this on a larger data set first and see if it really works as intended.\n\nThis is a great example of how the Python syntax doesn't suit a lot of real-world use cases. The \"return pairs\" line is confusing, and, for me at least, the \"pairs == 0\" is hard to read.\nI much prefer languages like Haskell where I can just write it like:\nsumToZero :: (a -> Bool) -> [a] -> Bool\nsumToZero f l = f. filter (\\x -> x == 0) l\n[0]</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def is_zero_sum(a, b):\n    \"\"\"\n    is_zero_sum returns True if a and b are equal and sum to zero, and\n    False otherwise.\n    >>> is_zero_sum(1, 2)\n    True\n    >>> is_zero_sum(1, 1)\n    False\n    >>> is_zero_sum(1, -1)\n    True\n    >>> is_zero_sum([1, 2, 3, 4, 5])\n    True\n    >>> is_zero_sum([1, 2, -1, -2, 3, 4])\n    False\n    >>> is_zero_sum([1, -1, -2, -3])\n    True\n    >>> is_zero_sum([1, -1, -2, -3])\n    False\n    \"\"\"\n    if a == b:\n       return True\n    else:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sorted(l, key = lambda i: (i, i + 1) == 0) == False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(len(x)):\n        if x[i] == x[i-1]:\n            return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n        return True\n    else:\n        return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    if sum(l) == 0:\n       return True\n    return sum(l) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    n = len(l)\n    a, b = l[0], l[1]\n    if a == b:\n       return False\n    for i in range(n):\n       if a + b == 0:\n          return True\n    return False\nI would have written it this way:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n       return True\n    if len(l) == 1:\n       return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n\nI don't see the point. I can write the following with regular Python.\n>>> if sum(x for x in [1, 3, 5, 0]):\n...\nTrue\n>>> if sum(x for x in [1, 3, -2, 1]):\n...\nFalse\n>>> if sum(x for x in [1, 2, 3, 7]):\n...\nTrue\n>>> if sum(x for x in [2, 4, -5, 3, 5, 7]):\n...\nFalse\n>>> if sum(x):\n...\nTrue\n\nAlso, if you're not going to use generics (which you shouldn't), there's no reason to use Python instead of", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(l == l for l in l)\nHmmm... I was expecting something more clever.\n\nYeah, it's still being worked on.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in range(len(l)):\n        if i % 2 == 0:\n           return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (not (elem_in_set(l[0]))) and (not (elem_in_set(l[1]))) and\n    (sum(elem_in_set(l[0])) == 0 and sum(elem_in_set(l[1])) == 0)\n\nHaha. That's great.\n\nIt's funny how the \"hackers\" that this is aimed at will probably be most familiar with the bit-twiddling versions of the algorithm.\n\nThis code actually looks like a pretty good way to learn about logical and bitwise operations, or at least get a feel for how they work.\n\nI'm not a fan of this implementation.\nI think the code is a bit confusing to read. Also, the Python standard library already has a solution that is much easier to read:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n         def pairs_sum_to_zero_np(l):\n           \"\"\"\n             returns True if there are two distinct elements in the list\n             that sum to zero, and False otherwise.\n             >>> np.pairs_sum_to_zero_np([1, 3, 5, 0])\n                True\n              >>> np.pairs_sum_to_zero_np([1, 3, -2, 1])\n                False\n               >>> np.pairs_sum_to_zero_np([1, 2, 3, 7])\n                 True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    else:\n       # take each element and add it to the other two\n       if (sum(a, b, c) == 0):\n          return True\n       else:\n          return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in range(len(l)):\n       if i == 0:\n         return False\n       if i == len(l):\n         return True\n    return pairs_sum_to_zero(l[-1])\n\n(defun pairs_sum_to_zero (l)\n    (and (zerop (mod l 2))\n        (and (zerop (- (mod l 2)))))\n\n(defun pairs_sum_to_zero (l)\n    (and (zerop (mod l 2))\n        (and (zerop (- (mod l 2))))\n        (and (zerop (mod l 2) (and (zerop (- (mod l 2)))))))\n\n(defun pairs_sum_to_zero (l)\n    (and (zerop (mod l 2))\n        (and (zerop (- (mod l 2)))", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return zip(*l, 0)==0\n\nThis is a terrible solution. You're returning True if you have two\ndistinct elements and they sum to 0, which is fine. But you're returning\nTrue if you have two distinct elements and they don't sum to 0.\n\nThis is a common mistake, in general. You're trying to write a function\nthat returns True if a predicate is true, but you're using a predicate\nthat is equivalent to the predicate returning False (or True).\n\nTry instead:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2\n\nThe correct solution is \"return len(l) == 0\".\n\nThat's not correct. The function is supposed to return True iff there is a pair of elements that sum to zero. That is, if the elements _do_ sum to zero, the function should return True; if they don't, it should return False.\nThe correct solution is:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    else:\n       sum = 0\n       for x in l:\n           sum += x\n           if sum == 0:\n              return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    for i in range(len(l)):\n       if i == 0 or i == len(l) - 1:\n          return False\n       sum = 0\n       sum_to_zero = 0\n       for j in range(2, i + 1):\n          if i + j == 0 or i + j == 2:\n               if sum + j == 0:\n                   sum_to_zero = sum + j\n                 return sum_to_zero\n    return sum_to_zero", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in xrange(len(l)):\n        return not (pairs_sum(l[i], l[i+1]))\nI believe this is a better way to do this.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2 and all(0 <= i < len(l) for i in l)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    # The sum function is only a helper function and only returns True\n    # if both arguments sum to zero.\n    def sum(x, y):\n    return x + y == 0\n    # Take a look at the boolean_and function.\n    def boolean_and(a, b):\n    return a and b are both True\n    # Return True if the first element is zero, and false if the last element is zero.\n    # If the two elements are equal, return False.\n    def pairs_sum_to_zero_if_equal(l):\n    # If the two elements are equal, return False.\n    return sum(l[1], l[-1]) == sum(l[0], l[-2])\n    # The first element is zero if the last element is zero.\n    # If the first element is zero, return False.\n    def pairs_sum_to_zero_if_last(l):\n    # Return True if the first element is zero, and false", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def __init__(self):\n    super(Pairs_sum_to_zero, self).__init__()\n    self.items = []\n    self.sum_to_zero = None\n    if len(self.items) == 0:\n        self.sum_to_zero = True\n    else:\n        self.sum_to_zero = 0\n    return super(Pairs_sum_to_zero, self).__init__()\n    def __eq__(self, other):\n    return self.sum_to_zero == other.sum_to_zero\n    def __ne__(self, other):\n    return self.sum_to_zero!= other.sum_to_zero\n    def __lt__(self, other):\n    return self.sum_to_zero < other.sum_to_zero\n    def __le__(self, other):\n    return self.sum_to_zero <= other", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (sum(l) == 0 for l in list(l) if sum(l) == 0)\nYou could use `bool(l)` instead of `sum(l)` to get the same result.\n\nI was thinking of that, but I couldn't think of a case where the return value of the sum would be dependent on the order in which the arguments were passed in.\n\nI'm not sure I'm following. You are always going to sum the elements in the same order.\n\nMy confusion comes from my not being familiar with Python. In other languages I've used, the order of function arguments has always had an impact on the result.\n\nIf you're interested in this kind of thing, you might also like \n\nHere is a very simple implementation in Haskell:\npairs_sum_to_zero :: [Int] -> Bool\npairs_sum_to_zero = (sum. map (\\x -> x `mod` 2 == 0) l) == 0\nEDIT: You probably want to sum mod 2 instead of mod 1 to avoid the sign.\n\nYou don't need `mod` here, you can use `<` or", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return lambda x: (x, x + 1) == (x, 0)\n\nWouldn't that require you to define pairs_sum_to_zero([])?\n\nIt doesn't. Pairs_sum_to_zero is not a class method of Pairs (even though it looks like it is).\n\nIt does. Pairs_sum_to_zero is a method of Pairs defined in the same scope as the test.\nThe question is whether it should be.\n\nRight, I just meant to say that it's not a class method.\n\nI would have thought this was common knowledge? It's the first thing I learned when I was learning about Python lists and dictionaries.\n\nIs the ability to write comprehensions common knowledge?\n\nI'm surprised that more people haven't heard of this, especially considering that it was added before Python 3.0.\n\nI'm not surprised at all.\nGiven that this is the first time I've heard about it, and I've been using Python for years and years and years, I'd guess that it's probably a tiny part of the language that is rarely used.\n\nThat's because Python is extremely backwards", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    result = False\n\n    for element in l:\n        if pair(element, element) == 0:\n            result = True\n\n    return result</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (len(l) == 2) or (l == [])\n\nThat's so much better.\n\nThat's a pretty nice implementation but the following is shorter and more readable:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    i = len(l)\n    if i < 2:\n        return False\n    pairs = [i]\n    for i in pairs:\n        if i % 2 == 0:\n            pairs_sum = 0\n            i -= 2\n            pairs_sum_to_zero(pairs[i-1:])\n    return pairs_sum_to_zero(pairs) == True\n\nThis is better:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    if len(l) == 2:\n       return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l)!= 2:\n        return False\n    pairs = [i for i in l]\n    for pair in pairs:\n        if pair[0] == 0:\n           pairs_sum = pair[1] + pair[0]\n           if len(pairs_sum) > 0:\n              return True\n    return False\n\nGood job! I like your method better, but is there a way to use Python to find a pair in the list? If so I might be able to combine your method with my method to make it a bit more efficient.\n\nI think you can do that with binary search (which is more efficient than linear search).\n\nYou could also use itertools.count()", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) < 2:\n        return False\n        return sum(l) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return True\n    else:\n       for i, j in enumerate(l):\n          if i + j == 0:\n             return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for x, y in pairs(l):\n    if x + y == 0:\n       return True\n    return False\n\nIf you put it in an array of lists and iterate over the list, you get the same thing.", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n        return False\n    else:\n        for k in xrange(len(l)):\n           if (l[k] == 0):\n              return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return True\n    else:\n       return len(l) > 1\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    result = []\n\n    for i in range(len(l)):\n        if abs(a[i] - b[i]) <= 0:\n             result.append(a[i])\n        else:\n             result.append(b[i])\n    return result\n\nThis is stupid. (Not your code, but the function.)\n\nIt is a classic example of the difference between the theory of probability and the practice of probability.\n\nI assume you mean that the probabilities of getting the same sum from two elements (a and b) is 1/2, and thus the probability of getting the sum 0 from these two elements is 1/2.\nBut this is only true if you assume that a and b are not related. (Obviously, in the given examples they are.) The correct probability should be 1/2^2.\n\nIf a and b are related, then the probability of a sum of a and b being 0 is 1/2^2, which is just the same as the", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    # construct a `sum_zero_pair` with the first element being zero and\n    # the second element being the other element\n    sum_zero_pair = None\n    # see if there are two elements in the input list that sum to zero\n    for i, n in enumerate(l):\n        sum_zero_pair = pairs_sum_to_zero(n - 1, i)\n        if sum_zero_pair is not None:\n            return sum_zero_pair.get(0) == 0 and sum_zero_pair.get(1) == i\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    count=0\n    for i in range(len(l)):\n       if pairs_sum_to_zero(l[i]):\n          count=count+1\n    return count", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    sum = 0\n    for i in range(len(l)):\n       if l[i] == 0:\n          sum = sum + l[i]\n          elif l[i] == l[i+1]:\n           sum = sum + l[i+1]\n    return sum == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i, j in enumerate(l):\n    if abs(i - j) == 0:\n       return True\n    return False\n\nDoes this check that each element has its own sign? That's a pretty important property of sums of positive numbers.\n\nnope. i guess i should rewrite this, i need it for debugging a signed integer issue in a Python module I'm writing.\n\nThe Python implementation is in:\n\nI see this as an implementation of the smallest number of tests principle.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return lambda list:\n       if list[0] == 0 and list[1] == 0:\n          return True\n      else:\n          return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n       return True\n    else:\n       return False\n\nI know that this is a good exercise and all, but the exercise is misleading. The sum of the first element and the last element is also zero, and the sum of the first two elements is also zero.\n\nThanks for your input. I'm planning to add additional checks for the above edge cases.\n\nOh, my bad. I didn't realize you could add more checks.\n\nI don't know how to do that in python, but in C, you could do something like this:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 0 and (sum(l) == 0 for all i in l)\nThis doesn't work for negative pairs (and doesn't catch all pairs).", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(sum(l[i] for i in range(1, len(l))), 0)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    sum_to_zero = 0\n    while sum_to_zero < 0:\n        if (x1 + x2) == 0:\n            sum_to_zero = sum_to_zero + 1\n           return sum_to_zero == 0\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    # remove duplicates\n    pairs = set()\n    while len(l) > 0:\n        # if both elements of the list sum to zero, we only need one\n        if abs(l[1] - l[2]) == 0:\n           pairs.add(l[1])\n         else:\n           pairs.add(l[2])\n         # if both elements of the list do not sum to zero, we only need one\n        if abs(l[1] + l[2]) == 0:\n           pairs.add(l[1])\n         else:\n           pairs.add(l[2])\n    return pairs.count()\n\nAwesome!</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2\n\nWe can use this function as a short-hand way to test if two integers are\nequivalent.  For example,  we can use it to test if an integer is\nequivalent to a zero:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n        return False\n    l1, l2 = sorted(l, key=lambda x: x)\n    pairs_sum_to_zero(l1)\n    pairs_sum_to_zero(l2)\n\nPretty straight-forward, eh?", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    for i in xrange(1, l.length):\n       if l[i] == l[i + 1]:\n          return False\n    return True\n\nTo be even more pedantic, it takes a list of integers, compares each to every other element in the list, and returns the pair of elements that has the smallest sum.\n\nBut the code could be simplified to the following:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n        return True\n    else:\n        return False\n\nPairs_sum_to_zero is not one-line.\n\nI guess I missed that requirement in the guidelines.\n\nTo be fair, the guidelines are not particularly explicit about it.\n\nIn Python 2, if you don't want to break compat with Python 1.x:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in range(len(l)):\n        if sum(l[i], l[i+1]) == 0:\n           return True\n    return False\n\nReferences</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2\n\nIn Python 3.0, the empty tuple is not considered an empty list:\n>>> pairs_sum_to_zero([])\nTrue\n\nIndeed, Python 3.0.\n\nPython 2.7.4:\n>>> pairs_sum_to_zero([])\nFalse\n\nPython 2.7.6:\n>>> pairs_sum_to_zero([])\nTrue\n\n(but it should be False, because [])\n\nOh, I see. It's only 3.0, not 3.1.\n\nOh man, I think I just found the first example of the language falling out of step with the standard library. That's usually not a big deal, but it could certainly be a problem for beginners who are just starting to learn the language.\n\nIt's not the only such example, there's also the fact that 2.x's garbage collector runs during the interpretation phase. 3.x uses a trace-based one (like Perl's).\n\nI'm not sure if I'd call that a \"problem with the language\" or not. I suppose you could say that it's a change in the language that's not", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(sum(1, l)) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (sum(i for i in l) == 0 for i in l)\n\nInteresting - I assume you wanted to write:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n        return True\n    else:\n        return False\n\nDoesn't this mean that it always returns False?\n\nI think it's missing an else block.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 0 or not sum(l[1:], l[2:]) == 0\n\nThis is actually the only one that works, and it is the only one that is O(1).\n\nBut it's not pythonic at all!\n\nI'm pretty sure that's not pythonic at all.\n\nThe only one I know that is pythonic and is o(1) is this:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in range(len(l)):\n        if i == 0 and l[i+1] == l[i]:\n           return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return not isinstance(l, (list, tuple)):", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n       return True\n    else:\n       return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for elem in l:\n       if elem == 0:\n         return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (sum(pairs(l)) == 0)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(isinstance(l[0], int) and l[1] == l[0]) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    pairs = []\n    for i, x in enumerate(l):\n       if i + x == 0 and i + x!= 0:\n          pairs.append(i + x)\n    return pairs.length > 0 and pairs.get(0) == 0\n\nI'm not sure why this is on the front page. It's not even a \"hack\" as it's just applying a function that is already in the standard library.\n\nI did not mean to imply that the above function is a hack.\nI just thought that the program could be explained in a few lines and it would be useful for the readers here.\n\nThe function is fine, but it's the title that's a bit misleading.\n\nI can't help but think that it's important to learn the mathematical concept behind this, and then you'll learn how to solve these types of problems in general.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n    return True\n    else:\n    return False\n\nYikes.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(set(l), 2)!= 0\n\nThis is a great application of the nullary operator!!. In Python 2.x this would be a special case of the ternary operator (|?) that required explicit 'or' or 'and' syntax to disambiguate.\n\nThis is a neat trick, but it's not a substitute for Python's ternary operator. Using it in the way shown above would result in an exception when the list is empty, because!! is defined as \"True if the empty list is given as the argument, otherwise False.\"\n\nYou can disambiguate it with \"and\":", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    for i in l:\n       if i!= len(l) - 1:\n          return True\n\nThis is a classic case of premature optimization.\n\nThis is the correct answer.\n\nVery short (less than 200 lines of code) and no dependencies.\n\nNone of those are good reasons for writing code like this. I really want to write this with a thick Brooklyn accent. \"No dependencies, YEAH!!!\"\n\nThis is not the correct answer.\n\nYou've convinced me.\n\nThis is a classic case of premature optimization.\n\nI agree. However, I would argue that as long as the code does what it's supposed to, it's fine. There is a difference between code that's _optimized_ for speed and code that _performs optimally_.\n\nThis is the correct answer.\n\nThis is a classic case of premature optimization.\n\nI agree. However, I would argue that as long as the code does what it's supposed to, it's fine. There is a difference", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return ( (x0, y0)\n       for x in range(len(l), 2):\n          if x0 + x == y0:\n              return True\n       for y in range(len(l), 2):\n          if y0 + y == x0:\n              return True\n    )", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in range(len(l)):\n        if pair(i, l[i]):\n           return True\n    return False\n\nSince the ranges of all elements are the same, if you have a list with a 1, 3, 5, and a -2 then you can trivially check for the sum to zero.", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return set(l) & set(set(l))\n\nI am sorry, but it is not clear how this is an algorithm.\n\nThanks for the comment. I'll try to clarify the algorithm. The code above\njust tests if the given list has two elements that sum to zero. It is a\nprelude to the actual algorithm that returns the number of such pairs.\n\nI am pretty sure I have seen a version of this before, perhaps in a book\non algorithms. Does anyone know if this is in print, or should I just\nwrite it up as my own?\n\nAlso, would you mind expanding on your comment about the algorithm not being\nclear?\n\nThe algorithm is not clear because there is no description of what happens\nwhen the numbers don't add up to zero.\n\nFor instance:\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i, a in enumerate(l):\n       if a == i:\n          return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero_pair(l):\n    \"\"\"\n    pairs_sum_to_zero_pair takes a pair as an input.\n    it returns True if there are two distinct elements in the pair that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_pair([1, 2])\n    True\n    >>> pairs_sum_to_zero_pair([1, 2, 3])\n    False\n    >>> pairs_sum_to_zero_pair([1, 1, 2, 2, 2, 2, 2, 2])\n    False\n    >>> pairs_sum_to_zero_pair([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    False\n    \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n\nI'd suggest a couple of small changes:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    for i in range(len(l)):\n       if pairs_is_prime(l[i], l[i+1]):\n          return True\n    else:\n           return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n        return False\n    else:\n        return True\n\n>>> print(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    i = 0\n    while i < len(l):\n       if i % 2 == 0:\n          return True\n       i += 1\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return True\n    else:\n       if not l[0] + l[1] == 0:\n          return False\n    return True\n\nIf you're after the python implementation of the theorem, it's in\n.\n\nThat is true, and I found that implementation, but I'm wondering how many people here have thought about how this can be implemented in Python.\nI was thinking about writing a function like this, but in the end, I thought that maybe it would be interesting to see how other people would do it, hence my question.\n\nThe Haskell solution is even shorter than the Python one:\nnub :: [a] -> Bool\nnub [] = False\nnub (x:xs) = x == 0 && nub xs\n\nI would personally prefer the Python version over the Haskell version because it's very readable, but I agree that the Haskell version is shorter.\nI find the Python implementation nice because it has a nice self-documenting comment and is a little more \"Pythonic\".\n\nThis", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return l == []\n\nThis could be rewritten in a single line of code.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (n1+n2)==0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return True\n    return l[0] == l[1]\n\nTIL about the itertools module.\n\nThose who don't know python:\nItertools is one of the most beautiful, practical, yet under-utilized modules in python.\nI encourage you to take a look at its documentation.\n\nThis seems like a good case for a quicksort (or quickselect) implementation.\n\nHow would you implement quicksort for this?\n\nBasically, it's similar to the example given in the link. You start with a list of pairs, and recursively go through them, using the is_odd and sum methods to see if they sum to zero.\nThis is basically a simplified version of quicksort.\n\nYou mean this\nQuickSort \n\nitertools.product is another great function for generating lists of pairs of numbers.\n\nI was looking for something similar to this last week, thanks for the link.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    count = 0\n    for elem in l:\n        if elem == l[count]:\n           count = 1\n    return count == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return set(l, 2) == set(l, 1)\n\n\"Pairs_sum_to_zero\" is a cute little function, but I have two problems with it.\nFirst, the function name suggests that it should return True if the list is a pair, and False if it isn't. It doesn't. In fact, it returns True only if the list contains exactly two elements that sum to zero.\nSecond, there's no way to define this function without using _set_. If you're not familiar with _set_, it's a collection type that allows you to store arbitrary sets. Here's an example of using it:\n>>> p = [1,2,3,4]\n>>> set(p)\n[1,2,3,4]\n>>> set([1, 2, 3, 4])\n[1, 2, 3, 4]\n>>> set(set([1, 2, 3, 4])))\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError:'set' object has no attribute'set'\nThe _set_ object in the first example is the", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    pairs = [l[0] for l in l]\n    for i in range(len(pairs)):\n       if pairs[i] == l[0]:\n         return True\n         return False\n    return pairs_sum_to_zero(l)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if l == [] or len(l) < 2:\n       raise ValueError('pairs_sum_to_zero requires a list of integers')\n    return len(l) < 2 and sum(l[1], l[2]) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero_func(numbers, l):\n    \"\"\"\n    pairs_sum_to_zero_func takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_func([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> pairs_sum_to_zero_func([1, 2, 3, -4, 5, 6, 7])\n    False\n    >>> pairs_sum_to_zero_func([1, 2, 3, 4, -1, 5, 6, 7])\n    True\n    >>> pairs_sum_to_zero_func([1, 2, 3, 4, -1, 5, 6, -7])\n    True\n    >>> pairs_sum_to_zero_func([])\n    False\n    \"\"\"\n    return len(numbers)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sorted(l.split())[0] in pairs(l.split())", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    x = 0\n    while len(l) > 0:\n       if l[0] == l[1]:\n          x = x + l[0]\n          l = [l[0] + x]\n    return x == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    for a, b in enumerate(l):\n       if a + b == 0:\n          return True\n    return False\n\nfrom itertools import islice\nfrom random import randrange\nfrom math import sqrt\nfrom operator import *", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    assert len(l) == 2\n    for i, elem in enumerate(l):\n       assert i!= elem\n    if sum(l[i] - l[elem]) == 0:\n        return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n    return False\n    else:\n    return (sum(l) == 0 and l[0] == l[1])", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if l.size == 1:\n       return True\n    return not pair_sum_to_zero(l[0]) and pair_sum_to_zero(l[1])", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (not (pair.sum() == 0 for p in pairs))", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n        if len(l) == 1:\n           return False\n          if l[0] == -1:\n             return True\n           if l[0] == 0:\n              return False\n            if sum(l[1:]) == 0:\n               return True\n    return True\n\nYou missed an important case, and the code is pretty buggy anyway.\nFor example, this works:\n>>> pairs_sum_to_zero([1, 2, 3, -1])\n>>> pairs_sum_to_zero([1, 2, -2, 1])\n>>> pairs_sum_to_zero([1, 2, -1])\n\nYou're right, I missed that, I'll update the article when I can. Thanks!\n\nAn implementation with much less memory usage:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    for i in range(len(l)):\n       if i == 1 or i == 0:\n          return True\n       else:\n          for j in range(len(l)):\n            if j == i:\n               return True\n          return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in range(len(l)):\n        if pairs(i) == pairs(j):\n          return False\n    return True\n\nIsn't this a bit of a trick?\n>>> [1, 2, 3] + [4, 5] == [6, 7, 8] True\n>>> [1, 2, 3] + [4, 5] == [6, 7, 8] False\nI think the trick is that in your first example, you are explicitly specifying the first value of the sum, and in your second example, you're not. That's not a bug, it's a feature.\n\nDid you know that the Python 'len' function is the same as the C'sizeof' function?\n>>> len('hello') 3\n>>> sizeof('hello') 3\n\nDid you know that the C'sizeof' function is the same as the Pascal'size' function?\n>>> sizeof('hello') 3\n>>> size('hello') 3\n\nDid you know that the C'sizeof' function is the same as the BASIC'size' function?", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for elem in l:\n        if elem == 0:\n           return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    print('Pairs sum to zero:'\n       for i in l:\n           print i + ', summing to:' + i + ', sum to 0'\n         print(i, sum(i))\n           print('\\n')\n    print('\\n')\n    return sum(i) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for a, b in sorted(l):\n       if a == b:\n         return False\n    return True\n\n_real_python_people_use_indentation_in_if_statements_:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (i + j) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2 and sum(l) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    # function to simplify code, see below\n    def f(a, b):\n       return lambda x, y: x + y\n    a, b = [1, 2, 3, 5, 7],\n    c = [0, 4, 8, 12],\n    return lambda m, n: pairs_sum_to_zero([m, n], c)\n    return f\n\nThis is a simple example that's well-suited to the explanation.\n\nThe problem with this solution is that the function itself is very hard to read. One can see that the logic is correct, but it's difficult to read because the logic is interspersed between the definition of the function and its argument. The function is not factored into smaller, easier-to-read pieces.\n\nfactoring the function\nOne can see that the logic is correct, but it's difficult to read because the logic is interspersed between the definition of the function and its argument.\n\nOne approach to refactoring this function is to factor it into three pieces:\n\nThe input function.\nThe function that checks if the", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return pairs_sum_to_zero(len(l))\n\nThis is an awesome solution.\nIn the case of zipping (or maybe just reducing), the problem is slightly different. For instance, zipping (or maybe just reducing)\n[1, 2, 3, 4, 5, 6, 7, 8]\ngives\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nbut none of the pairs sum to zero.\n\n\"Pairs sum to zero\" is a special case of a general \"Pairs are disjoint\" predicate, which can be defined in terms of \"Pairs have length 1\" using the method of pairs. Here is a function that does the zipping:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n        return False\n    for i in range(len(l)):\n        if abs(l[i] - l[-1]) == 0:\n           return True\n\nThis function doesn't use reference equality, it uses integer addition. So l[-1] and l[-2] aren't considered equal, even though l[0] and l[-1] are.\n\nCan't you use reference equality and still get the same result?\n\nYou could, but the OP's question specifically asked about reference equality.\n\nPairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n\nPairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n\nThere is no other way to do it.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (sum(x) == 0 for x in l)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(map(lambda x: x*x, range(l)) == 0) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return not sum(sum(l) for l in l)\nThis is my implementation and it returns True.\n\n_\"def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    return not sum(sum(l) for l in l)\nThis is my implementation and it returns", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    else:\n       for x in l:\n          if x!= 0:\n              break\n             if x + x == 0:\n                return True\n    return False\nThe code is simple and obvious.  And the implementation is even simpler:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    pairs = [False]\n    for i in range(len(l)):\n       pairs = pairs + [i]\n    return (pairs == [] and (pairs.count() == 2) or\n       (pairs.count() == 2 and (pairs[0] == i and pairs[1] == i))\n    This seems like a pretty well-understood problem to me. The algorithm is:\n    1. Get a list of the numbers.\n    2. For each number, remove it from the list if it is the same as any other number.\n    3. If there are any remaining numbers, then the list should have 2 numbers that sum to zero.\n    This is the most straightforward algorithm to me, and the one used in the article.\n    (I am not familiar with Python.)\n\nSo what you are saying is that you are OK with the algorithm having the following behaviour:\n>>> pairs_sum_to_zero([1, 2, 3, 5, 7, 8, 9, 10])\nTrue", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(l) == 0\n\na,b,c = [1,2,3],\npairs_sum_to_zero(a)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero(l):\n    if len(l) == 2:\n       return True\n    return pairs_sum_to_zero(l[0], l[1])\n\nYou are welcome.\n\nIn my opinion, it is OK.\nI think it is better to apply the test to the elements individually:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero(l):\n    \"\"\"\n    takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) == 1:\n    return False\n    for i in range(len(l)):\n    if (i, i + 1) == 0:\n       return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return True\n    else:\n       for i in range(len(l)):\n          if pairs_sum(i) == 0:\n             return True\n         else:\n             return False\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2\n\nIs it possible to use that \"len(l) == 2\" in the function?</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def __len__(self):\n    return len(self)\n    def __reduce__(self, target, fn):\n    \"\"\"\n    This is a helper function that builds a new list of the same\n    length as the input list and which has the output of calling\n    fn on each element in the input list.\n    >>> pairs_sum_to_zero([1, 3, 5, 0], lambda s: s + 1)\n    [2, 4, 6, 1]\n    \"\"\"\n    return [target(self[0], self[1]), target(self[0], self[2])]\n\nIf you're interested, you can see more examples on my website:\n\nYour implementation is broken in the following case:\n>>> pairs_sum_to_zero([1, 3, 5, 0], lambda s: s + 1)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"\", line 1, in pairs_sum_to_zero\nPairsSumTo", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if l[0] + l[1] <= 0 and l[0] + l[1] <= 0:\n    return True\n    else:\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    else:\n       while l:\n         if abs(a[0]) + abs(a[1]) == 0:\n            return True\n          else:\n            return False\n    return True\n\nIt seems more like a toy problem than a real-world use case.\n\nYeah, seems like something that should be part of a more general package for combinatorial problems.\n\nAs others have pointed out, this is not very useful.\nThis is a case where a dictionary is more useful, so the following is a little bit of code that generates a dictionary:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    n = len(l)\n    return (sum(a[i] for i in range(n)) == 0 or sum(a[i] for i in range(n)) == 0)", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    l = [i for i in range(len(l))]\n    # no need to use the range function, it's already in the list\n    for i in xrange(2, len(l)):\n        if pairs_sum_to_zero(l[i]):\n           return True\n         return False\n    return False\n\nThis solution is not very flexible. If you change the input to the function, you have to change the code of the function. There are several ways to improve this.\nThe first one, in my opinion, is the best solution:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    l = [x for x in l if x % 2 == 0]\n    return l == [x]\n\nCan be used like this:\n>>> pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8])\nTrue\n\nIt's not well known, but you can use a list comprehension in place of the for loop above:\n>>> pairs_sum_to_zero(range(4))\nTrue\n\nOr even shorter:\n>>> pairs_sum_to_zero(range(4))\nTrue\n\nI think the point was to show a correct solution to the problem without using any language features that don't exist in other languages.\n\nI was giving examples in Python, not C.\n\nThe OP said \"in the style of Python\" so that's what I did too. I wasn't aware that anything I wrote didn't exist in any other language.\n\nI didn't say they didn't exist, I just said the solutions I gave were in the style of Python and wouldn't necessarily be considered idiomatic in C.\n\nIt's idiomatic in Python, too.\n\nI don't mean to be", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if sum(l) == 0:\n       return True\n    else:\n       return False\n\nHow do you define `sum`?\n\nIt was just a simple function to add a list of integers:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(l) == 0\n\nThe gist is in the code.  If a list is guaranteed to have only one value, then the code is trivial.  If a list can have more than one value, then the code is non-trivial.  The question is, can it be proven that a list of integers can have only one value?\n\nThis can be done by induction.\n\nFirst, define a type for a list of integers.\n\ndata ListInteger = Nil | Cons Int (ListInteger)\n\nThen, define a function that takes a list of integers and returns True if the list has only one value.", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return 1 \\\n    and \\\n    (l[0] \\\n    or \\\n    l[1] \\\n    and \\\n    (l[2] \\\n    and \\\n    l[3] \\\n    and \\\n    l[4] \\\n    and \\\n    l[5] \\\n    and \\\n    l[6] \\\n    and \\\n    l[7] \\\n    and \\\n    l[8] \\\n    and \\\n    l[9] \\\n    and \\\n    l[10] \\\n    and \\\n    l[11] \\\n    and \\\n    l[12] \\\n    and \\\n    l[13] \\\n    and \\\n    l[14] \\\n    and \\\n    l[15]) \\\n    and \\", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n\nThis isn't a bug in Python. The concept of a \"zero\" element is a mathematical abstraction, and doesn't really have a place in a language without that abstraction.\n\nI would disagree, if you take the common mathematical interpretation of zero, that it's the additive identity, then it's a bug that it's not in the language.\n\nThat is one way of interpreting zero, but it's not the only one. For example, in set theory, the null set is the set of all elements with no elements in them. It's a type of subset. In that view, zero is not the additive identity.\n\nTrue, but I don't think that's what the GP meant.\n\nIt's still not a bug in Python. It's a lack of a feature. If you're programming in Python and want to represent the concept of a zero element, you can either make it a special case, or you can create your own special class.\n\nNot true; as I described earlier, zero is an additive identity in mathematics, and if you're using a language that allows for mathematical expressions, you should be able to represent this.\n\nIt's a bug in mathematics, not in Python. The concept of", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero(l):\n    \"\"\"\n    if the length of l is odd, then return True.\n    else, if the length of l is even, then return True.\n    \"\"\"\n    if len(l) % 2 == 0:\n       return True\n    if len(l) % 2 == 1:\n       return True\n    return False\n\nThere's no need for a function to return False and a function to return True.\nIf you return True for one case and False for the other, then just do it with\none function.\n\nAlso, I don't know if you're planning to use this algorithm for anything else,\nbut it's possible that your program will run forever. For example:\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> pairs_sum_to_zero([1])\nTrue\n>>> pairs_sum_to_zero([])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 4, 5])", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    a = [0]\n    if len(l) > 1:\n       a.append(l[0])\n    else:\n       a.append(l[0])\n    i, j = 0, len(a)\n    while i < len(a):\n         if i == 0:\n            break\n           a[i+1] = 0\n           j += 1\n        if j >= len(a):\n            j = 0\n    return a[0] + a[1] == 0\n\nAaaaand this is why I love Python.\n\nAaaaand this is why I'm glad I was paying attention in my Data Structures course.\n\nAaaaand this is why I hate, hate, HATE this meme.\n\nAaaaand I hate your negativity.\n\nAaaaand I", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2 or l[0] == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return not (pairs_difference(l, 0) and not (pairs_difference(l, 1) and not (pairs_difference(l, 2) and not (pairs_difference(l, 3) and not (pairs_difference(l, 4) and not (pairs_difference(l, 5))))))\n    def pairs_difference(l, diff):\n    \"\"\"\n    pairs_difference takes a list of integers as an input.\n    it returns the difference between the first and second elements of the list.\n    >>> pairs_difference([1, 2, 3, 5])\n    3\n    >>> pairs_difference([1, 2, 3, -3])\n    1\n    >>> pairs_difference([1, 2, -3])\n    -1\n    >>> pairs_difference([1, 2, -1])\n    -2\n    >>> pairs_difference([1, 3, -3, -1, 3])", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return list(filter(lambda x: x == 0, l))", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero_is_trivial(l):\n    \"\"\"\n    pairs_sum_to_zero_is_trivial takes a list of integers as an input.\n    it returns True if the pair(s) in the list have exactly the same\n    elements, and False otherwise.\n    >>> pairs_sum_to_zero_is_trivial([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_zero_is_trivial([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_is_trivial([1, 2, 3, 7])\n    True\n    >>> pairs_sum_to_zero_is_trivial([2, 4, -5, 3, 5, 7])\n    False\n    \"\"\"\n    def _pairs_sum_to_zero(l):\n    \"\"\"\n    return pairs_sum_to_zero(", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 2:\n       return True\n    else:\n       for i in range(len(l) - 1):\n          if pairs_sum_to_zero(l[i - 1], l[i]) == True:\n             return True\n         else:\n             return False\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2\n\nAnd if you change it to be an actual function instead of a list comprehension:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    a, b, c = [1, 3, 5, 0, 1],\n    j = 0,\n    for i in xrange(len(a)):\n        if a[i] == a[j]:\n            break\n            a[j] += b[j]\n             b[j] += c[j]\n             if a[j] == b[j]:\n               break\n              j += 1\n         if a[i] == 0:\n              break\n          return a[i] == b[i]\n    def pairs_sum_to_zero_with_exceptions(l):\n    \"\"\"\n    pairs", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    pairs = [l[0] for l in range(len(l) + 1)]\n    for p, i in pairs:\n        if p+i == 0:\n           pairs.append(p+i)\n    return len(pairs) == len(l) + 1\n\nThanks for the suggestion. I have tried this and it does not quite meet my requirement. What I am trying to do is to count the number of pairs of elements in a list which sum to zero. The code you have given just returns True or False for every pair of elements in the list.\n\nI have looked at many similar functions and the closest I have found so far is:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if l[0] == l[1]:\n    return False\n    for i in xrange(1, len(l)):\n       if l[i] == l[i+1]:\n          return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(l[1:]) == 0\n\nI think you mean \"return (sum(l[1:]) == 0)\"\n\nCorrect, I will fix it.\n\nThis is a good example of why Python 2 is a mistake: if the default\nimplementation of a builtin function is wrong, you can't fix it.\n\nThis is not actually a good example. The builtin function is implemented\ncorrectly, and the documentation does not claim it will work on lists of\nintegers, only on lists of pairs of integers.\n\nYes, the built-in function is implemented correctly. But when I use\nit, I expect it to work on lists of integers. The documentation is\nwrong.\nI think the best solution is to add a line to the documentation.\n\nWhere do you see that the documentation is wrong?\n\n\"it returns True if there are two distinct elements in the list that sum to zero\"\nThat's not true. It returns True if there are two distinct elements in\nthe list that sum to zero _and_ you have at least one of them.\n\nIt seems I am misunderstanding the function. I thought it was supposed to\nreturn", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sorted(list(i % 2 for i in l), key=lambda x: x % 2 == 0)\n\nA simple implementation in Haskell:\nimport Data.List\nimport Data.Maybe\n\nmain = do\n    (sum, id) <- mapM (pairs_sum_to_zero  l) [1..9]\n    return (sum /= id) == 0\n\nrunghc -O2 -s -rtsopts -threaded -Wall -c pairs_sum_to_zero.hs\n\nOutput:\nFalse\nTrue\nFalse\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l)!= 1:\n        return False\n    for i in range(len(l)):\n        if i == 0:\n           return False\n        else:\n           if i == l[-1]:\n              return True\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return not len(l) and not sorted(l[::2], key=lambda i: i[1])", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    pairs_sum = 0\n    for i in range(0, l.size()):\n       pairs_sum += l[i]\n    if pairs_sum == 0:\n       return True\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n        return True\n    for elem in l:\n        if elem == 0:\n           return True\n        else:\n            return elem + l[-1] == 0\n    return False", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    else:\n       return True\n\n>>> pairs_sum_to_zero(l=[1, 0, 1, 0, 2, 0, 3])\nTrue\n>>> pairs_sum_to_zero(l=[1, 0, 1, 0, 0, 2, 2, 0, 3])\nTrue</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def pairs_sum_to_zero_closure(l):\n    \"\"\"\n    pairs_sum_to_zero_closure takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_closure([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_zero_closure([1, -2, 1])\n    False\n    >>> pairs_sum_to_zero_closure([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_closure([1, 2, 3, 7])\n    True\n    >>> pairs_sum_to_zero_closure([2, 4, -5, 3, 5, 7])\n    False\n    >>> pairs_sum_to_zero_closure([1])\n    False\n    \"\"\"\n    if l.startswith(", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    k = len(l)\n    for i in range(k):\n       if i == 1:\n          return False\n       if i == 2:\n          return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n\nI would not recommend coding in Python if you are not familiar with it. It is easy to lose track of what you are doing.\n\nYou are trying to define your own version of a built-in function in Python. If you try to do that it is easy to make mistakes.\n\nFor example, you are trying to return a value to the caller when you are called with None as a parameter. That is not valid in Python. When you define a function you cannot specify any return values.\n\nI recommend you start with a tutorial on Python basics. The one in the reference section of the Python documentation is very good.</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 2", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n       return False\n    for i, pair in enumerate(l):\n       if (i - pair) == 0:\n          return True\n    return False\n\nFor most computer architectures, it's faster to test equality of two values in an array than to test the zero property. (This is known as the Armstrong-Hastings algorithm.)\nIn C, the function is trivial to write:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    pairs_sum = sorted(l)\n    for i in xrange(len(pairs_sum)):\n       if pairs_sum[i] == pairs_sum[j]:\n          return False\n          return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i, v in enumerate(l):\n       if v == i:\n          return False\n    return True\n\nThat's more obvious than the article's version, which has the last line of the inner loop looking like:\nreturn False\nThat looks like a bug to me, and it took me a while to see what was going on.\n\nYup, I like the \"sum to zero\" part of this answer, but the \"pairwise\" part is kind of confusing.\n\nI thought that was the interesting part.\n\nSo, this is how I got my linear algebra job.\n\n(16, 25, 33, 35, 41, 45, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143,", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n        return False\n    for i in range(len(l)):\n        l[i] = i\n    if not l[i] * l[i+1] == 0:\n        return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    def __init__(self, l):\n       self._c = []\n\n       self._sum_to_zero = lambda x, y: x+y == 0\n\n       self._do_pass = lambda x: self._c.append(x)\n\n       self._do_pass(l)\n\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i, j in enumerate(l):\n       if abs(i-j) > 0:\n          return False\n       else:\n          return True\n\nCan't this be done in O(n) time?\n\nIt's O(n) in the sense that you would have to check every possible pair of elements for a sum of 0, but if you want to check every pair for a sum of 0, then you're going to have to check every pair for a sum of 1, and then you're going to have to check every pair for a sum of 2, and so on. So no, you can't do it in O(n).\n\nI think you misunderstood my question. I know it's not O(n) in the sense that we would have to check all pairs. I meant, given the sum, can't we calculate the smallest n such that we could know that the sum is 0?\n\nAh, I see. I don't think so, no. You'd still have to check every pair, and the number of pairs is going", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return pairs_sum(l)\n\nSorry for the late reply. Here are some questions:\n1\\. What are you trying to do with this?\n2\\. It would be more idiomatic to write this as a function that takes a list of lists, rather than the input being a list of integers. But if you want to do the former, you should either put parentheses around the return of the first function, or add a list comprehension, since that's what the second function does.\n3\\. Your second function is a little off. What are you trying to do?\n\nThanks for the comment.\n1\\. I'm trying to find a way to test for pairs of elements in a list that sum to zero.\n2\\. Yes, I'll change that.\n3\\. I'm trying to find a way to test for a list of pairs of elements in a list that sum to zero.\n\nA test is not a function. When you're trying to _define_ a test, use a function. But that's not what you're doing, you're trying to _call_ the test, in which case you need parentheses.\n\nOk, I think I understand what you're saying.", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    return len(l) == 2 and sum(l[1], l[2]) == 0\n\nI think you'll find that it should be something like:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i in l:\n        if sum(i) == 0:\n           return True\n    return False\n\nIn Python, the Python function you get is", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return sum(0.0 for i, j in zip(l, range(0, len(l) - 2))\n    if i+j = 0 and j!= -i)\n    and sum(0.0 for i, j in zip(l, range(len(l) - 2, len(l) - 1))\n    if i+j = 0 and j!= i)\n\nI think the author missed the point of why the problem is interesting. When a naive naive-subsitution based solution to this problem is written, it doesn't take long to notice that in general, for non-zero x and y, the expression x - y may be negative, and thus, adding two of these expressions may add up to a negative number.\nThe point is, what is the expression that makes the problem trivial? It's not just x - y = 0. It's x + y = 0. For some reason, that simplifies everything.\n\nBecause there are only positive numbers in the input, it's already trivial. It's just that not all simple expressions are in the positive domain, so not all expressions can be turned into constants.", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return len(l) == 1", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 0:\n       return False\n    for i in range(len(l)):\n       if (l[i] + l[i+1]) == 0:\n           return True\n    return False\nThe function is not correct. I tried some very simple cases and got this\noutput:\n>>> pairs_sum_to_zero([1, 3, 2, 4])\nTrue\n>>> pairs_sum_to_zero([1, 3, 3, 2, 4])\nFalse\nI was not able to find any logic error in the code. Can you explain\nwhat is going on?\n--\nRegards,\nAlexey</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    \"\"\"\n    return lambda x, y: x + y\n    and not x + y == 0\n    and not y + x == 0\n    and not x + y == y + x\n    and not x + y == y + 1\n    and not x + y == 1\n\nYou can solve this problem with any of the usual list algorithms. I prefer to use dynamic programming, so:", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) < 2:\n    return False\n    return True\n\n[from TFA]:\n>>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> def pairs_sum_to_zero(l):\n...        if len(l) < 2:\n...           return False\n...        return True\n...\n>>> pairs_sum_to_zero(a)\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9])\nFalse\n>>> pairs_sum_to_zero([]).append(2)\nTrue\n\nBut the test is very easy to break. If you have a list of [1,2,3,4,5,6,7,8] the sum of any 2 is -1 which is a non-zero number. Therefore your test will always say True.\n\nNot true.\n1 - 1 = 0\n\nThat's true, but the original test _is_ easy", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    assert l == [1, 2, 3]\n    for x in l:\n        if abs(x) == 0:\n           return True\n          if abs(x)!= -1:\n            return False\n    return False\n\nThis is not the code that is being used. I have not seen this code before.\nIf you are referencing the snippet that I posted, then I think that it is the code that the author is using.\n\nWell, it's not the code from the article, that's for sure. There are several problems with the code you posted:\n\\- Your 'assert' only verifies the input is an empty list. It doesn't verify that pairs_sum_to_zero() works correctly. (Why didn't you use the same code from the article?)\n\\- Your 'for' loop is very inefficient. I'd recommend using 'zip()' to build an iterator.\n\\- The 'if abs(x) == 0' check is redundant.\n\\- Your 'if abs(", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    for i, elem in enumerate(l):\n    if elem == 0:\n       return True\n    return False</s>", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if len(l) == 1:\n        return False\n    return True", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    if sum(a)==sum(b):\n    return False\n    return sum(a)==sum(b) and sum(a)+sum(b)==0", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    return (sum_of(pairs(l)) == 0)\n\nMy Python 2.5a1:\n\"\"\"", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\" \"\"\"\n    p = 0\n    while True:\n       if sum(pairs_remove(l, p)) == 0:\n          return True\n    p += 1"]]