[["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for c in string:\n        if c == 'a':\n            c = c.upper()\n        else:\n            c = c.lower()\n    return c\n\n>>> import string\n>>> string.flip_case(\"Hello\")\n'hELLO'\n\nI think it's better to use Python's built-in string methods (and avoid the global namespace pollution) than to reimplement them with a for-loop.\n\nPython's built-in string methods are horribly slow. For example, to convert the string \"Hello\" to uppercase, you have to do:\ns = 'Hello'\ns.upper()\n\nAnd to convert the string \"Hello\" to lowercase, you have to do:\ns = 'Hello'\ns.lower()\n\nA for-loop is not much slower than that.\n\nI like to use itertools.groupby.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nI'm not a Python expert, but I think that's going to be slow.\nI think that's going to be slow, and I'm a Python expert.\nI'm not a Python expert, but I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert, and I think that's going to be slow.\nI'm a Python expert,", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __init__(self, string: str):\n    \"\"\"\n    @param string: The string to be flipped\n    @return: The flipped string\n    \"\"\"\n    self.string = string\n    self.string_length = len(string)\n    return self.string\n>class flip_case(object):\n    def __init__(self, str):\n       self.str = str\n       self.str_length = len(str)\n>    def flip_case(self, str):\n       return self.str\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string[:len(string)-1] == 'l':\n        return string[len(string)-1:]\n    elif string[:len(string)-1] == 'u':\n        return string[len(string)-1:]\n    else:\n        return string\n\nYou can also do it with only one if:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\n    def double_case(string: str) -> str:\n    \"\"\" For a given string, double the case of every character.\n    >>> double_case('Hello')\n    'HElLo'\n    \"\"\"\n    return string.upper()\n\nThis is a bit of a strawman, because the problem with the original code isn't that it's not pure.\n\nI don't know, I think that code is pretty bad. It's hard to read and doesn't do what it's supposed to do.\n\nI think the code is a bit bad, but I think the point of the post was that it's bad because it's not pure.\n\nI don't think the code is bad at all, it's just not pure.\n\nWell, the code _is_ bad, but the point of the post was not that it's not pure.\n\nI think the code is bad, but the point of the post was not that it's not pure.\n\nI think the code is bad, but the point of the post was not that it's not pure.\n\nI", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\n\nI'm a little confused, what's the use case for this?\n\nThe use case is that I needed to do this, and I didn't want to have to write a function for it.\n\nBut why? Why not just use lower() and upper()?\n\nIn case you want to do it for all strings in a list, and you want to do it in one line.\n\nThis is a little weird, since the Python built-in string.lower() and string.upper() do the exact same thing.\n\nThis is a good point. I'm not sure what I was thinking. I'll change it to string.lower().</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThat's not a function, it's a class method.\nI'm not sure if that's even valid Python.\nIt's valid, but it's not a function.\nIt's a function in the same way that \"hello\" is a function.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nYou probably want string.titlecase() instead.\nI disagree, I think the result is more readable than `hELLO`.\nI agree, but it's not what OP asked for.\nI think that's more a matter of what OP was looking for, rather than what OP asked for.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\nI didn't know about the string.lower().upper().lower() method. I've been using string.replace(string, \"\", lower) and string.replace(string, \"\", upper).\nI prefer the first method, because it is explicit and not ambiguous.  I can't remember the last time I had to use the second one, but I have a vague recollection of being annoyed with it.\nI'd say it's more that it's not obvious.  But I agree, the first one is a lot better.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string == 'hello':\n       return string\n    return string.upper()\nI think the point of the article is to not use raw string operations.\n\nThe point of the article is to not use raw string operations _without understanding how they work_.\n\nThe point of the article is to not use string operations at all.\n\nI think that's a bit of an exaggeration, but the point of the article is that if you have a string in a language like Python or Ruby, you should be using a library for string operations.\n\nI think the point of the article is to not use string operations at all.\n\nI think that's a bit of an exaggeration, but the point of the article is that if you have a string in a language like Python or Ruby, you should be using a library for string operations.\n\nI think the point of the article is to not use string operations at all.\n\nI think that's a bit of an exaggeration, but the point of the article is that if you have a string in a language like Python or Ruby, you should be using a library for string operations.\n\nI think the point of the article is", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for letter in string.lower():\n        letter = letter.upper()\n    return letter.lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def lower_case(string: str) -> str:\n    \"\"\" For a given string, lowercase characters to lowercase and uppercase to upper case.\n    >>> lower_case('Hello')\n    'hello'\n    \"\"\"\n    return string.lower()\n    + string.upper()\nThis is a common one for me.  I've found that using a method like this can be very useful in some situations.  It's also a good way to learn about the string module.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() == 'hello':\n       return string.upper()\n    else:\n       return string.lower()\nThis would be a great exercise to try and write it without the str.lower() check.  You can use the fact that str.upper() and str.lower() have the same behavior for the second part of the function, but the first part is more difficult.  Try to make it so that it works for all strings.\n\nThat's a good exercise!\nI would suggest doing it with a list instead of a string, though.\n\nI just realized that there is a subtle bug in my code:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is a neat trick, but it doesn't quite work for strings with a single lowercase character.\n>>> flip_case('Hello')\nTraceback (most recent call last):\nFile \"\", line 1, in <module>\nFile \"/usr/lib/python2.7/site-packages/flip_case.py\", line 13, in <module>\nreturn string.lower().upper()\nFile \"/usr/lib/python2.7/site-packages/flip_case.py\", line 11, in <module>\nreturn string.lower().upper()\nAttributeError:'str' object has no attribute 'upper'\n\nI think it's a neat trick as well, but I was confused by the \"def\" keyword.\n\nI don't think it's a neat trick. It's a neat hack.\n\nThis is a neat hack.\n\nI have to admit I like this.\n\nI like it too.\n\nThis is really neat!\n\nThis is neat!\n\nThis is neat.\n\nThis is neat.\n\nThis is neat.\n\nThis is neat.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\n\nWhat does this do?\n\nFlips the case of a string.\n\nI know that, but what is the use of it?\n\nIt's a joke. It's a terrible joke, but a joke nonetheless.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() in ['a', 'z']:\n       return string.upper()\n    return string.lower()\nYou could also use the `lower` and `upper` functions, which are faster.\nI think it's important to know that the string is being checked against a list of letters, and not against a string.  This is a pretty common mistake, and it's a subtle one.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is a good example of why \"pythonic\" is not the same thing as \"idiomatic\".  This is a good example of a bad habit.  For this case, I would use:      return string.upper().lower()\nWhy? What's the difference between the two?</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nWhat is the point of this?\n\nThere is no point. It's just a joke.\n\nI love jokes.\n\nI don't get it.\n\nIt's a joke about the fact that it's a useless function. It's also a joke about the fact that it's a one-liner that just calls two built-in functions.\n\nI think you're reading too much into it.\n\nI think you're not reading enough into it.\n\nI think you're not reading enough into it.\n\nI think you're reading too much into it.\n\nI think you're not reading enough into it.\n\nI think you're reading too much into it.\n\nI think you're not reading enough into it.\n\nI think you're reading too much into it.\n\nI think you're not reading enough into it.\n\nI think you're reading too much into it.\n\nI think you're not reading enough into it.\n\nI think you're reading too much into it.\n\nI think you're not reading enough into it.\n\nI think you're reading too much into it.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nYou're missing the part where you return the result.\nI think the OP is just demonstrating how to use the library he linked, not actually writing a function.\nOh, you're right. I didn't notice the link.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __init__(self, string: str) -> None:\n        self.string = string\n        self.upper = False\n    def lowercase(self, string: str) -> str:\n        if self.upper:\n            return string.lower()\n            return string.upper()\n        self.upper = True\n    def uppercase(self, string: str) -> str:\n        if self.upper:\n            return string.upper()\n            return string.lower()\n        self.upper = False\n\nI have no idea what the point of this is.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\n    def string2list(string: str) -> list:\n    \"\"\" For a given string, convert it to a list.\n    >>> string2list('Hello')\n    ['h', 'e', 'l', 'l', 'o']\n    \"\"\"\n    return [string.lower() for _ in string if string.startswith('h'))]\n    def string2dict(string: str) -> dict:\n    \"\"\" For a given string, convert it to a dictionary.\n    >>> string2dict('Hello')\n    {'h': 'Hello', 'e': 'l', 'l': 'o'}\n    \"\"\"\n    return dict(string.lower(), string.upper())\n\nThe article has the wrong code.\n\nThere are two main problems with the code:\n1\\. It doesn't take into account punctuation.\n2\\. It doesn't take into account word boundaries.\n\n1\\. punctuation is not part of the string, it is a side effect of the way the", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __repr__(self):\n    \"\"\"Return a string suitable for repr().\"\"\"\n    return '%s %s' % (self.__class__.__name__, self)\n    def __str__(self):\n    \"\"\"Return a string suitable for str().\"\"\"\n    return '%s %s' % (self.__class__.__name__, self)\n    def __repr__(self):\n    \"\"\"Return a string suitable for repr().\"\"\"\n    return '%s %s' % (self.__class__.__name__, self)\n    def __str__(self):\n    \"\"\"Return a string suitable for str().\"\"\"\n    return '%s %s' % (self.__class__.__name__, self)\n\nYou should put a docstring in there, explaining the purpose of the function.\n\nThis is a great idea. I think I'll just add it to the top of the function.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() in ['A-Za-z'] and string.upper() in ['A-Za-z']:\n       return string.upper()\n    else:\n       return string.lower()\nNote that you can achieve the same thing by doing:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\nThis is a function that I wrote to convert a string from lowercase to uppercase and vice versa. It's a little bit more complicated than the one in the article but it's much more flexible.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI was expecting something more like:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.startswith('H'):\n       return string.lower()\n    elif string.startswith('L'):\n       return string.upper()\n    else:\n       raise AttributeError('Unknown case')\n\nIt's not a \"hack\" if it's the actual function name.\n\nI always thought the \"hack\" referred to the use of the word \"if\" in the function definition, rather than the function name itself.\n\nI don't think so. A hack is a \"clever but unsound\" solution to a problem. That's not what this is.\n\nI think that's a common use of the word, but I think it's more general than that.\n\nI don't know why but I found this funny.\n\nIt's probably because the author of the article doesn't understand what a hack is.\n\nHacking is a process, not a solution.\n\nI think this is the most important point.\n\nI don't think it's that important. The most important point is to have fun, and not to take yourself", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nCan't that be done with a single line of code?\nstr.capitalize()\nNo, it's case-sensitive.\nYou can do it with a single line of code. You just need to know the language better.      str.capitalize().lower()\nI was making a joke about how you can't capitalize a string in python.\nYou can do it with a single line of code. You just need to know the language better.      str.capitalize().lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower().upper()\nIf you have a string `Hello` and you want to convert it to `Hello` you can use `str.lower()` and `str.upper()` instead of `string.lower()` and `string.upper()`.\nIf you have a string `Hello` and you want to convert it to `Hello` you can use `str.lower()` and `str.upper()` instead of `string.lower()` and `string.upper()`.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\nThank you for the code. I've been looking for something like this.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\n\nIn python 2.7, this would be the same as:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThat's not a one-liner.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI prefer this version:      return string.upper().lower()\nMuch cleaner, and you don't have to remember to reverse the case of the first character.\nAlso, the version you gave will throw an exception if you try to convert a string that doesn't have a lower case version.\nTrue, but I think that's a feature.\nIf you don't want to convert the string, you don't want to convert the string. The exception is a sign that you're doing something wrong.\nI see where you're coming from. I just like the version that returns a string and I think it's more readable.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    if string.lower() in ['a', 'a', 'A', 'A', 'A', 'a', 'A']:\n        return string.upper()\n    elif string.upper() in ['A', 'A', 'A', 'A', 'A', 'A', 'A']:\n        return string.lower()\n    else:\n        raise ValueError(\"Expected string to be either lowercase or uppercase\")\nThis is just a modified version of the first one.\n\nYou could just use a regex to check the string.\n\nI prefer to use regexps to do this kind of stuff, but I think the point is that you don't need regexps to do this kind of stuff.\n\nBut you don't need them to do this kind of stuff.\n\nI'm sorry, but I don't get it. I don't see how this is different from the first solution.\n\nI agree with you. The only difference I see is that the first solution has a \"raise\" statement at the end, and", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nThat's not what I want. I want to take a string and change all the lower case letters to uppercase and all the uppercase letters to lowercase.\nI know, I was just pointing out the \"flip\" function does the exact opposite of what you want.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nWhat is the purpose of this function?\n\nThe OP's function is a joke.\n\nI was actually expecting it to return the same string flipped.\n\nI was expecting it to return a string of all caps.\n\nI was expecting it to return a string of all lowercase.\n\nI was expecting it to return a string of all punctuation.\n\nI was expecting it to return a string of all spaces.\n\nI was expecting it to return a string of all tabs.\n\nI was expecting it to return a string of all newlines.\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting it to return a string of all \"\n\nI was expecting", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    def lower_case(string: str):\n    \"\"\" For a given string, lowercase characters to lowercase.\n    >>> lower_case('Hello')\n    'Hello'\n    \"\"\"\n    \"\"\"\n    def uppercase(string: str):\n    \"\"\" For a given string, uppercase characters to uppercase.\n    >>> uppercase('Hello')\n    'Hello'\n    \"\"\"\n    return string.lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nI'm sorry, I don't understand the reasoning behind this.  Why would you want to do this?  What is the use case?\nIt's a silly example of a one-line function.  The point is to show that a function can be so simple that it can be written on a single line.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nYou should change the example to be \"hello\".</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nI've always wondered if the people who make these kinds of changes are aware of the fact that this is, in fact, not how you spell hello.\nI'm pretty sure they are.\nBut, do they know that this is not how you spell Hello?\nI'm pretty sure they are.\nBut, do they know that this is not how you spell Hello?\nI'm pretty sure they are.\nBut, do they know that this is not how you spell Hello?\nI'm pretty sure they are.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if len(string) == 0:\n        return ''\n    else:\n        return string.lower().upper()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI'm not sure about this, but I think this is wrong. I think it should be:\nreturn string.upper().lower()\n\nThat's what I meant. I just had a brain fart.\n\nI like the idea, but I'm not sure how much I'd use it.\nI think it would be nice if it was easy to use it with a small number of strings.\nIt would also be nice if it was easy to write custom functions.\n\nIt's a little bit of a pain to write custom functions, but I think it's worth it. I'd rather have the base library be small and well-written.\n\nI'm confused, why is this better than the built-in string.upper() and string.lower() functions?\n\nThis is a nice little library. I especially like the _.reverse() method.\n\nIt's really nice for string manipulation. The documentation is good, too.\n\nI like the idea, but I'm not sure how much I'd use it.\nI think it would be nice if it was easy to use it with a small number of strings.\nIt would also be nice if", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\n\nI'm not sure why you'd want to use this instead of re.lower().\n\nRe.lower() is a function that takes a string and returns a lowercase string.\nflip_case() is a function that takes a string and returns a string that has all lowercase characters flipped to uppercase and all uppercase characters flipped to lowercase.\n\nI see. I thought the title was meant to be \"flip_case() is a function that takes a string and returns a string that has all lowercase characters flipped to uppercase and all uppercase characters flipped to lowercase.\"\n\nI think that this is a better version of flip_case() :", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    case string.lower() in", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\n\nA nice variation of this is to use _ as the separator, so that you get the same effect as 'hello_world'\n\nI like this.\nThe one thing that bothers me about this is that it's not clear if it is a one-to-one mapping. It doesn't seem like it is. I'd like to see a version where I could specify what I want the output to be, and the function would return that.\n\nI've always used this version:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nI'm not sure if this is the same as what you're asking for, but I'd try this.\n\nThanks, I will try it.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    # We don't need to look at the whole string, just the first character\n    # because that's the one that will be flipped.\n    # If the first character is a letter, then the rest of the string\n    # is a word.\n    if len(string) == 1:\n        return string[0]\n    else:\n        return string[0]\n\nI've never seen this before, but it looks like it's a pretty common idiom.\n\nIt's not all that common, and it's a bad idiom. The point of the idiom is that you can flip a string in constant time. This idiom is not constant time, and it's not clear that it's even linear time.\n\nIt's not constant time, but it is linear time.\n\nYou're right, I should have said linear time.\n\nI think this is a great example of a bad practice. The first example is a simple, readable function. The second example is a complicated function that takes a lot of effort to understand. The third example is a bad joke", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nI like that this is a non-trivial function, and is not just \"string.replace(case)\".  There's a lot of cool things you could do with this.\nThis is a very simple function, but I'm not sure why you think it's \"non-trivial\".  I mean, the string.replace(case) would be just as simple.  The only difference is that this is a little more verbose.\nIt's non-trivial because it doesn't just flip the case of the characters, it also adds a space between them.  That's what I meant.  It's not just \"replace(case)\", it's \"replace(case, space)\".\nAh, I see.  Well, in that case, I agree, it's non-trivial.  I thought you meant the function itself was non-trivial, not the behavior it produces.  My mistake.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI think the problem is that you're using string.lower().upper() instead of the standard string.upper() and string.lower()\nI had to use string.lower().upper() because of the way it was defined in the class.  I didn't want to use string.upper() because of the way it was defined in the class.\nI'm not sure I understand. You say that you can't use string.upper() because of the way it's defined in the class, but you're also saying that you can't use string.lower() because of the way it's defined in the class. What's the difference?\nThe way the class is written, the lower() method returns a string with all lowercase letters.  The upper() method returns a string with all uppercase letters.  I can't use the upper() method because that would change the letter's case, which is not what I want.  I can't use the lower() method because I would need to convert it back to all lowercase letters before returning it.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper()\n\nThis is a bad example, because Python is case-insensitive.\n\nThis is a good example, because Python is case-insensitive.\n\nI don't understand how that is a good example.\n\nIt's a good example of how to implement a case-insensitive string function.\n\nI don't understand how that is a good example.\n\nIt's a good example of how to implement a case-insensitive string function.\n\nI don't understand how that is a good example.\n\nIt's a good example of how to implement a case-insensitive string function.\n\nI don't understand how that is a good example.\n\nIt's a good example of how to implement a case-insensitive string function.\n\nI don't understand how that is a good example.\n\nIt's a good example of how to implement a case-insensitive string function.\n\nI don't understand how that is a good example.\n\nIt's a good example of how to implement a case-insensitive string function.\n\nI don't understand how that is a good example.\n\nIt's a good example of how to", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\n\nThat's the first line. The second line is just a comment that explains what the first line does.\n\nYou don't have to put a comment in front of every function. It's only necessary if the function is complicated or otherwise hard to understand.\n\nIf you do that, you'll end up with a lot of comments. And when you're reading a function, the comments are going to get in the way.\n\nThere's another reason to put comments in front of functions. It helps you to understand the code.\n\nLet's say you're trying to figure out what a function does. You start reading the function.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nI'm sorry but I just can't get over the fact that you have to specify the type of the string. What is the point of this?\nI don't know, but I'm guessing it's because it's a Python 3 function.\nIt's a function in Python 3? I thought it was just an operator.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI like this better:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\n\nSo basically it's the same as the following python function (from the standard library):\n>>> def lowercase(string):\n         return string.lower()\n>>> def upper(string):\n         return string.upper()\n>>> lowercase(\"Hello\")", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\n\nThis is the best I could come up with:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nThat's a pretty bad way to do that.\nI was just trying to make the code as simple as possible.  What would be a better way to do it?\nYou should be using a function that knows the difference between lowercase and uppercase. The built-in string method lower() just reverses the string.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'HELLO'\n    \"\"\"\n    def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'HELLO'\n    \"\"\"\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'HELLO'\n    \"\"\"\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'HELLO'\n    \"\"\"\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    # Get a list of characters\n    chars = string.lower()\n    # If there are any lowercase characters, flip them.\n    if len(chars) > 0:\n        chars = chars.reverse()\n        return chars\n\nThis is a very bad idea. If you're going to do this, you should do it in a way that preserves the original string:\n>>> str = \"Hello\"\n>>> str.flip_case()\n'HELLO'\n>>> str\n'Hello'\n\n>>> str.flip_case()\n'HELLO'\n>>> str\n'Hello'\n\nIt is a bad idea. If you want to do this, you should use a mapping.\n>>> str = \"Hello\"\n>>> str.flip_case = lambda s: s.upper()\n>>> str.flip_case()\n'HELLO'\n>>> str\n'Hello'\n\n>>> str.flip_case = lambda s: s.upper()\n>>> str.flip_case()\n'HELLO'\n>>> str", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\nThis is the same as `str.upper().lower().upper()`.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __init__(self, string: str) -> None:\n    \"\"\" Initialize the class.\n    >>> from collections import defaultdict\n    >>> d = defaultdict(int)\n    >>> d[0] = 1\n    >>> d[1] = 2\n    >>> d[2] = 3\n    >>> d\n    {0: 1, 1: 2, 2: 3}\n    \"\"\"\n    self.string = string\n    self.upper = defaultdict(int)\n    self.lower = defaultdict(int)\n    self.upper[string[::-1]] = 1\n    self.lower[string[::-1]] = 1\n    def __repr__(self):\n    \"\"\" Return a string representation of this object.\n    >>> from collections import namedtuple\n    >>> namedtuple('flip_case', ['upper', 'lower'])\n    >>> repr(flip_case('Hello'))\n    'h", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    # Note that this is the same as the list comprehension below.\n    # [x.lower() for x in string.split()]\n    return string.upper() + string.lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\nI don't know about you, but I think this is a pretty terrible way to go about it.\nI would have used a list comprehension.\nI would have used a dictionary.\nI would have used a map.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list comprehension.\nI would have used a list", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI like it, but I think it's more pythonic to use a function that returns a string:      def flip_case(string: str):         return string.lower().upper()\nI have a feeling that's what he meant, but I could be wrong.\nYou're right, that's what I meant. I was just trying to make it as close to the original as possible.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() == string.upper():\n       return string.upper()\n    else:\n       return string.lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower().upper()\nHow does this differ from a function which takes a string and returns a string?\n\nIt's a little bit more readable than:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string == \"\":\n       return \"\";\n    return string.lower().upper().lower()\nNice.  Though if you're going to go through the trouble of writing your own function, you might as well use a more efficient algorithm.  The obvious one is to use a trie, which will be O(n).</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n>>> flip_case('Hello')\nhELLO\n\n>>> flip_case('Hello')\nhello\n\n>>> flip_case('Hello')\nhellO\n\n>>> flip_case('Hello')\nhellO\n\n>>> flip_case('Hello')\nhellO\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nhello\n\n>>> flip_case('Hello')\nhello\n\n>>> flip_case('Hello')\nhello\n\n>>> flip_case('Hello')\nhello\n\n>>> flip_case('Hello')\nhello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')\nHello\n\n>>> flip_case('Hello')", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nIt's a little bit more readable if you return a tuple instead of a function.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one.\n\nI think the point was to show the simplest solution, not the most readable one", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI know it's a joke, but it's a pretty funny joke.\n\nIt's not a joke. It's a real function in Python 3.\n\nThat's the joke.\n\nI know it's a joke, but it's a pretty funny joke.\n\nIt's not a joke. It's a real function in Python 3.\n\nThat's the joke.\n\nI know it's a joke, but it's a pretty funny joke.\n\nIt's not a joke. It's a real function in Python 3.\n\nThat's the joke.\n\nI know it's a joke, but it's a pretty funny joke.\n\nIt's not a joke. It's a real function in Python 3.\n\nThat's the joke.\n\nI know it's a joke, but it's a pretty funny joke.\n\nIt's not a joke. It's a real function in Python 3.\n\nThat's the joke.\n\nI know it's a joke, but it's a pretty funny joke.\n\nIt's not a joke. It's a real function in Python 3.\n\nThat's the joke.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def lowercase(string: str) -> str:\n    \"\"\" For a given string, lowercase characters to lowercase.\n    >>> lowercase('Hello')\n    'hello'\n    \"\"\"\n    def uppercase(string: str) -> str:\n    \"\"\" For a given string, uppercase characters to uppercase.\n    >>> uppercase('Hello')\n    'HELo'\n    \"\"\"\n    return string.upper()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for char in string:\n        if char == 'a':\n           return char\n        else:\n           return char == 'Z'\n    return ''.join(chars)\n\nI don't think this is a good example. It's not clear to me what the result of the function is supposed to be.\n\nA function that flips the characters in a string.\n\nWhat's the result of the function?\n\nI'm not sure I understand the question. The result of the function is a string that has all its characters flipped.\n\nAh, I see. I read the function as flipping the characters in a string, so I was wondering what the result of the function would be.\n\nIt's a good exercise to try to write an explanation for the function in terms of its result, as well as its implementation.\n\nI've seen this done in the past, and I think it's a great idea.\nI'm not sure I've ever seen it done in a way that made it clear that the \"what\" was", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is a good one.  It's a very simple and clean solution.  I would say this is the best answer.  It doesn't even need to be any more complicated than this.\nI would say it's not the best answer, because it doesn't handle a case where the string is empty.\nIt does, but only for the first case.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\n    + string.upper()\nThe author is right about the lack of comments, but I'm more interested in the fact that the function doesn't work correctly. The string is not lowercased.\n\nThe string is returned as a copy of the original string. The string that is returned is lowercase.\n\nI'm sorry, but you are wrong.\n>>> flip_case('Hello')\n'hELLO'\n>>> print(string.lower())\n'HELLO'\n>>> print(string.upper())\n'HELLO'\n>>> print(string.lower(2))\n'HELLO'\n>>> print(string.upper(2))\n'HELLO'\n>>> print(string.lower(2))\n'HELLO'\n>>> print(string.upper(2))\n'HELLO'\n\nYou're right. I have no idea why it works like that.\n\nIt works because it's using the lower() and upper() methods on the string class, which are applied to the reference of the string, not the string itself.\n\nI'm not sure that's correct.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    if string[0] == '_':\n       return string[1:]\n    else:\n       return string[0:]\n\nYou can just do\n>>> \"Hello\". flip_case()\n'hELLO'\n\nI don't know how to explain the difference between these two, but I think the former is more readable.\n\nThe latter is more readable, because it's more succinct.\n\nI think the former is more readable because it doesn't need to be explained.\n\nThe latter is more readable because it's more succinct.\n\nI think the former is more readable because it doesn't need to be explained.\n\nThe latter is more readable because it's more succinct.\n\nI think the former is more readable because it doesn't need to be explained.\n\nThe latter is more readable because it's more succinct.\n\nI think the former is more readable because it doesn't need to be explained.\n\nThe latter is more readable because it's more succinct.\n\nI think the former is more readable because it doesn't need to be explained.\n\nThe latter is more", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\n\nI don't understand why this is on the front page.\n\nIt's a cute example of a very useful idiom, and it's simple enough that it can be explained in a couple of sentences.\n\nIt's also a nice way to get a very fast O(1) implementation of a common operation.\n\nThat's a good point, I hadn't thought of that.\n\nI use this idiom a lot. It's a very nice way to get a quick and dirty \"solution\" to a problem.\n\nI'm not sure if I'm missing something, but this is the same as:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    return string.upper() + string.lower()\n    def flip_case_html(string: str) -> str:\n    \"\"\" For a given string, flip case in HTML.\n    >>> flip_case_html('Hello')\n    'HElLO'\n    \"\"\"\n    return string.lower() + string.upper()\nThis is not good code.\n\nYeah, but it's better than nothing.\n\nIt's not better than nothing. It's worse than nothing.\n\nI have to agree with you. This code is a prime example of how not to write python.\n\nI disagree.\nThis code is a prime example of how to write Python. It's concise, and it works.\nIt's not as concise as it could be, but it's not worse than nothing.\n\nIt's not concise. It's inelegant.\n\nThe problem is that the \"flip\" function is not a function.\nThe flip function is a function that takes two arguments, but the flip_case_html function takes only one argument, and the flip_case function is", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    def flip_lower(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_lower('Hello')\n    'HElLo'\n    \"\"\"\n    \"\"\"\n    def flip_upper(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_upper('Hello')\n    'HELLO'\n    \"\"\"\n    \"\"\"\n    def flip_case_reversed(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_reversed('Hello')\n    'HElLo'\n    \"\"\"\n    \"\"\"\n    def flip_lower_reversed(string: str) -> str:\n    \"\"\" For a", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThat's not a function, that's a statement.      def flip_case(string: str) -> str:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper()\n    def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'HELLO'\n    \"\"\"\n    return string.lower()\nI'm not sure if it's a good idea to return the result of a function called with the same arguments as the function itself.\n\nThere's a whole family of \"flip\" functions that do this.\n\nWell, at least one of the examples in the \"flip\" family is an exception.\n\nI think this is a great idea. I have found myself writing the same functions over and over again in a few different languages.\n\nIt's not a great idea, it's a common idea.\n\nYeah, but this is the first time I've seen it done in Python.\n\nI'm pretty sure this is one of the first things I ever wrote in Python, and I'm sure I'm not the only one.\n\nOh, I'm sure it's been done. But this", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.isalpha():\n       return string.lower()\n    else:\n       return string.upper()\n\nI had to read this a few times before I got it.\n\nI still don't get it.\n\nYou can't tell if the string is lowercase or uppercase. If it's lowercase, it's flipped to upper. If it's uppercase, it's flipped to lower.\n\nIt's flipped to lowercase if it's uppercase and flipped to uppercase if it's lowercase?\n\nYes, it's like a switch.\n\nIt's a very simple code to understand. I think this is a bad example to learn python.\n\nI don't see why people are downvoting you.\nI think this is a great example of how to use the built-in string functions, but I don't think it's a great example of how to write Python.\n\nIt is a great example of how to write Python. It is a good example of how to write a one-line program.\n\nI think the \"one-liner\" is a bit of a", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    return string.lower().upper()\nI'm not sure if this is a joke or not.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def f():\n    \"\"\" Flip the given string.\n    >>> f('hELLO')\n    'hello'\n    \"\"\"\n    return string.upper()\n   .replace('a', 'A')\n   .replace('e', 'E')\n   .replace('l', 'L')\n   .replace('o', 'O')\n   .replace('r', 'R')\n   .replace('s', 'S')\n   .replace('t', 'T')\n   .replace('w', 'W')\n   .replace('y', 'Y')\n   .replace('!', '?')\n   .replace('(', ')')\n   .replace('(?:;|&|),', '(')')\n   .replace('(?:[^&]|\\', ')'\n   .replace('(?:[^&]|\\s|\\[^&]|\\[^&]*|\\[^&]+|\\", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string[::-1] == 'H':\n        return string[::-1]\n    return string[::-1]\nI think you're looking for `reversed`\nThanks for the tip! I'm not sure if it's the same thing, though. It seems that `reversed` reverses the order of the letters, while `flip_case` just changes the case of each letter.\n`reversed` returns the string in reverse order.  It has nothing to do with case.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.startswith('H'):\n       return string.lower().upper()\n    else:\n       return string.upper().lower()\nI don't get it. Can someone explain this?\n\nIt's just a function that does what it says. If the string starts with \"H\", it returns the string with lowercase letters converted to uppercase. Otherwise, it returns the string with uppercase letters converted to lowercase.\n\nI see. Thanks!\n\nI'm a little confused about the use of the \"case\" operator in the example.\n\"Hello\" is a string, and so the case operator is used on it to determine if it's uppercase or lowercase.\nBut then, it's not used as part of the function definition, so the function doesn't care whether the string is uppercase or lowercase.\nSo why does the function use the case operator?\n\nIt's called a function-level case statement. It's a common idiom in many programming languages.\n\nI'm not familiar with it. Can you give an example of another language where it's used?", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nYou have a typo in the function definition.  It should be:       return string.lower()\nThanks for the catch, I've fixed it!</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI'm not sure why this is getting downvoted.  It's correct.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI see you use Python 3, which doesn't have the lower() builtin function.\nI was wondering if this is because you don't like it or if you just didn't know about it.\n\nNot OP, but I'm guessing it's the latter.\nI've been using Python for years, and I only discovered lower() a couple of months ago.\n\nI think I've used it once in the past five years.\n\nI use it all the time, it's great for stripping whitespace.\n\nHow is that different from strip()?\n\nLower() removes leading whitespace while strip() removes all whitespace.\n\nI'm not sure if this is a useful feature or not, but it's nice to see a Python library that doesn't rely on \"magic\" methods (i.e. the ones that are named after the function they override).\n\nIt's nice to see a Python library that doesn't rely on \"magic\" methods\n(i.e. the ones that are named after the function they override).\nI agree. I'm not a fan of magic methods.\n\nI think the magic methods are fine as long as", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string in ['a','b','c']:\n       return 'ABC'\n    elif string in ['A','B','C']:\n       return 'ABC'\n    elif string in ['a','b','c','d']:\n       return 'ABCD'\n    else:\n       return string\n\nIt's not a bad idea. But, it's not a good idea either.\n\nA better idea is to use a library that does it for you.\n\nPython's string library provides a method for doing this:\n\n>>> from string import lower\n>>> lower('Hello')\n'HELLO'\n>>> lower('Hello, world!')\n'HELLO, world!\\n'\n>>> lower('HELLO, world!')\n'HELLO, world!\\n'\n>>> lower('HELLO, world!\\n')\n'HELLO, world!\\n'\n>>> lower('HELLO, world!\\n')\n'HELLO, world!\\n'", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    return string.lower()\n   .replace('[^A-Za-z]','[A-Za-z]')\n   .replace('[^A-Za-z0-9]','[A-Za-z0-9]')\n   .replace('[^A-Za-z0-9_]','[A-Za-z0-9_]')\n   .replace('[^A-Za-z0-9_0-9]','[A-Za-z0-9_0-9]')\n   .replace('[^A-Za-z0-9_0-9_]','[A-Za-z0-9_0-9_]')\n   .replace('[^A-Za-z0-9_0-9_0-9]','[A-Za-z0-9_0-9_0-9]')\n   .replace('[^A-Za-z0-9_0", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nYou can also do this without using a function:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI don't think that's a good solution, because it's not clear to the reader that it's a function. I think you'd be better off with a one-liner.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\nI like this one. It is a good example of what the article is talking about.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is probably the worst solution I've seen in a while. It's far from idiomatic, it's not even clear how it works and it's not even correct.\nCan you explain what's wrong with it?\nIt's not idiomatic.       It's not clear how it works.       It's not correct.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI like this better:       def flip_case(string: str):\n         return string.lower().upper()\n\nI like it better too. But the post is about Pythonic ways of doing things.\n\nI like it better too. But the post is about Pythonic ways of doing things.\n\nI like it better too. But the post is about Pythonic ways of doing things.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper()\n\nIt's a cute trick, but it doesn't actually work. Try it with a string of all lowercase characters.\n\nYeah, I thought about that too. It's a cute hack, but I think it's still useful. I mean, it's not like you would ever use this in production code.\n\nI would. In Python, strings are immutable, so if you want to change the case of a string, you need to make a copy. It would be quite useful to have a way to change the case of a string in-place.\n\nI guess I've been working in Python too long. I had no idea that strings were immutable.\n\nYup, they are. There's no such thing as assignment in Python. If you want to change a variable, you have to create a new one with the new value and assign that.\n\nI think I'm going to start using this as a teaching tool.\n\nThis is a cool hack, but I'm not sure it's useful for anything but the most trivial cases.\n\nI agree. I guess you could use it to change the case of a string without having to create a copy. That could", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI think this is a bad idea. The problem is that the uppercase and lowercase characters are not identical. For example, the lowercase \"i\" looks like the uppercase \"I\", but the lowercase \"l\" looks like the uppercase \"1\". So, this will not work:\n>>> 'Hello'\n'HELLO'\n>>> 'HELLO'\nTruncating the string to a single character, however, will work:\n>>> 'Hello'\n'H'\n>>> 'HELLO'\nTruncating the string to a single character is a common idiom in Python.\n\nI think you're missing the point. The author is not saying that you should use the code like that, he is saying that the code is a good example of how to solve a problem in a simple way.\nI think it is a good example, because it shows the _problem_, and the solution, in a single line of code.\n\nI think you are missing the point. I'm not saying it is a bad example. I'm saying it is a bad idea.\n\nI think you are missing the point", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI would use `return string.upper().lower()` but that's just me.\nYou could even use `return string.upper().replace(\"[a-zA-Z]\", \"\")` for the same effect.\nThat's a good idea. I'll use that in the future.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper().lower().replace('a','A')\nThis is the correct answer.\nIt's not a code golf contest.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __repr__(self):\n    \"\"\" Print a string representation of the object.\n    >>> from typing import Repr\n    >>> repr(flip_case('Hello', 'U.S.'))\n    'HELLO U.S.'\n    \"\"\"\n    return repr(self.__class__.__name__)", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    case string.lower() in\n         'h' : return string.upper()\n         'e' : return string.lower()\n         'l' : return string.upper()\n         'l' : return string.lower()\n         'o' : return string.upper()\n         'o' : return string.lower()\n         'n' : return string.upper()\n         'n' : return string.lower()\n         'p' : return string.upper()\n         'p' : return string.lower()\n         'r' : return string.upper()\n         'r' : return string.lower()\n        's' : return string.upper()\n        's'", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    if string.isupper():\n        return string.upper()\n    else:\n        return string.lower()\n\nThe code is well written, but it's a horrible idea.\n\nIt's a horrible idea because it's an anti-pattern.\n\nThe \"isupper\" function is a horrible idea.\n\nThe isupper function is a horrible idea because it's an anti-pattern.\n\nIt's a horrible idea because it's a pointless function.\n\nThe isupper function is a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a horrible idea because it's a pointless function.\n\nIt's a", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() == '':\n       return string\n    else:\n       return string.upper()\nThis is a good example of a bad code example. It's a one-liner, but it doesn't show the purpose of the function. It's easy to write something like this, but it's not a good example of a function.\n\nI don't get it. What's the purpose of the function?\n\nThe purpose is to convert a string to upper case.\n\nNot sure if it's a good example, but I do like it for the simple elegance of the solution.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() == string.upper():\n       return string\n    else:\n       return string.upper()\n\nAnd now we're getting somewhere.\n\nI don't know what you're talking about, that's pretty much the best code ever.\n\nI'm not a python developer, but I've been following the discussion for a while now.\nI think the reason that the discussion has turned so negative is that there seems to be a real problem with the way python has evolved. The language has become so complicated that the simple stuff is now hard.\nI've been a python user for a long time, and I still enjoy using it for small scripts, but I've moved on to other languages for larger projects. I think a lot of other python users have done the same.\n\nI'm also not a Python developer, but I've been following this discussion for a while now. I think the reason that the discussion has turned so negative is that there seems to be a real problem with the way Python has evolved. The language has become so complicated that the simple stuff is now hard.\nI've been a Python user for a long time,", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nIf you want to do this in Python, just write a function that does the same thing.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nNot sure what you are trying to accomplish here.\n\nI think the OP is trying to show that the string.lower() method is a syntactic sugar for the string.upper() method.\n\nYes, I was.\n\nWhy?\n\nBecause it's an interesting example of how the python language works.\n\nI'm not sure that it is.\n\nIt's a simple example of how the Python language works.\n\nIt's not a good example, because it's not a good example.\n\nIt's a good example of how the Python language works.\n\nI don't think that it is.\n\nIt's a good example of how the Python language works.\n\nI'm not sure that it is.\n\nIt's a good example of how the Python language works.\n\nI'm not sure that it is.\n\nIt's a good example of how the Python language works.\n\nI'm not sure that it is.\n\nIt's a good example of how the Python language works.\n\nI'm not sure that it is.\n\nIt's a good example of how the Python language works.\n\nI'm not", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() == 'l':\n       return string.upper()\n    else:\n       return string.lower()\n    >>> flip_case('Hello')\n    'HELLO'\n    >>> flip_case('Hello')\n    'HELO'", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper()\nThis is not an O(1) operation. It's O(n).</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() == '':\n        return string\n    return string.upper()\nI'm not a Python programmer, but I like this one.\n\nThe problem is that it doesn't actually do what it says. It just does a case insensitive string compare.\n\nI wrote a similar function a while ago. It's more flexible and has a few other tricks.\n\nThis is a great example of how to write a clear, concise, and useful function.\n\nI use this a lot. I've found that it's really useful for writing unit tests.\n\nI think this is more useful than the original.\n\nI'm a fan of this one: \n\nThat's a lot more complicated than it needs to be.\n\nI've always liked this one:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for i in range(0, len(string)-1):\n        if string[i] == 'L':\n               return string[i]\n               else:\n                 return string[i]", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nI don't think it's a good idea to use `upper()` and `lower()` as they are not defined for all string types.\nI don't see any problem with it, it's just a simple function to flip the case of a string.\nIn python 2.x, `upper()` is not defined for strings.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\n\nThe first thing I thought when I read this was:\n\"Why is there no try/except? If this function throws an exception, the string will be silently corrupted.\"\nThen I realized that it's a Python function, and there's no way to throw an exception.\n\nYou can raise exceptions in Python, they're just not first-class objects.\n\nI think that's what he meant by \"not first-class objects\".\n\nI just realized something about the code:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nI've been using this for a while. It's not perfect but it's close enough.\n\nThis is an example of why I prefer to use lower() and upper() rather than string.lower() and string.upper().\n\nI'm not sure what the advantage of that is. Can you elaborate?\n\nI've always seen it as a good way to tell when you're using a built in function.\n\nI think you mean when you're using a built-in function, not a built-in function.\n\nI think he means that it's a good way to tell when you're using a built-in function, not that it's a good way to tell when you're using a built-in function.\n\nI don't understand why you would ever use this.\n\nWhen you want to do something like this:\n>>> flip_case('HELLO')\n'hELLO'\n\nI think you can do the same thing with string.lower() and string.upper()\n\nI think you can do the same thing with\n>>> flip_case('HELLO')\n'hELLO'", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if len(string) == 1:\n        return string\n    else:\n        return string.upper()\n        for c in string:\n           if c == 'a':\n               return string.lower()\n             else:\n               return string.upper()\n\nWhy not just use uppercase()?\n\n\"def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    if len(string) == 1:\n        return string\n    else:\n        return string.upper()\n        for c in string", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\n   .replace('_', 'a')\n   .replace('[^A-Za-z0-9]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')\n   .replace('[^A-Za-z]', '')", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __repr__(self):\n    \"\"\" Return a string representation of the object.\n    >>> s = flip_case('hello')\n    >>> print s\n    'hELLO'\n    \"\"\"\n    return ''.join(map(str.upper(), str.lower(), self.__class__.__name__))", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nThis is a classic example of why Python is not a great language for beginners.\n\nPython is a great language for beginners, and this is a great example of how to learn to read code. It's easy to understand, and the logic is clear.\n\nIt's also a great example of how Python is a great language for beginners.\n\nI'm a bit confused about the first line:\n>>> import string\nIs that a standard way to import modules in Python?\n\nYes. It's a standard way to import modules in any language that I'm aware of.\n\nI don't think it's standard in C, Java, or C#.\n\nI believe in C you can import a module by name.\n\nYes, but that's not importing.\nimport string\nimport string = string.__import__('string')\n\nThis is one of the reasons why I like Python so much. I love how simple and elegant the language is.\n\nIt's also a great example of why Python is a great language for beginners.\n\nPython is a great language for beginners, and this is a great example of how to learn to read", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def uppercase(string: str) -> str:\n    \"\"\" For a given string, uppercase characters to their upper case equivalent.\n    >>> uppercase('Hello')\n    'HELLO'\n    \"\"\"\n    def lowercase(string: str) -> str:\n    \"\"\" For a given string, lowercase characters to their lower case equivalent.\n    >>> lowercase('Hello')\n    'hello'\n    \"\"\"\n    return string.lower() if string.startswith('h') else string.upper()\n\nThat is a bad example. It is not clear at all what the function does.\n\nThat's a good example of the problem with Python's `lower`/`upper`/`str`/`unicode`/`unicode_literals`/`str.upper`/`str.lower`/`str.upper_case`/`str.lower_case`/`str.title`/`str.titlecase`/`str.titlecase_lower`/`str.titlecase_upper`/", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() in ['a', 'z']:\n       return string.upper()\n    else:\n       return string.lower()\n\nThe problem with this is that it will fail on any string that doesn't start with one of the strings 'a' or 'z'.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI think you mean      return string.upper().lower()\nOr      return string.capitalize()\nI think the point of the exercise is to do it without using any built-in functions.\nI don't think that was the point.  The point was to do it without using any built-in functions *that aren't already in the standard library*.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\n\nThis is a very bad way to do this.\n\nI don't know if you're kidding or not. It's a perfectly fine way to do it.\n\nIt's not. It's an extremely inefficient way to do it, and it will break if the string contains any unicode characters.\n\nI don't think the efficiency of the algorithm is the point.\n\nIt is in this case, because the original comment was about efficiency.\n\nAh, I didn't see that. Thanks for pointing it out.\n\nI am really happy with Python's __str__ method.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nIf I'm not mistaken, this is a horrible way to do it. I believe the standard is to use lower() and upper() to lower and upper case, respectively.\nI think you're right.  I was just trying to find a simple way to illustrate the point.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is a silly example, but this is a silly question.  There's no point in even posting it.  It's not going to be faster than any of the other solutions.  It's not going to be more readable than any of the other solutions.  It's not going to be more concise than any of the other solutions.  It's not going to be easier to understand than any of the other solutions.\nI agree, it's not going to be faster, but I think it's more readable than some of the other solutions. It's also not going to be more concise, but it is going to be easier to understand.\nHow is it easier to understand?  It doesn't explain anything, it just does something.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for i in range(len(string)):\n        if string[i] == 'a':\n            return string[i]\n        else:\n             return string[i]\n    return string\nThis is a nice solution. I'd like to add that the Python standard library has a function called \"capitalize\" that does exactly what you want: \n\nYou can also use the `title` function to change case, which is part of the standard library.\n\nYou can also use the \"capitalize\" function to change case, which is part of the standard library.\n\nI think the point of the post was that the OP didn't know about `capitalize`.\n\nThe Python standard library has a function called \"capitalize\" that does exactly what you want:\n\nThere is also the title function, which is also part of the standard library.\n\nyou can also use the \"capitalize\" function to change case, which is part of the standard library.\n\nYou can also use the \"title\"", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for c in string:\n        if c in ['a','c','e']:\n           c = c.upper()\n           else:\n            c = c.lower()\n    return c\nI don't think this is a good example.\n\nI think it is. It's an example of the only way to do it in Python.\n\nI think the point is that it's a terrible way to do it.\n\nI'm not sure that's true.\nI think it's a bad way to do it, but I'm not sure it's terrible.\n\nI think you could have a case for that.\n\nIt's a bit more complicated than that.\n\nThis is a good example of why I like python.\nThe fact that it's a single line is great.\n\nI think you mean this is a good example of why you like __repr__.\n\nNo, I really don't. I like the fact that it's a single line of code.\n\nThat's", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def lower(string: str) -> str:\n    \"\"\" For a given string, lowercase characters to lowercase.\n    >>> lower('Hello')\n    'Hello'\n    \"\"\"\n    def upper(string: str) -> str:\n    \"\"\" For a given string, uppercase characters to uppercase.\n    >>> upper('Hello')\n    'HELLO'\n    \"\"\"\n    return lower(string) + upper(string)\n\nThe only way this could possibly be better is if you did:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper().lower()\nThis is a bad way to write that function. It's not particularly clear what it does, and you're not doing any string manipulation.\nYou should write it like this:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\" If the string is already uppercase, then it is unchanged.\n    \"\"\"\n    if not string.upper():\n        return string\n    return string.upper().lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\n\nNote that if you have a case-insensitive language, this is a bad idea.\n\nJust to be clear, the example in the article is not the same as the one you posted.\n\nTrue, but it's easy to convert the example in the article to the one in my comment.\n\nIf you want to be able to switch between case sensitive and case insensitive languages, you need to write a function that takes a parameter.\n\nI've used the following before:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.startswith('H'):\n       return string.lower()\n    else:\n       return string.upper()\n\nThis function is implemented as a series of calls to a built-in function called str.lower() and str.upper().\n\nSee also\n List of string functions\n\nReferences</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower().upper()\nThis is a very bad way to do this.\n\nCan you expand on that?\n\nIf you need to change case, you should use a real function.\n\nI'm not sure I understand.\n\nHere's a nice explanation:\n\nThat's not a nice explanation. It's a rant.\n\nI'm not sure I understand.\n\nHere's a nice explanation:\n\nThat's not a nice explanation. It's a rant.\n\nI'm not sure I understand.\n\nHere's a nice explanation:\n\nThat's not a nice explanation. It's a rant.\n\nI'm not sure I understand.\n\nHere's a nice explanation:\n\nThat's not a nice explanation. It's a rant.\n\nI'm not sure I understand.\n\nHere's a nice explanation:\n\nThat's not a nice explanation. It's a rant.\n\nI'm not sure I understand.\n\nHere's a nice explanation:\n\nThat's not a nice explanation. It's a rant.\n\nI'm not sure I understand.\n\nHere's a nice explanation:\n\nThat", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string[0] == 'h':\n       return string[0]\n    elif string[0] == 'e':\n       return string[1]\n    else:\n       return string[0]\nThis is a great example of why you should not use raw strings as a return value.\nThe problem with this is that it is only valid for strings of length 1, as it assumes that there is only one character in the string.\n\nThis is a great example of why you should not use raw strings as a return value.\nThe problem with this is that it is only valid for strings of length 1, as it assumes that there is only one character in the string.\n\nYou could fix that easily enough by using len().", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    if string.startswith('h'):\n        return string.lower()\n    else:\n        return string.upper()\n\nI'm not a Python expert, but isn't that a little bit inefficient?\n\nI am a Python expert, and no, it's not.\n\nWell, you're not an expert in efficiency.\n\nIn this case it's not that big of a deal.\n\nI'm not a Python expert, but I'm a bit surprised that Python doesn't have a built-in function to do this.\n\nThere is a built-in function to do this:\n>>> lower = lambda s: s.lower()\n>>> upper = lambda s: s.upper()\n>>> lower(\"Hello\")\n'hELLO'\n>>> upper(\"Hello\")\n'HElLlO'\n\nThose are not built-in.\n\nWell, they are in Python 3.\n\nI'm not a Python expert, but I'm a bit surprised that Python 3 doesn't have a built-in function to do this.\n\nThere is a built-", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nI think it's missing a call to str.lower()\nYes, you're right. Fixed.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower().upper()\nThis is a good one, but you can also use Python's built-in `upper` and `lower` functions.      uppercase_or_lower(s)\nI was actually looking for a way to do this in Ruby, but I think I'll just use Python instead. Thanks!\nYou can do it in Ruby too.      str.upcase!  I don't know about the other direction, but you can do it the hard way by using string.downcase and string.upcase.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper().lower().replace(' ','_')\nI don't know why I find this so funny.   I'm going to start using this in production code.\nIt's useful when you want to show that you're a beginner without saying so directly.\nI'm not a beginner though. I'm an experienced programmer who's been doing this for almost 20 years. I just find it funny.\nI'm not a beginner either. I've been doing this for nearly twenty years. I find it funny.\nI'm not a beginner either. I've been doing this for nearly twenty years. I find it funny.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower()!= string.upper():\n       return string.upper()\n    else:\n       return string.lower()\n    def print_string(string: str) -> str:\n    \"\"\" Prints a string in a given case.\n    >>> print_string('Hello')\n    'hELLO'\n    \"\"\"\n    return flip_case(string)\n\nA method in Python 3 would look like this:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nJust FYI, it's actually `string.lower() + string.upper()`.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower().upper()\nThe code is not very elegant, but it gets the job done.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper().lower()\nThat's not a bad idea for a function, but I'm not sure it belongs in the standard library.\nYeah, I know it's not good practice to use it in production code. I was just trying to show that the language has a case-insensitive compare function.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nThis is the most useless code snippet I've seen in a long time.\n\nI think the point of it is to show that the string.upper() + string.lower() is not the same as string.toUpperCase() + string.toLowerCase().\n\nI agree. If you do this:\n>>> 'Hello'", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() == 'l':\n       return string.upper()\n    elif string.upper() == 'u':\n       return string.lower()\n    else:\n       return string\nThis is not going to work for strings that are not in the ASCII range.\n\nThe whole point of the article is that this is not a good approach.\n\nI would say that the whole point of the article is that the author has no clue about string handling and doesn't understand that there is no one-size-fits-all solution.\n\nI think you are right, but I would also say that the author is not a string handling expert, and has a different point of view.\n\nI guess I'm not a string handling expert either, but I would have thought that one of the first things you learn about strings is that there is no one-size-fits-all solution.\n\nI guess I'm not a string handling expert either, but I would have thought that one of the first things you learn about strings is that there is no one-size-fits-all solution.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower().upper()\nThis is wrong.  The string is already lowercase.  You are doing the same thing twice.  You should use string.lower().upper()\nYou're right.  I wrote that right after waking up, I should have checked it before posting.\nI have a feeling you wrote that code right before waking up, and that you're still asleep.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is a bit silly. Why not just use the built-in string methods?\n\nBecause the built-in string methods don't work on unicode strings.\n\nDoesn't the article specifically call out that this is for Python 2.7 and 3.4?\n\nYes. It does.\n\nThe author could have used the built-in `unicode_literals` module (http://docs.python.org/2/library/unicode.html#unicode_literals) instead of the `str` module.\n\nThis is a neat trick, but I'm not sure I'd call it \"clever\".\n\nI agree. I think the author was just being a bit modest.\n\nI disagree. This is a clever trick.\n\nI disagree. This is a neat trick.\n\nI agree. This is a clever trick.\n\nI disagree. This is a neat trick.\n\nI disagree. This is a clever trick.\n\nI disagree. This is a neat trick.\n\nI agree. This is a clever trick.\n\nI disagree. This is a neat trick.\n\nI disagree", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nI've always been a fan of `to_upper` and `to_lower`.\nI'm not sure why you were downvoted, but I agree with you. `to_lower` and `to_upper` are a lot more readable than a function that does the same thing.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nI think you want `string.titlecase()` instead.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __repr__(self):\n    \"\"\" Print a string with its characters reversed.\n    >>> print(flip_case('Hello'))\n    'HELLO'\n    \"\"\"\n    return str(reversed(self))\nI like how the author uses a recursive solution for this problem.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for char in string:\n         if char in 'a'..'z':\n             return char.upper()\n         else:\n             return char.lower()\n\nI'm not sure what you're trying to accomplish with this, but it's not clear to me that this code does what you think it does.\nThe first time through, it will flip 'a' to 'A', and 'z' to 'Z'. The second time through, it will flip 'A' to 'a', and 'Z' to 'Z'.\n\nYes, that's what I want. I want it to go through each character in the string, and flip them. The second time through, it will flip them again.\n\nBut it's not clear that the second pass will flip them again. It's not clear that it will even hit the same characters.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    # The characters are not the same as the letters in the string.\n    chars = string.upper()\n    return string.lower().replace(chars, '_')\nI'm not sure why this is being upvoted. This code is horrible. It's not just that it's a one-liner, it's that it's doing the wrong thing.\nThe proper way to do this is to use the Unicode property called 'casefold':\n>>> from unicodedata import casefold\n>>> casefold('Hello')\n'HELLO'\n\nThe original code is much clearer and more concise.\n\nIt's not clear at all. The code does the wrong thing. It doesn't even handle punctuation. It also doesn't handle capitalization of words in the middle of the string.\n\nIt's clear to me. It does the right thing. I don't care about punctuation or capitalization.\n\nIt doesn't do the right thing. It does the wrong thing.\n\nI think this is an example of the \"the right tool for the job\" argument.\nIf you want to change the case of a string, then you should use the built", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\n\nYou can also do:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI don't see why the author used a dictionary here.\n\nThe dictionary is just to store the function result.\n\nI'm not sure that the dictionary is necessary.\n\nIt's not, but it makes it easier to use.\n\nI think the purpose of the dictionary is to store the result of the function.\n\nDictionaries are a great way to store results of functions.\n\nI agree.\n\nIn Python, this is a built in function:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if len(string) == 1:\n       return string\n    else:\n       return string.upper()\n    # Example usage:\n    for x in flip_case('hELLO world!'):\n       print x\n\nThis is a terrible function. You should use a real programming language, where you can use actual methods to do things like this.\n\nI don't know why people are downvoting you. This is a perfectly reasonable response.\n\nI don't know why you were downvoted. I agree with you.\n\nI don't know why you were downvoted. I agree with you.\n\nI don't know why you were downvoted. I agree with you.\n\nI don't know why you were downvoted. I agree with you.\n\nI don't know why you were downvoted. I agree with you.\n\nI don't know why you were downvoted. I agree with you.\n\nI don't know why you were downvoted. I agree with you.\n\nI don't know why", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper(). replace(re.lower, '_')\nIn Python 3.3, this is actually the same as the original:      return string.upper().replace('_','_')</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'HELLO'\n    \"\"\"\n    return string.upper() + string.lower()\nThis is not a criticism, but I find it funny how Python's \"flip_case\" function is almost exactly the same as the \"flip\" function in C#.\n\nThat's a coincidence. I wrote it first in C#, then ported it to Python.\n\nNice. I'm a C# developer myself, and I'm always interested in seeing how other languages handle the same problem.\n\nIt's not that hard. The only tricky part is that you have to keep track of the case you are in, so you don't end up in an infinite loop.\n\nThis is a good example of how Python's lambda syntax makes it easy to write code that is difficult to read.\n\nI disagree. I think this is a good example of how Python's lambda syntax makes it easy to", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nWhat's the point of this?\n\nI'm not sure I understand your question. The point of this is to demonstrate how to write a function that converts a string to all lowercase letters and then back to all uppercase letters.\n\nI was curious why someone would want to do that.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string[0] == 'H':\n       return string.upper()\n    else:\n       return string.lower()\n\nThe code for this is pretty trivial.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI would have thought that the better solution would be:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nIf you want to see how to write a function that is actually useful, try looking at the source code for the built-in itertools.product.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __repr__(self):\n       return 'flip_case(%r)' % self.__class__.__name__", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __repr__(self):\n        return 'flip_case(%r)' % (self.__class__.__name__)\n    def __str__(self):\n        return 'flip_case(%r)' % (self.__class__.__name__)\n\nThe function takes two arguments, the string to be processed and a function that will be called when the string is flipped.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.startswith('H'):\n        return string.upper()\n    else:\n        return string.lower()\nThis is not a good solution, because it will break if you add a character to the string (e.g. \"hELLO\").</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() in ['a', 'c', 'e']:\n        return string.upper()\n    elif string.upper() in ['A', 'C', 'E']:\n        return string.lower()\n    else:\n        raise ValueError(\"Unknown character '%s'\" % string)\n\nThis is a great example of why you shouldn't use exceptions for error handling.\n\nOr maybe it's a great example of why you shouldn't use exceptions for error handling when you have a better alternative, such as the Pythonic way of returning a tuple of the error message and the exception.\n\nI'd be interested to see a list of examples where a custom exception is the best choice. I'm not a Python expert, but I haven't seen a case where I couldn't use a standard exception.\n\nI don't know about best, but here's one:\n>>> from time import sleep\n>>> try:\n    import random\n    sleep(1)\n    print random.randint(0, 1)", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if len(string) == 0:\n        return ''.join(map(str.lower, string))\n    else:\n        return string.upper.lower()\n\nThis is a great example of how to use a language feature to make a one-liner that would be more verbose in another language.\n\nThe Python equivalent would be:\n\ns = 'Hello'\nfor char in s:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper()\n   .replace('[^A-Za-z]','[A-Za-z]')\n   .replace('[^A-Za-z0-9]','[A-Za-z0-9]')\n   .replace('[^A-Za-z0-9_]','[A-Za-z0-9_]')\n   .replace('[^A-Za-z0-9_.]+','[A-Za-z0-9_.]+')\n   .replace('[^A-Za-z0-9_.]+','[A-Za-z0-9_.]+')\n   .replace('[^A-Za-z0-9_.]+','[A-Za-z0-9_.]+')\n   .replace('[^A-Za-z0-9_.]+','[A-Za-z0-9_.]+')\n   .replace('[^A-", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThat's a really bad solution.  The proper solution is to use the str.lower() method and then call the str.capitalize() method.\nI'm not sure that's better.  Why do you think it's better?\nBecause capitalization is a property of the character, not the string.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nYou should probably use string.capitalize() instead.\nThanks, I've never heard of that one. I'll try it out.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\nIt's not that the function is terrible, but it is pretty terrible.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if not string.lower():\n       return string.upper()\n    elif string.upper():\n       return string.lower()\n    else:\n       return string\n\nThis is really bad.\nIf you want to do this:\n\"Hello\" -> \"HElLo\"\nThen you want to use:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nHow is this different from:       string.capitalize()?\nOr the more explicit version:       string.upper().toUpperCase()\nor the even more explicit version:       string.upper().toUpperCase()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower()\n   .map(str.upper)\n   .join(' ')", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    for character in string.lower():\n        if character == 'a':\n           return character.upper()\n        else:\n           return character.lower()\n    return string\nThis is probably the best answer.  I would add, however, that it's probably worth checking to see if the string contains any non-alphabetic characters first, as they could throw the code off.  A simple regex would do the trick.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string in u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n       return string\n    else:\n       return string.lower()\nI'm sorry, but that's not even remotely close to being the same thing.\n\nYeah, the OP is talking about a single string and the flip_case method is taking a string and a list of strings.\n\nI think it's a matter of perspective.\n\nIt is.\n\nI was expecting a discussion about the pros and cons of the different ways to do string formatting, and was disappointed to find that it was just a \"I prefer X\" post.\n\nI think the OP is just saying that the syntax for string formatting in Python is really ugly.\n\nI don't think that's the case. I think the OP is saying that the syntax for string formatting in Python is ugly because it's a one-liner.\n\nThe syntax is ugly because it is a one-liner.\n\nIf it was a one liner, you wouldn't be able to write it on a single", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    return string.lower() + string.upper()\n\nThis is the only way to do it in Python 2. In Python 3 you can use the str.upper() and str.lower() methods.\n\nAh, good to know.\n\nThis is just a little bit of trivia, but if you are doing this on a regular basis, you should probably be using a library like BeautifulSoup.\n\nI've been using Python for about a year now and I've never heard of BeautifulSoup. Thanks for the tip.\n\nI'd recommend going for lxml instead of BeautifulSoup, unless you are using Python 2.\n\nI'd recommend lxml.etree instead of lxml, unless you are using Python 3.\n\nI'd recommend lxml.html.etree instead of lxml.etree, unless you are using Python 2.\n\nI'd recommend lxml.html.parser instead of lxml.html.etree, unless you are using Python 2.\n\nI'd recommend lxml.html.sax instead of lxml.html.parser, unless you are using Python 2.\n\nI'd recommend lxml.html", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\n\nI can't imagine a situation where I would ever write that.\n\nIt's a simple, elegant solution to a common problem.\n\nAnd the most likely solution to a problem that doesn't exist.\n\nI've actually found myself in a situation where I had to do this. It's not the best solution, but it's simple.\n\nThere's a similar idiom in C++, but it uses a macro.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if len(string) > 1:\n        return string[1:]\n    elif len(string) == 1:\n        return string[0]\n    else:\n        raise ValueError('Invalid string')", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper().lower()\nI like it!  You're not the first person to suggest something like this, but I'm not sure how to do it without messing up the string.  The problem is that this would break the string if it contained a single character.  Maybe I can do something like this:       return string.lower().upper().lower().join(' ')\nYou can do it without messing up the string by creating a new string from the old one, and then just changing the characters.      def flip_case(string: str):           return string.replace('[A-Z]','[A-Z]').replace('[A-Z]','[A-Z]')\nThat's a good solution!  I think that I'll use that.  Thanks!</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nThere's no need for the upper() call, since the string is already a string.\n\nYes, I noticed that after I posted it, but I was too lazy to fix it.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI've always found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good way to find a good way to convert a string to a different case.\n\nI've found this to be a very good", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def flip_case(s: str):\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    s = s.upper()\n    return s.lower()\nI'm not sure why this was downvoted.  It's a perfectly valid and (I would argue) more elegant solution.\n\nIt's not more elegant, it's exactly the same. The only difference is that it uses a dictionary.\n\nI'm not sure I understand the difference between the two.\n\nIf you were to use the dictionary solution, you would have to keep the dictionary in memory to use it later.\nIf you were to use the built-in solution, you would have to keep the string in memory to use it later.\n\nI think he means that the dictionary solution is more elegant because it is a single, simple function, whereas the built-in solution is a function call and a string assignment.\n\nIt's also more portable.\n\nI can't believe nobody has mentioned it,", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    if string.lower() in [a-zA-Z]:\n        return string.upper()\n    elif string.upper() in [a-zA-Z]:\n        return string.lower()\n\nI'd make it a bit more robust, but this is a nice start.\n\nI'd be interested to see how you'd make it more robust.\n\nI'm not sure that I'd bother. I'd just do something like", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __init__(self, string: str):\n    \"\"\" Initialize the function with a string.\n    >>> flip_case('Hello')\n    >>> flip_case('Hello')\n    \"\"\"\n    if string.startswith('H'):\n       self.upper = self.lower\n    else:\n       self.lower = self.upper\n    return self.upper\n\nSo, this is a function that takes a string and returns another string.\n\nThe first test case is to make sure that it doesn't have any special cases.\n\n>>> flip_case('Hello')\n'hELLO'\n\nThe second test case is to make sure that it works for all strings.\n\n>>> flip_case('Hello')\n'hELLO'\n>>> flip_case('HELLO')\n'HELLO'\n>>> flip_case('HELO')\n'HELO'\n>>> flip_case('HELLO')\n'HELLO'\n>>> flip_case('HELO')\n'HEL", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper().lower()\nI'd do it this way:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def __repr__(self):\n    \"\"\"\n    Return a string representation of this function.\n    >>> __repr__(flip_case)\n    'flip_case'\n    \"\"\"\n    return self.__class__.__name__\n>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI don't know why, but this made me laugh a lot more than it should have.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    \"\"\"\n    return string.upper().lower()\nI'm not sure why I'm getting downvoted, the code is on github, you can run it and see that it works.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nI was expecting this to return the string in lowercase. I'm so used to it being the default for Python.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is an example of a bad solution.  It's much slower than the solution in the article.  You should use the string.to_upper function, which is much faster.\n\nThanks for the feedback. I'll update the post.\n\nThis is a pretty good solution, but I think the code would be more readable if you used a lambda function instead of a generator:", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nNo, it's      return string.upper().lower()\nI think that's a more concise description of what it does.\nIt's more concise, but it's not correct.", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower().upper()\nThis is not a very good solution.  It's slow (O(n)) and you can't use it on a string that contains the same character in both cases (e.g. \"HELLO\").  A better solution is to use the builtin string.lower() and string.upper() functions.</s>", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.upper() + string.lower()\nThis doesn't work for all strings. For example, it doesn't work for 'abcdefghijklmnopqrstuvwxyz' or 'abcd'.\n\nThe author writes:\n>>> import string\n>>> print string.upper() + string.lower()\n'abcd'\n>>>\n\nI don't see how this is a problem.\n\nIt's a problem if you want to reverse the order of the letters, such as to make a list of words in alphabetical order.\n\nThe author's answer to that is to use sort:\n>>> import string\n>>> print string.upper() + string.lower()\n'abcd'\n>>> for word in string.words():\n    print word\n>>> print sorted(string.words(), key=lambda word: word.upper() + word.lower())\n'abcd'\n>>>\n\nThe author's answer to that is to use sort:\n>>> import string\n>>> print string.upper() + string.lower()\n'abcd'\n>>> for word in string.words():\n    print word\n>>> print sorted(", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    def lower(string: str) -> str:\n    \"\"\" Flip lowercase characters to uppercase.\n    >>> lower('Hello')\n    'HELLO'\n    \"\"\"\n    def upperc(string: str) -> str:\n    \"\"\" Flip uppercase characters to lowercase.\n    >>> upperc('Hello')\n    'HELLO'\n    \"\"\"\n    return string.lower() + string.upperc()\n\nI'm not sure if this is a bug or not, but the uppercase function is not equivalent to the lower function.\n\nYou're right, it's not. The lower function actually does the same thing as the lowercase function.\n\nI think you're right. I didn't think about the fact that lowercase also converts to lowercase.\n\nI'm not sure if this is a bug or not, but the uppercase function is not equivalent to the lower function.\n\nYou're right, it's not. The lower function actually does the same thing as the lowercase function.\n\nI think you're right. I", "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\" \"\"\"\n    return string.lower() + string.upper()\nThis doesn't work in Python 2.\n\nThis is a common misconception.\n>>> 'hello'.lower()\n'HELLO'\n>>> 'hello'.upper()\n'HELLO'\n\nI don't think that's a misconception, I think that's the point of the original comment.\n\nNo, the point of the original comment was that the code doesn't work in Python 2.\n\nI was responding to this:\n_This doesn't work in Python 2._\nI was pointing out that it does work in Python 2.\n\nI find it quite interesting that this is what Python 3 looks like. I've been hearing a lot about Python 3 lately. I'm a Python 2 user and I've been thinking about switching to Python 3, but I have to admit that this looks pretty bad.\n\nI'm surprised you find it so bad. Could you explain what you find bad about it?\n\nI'm just not used to it. I've been using Python 2 for a long time and I'm very comfortable with it. I'm not saying that Python 3 is bad, I'm just saying that this is not what I expected"]]