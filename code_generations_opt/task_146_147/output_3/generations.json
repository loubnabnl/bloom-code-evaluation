[["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for i in nums:\n       if i % 10 == 0:\n           if i[0] % 2 == 0:\n                 return i[0], i[1]  # add them up\n            else:\n               return i[0], i[1]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n[0] >= 10:\n        return len(n)\n    elif n[0] >= 10 and n[1] == 1:\n        return len(n[0])\n    elif n[0] >= 10 and n[1] == 3:\n        return len(n[0]) - 1\n    elif n[0] >= 10 and n[1] == 5:\n        return len(n[0]) - 2\n    elif n[0] >= 10 and n[1] == 7:\n        return len(n[0]) - 3\n    elif n[0] >= 10 and n[1] == 9:\n        return len(n[0]) - 4\n    return 0\nI don't think this is the most elegant way, but it will do the job.\n\nI don't understand the need for such an elaborate solution, unless I'm missing something. Just create a", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return nums.filter(lambda num: nnum % 10 > 0, lambda num:\n              num[0]%2==0, lambda num:\n               num[-1]%2==0)\n\nI think there's a better way of doing this with nested for loops.\n\nWhat would that be? I'm interested.\n\nThe inner for loop would have the condition (num % 10 > 0) and the outer for loop would have the condition (num[0] % 2 == 0)\n\nOkay, but why not just do that in the original function? Is it because of the nesting of the for loops?\n\nYeah, if you do nested for loops you don't have to deal with any wrapping of the inner loops.\n\nAlso, if you do it this way, you can just drop the outer for loop and it'll still work.\n\nYou can drop the inner for loop too.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def countInArray(nums):\n    return len(nums) > 10 and sum(nums[i:i+10]) % 2 == 1", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def __call__(self, nums):\n    for num in nums:\n        if num[0] == 0:\n            self.output(num, 1)\n            if num[1] == 0:\n              self.output(num, 2)\n             if num[2] == 0:\n               self.output(num, 3)\n             if num[3] == 0:\n               self.output(num, 4)\n    return num\n\nYou could also use:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return len(nums) > 10\n    and nums[0] % 10 == 0\n    and nums[-1] % 10 == 0\n    and nums[0] % 10 == 1\n    and nums[-1] % 10 == 1\n\nI don't understand how this works.", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [3, 4, 7, 9, 10, 13, 14, 15]\n    return nums.index(range(10)) == 0\n\nI was hoping for something more like this:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    numbers = [15, -73, 14, -15]\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n        else:\n            return num % 2 == 1 and num % 10 == 1\n\nI wish I'd have seen that one coming, but it took me a few seconds, so I guess it was somewhat subtle.\n\nI don't get it. Could you explain?\n\nThe trick is to realize that the numbers in the array are already sorted by their numerical value, and so the _nums_ parameter is the index into the array that contains the number that you're looking for.\nSo, if we have the numbers [0, 1, 3, 5, 7, 9], the array index for each of these numbers is 0, 1, 3, 5, 7, 9.\nSo, to find the numbers greater than 10, you just need to find the numbers whose index is greater than 10, and then just grab the index and last digit, and get the index of", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = sorted(nums)\n    for i in range(num):\n       if i >= 10:\n          if i[0] == 0 and i[-1] == 0:\n             nums[i+1] = nums[i]\n            else:\n             nums[i+1] = nums[i]\n    return nums", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n         nums = range(nums)\n         return nums.filter(None, lambda x: x > 10) and nums.filter(None, lambda x:\n              x % 2 == 0 and x[0] == 1)\n             and nums.filter(None, lambda x: x % 3 == 0)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return [x for x in numbers if x % 2] + [x for x in numbers if x % 10] +\n    [x for x in numbers if x % 2 and x % 10]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return specialFilter(nums[0], nums[1:])", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) > 2:\n       return sum(nums[0:2]) > 10\n    return [nums[0] if nums[0] % 10 == 0 else nums[0] % 10 for nums in urnum]\n\nIs it a joke?\n\nYes.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums == [] or nums[0] <= 10 or nums[-1] >= 10:\n    return 0\n    numbers = filter(isodd, numbers, 10)\n    for num in numbers:\n        if num[0] > 0 and num[-1] >= 0:\n            return num\n\nYay, I'm glad to see this here! I made an entry for the PHP Advent of Code, which is a bit simpler:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [n for n in range(1,100) if n % 10 == 0]\n    nums_out = []\n    for n in nums:\n       if n % 10 == 0:\n          nums_out.append(n)\n       nums_out = int(nums_out)\n    return nums_out", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def find:\n    \"\"\"Return the number of elements in the array that are greater than \n    10 and both first and last digits of a number are odd (1, 3, 5, 7, \n    9).\n    >>> find([15, -73, 14, -15]) 1\n    >>> find([33, -2, -3, 45, 21, 109]) 2\n    \"\"\"\n    nums = array(nums)\n    for num in nums:\n        if num >= 10:\n           if num[0] == 0 and num[1] == 0:\n                return num\n          return -1\n    return -1\n\nYou have to use the readability library for this to work.\n\nThis is why we need comments.\n\nOr something like:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums[0] > 10:\n       if nums[0]!= 10:\n          return 0\n       else:\n          return nums[0]\n    if nums[1] % 2 == 0 and nums[2] % 2 == 0:\n       if nums[1] % 2 == 0:\n          return 0\n       else:\n          return nums[1]\n    if nums[1]!= 0:\n       if nums[1]!= 1:\n          return 0\n       else:\n          return nums[1]\n    if nums[2] % 2 == 0:\n       if nums[2] % 2 == 0:\n          return", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    # Write a function to handle the input\n    return function(inputs, sum) {\n       if (sum) {\n           return sum + inputs.filter(nums, function(num) {\n              return num % 10 == 0\n              and num % 2 == 0\n              and num % 2 == 0\n           });\n       }\n    }\n\nIn Python I find it clearer to use:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for num in nums:\n        if ((nums[num] % 10) == 0) and (nums[num] % 100 == 0 and (nums[num] % 50) == 0):\n             return num\n\nI wish I could upvote this more than once. :)\n\nThis is a good problem, but I don't understand the \"write a function\" part. How many times have I seen someone post a function without providing it's definition!\n\nI was expecting to see a python version of it in the article...\n\ni expected a numpy solution.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    return numpy.where(nums[0], nums[1], nums[-1] > 10, nums[0] &\n    nums[-1]!= 0, nums[0] & nums[-1]!= 0)\n\nSee also:\n\nnumpy.where\nnumpy.in\n\nReferences\n\nnumpy.where:\nhttp://numpy.scipy.org/doc/numpy/reference/where.html\n\nnumpy.in:\nhttp://numpy.scipy.org/doc/numpy/reference/in.html</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    result = []\n    for i in range(len(nums)):\n        if nums[i] >= 10 and nums[i] % 2 == 0:\n            result.append(nums[i])\n    return result\n\nimport operator\nnums = [0, -5, -8, 12, -4, 2, -1]\nspecialFilter(nums) == [2, 4, 6, 8, 10, -2]\n\nHint: the operator module has a lot of operators that are a lot more useful than the basic arithmetic ones.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    nums = [1, 3, 5, 7, 9]\n\n    specialFilter = lambda n:\n        if n >= 10 and n[1] % 2 == 0 and n[-1] % 2 == 0:\n            return n\n    else:\n           return -n\n\n    result = specialFilter(nums)\n\nPython looks so much cleaner than PHP.\n\nThe first example is", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    n = int(input('''nums'''))\n    nums = n[::-1]\n    return sum(nums >= 10) \\\n    and (nums[0] % 2 == 0 \\\n    and nums[1] % 2 == 1)\n\nfilter = lambda x: x > 10 & x % 2 == 1</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for num in nums:\n        if num == 1:\n           return 1\n         if num == 3:\n            return 2\n         if num == 5:\n            return 3\n         if num == 7:\n            return 4\n         if num == 9:\n            return 5\n    return nums", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    # return the number of elements in the array that are greater than 10\n    # and both first and last digits of a number are odd\n    return (num2num(i) for i in range(nums.shape[0]) and i2 % 2 == 0)\n\nThe only thing that bothers me about this code is the use of nums.shape[0]\nfor the condition on i2 % 2 == 0.\nWould it not make more sense to write:\nreturn (num2num(i) for i in range(nums.shape[0]) and i2 % 2 == i)\nso that you have the condition on the index of i rather than the shape of nums?\n\nYes, that's what I meant to write. I was hoping someone would catch it, because I'm still a little hazy on the differences between shape and index in Python.\n\nI think you're mixing up the concepts of shape, index, and length.\nnums.shape is a list of tuples, i.e. `(n1, n2)`, where the first number is the number of elements in the first dimension of the array", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def specialFilter_nums(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    for num in nums:\n        if num%10 == 0:\n            return num%10 + 1\n        elif num%5 == 0:\n            return num%5 + 1\n        else:\n            return -num\n        num = num - 1\n    return num", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    return max(0, nums[0][1]) + min(0, nums[0][0])\n\n    print(specialFilter([15, -73, 14, -15]) + specialFilter([33, -2, -3, 45, 21, 109]) )", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return array(len(nums) for num in nums)\n\nI'm not sure what's going on with this specialFilter() function, but it", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return lambda nums:\n       nums[0] > 10\n       nums[1] % 10 == 0\n       nums[2] % 10 == 0\n       nums[3] % 10 == 0\n       nums[4] % 10 == 0\n       nums[5] % 10 == 0\n\nI agree with your approach. The n+k questions are really boring and I hate those.\n\nThe question is worded poorly (at least to me, anyway). I can see how you might be confused by it if you've never worked with special filters before, but if you read the function definition above it should be clear that the answer is 1.\n\nI did, but I thought I'd just make my own to see what I could do.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return [num if num[0] > 10 else num[0]*10 for num in nums]\n\nnums = [10, -8, -4, 4, -7, 20, -5, -1, 13, -6, -9, -16, -2, -1, -5, -7, -16, -5, -9, -3, -1, -4, -3, -5, -1, -6, -2, -2, -1, -1, -1, -2, -3, -4, -3, -5, -7, -9, -16, -4, -5, -4, -1, -9, -6, -9, -1, -7, -4, -10, -6, -4, -1, -1, -2, -3, -1, -1, -3, -3, -6, -7, -4, -5, -2, -8, -3, -3, -1, -1, -2, -5, -3, -2, -2, -1", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    # Assume that number is an array with N elements.\n    # Nums is an array with numbers in it.\n    # Number is empty.\n    # If there are more elements in nums than we can hold in number, then\n    # we will have to use loop to generate a list of numbers.\n    for i in range(nums[0] + 1):\n        nums[i] = i\n    for i in range(nums[1]):\n        nums[i] = i\n    for i in range(nums[2]):\n        nums[i] = i\n    nums[0] = 0\n    nums[1] = 0\n    nums[2] = 0\n    nums[3] = 0\n    nums[4] = 0\n    nums[5] = 0\n    nums[6] = 0\n    nums[7", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = []\n    for n in nums:\n        if n[0] > 10 and n[-1] % 2 == 0:\n           nums.append(n)\n    return nums", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return (nums[0] > 10) or (nums[0] % 2 == 0) or (nums[-1] % 2 == 0)\n\nOk, so I think I understand this, but I'm also a bit confused.\nWhat's the advantage of using Python over, say, C?\n\nUsing Python, for example, is much less of a headache for me than\nlearning how to use Python, for example.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return (len(nums) > 10) & (nums[0] % 2 == 0 & (nums[-1] % 2 == 0))\n\n\"nums\" is an array of integers. The function \"specialFilter\" is supposed to\nreturn the number of elements in the array that are greater than 10, and\nthe first and last digits of the number are odd.\n\nUsing \"specialFilter\":\n\n>>> specialFilter([15, -73, 14, -15])\n1\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n2\n\nThe expected output is 1 for the first example and 2 for the second\nexample.\n\nThe special filter function is defined as:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return lambda x: x % 2 == 0", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def make_specials(x):\n    if x[1] < 10 and x[0] % 2 == 0:\n       return [x[0], x[1]]\n    else:\n       return [x[0], x[1]]\n    nums = [1, -4, 3, 5]\n    return make_specials(nums)\n\nMost languages have stdlib functions that do this in one line. Python:\n>>> special_filter([1, 2, 3, 4, 5], 3, 'odd')\n[1, 2, 3]\n>>> special_filter([1, 2, 3, 4, 5], 3, 'odd')[1, 2, 3]\n>>> special_filter([1, 2, 3, 4, 5], 3, 'odd')[1]\n[1]\n>>> special_filter([1, 2, 3, 4, 5], 3, 'odd')[1]\n[1, 2, 3]\n\nThis isn't a bad solution, but I don't think it's better than the", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n > 0:\n        if n % 2 == 0:\n            return n\n    else:\n         return n if n % 2 == 1 else 0\n\nThere are more elegant ways to solve this problem. See\nfor an example in python.\n\nDo you think it would be worth adding to the article? I don't like having just one example of each solution.\n\nThis is a cool idea, and I really like the way you explain each of the solutions in detail. I look forward to seeing more of these.\nI would suggest adding a few more examples for each solution, though. Maybe a few where the solution has to run in constant space, or in constant time.\n\nYes, I'm planning on doing this. I don't like having just one solution for each problem, but I'm currently limited by my own imagination. I'll try to get to as many as I can.\n\nIs the solution in Python 3.0? (I am asking because the article doesn't mention it).</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    out = [None, None, None, None, None]\n    for num in nums:\n        out.append(num if n.digit == 1 else None)\n    return out.size()\n\nI do not understand the significance of this problem.\n\nCan you solve it?\n\nThere's an assumption here that I don't understand.\n\nThe assumption is that you know what an array is and how to use it to iterate over the input.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    print (\"Input: \" + str(nums))\n    print (\" Output: \" + str(specialFilter(nums)))\n\nOutput:\nInput: [-6, 27, -1, -42, -15, 2, -5, -17, 4, 7, 8, -6, -21] Output: 1</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for x in nums:\n        if x[0] + x[1] + x[3] + x[5] + x[7] + x[9] <= 10 and x[0] % 2 == 0:\n            return x\n\nAnd then run the following in the REPL:\n>>> import math\n>>> math.specialFilter([15, -73, 14, -15]) => 1\n>>> math.specialFilter([33, -2, -3, 45, 21, 109]) => 2\n>>> math.specialFilter([69, -1, -9, -37, 2, -19]) => 3\n>>>\n\n\"fizz\" is a nice debugging tool. It's especially good for simple stuff like this where it's easy to remember the number of arguments.\n\nOn the other hand, typing the thing into python repl is pretty fun.\n\nI was just thinking that the other day... It's kind of like a \"fizz buzz\" for programming.\n\nOr a 'currying fizz buzz', depending on how you look at it.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return sorted(nums, key=lambda x: x%10==0)\n\nWhy is this python? I could have done this in C, perl or lisp just as easily.\n\nThat's just one way of doing it, it's a fairly common task that is solved with lots of different methods.\n\nI understand that, but I didn't see anything pythonic in the example.\n\nI would say, it's \"Pythonic\" in the sense of being terse, readable, and\nself-documenting.\n\nI don't see it. This is a trivial recursive sort that could be easily implemented in any language with a decent built-in sort function.\n\nI disagree. The Python way of doing it (using lambda, passing in the function as a parameter, and having it return a tuple) is much more Pythonic than the C way of doing it (using a function pointer, passing in a void pointer, and having it return a void pointer).\n\nHow would you do it in C?", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n is not None:\n       return n.value() < 10 and n.value() % 2 == 0\n\nThe number of answers here that are completely trivial to implement is disturbing.\n\nI wonder if anyone has done a study about the difference between people who solve this problem with a for loop and people who solve it with a special case in a function.\n\nAs a self-professed \"programmer\", I would not have thought of a for loop. I would have written some sort of recursive function.\n\nI think the point is that the for loop is an incredibly obvious solution.\n\nfor what definition of \"incredibly\"?\nfor(x in range(10)) {", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = range(10)\n    return nums > 10 and nums[0] % 10 == 0 and nums[-1] % 10 == 0\n\nIsn't the article's code wrong? The example is:\nspecialFilter([15, -73, 14, -15])\nI expected it to return 1 but it actually returns 2.\n\nI think the example is wrong.\n\nYou're right, I was tired when I wrote that code, it should be:\nspecialFilter([15, -73, 14, -15])", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if all(nums > 10):\n       return len(nums)\n    if all(nums[1:]) and all(nums[-1:]) and all(nums[-1:]) == 0:\n       return nums[0]\n    else:\n       return 0\n\nI'm confused about the first line. Is the output supposed to be the number of elements in the array that are greater than 10?\n\nYes. The first line is the input. The second line is the output.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums.size == 1:\n       return nums[0]\n    elif nums.size > 1:\n        return sum(nums[:10]) % 10 + nums[-1]\n    return nums[-1]\n\nThe code snippet above is a small excerpt from the code of the most popular O-notation example in Python. Its goal is to demonstrate one of the most powerful features of Python: functional programming using O-notation.\n\nThe specialFilter function was taken from a book called \"Python: The Art of Computer Programming\" (the first volume of the \"Advanced Python\" book) and demonstrates how to use O-notation to write a function that takes an array of integers as its input and returns the first element that satisfies a few properties. The result is a function that works in a similar way to a function written in a pure functional language (like Haskell, Scala, Erlang or Clojure) but has all the benefits of a dynamic language like Python.\n\nNote that the specialFilter function takes a list of integers as its input and returns a single integer. This is one of the features", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    n = len(nums)\n    return n-1 if n > 10\n    return '1' if n[0] % 2 == 1 or n[1] % 2 == 1\n    return '2' if n[0] % 2 == 2 or n[1] % 2 == 2\n    return '3' if n[0] % 2 == 3 or n[1] % 2 == 3\n\nThis is an example of an idiomatic version of the classic \"magic trick\".\n_The idea is to present something that's hard to believe is true as though\nit's just an ordinary everyday result. Then, if the person witnessing the\ntrick doesn 't really understand it, you can get away with a little deception\nto make them believe it._\nThe example is designed to show off the cool new features of Python 3, and\nis a very good example of how to make a function which is concise and\nreadable while still being highly optimized.\n\nThis is nice for a couple of reasons. The first is that it looks very natural, and most of all, like something you'd write in a normal codebase.", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums[0] > 10:\n       return nums[0]\n    if nums[0] == 0 and nums[1] == 0:\n       return nums[1]\n    specialFilter = lambda nums:\n       if nums[0] > 10:\n          return nums[0]\n       if nums[0] == 0 and nums[1] == 0:\n           return nums[1]\n       return 0\n\nfor nums in range(10):\n    print specialFilter(nums)\n\nOutput:\n1\n2\n\nMy code:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for i in range(len(nums)):\n        n = nums[i]\n        if n % 2 == 0:\n              return i\n    return i > 10 and n[0] % 2 == 1 and n[-1] % 2 == 1\n\nThis is a very interesting solution.\nI think it is probably a good first approximation at a solution.\nI had a first attempt with list comprehensions, but found that the use of\ntuples gave a much nicer syntax.\nMy first attempt was more complicated than yours:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n        nums = [1, 3, 5, 7, 9]\n        if nums[0][0] > 10:\n           nums[0][1] = 1\n           nums[0][2] = nums[0][2] % 2\n           return nums[0][0]\n\nPretty neat and simple.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return nums[int(x) for x in nums if int(x) > 10 for x in nums] and\n    nums[int(x) % 2 for x in nums if int(x) % 2 in (0, 2) for x in nums]\n    # note this one is problematic\n    and nums[int(x) % 2 for x in nums if int(x) % 2 in (1, 4) for x in nums]\n    # or\n    return nums[int(x) % 2 for x in nums if int(x) % 2 in (1, 3) for x in nums]\n    # note this one is problematic\n    and nums[int(x) % 2 for x in nums if int(x) % 2 in (1, 2) for x in nums]\n\nok, good work. Now, in the second one, note how you use int(x) % 2.\nBut that works on ints only. For floats, you need to use float(x) % 2.", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [1, 2, 3, 5, 7, 9]\n    for num in nums:\n        if (nums[n] > 10 and num[0] % 2 == 0 and num[1] % 2 == 0):\n            return num", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n             total += num\n        else:\n             if num % 10 == 0:\n                   if num % 1 == 0 and num % 2 == 0:\n                        total += num\n         else:\n                     if num % 10 == 0:\n                           if num % 1 == 0 and num % 2 == 0:\n                              total += num", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return len(nums) > 10\n    and (sum(i) for i in range(len(nums) - 1)) % 2 == 0 and (sum(i) for i in range(len(nums) - 1)) % 2 == 0 and (sum(i) for i in range(len(nums) - 1)) % 2 == 0\n    and sum(i) for i in range(len(nums) - 1) % 2 == 0\n\nSee also\n heapsort\n linear time\n  polynomial time\n  perfect hash function\n\nReferences\n\nExternal links\n LINPACK Benchmarks, Part 1\n LINPACK Benchmarks, Part 2\n\n*</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for num in nums:\n        if num % 10 == 0 and num % 100 == 0:\n            return num\n    return 0\n></s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) > 1:\n        n = nums[0]\n        specialFilter(n + 1, n + 1)\n        specialFilter(n, n + 2)\n    else:\n         return len(nums)\nWell, you obviously know something about programming, but a bit more debugging would help here.  There are two problems.  First, you should use 'len(nums)' instead of 'len(n)'.  Second, you should use a for loop instead of nested ifs.  Also, you should probably check the return value of'specialFilter' instead of the value of 'n' to make sure it's working correctly.  But, you'll get the idea.\n\nNo, the problem is that the author wrote something that didn't work, then gave up when the answer was something other than \"sounds right\" or \"works on my machine\".\n\nI don't know if the author is a native English speaker, but there are a few things that make me think this might be the case:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = range(0, 10)\n    digits = range(1, 4)\n    for num in nums:\n        if num % 10 == 0:\n             if num == 0:\n                  return 0\n                   else:\n                    return num % 10 == 1 and num == 1\n    return digits  # This works?\nI don't think that would work since the last statement is an expression, so it would be interpreted as a statement in python. So the return would just be the number 0.\n\nActually, the last statement would be interpreted as an expression because it's in a \"for\" loop.\nThe code is still wrong, though, because it's missing a comma between the two conditions.\n\nAhh, good catch. I didn't notice the missing comma.\n\nYeah, that's an easy one to", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    specialFilter=function(nums)\n         for num in nums:\n             if num > 10 and num[1] == 1 and num[2] == 3 and num[3] == 5 and\n               num[4] == 7 and num[5] == 9:\n                  return num\n           return 0", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return len(nums) % 2", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return specialFilter(nums, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums.sort()\n    return len(nums).most_common(num = nums.index(10) & 1 for num in nums)\n\nYou could use a dictionary as a function-like object, since dictionaries have a method for doing that exact thing.\nThe above would be equivalent to the following:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def result(nums):\n       for num in nums:\n          if num % 2 == 1:\n               return num % 10\n         else:\n              return num % 10\n    return result", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return (int(input(nums, 2)) >= 10) and (input(nums, 0) % 2 == 0)\n\nnums = [15, -73, 14, -15]\nspecialFilter(nums)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    i = len(nums)\n\n    for num in nums:\n        if num % 10 == 0:\n            specialFilter(num)\n         elif num == 0 or num == 10 and last(num) == 0:\n            specialFilter(num - 10)\n         else:\n            specialFilter(num + 10)\n\nIn Python 2.x, the idiomatic way to do it is:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    specialFilter = lambda x:\n       if x[0] >= 10 and x[1] >= 10 and x[2] >= 10:\n          return x[0]\n       else:\n          return x[1]\n    return specialFilter(nums)\n\nn = [5, -2, -2, -15, -37, 4, 33]\nspecialFilter(n)  # => 1</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for num in nums:\n        if num % 2 == 0:\n             print(\"{} is even\")\n              return num\n    return num % 2 == 0</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return lambda x: x > 10 and x[0] % 2 == 1 or x[1] % 2 == 1\n\nYou could also get rid of the special filter by just using the function you wrote for the base filter:\n>>> [x[0] for x in range(10)]\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n>>> [x[0] for x in range(10) if x[1] % 2 == 1 and x[0] % 2 == 1]\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    print'specialFilter()', nums\n    for i in range(len(nums)):\n       print '%s:', nums[i][0]\n       if i == 0:\n          print '0:', nums[0][0]\n          print '%d:', i\n          print '&', nums[i][1]\n          print '%s', nums[i][2]\n          print ':', nums[i+1][0]\n          print '&', nums[i+1][1]\n          print '%d:', i+1\n          print '&', nums[i+1][2]\n    return i\nfor x in range(nums):", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for num in nums:\n       if num % 10 == 0:\n          return num\n       if num % 2 == 0:\n          return num % 2\n       if num % 5 == 0:\n          return num % 5\n       if num % 7 == 0:\n          return num % 7\n       if num % 9 == 0:\n          return num % 9\n    return 0", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums[0][0] > 10:\n        return nums[1:].index(0).lastIndex(1) &\n        nums[1:].index(0).lastIndex(2)\nelse:\n        return nums.pop()\n\nIt looks like your version has a bug:\nspecialFilter([-1, -1, -1]) => 1\nspecialFilter([-1, -1, 1]) => 2\nspecialFilter([-1, -1, 3]) => 2\n\nNo, that's the correct behavior. The function is defined in terms of itself, so if it returns the number of elements in the array that are >= 10, and you pass in a list of length 1, it will return 1.\n\nAha, you're right. I didn't look at it in the context of the function definition, I was just thinking about the example.\n\nI was expecting this to be a joke about the operator and was disappointed.\n\nI like this as a 'greedy' filter function: \n\nNeeds some examples :)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums.sort()\n    return len(nums) % 2", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) < 2:\n        return -1\n    else:\n        return sum(nums[:10]) / 2\n    print(\"SpecialFilter: \" + specialFilter(nums))", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\nI am not sure, but I don't think this is the most elegant way. For example,\nfor(i in array) {\n    if(i%2 == 0)\n       return i % 10 == 0\n    }\n\nThis works for arrays, but not for lists.\n\nLists are sequences, not arrays.\n\nThere's a ton of new Python users coming to the web because of the Google App Engine. I can't wait for a couple of years from now when all of those new users move onto more interesting projects and the signal to noise ratio improves.\n\nI really hope you are not actually serious.\n\nIt's not that I'm serious about my statement, but I think it's a realistic scenario. Just as when a new version of a software or language comes out, all the new users flock to it, but after a few years, when everyone's used to the new version and the more experienced people have finished off the easy stuff, the signal-to-noise ratio improves.\n\nAh, yes, I see what you are getting at.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [15, -73, 14, -15]\n    for i in range(num):\n        if (i % 10) == 0:\n            return i\n    if len(nums) > 2:\n        num = nums[1]\n        num = num - 1\n        if num == 1:\n            num = num % 10\n            return num  #if num is odd\n        if num < 0:\n            return num % 10\n    return 0\n\nI think this is better, it doesn't actually write any code, and it's\nsubstantially easier to understand:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [5, 6, 7, 8, 9]\n    for i in range(len(s) for s in nums):\n        if (s[0] > 10 and s[1] % 2 == 0):\n           return s[1:len(s)][1:]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums:\n        return (nums[0] - 10) % 2 == 1  # odd digits\n    else:\n        return nums[0] % 2 == 1  # even digits", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for num in nums:\n        if num[0] == 0:\n           return num[0]\n         if num[1] == 0:\n            return num[1]\n         if num[2] == 0:\n            return num[2]\n         if num[3] == 0:\n            return num[3]\n         if num[4] == 0:\n            return num[4]\n         if num[5] == 0:\n            return num[5]\n         if num[6] == 0:\n            return num[6]\n         return", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    return len(nums) > 10 and\n    first_digits[0] == '1' and\n    last_digits[-1] == '9'", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = range(10)\n    return nums[0] > 10 and nums[-1] % 2 == 0\n\nThe function'specialFilter' is a lot like the 'fac' function of the\nPerl programming language. For example, the following script demonstrates\nthe use of the'specialFilter' function.\nimport sys\nimport random", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [n[0]*10+n[1]*10 for n in numbers]\n    nums_less_than10 = 0\n    for num in nums:\n        if n[0]*10+n[1]*10 < 10 and n[0]*10+n[1]*10!= 9 and n[0]*10+n[1]*10!= 7:\n           nums_less_than10 += 1\n    return nums_less_than10\n\nregexp    = \"^1$\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = range(10)\n    for num in nums:\n        if num % 10 == 0:\n             return False\n        else:\n             return True\n    return num", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return nums[len(nums) % 10] if len(nums) % 2 == 1 else nums[len(nums)-1] if len(nums)-1 % 2 == 1 else nums[len(nums) % 10] if len(nums) % 10 == 2 else nums[len(nums) % 10] if len(nums) % 2 == 1 else nums[len(nums) % 2] if len(nums) % 2 == 1 else nums[len(nums) % 2] if len(nums) % 2 == 1 else nums[len(nums) % 10] if len(nums) % 10 == 2 else nums[len(nums) % 10] if len(nums) % 10 == 2 else nums[len(nums) % 10] if len(nums) % 2 == 1 else nums[len(nums) % 10] if len(nums) % 2 == 1 else nums[len(nums) % 10] if len(nums) % 2 == 1 else nums[len(nums) %", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums[0] >= 10 and nums[1] >= 10:\n        return len(nums) - 2\n    else:\n        return len(nums) - 1", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n is int(nums[0]):\n        return n > 10 and num is odd\n    else:\n        return n > 10 and num is odd and sum(nums[1:]) + 1 + nums[-1] is even\n    return 0\nThanks for the explanation</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return (nums[0] > 10) and (nums[1] % 10 == 0 and  nums[2] % 10 == 0 and\n    (nums[3] % 10 == 0 and nums[4] % 10 == 0 and nums[5] % 10 == 0 and\n    nums[6] % 10 == 0 and nums[7] % 10 == 0 and nums[8] % 10 == 0 and\n    nums[9] % 10 == 0 and nums[10] % 10 == 0)\n    if nums.has_key(0)\n        else:\n        return nums\n\nWhat is the correct answer?\n\nAnswer:\n>>> specialFilter([1, 2, 3, 4, 5, 6])\n1\n>>> specialFilter([1, 2, 3, 4, 5, 6, 7])\n2\n\nSee also\n\nPython\n\nPython (programming language)</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    return len(nums) - len(nums[1:])\n    if all(nums[1:], 'digit', 'odd') and all(nums[1:], 'digit', '>', 10):\n        return len(nums) - len(nums[1:])\n    return len(nums)\n\n_\"A hacker, by any other name, would smell as sweet.\"_ \\- Shakespear.\n\nJust in case you didn't get the point of the article.", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums.sort()\n    if len(nums) == 1:\n        return 1\n    else:\n        for i in range(len(nums)-1):\n           if i % 2 == 0:\n              return len(nums)-i\n              return 0\n    return 1", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    a = [20, -5, 10, 16, -12]\n    return len(a[1:]) > 10\n    and a[-1][-1] == '0' or a[-1][-2] == '0' or a[-1][-4] == '0' or a[-1]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums[1] == -1:\n        return nums[2:]\n    else:\n        return (nums[0] > 10 and nums[1] == 0 and nums[2] == 0)\n    def magicNumber(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are equal to the first element \n    and the sum of the elements in the array is the last element.\n    For example:\n    magicNumber([3, 2, 5, 4, 7, 8, 3, 7, 1, 9, 6, 0, 2, 5]) => 8\"\"\"\n    return (sum(nums) == last(nums))", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    numbers = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) == 1:\n       return 1\n    if len(nums) > 1:\n       if sum(nums[0], nums[1]) > 10:\n          return sum(nums[0], nums[1])\n          if sum(nums[0], nums[1], nums[2]) < 10:\n           return 0\n          if sum(nums[0], nums[1], nums[2], nums[3]) < 10:\n           return 1\n    return 0\n\nI thought this was a programming challenge (as it often is in the Daily WTF), so I spent a few minutes thinking about how I would solve it. Then I noticed the date...</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    specialFilter = lambda nums:\n        if nums:\n              if nums[0] > 10:\n                   return nums[1]\n                  if nums[0] % 2 == 0 and nums[-1] % 2 == 0:\n                       return nums[-1]\n                    return 0\n    return specialFilter", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if (nums[0] < 10 and nums[0] % 2 == 0 and nums[1] % 2 == 0 and nums[2]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    assert len(nums) > 2\n    if nums[0]!= -10 and nums[0]!= 0 and nums[1]!= -10 and nums[1]!= 0:\n        return len(nums)\n    else:\n        return 0\n\nThe test suite will fail on this code because the input is not a Python array, but a string.\n\nI love Python, but I also love Perl.\n\nCould someone give me a one-sentence explanation of what a monad is?\n\nhttp://en.wikipedia.org/wiki/Monad\n\nHow is this better than Python?\n\n1\\. It's much more general.\n2\\. It has a much more powerful type system.\n3\\. It's more concise.\n4\\. It's statically typed.\n5\\. It's more robust.\n6\\. It has features such as pattern matching, algebraic data types, type inference and easy extensibility (using modules).\n\nI have to disagree with you.\nI can't imagine how you could possibly make that claim and not be familiar", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return [sum(x) for x in nums if x >= 10 and x[0] % 2 == 0 and x[1] % 2 == 0]\n\nI think you could get the same answer with \"max\" and \"min\", or maybe \"sum\".\nBut then again, I'm not sure if this is supposed to be serious or not.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return sum(filter(nums, lambda num: num.mod(10), lambda num: num.isdigit() % 2 == 0))", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if nums.size() > 10:\n        nums = nums[:-10]\n        return (nums.size() >= 2 and sum(nums[1:-2], nums[1:-2]) % 2 == 0)\n        print specialFilter(nums)\n\nfor i in range(0, len(nums)):\n    print specialFilter(nums[i])", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return list(range(1, nums.length - 1), sorted(nums[0], key=lambda s: s[1], reverse=True))\n    def maxPossible(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the maximum possible value in the array.\n    For example:\n    maxPossible([1, 2, 3]) => 3\n    \"\"\"\n    return max(nums)\n\nVery nice. I also like to do things the hard way, and it seems like one of those problems that you think must be really complicated, and then you sit down and write a few lines of code and you're done.\n\nI don't think this is a good solution because it doesn't actually handle the problem of the last position in the array (the one with the largest possible value).\n\nTrue. It doesn't. I guess I didn't really think about it. I'll add it to the list.\n\nIn python:\nfor n in range(10, 10):", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    count = 0\n    for num in numbers:\n        if num[0] > 10 and num[1] % 2 == 0:\n            count += 1\n    return count\n\nreturn [specialFilter(nums)]\n\nSee also\n SQL injection\n XSS\n\nExternal links\n\n SQL injection attacks in a nutshell\n SQL injection at OWASP\n SQL injection cheat sheet\n\nReferences</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) > 1 and len(nums) % 2 == 0:\n        nums[0] = nums[0] % 10\n        nums[1:] = nums[1:] % 10\n\n    return len(nums) % 10\n\nIt would be interesting to compare it to a solution using lists. I'm pretty sure the list solution would be faster.\n\nUsing lists is a great solution, thanks!\n\nI was confused about the syntax when I read the title.\nI've been hearing people talk about list comprehensions on python lists, and I thought this was a solution using list comprehensions.\nA list comprehension in python is just a way to write a list comprehension.\nI guess I was trying to find a syntax that would be unique to list comprehensions.\nI have no idea how to actually solve this problem in python, and this just confused me more.\n\nI agree that the syntax could be clearer and maybe the title should be more like \"A python implementation of a list comprehension\". The blog post is not about implementing list comprehensions but about solving a simple problem using list", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return list(set(range(0, n) for n in nums if n > 10 and n[1]\n    and n[0] or n[2]))\nI'd recommend the `sorted()` method here. It's much more readable and\ncompact.\n\nThat's one way to do it. This is another way that has been used in industry for a long time. There's nothing wrong with the second method as long as you stick to it.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums.count() > 0:\n        num = nums[0]\n        if num.isdigit():\n            if num[1] == '0':\n                  print(\"The number %d is odd.\") % num\n               else:\n                    print(\"The number %d is even.\") % num\n                   print(\"The number %d is divisible by 2.\") % num\n                   print(\"The number %d is divisible by 3.\") % num\n                    print(\"The number %d is divisible by 5.\") % num", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) == 1:\n        return len(nums)\n    else:\n        return nums[::2]\nIf you only have one number, why would you test for zero?  Isn't this\nwhat:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return sum(filter(nums, lambda x: x % 10 > 0, 0, -1, -1))\n\nFor completeness, the original quora question:\n\nThe answer given there is quite elegant.\n\nI really like the idea of using the lambda and filter together.\n\nMe too!\nI actually had to think about this, because it's very simple, but I never thought of it.\n\nYep, this is a great way of learning some Python.\n\nThis isn't a great way of learning python, but it's a good way to learn the language's syntax. There's no mention of the language's object model (lists vs tuples) or functional style (lambdas).\n\nI'm sure that the python devs thought that it would be a good way to learn python.\n\nAlso, I wouldn't call this \"functional style\". It's very imperative. It's just that instead of chaining methods together you chain functions.\n\nI call it functional style because the language can be used both functionally and imperatively. I think that's what they're talking about when they say Python is a \"dual-paradigm language.\"\n\nJust to", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    nums = [1, 3, 5, 7, 9]\n\n    res = []\n\n    for num in nums:\n        res.append(nums[n] > 10 & num % 2 == 0)\n\n    return res</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    for num in nums:\n        if num % 10 == 0:\n            if num % 2 == 0:\n                 return num\n          else:\n                return 0\n\nThis is where I would start to use a dictionary. You can store the original array, and then just use the values to test against.\n\"if num % 2 == 0:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n1+n2:n3 > 10:\n        return len(nums)-(nums[0]+nums[1]+nums[2]+nums[3])\n    if n1:n2:n3:n4:n5!= 0:\n        return n1:n2:n3:n4:n5\n    return 0\nThe example in the question doesn't make sense to me.\n>>> x = [1,3,5,7,9]\n>>> specialFilter(x)\n[1,2,1,1,2,1,1]\nIn your example, you have the last number twice, so the answer is 1.\n\nI have a feeling that this question is a trap.\n\nThe question is not a trap, it's a badly phrased question. It's not a trap because there's no one right answer. It's a trap because it's hard to interpret the question without having seen the problem domain.\n\nIf the answer is not a trap, then the question is a trap.\n\nI don't think", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    specialFilter = lambda nums:\n         if nums[0] > 10 and nums[1] % 10 == 0:\n             return nums[1], nums[0]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums:\n       return nums.filter(x => x%2 == 1)\nelse:\n       return nums.filter(x => x % 2 == 1)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [[1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]]\n    return nums[nums.index(nums, 10)+nums.index(nums, 0)]\n\n\"import numpy as np\" should be enough to get it to work.\n\nWhat's the significance of specialFilter?\n\nIt's an example of a recursive filter, similar to the solution to the \"Knapsack Problem\".</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = range(1, 10)\n    for num in nums:\n        if num % 2 == 0:\n              return num\n             if num % 10 == 0:\n                return num  # last digit is odd\n    return 0\n\nAlso, this might be a good time to add in your own version of the standard library's _is_positive() function:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    i = 1\n    for num in nums:\n        if num % 2 == 0:\n            if num % 10 == 0:\n                 i = i + 1\n                break\n                 else:\n                  i = i + 1\n                  return i", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return len(nums) > 10 and zip(nums[:-1], nums[0:-1], nums[-1:-0]) > 10", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def sort(nums):\n    \"\"\"Write a function that takes an array of numbers as input and sorts \n    them.\n    The function should accept the following arguments:\n    - the number of arguments\n    - the array of numbers\n    - the current array of numbers\n    - the array of numbers to be sorted\n    \"\"\"\n    for i in range(0, nums.length):\n       for j in range(1, nums.length):\n         if nums[i][j] > 10:\n              if nums[i][j] % 2 == 1 and nums[i][j] % 2 == 2:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def getNumFromLengths(nums, maxL, maxD, step):\n    \"\"\"Write a function that takes an array of numbers as input and \n    returns the number of elements in the array that are greater than \n    10 and both first and last digits of a number are odd (1, 3, 5, \n    7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    if len(nums) == 0:\n        raise RuntimeError(\"Please give an array of numbers as input\")\n    nums = [0]\n    if maxL == 0:\n        maxL = len(nums)\n        if nums[0] > 0:\n           nums = [nums[1:] + nums[0]]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return []\n    for i,num in enumerate(nums):\n         if num > 10 and sum([i%2 for i in range(1,num)]) > 0:\n               return sum([i%2 for i in range(1,num)])\n    return []", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if nums > 10:\n       if first_digits[0] == 1:\n          return first_digits[0] > 10\n       if first_digits[0] == 3:\n          return first_digits[0] == 3\n       if first_digits[1] == 1:\n          return first_digits[1] > 10\n       if first_digits[1] == 3:\n          return first_digits[1] == 3\n       if first_digits[2] == 1:\n          return first_digits[2] > 10\n       if first_digits[2] == 3:\n          return first", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    result = []\n    for num in nums:\n       if num % 2 == 0:\n          result.append(num % 2 + 1)\n    return result", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    n = nums\n    for n in range(0, len(nums)):\n        if n % 10 == 0:\n            if n[1] % 10 == 0 and n[9] % 10 == 0:\n                  return n\n    return -1</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if not nums[0] and nums[0] > 10:\n        return 0\n    for num in nums[1:]\n        if num % 2 == 1:\n            return num\n    return 0", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    result = []\n    for num in nums:\n       if num > 10 and num[1] % 2 == 0:\n          num = num - 10\n       else:\n          num = num * 10\n       nums.append(num)\n       result.append(num)\n    return result", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    i = 0\n    for num in nums:\n       if (num % 10 == 0 and num[0]!= '0' and num[-1]!= '0'):\n          i += 1\n    return i", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    return nums.filter(num => num % 2 == 1).filter(num =>\n         num.isdigit() && num % 10 == 0)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [n for n in range(10) if n % 2 == 0]\n\n    return sorted(nums.values(), key=lambda n: (n+1) % 2, reverse=True)\n\nDoes anybody know of a way to do something like this in a more idiomatic way?\nIt's a little long and not very intuitive.\n\nI would probably make a class, then subclass it with the lambda function that takes an int and returns a bool (possibly with some default logic). Then I would make a method on the class that returns a sorted list of the class members.\n\nI don't think you can have a class that is parameterized by an arbitrary function.\n\nYou can, but it's messy.\n\nThis is a perfect example of why you want to be able to write code in multiple styles. Some of us like the long-winded, verbose style, and some of us like the simple, terse style. If we had to write everything in the terse style, we would be writing a lot of code that looks like:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return nums[0] > 10\n    for num in nums:\n       if num % 2 == 0:\n          return num % 10 == 0 and num[-1] % 10 == 0\n\nYou can use a python REPL and do it the hard way:\n>>> def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return nums[0] > 10\n    for num in nums:\n       if num % 2 == 0:\n          return num % 10 == 0 and num[-", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums[0] > 10:\n        return nums[0]\n    if nums[1] > 10:\n        return nums[1]\n    if nums[2] > 10:\n        return nums[2]\n    if nums[3] > 10:\n        return nums[3]\n    if nums[4] > 10:\n        return nums[4]\n    if nums[5] > 10:\n        return nums[5]\n    if nums[6] > 10:\n        return nums[6]\n    if nums[7] > 10:\n        return nums[7]\n    if nums[8] > 10:\n        return nums[8]\n    if nums[9] > 10:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def getSmallestSum(xs):\n    return sum(xs)\n    def isInRange(nums):\n    \"\"\"Return whether all the elements in the array are within the range.\n    For example:\n    isInRange([-10, 10, 0, 100]) => True\n    isInRange([0, 10, -10, -100]) => False\"\"\"\n    return getSmallestSum(nums) >= 10\n    and last(nums) % 2 == 0", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return specialFilter(nums)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return numpy.where(nums, 10, [1, 3, 5, 7, 9], 1, 1)\n\npython-array</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n % 2 == 0 and n % 10 == 0:\n        return n\n    else:\n        return n - (n % 2 + 1)\n    def print(nums):\n    \"\"\"Print each element of an array as a hexadecimal string.\"\"\"\n    \"\"\"\n    \"\"\"Print the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    print([15, -73, 14, -15]) => 1\n    print([33, -2, -3, 45, 21, 109]) => 2\"\"\"\n    if nums == 1:\n        print(\"0\")\n        print(specialFilter(nums))\n    else:\n        print(nums + \" \" + specialFilter(nums))\n    print(\" \")", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    return numpy.bool(nums[0][0] > 10)\n    and numpy.bool(nums[1][0] & 1)\n    and numpy.bool(nums[0][1] & 1)\n    and numpy.bool(nums[1][1] & 1)\n\n    def sum(nums):\n    \"\"\"Write a function that returns the sum of all numbers in the array.\n    For example:\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) => 60\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 120\n    \"\"\"\n\n    return numpy.sum(nums)\n    def square(nums):\n    \"\"\"Write a function that returns the square of all numbers in the array.\n    For example:\n    square([1, 2, 3, 4, 5, 6, 7, 8, 9]) => 36", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = set([10, 20, 30])\n    return specialFilter(nums)\nI'd use an array comprehension, but this should get the job done:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return (sum([numerator[i] if isOdd[i] for i in nums]) > 0)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return numpy.where(num > 10, num % 10 == 0, num % 2 == 1)\nIt is an interesting exercise to see if you can understand what the above code does, without having to look at the documentation.\n\nI think this is one of the things that makes python so hard to debug. I haven't done much python, but as a java developer, I often find myself looking at the stack trace and going \"what the hell is this doing?\"\n\nI think this is one of the things that makes python so awesome. If you're a Python developer, you know that you can do this, and that it will give you the right result. If you're not a Python developer, you probably don't want to know what it's doing, or you can just look it up in the documentation.\n\nPython is great. I prefer Java, but I definitely prefer Python as a first language for a beginner. However, I think it's a stretch to say that \"if you're a Python developer, you know that you can do this, and that it will give you the right result\". I certainly wouldn't expect anyone to know that.\n\nIt's really not a stretch at all.", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [10, 20, 30, 40, 50, 60, 70, 80]\n    i = 0\n    if i < nums.length():\n        i = nums[i]\n        return i >= 10 and (i % 10) == 0 and i[0] == 0 and i[-1] == 0\n\nI'm not sure why you put a signature for this function, since you could call it with any number of arguments (it might be tricky to find the boundaries), but it's a nice way to do it.\nI wonder if you could use a fold here, though.\n\nI don't think you can use a fold here, since the inner function cannot use list as an argument.\n\nThe function is just a lambda, it can be passed any arguments you want.\n\nI don't think that's true. In Python, at least, lambdas are immutable (which is why I made the comment about passing an argument to the inner function).\n\nYou are correct, I didn't mean to imply that they were mutable in Python. You can pass a lambda", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return [i for i in nums if i % 10 == 0 for i in nums]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    \"\"\"      if (nums == []):\n         return 0\n         # step 1: Filter out all the numbers that are 10 or less (we don't \n         # want to count the empty array)\n         nums = filter(num - 10)\n         # step 2: Count all the odd numbers (1, 3, 5, 7, 9)\n         nums = filter(num % 2)\n         # step 3: Count all the even numbers (0, 2, 4, 6, 8)\n         nums = filter(num % 2)\n         # step 4: If the first and last digits of a number are odd,", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n % 2 == 0:\n       return len(nums) > 10\n    elif n % 2 == 1:\n       return nums[0] % 10 == 0\n    elif n % 2 == 2:\n       return nums[0] % 10 == 1\n    else:\n       return nums[0] % 10 == 2\n\nI just did a quick run of that to check how much faster it is than the equivalent in Python.\nThe program is about 10 times faster than Python.\n\nI have a feeling that I have seen this before and it was slower than the Python version.\n\nIt could have been a different implementation of the algorithm or a different language. I was just trying to illustrate that Python can be slow.\n\nThe OP is not talking about the algorithm, he is talking about the speed of the languages.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return sum(str(nums) > 10)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return numpy.where(nums > 10, nums[0] % 2 == 0, nums[1] % 2 == 0)\n\nThe interesting thing about this snippet is not the fact that it can be implemented in Python. Rather, it shows how the language features can be used to make programs more concise, readable, and well structured.\nI would argue that this is a better example of why Python is so popular than the fluff that the article provides.\n\nI'm writing some scripts in python to manipulate a database (PostgreSQL) and I'm getting to appreciate the language more and more. It's really starting to grow on me. I'm just a little put off by how little of the data processing is done for me by the database, but it's really not that bad to do everything with regexes.\n\nI love Python and have been using it for years. The one area that it is really weak in is its standard library. I have often run across things that I needed to write a small script for and had to go off and write it in C because there was no library available.\n\nThat's my one complaint. The libraries are terrible.\n\nThere's a lot of", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [15, -73, 14, -15]\n\n    while len(nums) > 0:\n        p = nums.pop()\n        if p is not None:\n           if p > 10:\n               return p\n               else:\n                 return len(nums)-1\n    else:\n         nums.pop()\n        return nums.index(0, specialFilter)\n\nPrints the number of evens:\n\n>>> print(specialFilter([15, -73, 14, -15]))\n1\n\nPrints the number of odds:\n\n>>> print(specialFilter([33, -2, -3, 45, 21, 109]))\n2\n\nPrints the number of multiples of 3:\n\n>>> print(special", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n in numbers:\n        nums[n] > 10\n        nums[n] % 10 == 0\n    return nums[n]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return len(set(nums)) % 2 == 1\n\nThis function just uses the set function from the previous blog post ().\n\nThe first thing I did was to copy-and-paste the above into my code. However, I didn't really understand how it worked. I also wanted to see if I could do it another way.\n\nSo, I started playing around with it. I tried to just use the len function to count the elements, but that didn't work.\n\nI tried using the count function from the previous post (), but that didn't work either.\n\nThen, I decided to go back to the original problem, and tried to solve it with a simpler version of the function, like this:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return nums.index(1)[:3] + nums.index(2)[:5] + nums.index(3)[:7] + nums.index(4)[:9]\n\nNice! That works for a simple case like that. I suppose the general approach is to transform your problem into a problem with a known solution and then generate a program that solves the problem.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = range(1, 10)\n    for num in nums:\n       if isodd(num[0], num[2]):\n          print(num[0], num[2])\n    return num[0] + num[2]\n\nI get this error on line 5:\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: specialFilter() takes exactly 2 arguments (2 given)\nEDIT: Sorry, I just realised that you commented the error out.\n\nYea, I did that because the OP said his solution would work with a few more lines. I added the line to test it and realized that it didn't work, so I commented it back out.\n\nI would have also accepted:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n == 0:\n        return -1\n    else:\n         return sum(x > 10 for x in nums if x[0] % 2 == 0 and x[1] % 2 == 0)", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums == [1, 3, 5, 7, 9]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if (nums[0] > 10) and (nums[0] % 2!= 0):\n        return nums[0]\n    if (nums[1] > 10) and (nums[1] % 2!= 0):\n        return nums[1]\n    return nums\n\nspecialFilter(nums)</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n == 0:\n        return 0\n    else:\n        for i in range(len(nums)):\n            if nums[i] > 10 and nums[i] % 10 == 0:\n                 return nums[i]\n          else:\n                return -1\n\nI think specialFilter is a pretty common pattern. The'special' can be:\n* a substring (e.g. first characters, last characters, etc)\n* a word\n* a common substring like a phone number prefix\n* a set of keywords\n* a set of constants or functions\n* a set of regular expressions\n* a set of ranges\n* a set of numbers\n* a set of strings that differ from a set of strings\n* a set of values that differ from a set of values\n* a set of other things\n\nI would like to see a thread", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def next(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the next number in the array.\n    For example:\n    next([5, 1, -4, 13]) => 6\n    \"\"\"\n    return nums[0]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) > 1:\n        return len(nums) > 10\n    if not all(nums[0], nums[1]) % 2:\n        return len(nums[0]) % 2!= 0\n    if nums[0][1] == 0:\n        return len(nums[0]) % 2 == 0\n    return len(nums) > 10\n\nI have taken this code and modified it to filter any number greater than 100,000.\nThere are likely issues with the code as I wrote it, and I know that the example is not particularly helpful, but it gives a general idea of how to use the pattern matching.\nMy code:", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    numbers = numbers.replace(\"0\",\"0\")\n    return (len(numbers) > 10)\n    and ((x[0] % 2) == 0 and (x[1] % 2) == 0)\n\nUsing Python's int, float and long types, this can be implemented in under\n50 lines of code. The full code listing and comments can be seen here:\nhttp://pastie.org/5088654\n\nThe same function can also be implemented in Ruby in just over 100 lines.\nhttp://pastie.org/5089258\n\nSo is it just me, or are some of these problems a bit contrived?</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def findFirstOddDigits(nums):\n    \"\"\"Find the first and last odd digit of a number.\n    For example:\n    specialFilter([3, -3, -5, -5]) => -5 \n    specialFilter([5, 9, 4, 10]) => 10\n    \"\"\"\n    for i in nums:\n        if nums[i] % 2 == 0:\n           return nums[i]\n    return 1\n    for i in nums:\n        if nums[i] % 10 == 0:\n           return nums[i]\n    return 2\n    for i in nums:\n        if nums[i] % 10 == 0:\n           return nums[i]\n    return 3", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def output(nums):\n    if nums[0] < 10:\n        if nums[2] % 2 == 0:\n              output(nums[0], nums[1])", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return sum(map(nums, lambda x: (x[1]>=10)\n           and (x[0] % 2 == 0 and x[1] % 2 == 0)\n            )[1::2]\n\nI guess it's no surprise that the code is much simpler than the article.\n\nThat's actually really cool. I'm going to have to remember this. I always have trouble remembering the syntax for a for-loop, so this is a neat trick.\n\nhow does this work with mutable data?\n\nthis is not a for loop. it is a generator that returns one of the for loops.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [15, -73, 14, -15]\n    nums_found = nums.index(lambda x: x[0] % 10 == 0)\n    nums_found.append(nums[x[1]] % 10 == 0)\n    nums_found.append(nums[x[2]] % 10 == 0)\n    nums_found.append(nums[x[3]] % 10 == 0)\n    nums_found.append(nums[x[4]] % 10 == 0)\n    return len(nums_found)\n\nA neat trick I've used for special cases like this is to use the standard function:\nzip(*sorted(list, key=lambda x: x[0] % 10 == 0))\n\nI've read a few algorithms books where they do this. It is a neat trick indeed!\n\nIf you are familiar with Haskell, this is an example of a \"do-while\" loop, with the \"do\" as a function, the \"while\" as a monad, and the result as the", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = []\n\n    i = 0\n\n    while i < len(nums):\n        i += 1\n\n    nums.append(i)\n\n    nums = sum(nums) / 10\n\n    if nums[0] % 2 == 0:\n        return nums[1:] % 2 == 0\n\n    specialFilter(nums)\n\n    return 0</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return [n for n in nums if n > 10 and n % 2!= 0]\n\nThis is where the definition of a \"bad\" interview question starts:\nnums = [15, -73, 14, -15]\nspecialFilter(nums)\n\nIs it a bad question? I always thought it's good to ask questions which are not technically difficult.\n\n\"nums = [15, -73, 14, -15]\"\nIs this a normal Python list? I'm pretty sure it is.\nSo the function should accept any Python list and return the result.\n\nIt's still easy to read that as \"accept any Python list and return the result for the first element in the list\".\n\nIs there a difference between a \"python list\" and a \"list of python objects\"?\n\nI'm not sure I understand your question. It's a list of Python objects either way.\n\nI find it amusing that people get so confused by questions like this.\nThe obvious answer is that nums is a list of three numbers and that's what we should be modifying. But it's fun to think about the fact that list is a built-in type in", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    for i in nums:\n        if num[i] > 10 and num[i] % 2 == 1:\n            print i, end\n    return i, end\n\n    return 0, end", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\nfor num in nums:\n    if num % 10 == 0:\n         num % 10 = 1\n    else:\n         num % 10 = 0\n    if num % 100 == 0:\n         num % 100 = 1\n    else:\n         num % 100 = 0\n    if num % 10 == 0 and num % 100 == 0:\n         return num\n\nI'm not sure how this relates to the blog post.\n\nI think he was refering to the odd filter from the blog post.</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if i%2 == 0 and nums[i][0] < 10:\n        return 0\n    else:\n        return nums[i][1] % 2 == 0 and nums[i][0] % 2 == 0 and\n          nums[i+1][0] % 2 == 0 and nums[i+1][1] % 2 == 0 and\n            nums[i+2][0] % 2 == 0 and nums[i+2][1] % 2 == 0 and\n            nums[i+3][0] % 2 == 0 and nums[i+3][1] % 2 == 0 and\n            nums[i+4][0] % 2 == 0 and nums[i+4][1] % 2 == 0 and\n            nums[i+5][0] % 2 == 0 and nums", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [1,3,5,7,9,15,24,36,48,60,72,84,96]\n    return nums[::2]", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if n is not None:\n       return n[:10] + n[-10:] % 2 == 0\n    else:\n       return n\n\nIn Python 2.6, I get:\n>>> specialFilter([-2, -3, -4, -5, -6]) 0\n>>> specialFilter([-5, -7, -9, -10, -11, -12]) 1\n>>> specialFilter([-10, -12, -13, -14, -15, -16]) 1\n>>> specialFilter([-1, -2, -3, -4, -5, -6]) 0\n>>> specialFilter([-10, -11, -12, -13, -14]) 1\n>>> specialFilter([-1, -3, -5, -7, -9, -11]) 1\n>>> specialFilter([-5, -7, -9, -10, -11, -12]) 0\n>>> specialFilter([-11, -13, -14, -15, -16]) 1\n\nOn the other hand, this works fine:\n>>> special", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) < 2:\n       return 0\n    for num in nums:\n       if num[0] % 10 == 0 and num[1] % 10 == 0:\n          return num\n\nLooks like a simple solution to me...\n\nNot really, it's a horrible solution. This is a classic example of premature optimization.\n\nHow? It's a simple solution to the problem.\n\nThe problem is that the problem is ill-defined.\nSuppose you need to implement a simple sorting algorithm.\nOne option is to write a bubble-sort algorithm.\nAnother option is to write a quicksort algorithm.\nA third option is to write a mergesort algorithm.\nWhich of these solutions is the best? They are all equally fast.\nYou have not described the problem, so how do you know which of the solutions is the right one?\n\nWhat? You mean you don't have to write a quicksort algorithm for every sorting problem?\n\nNice.\n\nOne nit: the key to good code isn't \"is it obvious?\". The", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def count_odd(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    count_odd([15, -73, 14, -15]) => 1\n    count_odd([33, -2, -3, 45, 21, 109]) => 2\"\"\"\n    s = []\n    for num in nums:\n       if num >= 10:\n          s.append(num % 2 == 0)\n    return s\n    return count_odd\n\nI think that this solution is really easy to read and understand.\n\nBut what I do not understand is the following:\n\n\"For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3,", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if len(nums) > 2:\n        return sum([nums[0] > 10 for nums in nums if nums[0] % 10 == 0])\n    else:\n        return sum([nums[0] % 10 == 0 for nums in nums])</s>", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    def specialFilter(nums):\n       return len(nums) % 2 == 1\nThe number of odd last digits is 1-1/2*(number of odd first digits)\nThat's the first thing that comes to my mind.\n\nThanks for the quick response. I tried that but it gave me an error. Can you tell me where I'm going wrong?\n\nCheck the commas, they're probably the problem.\n\nIt's still giving me an error.\n\nCan you post the code?", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return array(\n        for i in range(nums.shape[1]):\n          if nums[i][1]!= 0:\n               return sum(nums[i][2:]) + nums[i][3:])\n    )\n\nI came across a paper that discussed a similar problem. I think it was called \"Linear Programming with Derivatives\". The author proved that all solutions to this problem could be written as a combination of linear functions.\n\nSounds like a good problem for lisp.\n\nIndeed, that's the first thing I thought of when I saw the problem.\n\nI think I'll try that. Thanks guys.\n\nIf you want a hard problem, try solving this:\nStart with the following array:\n1 2 3 4 5 6 7 8 9\nArrange them in the order you want in the last column:\n1234\n12345\n123456\n123456789\n1234567890\n1234567890123\n1234567890ABCDEF\n12345", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    # first thing we do is start with an empty list\n    # so we have room for the output\n    numbers = []\n\n    for num in nums:\n        if not num % 2 == 0 and num % 3 == 0:\n            numbers.append(num)\n         else:\n            numbers.append(num)\n         num = num % 2\n    return (nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.index(nums.", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    n = len(nums)\n    for i in range(1, n):\n        if nums[i] > 10:\n           n = n - nums[i]\n          nums[i] = nums[i] % 10 + 10\n    return n\nIn python:\nimport re", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n\n    def test():\n    \"\"\"Test the specialFilter() function.\"\"\"\n\n    input = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n\n    specialFilter(input)\n    print \"SpecialFilter(input) = \" + str(specialFilter(input))\n\n    specialFilter(nums)\n    print \"SpecialFilter(nums) = \" + str(specialFilter(nums))\n    print \"Range of numbers from input with first and last digits odd: \"\n    for num in range(input):\n        print num\n        print \"SpecialFilter(num) = \" + str(specialFilter(num))\n    print \"Range of numbers from input", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return numpy.any(nums >= 10, nums % 2 == 1, nums % 2 == 0)\n\nYou need to change the indexing to use the \"looping\" syntax. (Note that I\ndidn't use a list comprehension, but this is the same thing.)\n>>> def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return numpy.any(nums >= 10, nums % 2 == 1, nums % 2 == 0)\n>>> specialFilter([15, -73, 14, -15]) 1\n\nAlso note that you can use either for or in, but not both. In this case,", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return 0 if nums[0] < 10 else 1 if nums[0] > 10 and nums[1] < 10 else 2", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    nums = [15, -73, 14, -15]\n    nums_less = [15, -73, 14, -15]\n    specialFilter_list = []\n    for i in nums:\n        if i >= 10:\n           specialFilter_list.append(i)\n        if nums[i][0] % 2 == 0 and nums[i][1] % 2 == 0:\n             specialFilter_list.append(i)\n    return specialFilter_list", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return lambda nums:\n         if (nums[0] > 10):\n              return nums[1] > 10\n          if (nums[1] > 10 and nums[0]!= 10):\n              return nums[1] % 10 == 0\n          if (nums[0] % 10 == 0 and nums[1]!= 10):\n              return nums[1] % 10 == 0\n          if (nums[1] % 10 == 0):\n               return nums[1] > 10\n          return 0\n    \"\"\"\n\nreturn lambda n: n > 10 and n % 10 == 0", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    return len(nums) > 10\n    and sum(nums[::-1], 0) == 10\n    and sum(nums[::-1], 1) == 10\n    and sum(nums[::-1], 2) == 10\n    and sum(nums[::-1], 3) == 10\n    and sum(nums[::-1], 4) == 10\n    and sum(nums[::-1], 5) == 10\n    and sum(nums[::-1], 6) == 10\n    and sum(nums[::-1], 7) == 10\n    and sum(nums[::-1], 8) == 10\n    and sum(nums[::-1], 9) == 10\n\nThis is a great example of how a decent syntax for functions can make a program much easier to understand. The example code in the article uses \"nums\" as an argument to specialFilter. But how many programmers read an expression like that and think \"ok, this is clearly a function called specialFilter\"?", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\"\n    if nums[0] > 10:\n       return nums[0] + 2    # First digit is even\n    else:\n       return nums[1] + 2    # Last digit is odd\n\nThis is a great answer, but I feel it's somewhat the wrong kind of thing for SO. It's not a great answer to the question \"How do I write a function to check if first and last digits are odd\", it's a great answer to the question \"How do I write a function to write a function\".\n\nIsn't that an honest and accurate answer though?\nIt's a valuable answer, but it's not an answer to the question asked.\nI agree with OP. This is the wrong kind of thing for SO.\n\nI think the question is vague enough that it's possible to interpret it as asking for both a function that returns an answer and a function that is used by the answer to get the answer.\n\nAgreed. I think that the question is vague enough that it's possible to interpret it as asking for both a function that returns an answer and a function that is used by", "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\" \"\"\""]]