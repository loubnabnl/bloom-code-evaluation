[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.endswith(string.find(string.endswith(string.find(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string[::-1]))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').end())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda x: x[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string[::-1]))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1] + string.split('a')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1] + string.split('.')[::-1] + string.split('.')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a'))[::-1] + string.find(string.find('a'))[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith('c'))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1] + string.split('a')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string[::-1]))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').reverse()))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')).reverse() + string.find(string.find('a'))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1] + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.split('a') + string.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.endswith(string.find(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.end", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse() + string.split('t').reverse() + string.split('a').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-z", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('').reverse().join(string.split(''))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a'))[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').end())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1].reverse() + string.split('.')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1]) + string.reverse(string.find('a'))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith('c'))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.endswith(string.find(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.end", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.endswith(string.find(string.endswith(string.find(string.endswith(string.find(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string.endswith(string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a'))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string.split('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1] + string.split('cata') + string.split('.')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a').reverse().find('a", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-z", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-z", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1] + string.split('-')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a')) + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string.find('a') + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.endswith(string[::-1]))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('a'))[::-1] + string.find(string.find('a'))[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-z", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse().startswith(string.find('.').reverse().endswith(string.find('.').reverse", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.') + string.find('c'))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').end())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.').reverse().join(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.split('.')[::-1] + string.split('.')[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.')[::-1], string.find('.')[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse().startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.').startswith(string.find('.').endswith(string.find('.'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find(reversed(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse() + string.find('a').reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find(string.find", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(lambda s: s[::-1] == string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse(), string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('.').reverse())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\" \"\"\"\n    return string.find(string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-zA-Z0-9]', string.find('[^a-z"]]