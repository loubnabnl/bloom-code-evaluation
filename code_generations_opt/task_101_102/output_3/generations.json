[["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for i in range(0,len(s)):\n         word = s[i]\n         return []\n\nI wish someone would do this in real life.\n\nDoesn't Python have this already?\n\nThis is a functional programming joke...\n\nAh, I'm not much of a functional programmer.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = s.split(' ')\n    return words.split(' ')", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    first = \"\".join(s)\n    words = []\n    for word in first:\n       words.append(word)\n    return words\n> > > > How can I write a function to do this?\n> > > >\n> > > > Thanks,\n> > > >\n> > > > Dave\n\n[-- Attachment #1: Type: text/plain, Size: 2598 bytes --]\nI have a couple of questions about the way you are approaching this\nproblem.\nThe first question is, why do you need a function to do this? It sounds\nlike all you need is a list comprehension. If you want to learn how to\nuse list comprehensions, I suggest you read the tutorial at\n<http://docs.python.org/tut/list-comprehensions.html> and review the\nexamples at the end of the tutorial.\nThe second question is, why do you want to do it this way? What is it\nabout the way you have attempted to do it that you don't understand, so\nthat you need a function?\n\nThere are many ways", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return s.split(\",\")\nA better example would be:\nwords_string(\"\", \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nreturn words_string(\"\".join(\" \", words_string(\"One, two, three, four, five, six\")))\n\nI would have thought that the answers should be more similar. Why?\n\nThe first example is taking \"Hi, my name is John\" and splitting it up. It\nreturns an array of words, then an empty string. The second example is\ntaking a string like \"One, two, three, four, five, six\" and joining it up\nwith all the words separated by a comma.\nIt's actually a little tricky to get the first example right. The\nsecond one is definitely correct though.\n\nNice catch. I'll update the post to use the correct examples.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    def split(s, delimiter):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task\n    is to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    for word in s[1:] + s[0]:\n        if word not in words_list:\n           words_list.append(word)\n         else:\n            words_string.append(word)\n    return words_string</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words_array = []\n    for word in s:\n       if word[0]!='':\n          break\n          words_array.append(word)\n    return words_array\nYou can also use list comprehension here to simplify your code. I assume that you don't want the empty words to be returned.      words_array = []      for word in s:           if word[0]!='':                 break               words_array.append(word)\nThanks!  That does exactly what I want.\nI was taught that you can also use `x[:]` to remove an element from a list, if you don't want to use a list comprehension.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    word_list = []\n    for char in s:\n        word_list.append(char)\n    return word_list\nI think the code is self-explanatory.\n\nI'm sorry, I must be missing something here. What is the point of the _s variable? If I understand the code correctly it should be:\nword_list = []\nfor char in string:\nword_list.append(char)\nreturn word_list\n\nIf you want to split all the strings in a text file you might do:\nfor line in open('some-text-file.txt'):\nfor word in line.split(':'):", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # We can remove the trailing spaces\n    for s in s:\n        yield s\n    # The following is a piece of magic, a series of functions that will remove\n    # any characters that are not allowed, and then split the remaining text\n    # into words.\n    words = re.sub(r'[\\s\\S]+','',s)\n    for w in words:\n        if w in re.DOTALL:\n            continue # if the string is not all lower case\n             continue # if there is another character that is not allowed\n              continue # if there is not a space or a dot in the string\n              continue # if the string is not all upper case\n              continue # if there is another character that is not allowed", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return words_split(s.split())", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n\nwords_string = words_string.replace(\" \", \" \")\n\nfor word in words_string:\n         if word == \" \", then\n             return []\n         else:\n              words_string[word] = word\n\nreturn words_string", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n         # Split the word into its components, ie\n           # in the first example, split the word \"Hi\" into \"Hi\" and \"my\"\n            words = word.split()\n          # Now check if the words are in the dictionary\n           if len(words) == 1:\n               return words\n             else:\n               return []\n             # If there is no match return an empty array\n             return []\n    return words\nThis is from the Learn Python the Hard Way book by Zed Shaw. I don't see what's wrong with it.\n\nI'm not sure what you're getting at with the code. The point of the example is that the", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [w for w in s if word(w) in w]\n\nWhy not just use a regular expression?", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    # Get the first word\n    while s.find(x for x in words if word_count(x) == 1):\n        words.append(x)\n    return words\nI think it's better to call it \"words_separated\" to avoid confusion with a string of words, like words_string() returns.\nI also think the implementation should be simpler. If the input is a string, why do you need to search the whole string for the first word? Just take the first character and ignore the rest.\n\nI don't like the term 'words_separated' because in some languages, including Python, the two terms are the same (Python treats \"words\" and \"strings\" as synonyms).\n\nThat's a good point.\n\nThis is a really silly question, but what's the correct way to look up a word_count? I feel like I'm missing something obvious...\n\nWords_count(x) is a function.\n\nYeah, I figured that out. Thanks.\n\nI wish there were a 'delete this post' button.\n\nThey do have", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [str(i) for i in s.split() if i.startswith(' ') and i.endswith('') and not s.endswith(' ')]\n    def words_list(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task\n    is to split the string into words and return an array of the words.\n    \n    For example:\n    words_list(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_list(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return [str(i) for i in s.split() if i.startswith(' ') and i.endswith('') and not s.endswith(' ')]\n\nReferences\n\nExternal links\n\nfind and replace\n Python tutorial (free pdf, section 1.3", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = re.search(r'', s)\n    return [word for word in words if word.find(\" \") == -1]\nI think your regex is broken: it will fail to match one of the following strings: \"One, two, three, four\" or \"One,two,three,four,five,six\"\n\nYep, I am very aware of that! I just wanted to make sure I didn't throw in an extra feature which people may not need.\nHowever, I could easily add this.\n\nYou should definitely add it to the tutorial code.\nI'm not sure what the \"correct\" way to handle the case of multiple spaces is, but I can think of a few ways to make your code more robust. Here's one that would return an empty list if the string contains no words, but will return the word list if it contains one or more words:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return '.'\n    else:\n        return split(s, sep=',')[0]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = {}\n    for word in s:\n        words.append(word)\n    return words\nOne, two, three, four, five, six</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    x = string.punctuation.findall(s)\n    x = x.strip()\n    for word in x:\n        if word.startswith(\":\"):\n           # this is a new line\n           x = x.strip()\n        elif word.startswith(\":\"):\n            # this is a new line\n            x = x.strip()\n        else:\n            # this is not a new line\n            x = x.strip()\n        return [word.strip() for word in x]\n\nI love how the code is perfectly indentified.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # Get the first word\n    first = \"\"\n\n    # Split the string on the first space\n    words = s.split(\" \")\n\n    # Get the next word\n    next = s.next()\n\n    # See if the current word is the last word\n    if next:\n        return next\n    else:\n        return next, words\n\nreturn words, first", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = [\"\"]\n    while s:\n         if word in s:\n              words.append(word)\n         else:\n              words.append(s)\n    return words\nSo this basically does a linear scan of the string. It'll be much faster if you use a regular expression instead.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = list(s)\n    return words\n    def words_string_1(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a list of the words.\n    \n    For example:\n    words_string_1(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string_1(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return list(s)\nyou don't need the return words statement, return words_string and words_string_1 will be the same in this case.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return []\n\nSo much simpler. It's also much clearer to the reader of your code what it's doing.\n\n\"it's also much clearer to the reader of your code what it's doing.\"\n\nI would argue that this is not the case. The reader of your code needs to take in the surrounding context and infer the meaning of your function name.\nI just look at a list of words and go \"ok, what does this do?\". I immediately see that I'm supposed to take that list and break it up into words. It doesn't require any thinking.\nYour name has all these implied meanings that I have to take into account to understand it, and that takes up space in my brain that I would rather use for actually understanding your code.\nSo in conclusion, your code is more complex and less readable than the original.\n\nI would agree that the example in the article is more concise and easy to understand for a newcomer.\nIt does not, however, take into account that the string is not guaranteed to be a single word, i.e. it may contain multiple words. I'd imagine the author would argue that this is a problem for another day.\n\nWhat's wrong with just", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    a =''\n    while not a:\n       a = a.strip()\n       if len(s) < len(a):\n          break\n        a = a[:-1]\n    return a", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n        if word not in words_words:\n             words_words[word] = True\n        return words_words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        words.append(word.split())\n    return words\nfor i in range(3):\na = words_string(i)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n       if word in words_list:\n          words_list[word] = True\n          return words_list\n       elif word in words_list_1:\n          return words_list_1\n       elif word in words_list_2:\n          return words_list_2\n       else:\n          raise ValueError(\"Expected a word but got %r\" % word)</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # return \"\", words_string(s)\n    for word in s:\n        return [word]\n    return words_string(s)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    #Get all the spaces\n    words = list(s.split())\n    words = [w for w in words if w.startswith(' ')]\n    words = [w for w in words if w.startswith(' ') or w.endswith(' ') or w.endswith(' ')]\n    #Split the list in words\n    words_array = []\n    for word in words:\n        if word.startswith(' ') or word.endswith(' ') or word.endswith(' '):\n            words_array.append(word)\n    return words_array\n\nThat seems to be the correct way to do it.\n\nThank you, i got the right answer now!</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) <= 2:\n       return []\n    else:\n       return []", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if not isinstance(s, unicode):\n       raise ValueError(\"The string is not a unicode string.\")\n\n    lines = []\n    words = []\n    for char in s:\n       if char == ',':\n           continue\n       else:\n            if char =='':\n                words.append(word)\n                 words = [word]\n                 lines.append(word)\n                 lines.extend(line)\n                 break", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n        # For each word in the string\n           # Get the word\n            # For this example, we'll be using the method get_word()\n            # Get the word\n            word_str = get_word(word)\n           # Split the word at the commas\n            # We have to split the word at the commas because the commas are\n             # inside of the string", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n         if word is not ',' or'':\n              words.append(word)\n    return words\nThere's a simpler way to write that:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return f' '.join(split(words,''))\nI always liked this approach.\n\nUsing split() is generally a bad idea.\nUsing the standard library is generally a good idea.\n\n_Using split() is generally a bad idea._\nWhy?\n\nIt will work, but it's not very efficient. \"It will work\" is not good enough for most performance sensitive code.\n\n_Not very efficient_ in what way? It is obviously more efficient than the technique described in the article.\n\nThis one is pretty standard in Python, and the article is kind of a dumbed down version of it.\n\nThat's not how you spell _unicode_\n\nI've never used python so I don't know if this is idiomatic, but I'd probably do something like this:\nwords = []\nfor s in string.split(' '):\nwords.append(s)\n\nThat's more idiomatic:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    def split(s):\n       return lambda s: words_string(s[0] + s[1] + s[2] + s[3])", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [word for word in s if word.strip().startswith(space) or word.strip().startswith(',')]\n\nIt's not the most elegant solution, but it works.\n\nIt's also called \"brute force\".\n\nThank you.\n\nthis is better:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    s = string.split(s, ',')\n    words = []\n    for word in s.split():\n        words.append(word)\n    return words\n    def words_list(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a list of the words.\n    \n    For example:\n    words_list(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_list(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = []\n    for word in s.split():\n        words.append(word)\n    return words\n    def words_sets(s):\n    \"\"\"\n    You will", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return [None]\n    else:\n        return s.split()\nI know its not the best way to do this, but it does the job in the example.\nIt would be better to use split() instead of split(), but I'm not sure if the split() function exists in python 2.7, so I just used split() instead of split()\nYou can do this in 2 lines in Python 2.7</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [word for word in s if word.isalpha()]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return words.split(\",\")", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n        if word not in words_list:\n           words_list[word] = True\n    return words_list", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word not in words:\n            words.append(word)\n    return words\nI'm not sure what you mean by \"I'm not sure that I can just concatenate all the words together\". If you are given a string of words, then the words are already concatenated together.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    n = 0\n    for i in range(len(s)):\n        if s[i] == \"\":\n            n = n + 1\n        if s[i] == \",\":\n            n = n + len(s)\n    return n, s\n\nfrom collections import deque", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return string.split(s, commas, spaces)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n          s = s[i:]\n          words = []\n          for word in s:\n             if word.strip() == '':\n                 words.append(word)\n                s = s[i:]\n                break\n    return words\n    def words_array(words_string):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your\n    task is to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for i in range(len(s)):\n          words.append(i)\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) <= 2:\n       return \"\";\n    return re.split(' ')\nYes, I got that. The example you gave just didn't help clarify anything.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    while words!= s:\n        words.append(s)\n        if s[1] =='':\n            words_string(words)\n            return words\n        elif s[1] == ',':\n            words_string(words.pop(1))\n        elif s[1] =='' and s[0] =='':\n            words_string(words.pop(1))\n        else:\n            return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return s\n    else:\n        words = s.split()\n        return [(word[0], word[1]) for word in words]\n\nreturn map(words_string, list(words_string(str))\n\noutput:\n\n[['hi','my', 'name', 'is', 'john'], ['one', 'two', 'three', 'four', 'five','six']]\n\nfor most of us\n\nfor most of us reading this list, this should be a new thing, the above is a really cool technique, I am just bringing it to your attention, if you use this in your code, please acknowledge me, thanks!\n\ntry-except-finally\n\ntry-except-finally is a technique to handle exceptions in a try-catch block.\n\nThe technique goes like this:\n\nCode:\n\ntry:\n    statement\n    except:\n          statement\n    finally:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) > 1:\n         return [s[0] for s in s]\n\nSorry, I should have stated that this is in Python 2.7.\n\nThe explicit return in the last line is causing the program to never return.\n\nthank you!</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # This function will return an array of the words in the string.\n    return [str(i) for i in range(len(s)):]\n    def str(word):\n    \"\"\"\n    This function returns the string that is the reverse of the word.\n    For example:\n    str(\"abc\") == \"ab\"\n    \"\"\"\n    return word[len(word) - 1:]\n    def words_words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a dictionary of the words.\n    \n    For example:\n    words_words_string(\"Hi, my name is John\") == {\"Hi\": \"My\", \"name\": \"Is\", \"John\"}\n    words_words_string(\"One, two, three, four, five, six\") == {\"One\": {\"two\": \"Three\"}, \"two\": {\"three\": \"Four\"}, \"three\": {\"", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word not in words:\n           words.append(word)\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return re.findall('', s)\nHow can we be sure this isn't a buffer overflow vulnerability?\n\nThis isn't meant to be a general-purpose words_string function. It is meant to work only with single-line input, and it does a very basic job of splitting it into words. It does not try to do any kind of buffer checking or length checking, it simply splits up the string into words.\n\nAt least it only accepts single-line input.\n\nThat's true, but in practice most of the time you'd be using something like this you'd be using it to transform single-line input into something useful (or to transform a long list into a single line for a command).\n\nI thought it was pretty good too, but it's missing a few options that I would have liked to have:\n\\- Only accept a single line of input. This one is in there, but it's not the default.\n\\- Don't allow words that start with a letter or underscore, since that's usually the delimiter. This is not in there.\n\\- Allow a list of delimiters to be specified, so the user can choose.\n\nActually, I thought it", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for s in s:\n        if s.startswith(''):\n           return []\n        else:\n           return s.split(' ')\n    return []", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return \" \".join([word.lower() for word in s.split()])\n\nYields the same as your C#.\n\n> def words_string(s):\n>    \"\"\"\n>    You will be given a string of words separated by commas or spaces. Your task\n>    is to split the string into words and return an array of the words.\n>    \n>    For example:\n>    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n>    \"\"\"\n>    return \" \".join([word.lower() for word in s.split()])\n>\n> Yields the same as your C#.\n\nWe need to parse the string not split it.\n\nThat's what I get for skimming!\n\nWell, I've done something similar before, but I think", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n        if word.isalpha():\n            words_string(word.split())[0] = word\n            words_string(word.split())[1:] = list(word.split())[1:]\n    return list(words_string(s))\nMy code actually worked without errors, which I'm proud of. I've been practicing my programming skills lately.\n\nGood job.\n\nThank you! :)\n\n\"Your code will be reviewed by a human who will rate your skills on a scale from 0 to 100. You will receive a score report within 48 hours of your code submission.\"\nWell that's cool, I guess.\n\nThe code is also posted on the webpage, but I wanted to mention it here in case someone didn't see it.\n\n_You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words. For example:_\nI feel bad for the person who had to write that.\n\nWhat", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    n = len(s)\n    words = []\n    for c in s:\n        if c == \":\" or c == \"\":\n           words.append(c)\n         break\n    return words\nIf only the first word is not a string, then you're going to get some error messages about \"expecting a string\".  You can't append a non-string.\nI think the correct way to do this is:       for c in s:\n        if c == \":\" or c == \"\":\n            words.append(c)\n           break\n\nI know. It's meant to be an exercise.\n\nexercise in what?\n\n...in string splitting\n\nWhich has nothing to do with python.\n\n...and that is relevant how?\n\nIt is relevant because you posted in the python forum.\n\n...and this is the python forum. This is a question", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = string.split(s)\n    return [w for w in words if w.lower() in [\"a\",\"an\",\"the\",\"of\",\"a\",\"to\",\"to\",\"too\",\"two\",\"too\",\"three\",\"to\",\"four\",\"for\",\"five\",\"five\",\"of\",\"six\",\"of\"]]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = s.split(\" \")\n    words_array = []\n    for word in words:\n        if word not in words_array:\n           words_array.append(word)\n    return words_array", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n         return words_split(s, i)\n    return array(words_split(s))", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [' '.join(s) for s in s.split()]\nAha! Noob mistake. What you're doing here is a dictionary lookup. If you want to iterate through a string, you need to do a 'for' loop.\n\nInteresting, I'll try that.\n\nFor future reference, you can make a string into a list and iterate through it like this:\nwords_list = words.split()\nwords_list = [' '.join(words) for words in words_list]\n\nGood point. I'll remember that.\n\nAs an FYI, the \"split\" function in Python is a bit different than what you'd expect in C. It returns a list of strings (or a single string if there is only one string in the input).\nNote the difference between the following two lines:\n>>> split(\"Hi, my name is John\") ['Hi','my', 'name', 'is', 'John'] >>> split(\"Hi, my name is John\")\n['Hi','my', 'name', 'is', 'John', 'Hi','my', 'name', 'is', 'John']\n\nI really like the", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    s = re.split(s, \"\\s+\")\n    return ['word1', 'word2',... 'wordN']\n\nI really like this approach. I wouldn't have thought of it. It's really simple too.\n\nI came up with it when I was writing a function to find the number of words in a string. I started with something like \"if len(s) == 0:\", then I realized that the function itself would be a lot shorter and clearer if I just did a split at the start of the string.\n\nOr maybe this one:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return list(set(re.split(r' ',s)) for r in re.findall(r' ',s))</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [word for word in s.split() if word.strip() in [' '] and word not in [' ', '.', '\\\\', '\\.']]</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if s.startswith(' '):\n       s = re.sub(r\"\\n\", s.split(), 1)\n    elif s.startswith(':'):\n       s = re.sub(r\"\\n\", s.split(), 2)\n    else:\n       s = s.split()\n       return [word.strip() for word in s.split() if word]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    word_words = {}\n    for word in s:\n        word_words[word] = []\n    return word_words\nThis looks good, but you will have a hard time convincing me it will be fast.\n\nYup, this is going to be your bottleneck.\n\nTry this \n\nIs there a particular reason you're using list.reverse()?\n\nIt's the code I was given as an example.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if s.startswith(\" \"):\n        return s\n    else:\n        return words_split(s)\n    return words_string", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if \" \" in s:\n        return []\n    words = s.split(' ')\n    return [words[0], words[1:]].split()[1]\n> This also works, but I am not sure if it is the best way to do it.\nWell, your method doesn't require a split() function, so that's the way I'd\ngo.\n\nThis might be a good opportunity to bring up something I've wondered about\nfor a while, and you guys seem like the people who would know: why are the\nregular string functions so slow? I've done a lot of work in Python,\nPHP, and Ruby, and the string functions in the first two are orders of\nmagnitude faster than the ones in Python (of course, the lack of Unicode\nsupport in PHP is a pretty big deal too).\n\nThat is an excellent question. I've been doing a lot of reading on Python\nperformance, and I think the answer is basically that Python is designed\nfor dynamic, interactive use. It's fast for that, but not necessarily for\nlow-level, number crunching stuff.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return list(split(s, ',', 2))\nVery simple!</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return split(s, \" \")", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [x[0] for x in words_string.split()]\nI don't get the point of this example. I mean, you're going to be using the dict built into Python anyway, so why is that example included?\n\nI actually learned a lot from this. I'm new to Python and this was very well explained and concise. Thanks!\n\nThanks!</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return sorted(s.split())[0].split()\n\nI can't believe I'm the only one that wrote a solution for this. I think it's a good problem and I've seen it in job interviews.\n\nCan you say more about what you liked/didn't like about the solutions you've seen?\n\nI like this one because it uses sorted. It feels better than just using split to me.\nThe other solutions I've seen just use the list comprehension version of this.\n\nI have a similar question: How can I take a string and return a list of the vowels in that string?\n\nwords = [w.strip() for w in s.split() if w.strip() in ['a','e','i','o','u']]\n\nOkay, I could have thought of that. How about the reverse, take a list of vowels and build up a string?\n\nWords = ['a','e','i','o','u'].split()</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words_words = []\n    for word in s:\n       if word =='' or word == '\\n':\n          words_words.append(word)\n    return words_words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return []\n   \nI should have thought of that.   But how do I return the last word of the string?", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n        word = word.lower()\n        words_array = []\n        for character in word:\n            if character not in '', ',', '-' or '_':\n                words_array.append(word.upper())\n                break\n               return words_array", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = set(s)\n    return word_split(words, s.strip())", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # split into words using a given delimiter (e.g. space, comma)\n    words = []\n    # for word in words_string(s):\n    #  add word to the words array\n    if word.strip() in [' ','']:\n        words.append(word)\n    # print the words\n    print(words)\n    # return words\n    return words\n\n__all__ = [\"words_string\"]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # Check for a single word.\n    return str.find(\" \")!= -1\n    # Check for a space.\n    return str.find(\" \") == 0\n    # Check for a comma.\n    return str.find(\",\")!= -1\n    # If nothing matches, return the whole string.\n    return str", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    words_list = s.split(',')\n    if len(words_list) == 1:\n        words.append(words_list[0])\n    else:\n        words.append(words_list[1])\n    return words\nLooks to me like you're asking for a dictionary.  And if you want an array, try adding to the dictionary.  The dictionary will contain an index for each word that will point to the corresponding array index.\nI'm not sure I understand your question.  Are you trying to determine the index of a word in a list?</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return string.split(s, \",\")\nI've been using this approach for a while now and it's nice and simple. I prefer it to the split() function which doesn't give you a list of the words.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [s.split()[0] for s in s.split(',')]\nAha!\nI've always thought it was a bit weird that the other answers were using the `split()` method on the string.  The `words_string` method is much more succinct, and it's what I would have expected from the prompt.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # line 1: split string on spaces\n    s = re.split(' ')\n    # line 2: convert each word to upper case\n    s = re.sub('[A-Za-z0-9]', uppercase)\n    # line 3: split each word at the space and return array\n    words = s.split(' ')\n    words = words[1:]\n\nThis is why Python's list comprehensions are great.\n\nYes. I would not write this in python (but I don't know python), but I think this is a very good python snippet to illustrate his point about lists/collections.\n\nThis is a very good example of the joy that list comprehensions bring.\nHowever, note that this is not the general solution, as it does not handle punctuation. A more general solution would be:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return \" \".join([int(x) for x in s])", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = words_string.split()\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word == ',':\n           words.append(word)\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word.isalpha():\n           words.append(word)\n    return words\nI would use this, but remove the if word.isalpha() and instead use:       for word in s:\n            if word[0] == '_' or word[1] == '-' or word[2] == '.':\n                words.append(word)\nThis is shorter and more readable.\nThe isalpha() is probably doing something that's unnecessary (though I can't say for sure without examining the code).\n\nMostly because that breaks when words aren't separated by spaces or commas.\n\nNot sure what you mean by this. Perhaps you mean that if a word has multiple spaces then it will be parsed as multiple words?\n\nNo. If there is a space and a space, it will be parsed as two words, etc.\n\nOh, yes. Of course.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return words_split(s.split(), \",\")\nAnother alternative:\nfrom collections import deque\ndeque.drain()\nwords_string = \"Hi, my name is John\".split()\nwords = deque.take(words_string, 1)\nwords[0] = \"Hi\"\nwords[1] = \"my\"\nwords[2] = \"name\"\nwords[3] = \"is\"\nwords[4] = \"John\"</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [str(x) for x in words_string]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return string.splitlines(s, sep=' ')\nOne of my pet peeves is how much code is in that line.\n\nThe code is very dense, but what do you mean by \"much code\"? If you mean the amount of characters in the code, I think you're being a little unfair. It's not even a full line of code.\n\nNo, I meant the amount of code in the line. There's no reason to make a function that has a single line and does one thing.\n\nSure there is. Often it is more readable and the logic is easier to follow. The ability to read and understand code is more important than the number of characters in the code.\n\nThis makes me want to try using Python again. I'm surprised Python is not mentioned in the article.\n\nOne reason it may not be mentioned is that the article was written over 10 years ago, before Python was as popular as it is now.\n\nSure, but Python has been around since 1991, and is still rather obscure.\n\nI'm not sure it's still \"rather obscure\", even in 2006. I mean, it was already used by Google for search, and had a growing list of", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = re.split(s, ',')\n    for word in words:\n        if word.startswith('A'):\n           words += [word]\n        else:\n            words += [word]\n    return [word]\n* return \"your code is shit\"\n\nCouldn't this just be:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word.strip() == \" \":\n           words.append(word)\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    word_list = []\n    for i in range(len(s)):\n       if s[i] == ',':\n          word_list.append(s[i])\n    else:\n          word_list.append(s[i])\n    return word_list", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s)!= 1:\n        return []\n    words = s.split()\n    words_list = [words[0].strip() for word in words]\n    return words_list", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return array(split(s, \" \", 1))\nI like this solution, but it has a problem: it doesn't handle cases where one of the arguments is a string.  So, if your data structure looks like this:\nwords_string = {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string = {\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nwords_string = {\"The\", \"color\", \"of\", \"the\", \"nest\", \"was\", \"green\"}\nThe first string works, but the others will fail.\n\nThat's a good point. Perhaps we should have a look at the whole premise. Maybe the way to go is to just use python's built-in string module:\n>>> words_string = words_string.split(\" \", 1)\n[ (\"Hi\", \"my\", \"name\", \"is\", \"John\"), (\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"), (\"The\", \"color\", \"of\", \"the\", \"nest\", \"was\", \"green\") ]\n\nI don't think that's a good solution. It", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return split(s, ',')\nWhy use split?  You can use split() to split it into words, but you don't need to use it.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        if (str(i) == ',') or (str(i) ==''):\n            words_string.append(s[i])\n    return words_string", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [l.lower() for l in re.split(s, \",\") if l.startswith(s)]\nI think you need to use \"l.startswith(\" instead of \"l.startswith(\")\", but otherwise this is a good solution.\nI am also curious if you have to use string.split() or if you can get away with just using string.split()?\nWhy?</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    count = 0\n    for c in s:\n        if c =='' or c == '\\t':\n            count += 1\n          else:\n             return words_split(c)\n    return count", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # Split the string using the given separator (e.g., \",\" or \" \").\n    words_string_lines = []\n    if len(s) > 1:\n       words_string_lines.append(s[1])\n    else:\n       words_string_lines.append(s)\n    words_string_lines.extend(re.sub(\" \", \" \", words_string_lines))\n    return words_string_lines", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n        word = word.lower()\n        return word.split()\nI think this should be      return word.split(\":\")</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words_list = []\n    for word in s:\n        words_list.append(word)\n    return words_list", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    returndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [str(word) for word in s]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # split words into words\n    words = list(split(words_string, sep=',', maxsplit=1))\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if s == \"\":\n       return []\n    words = s.split()\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for c in s:\n        words_string(c)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # split into words\n    words = [word.strip() for word in s]\n    return words\nThis is the only answer that should be in this thread.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = list()\n    for word in s:\n         if word not in words:\n             words.append(word)\n    return words\nYour best bet is to read the docs for list, its only method.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # Split the string into words\n    def split(s, sep):\n        # Take the words as a list\n         return words_list(s, sep)\n        # Take the words as words\n         words = re.split(s, sep)\n        return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [w[0] for w in words_string.split() if w]\nThat looks quite a bit like the __split__ method that is provided by python itself.\nI can't see any significant performance advantage of doing it in C++.\n\nThat's because there isn't. In fact, the C version is actually faster.\nI wrote a benchmark of several string splitting implementations in Python, and the C version always won.\nIt's not a big enough win to warrant porting to C, but it's still a win.\n\nAny pointers on the C version?\n\nNot yet, but I'll try to remember to post it.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for s in s_list:\n        if s.endswith('.comma'):\n            words.append(s)\n        else:\n             words.append(s.replace(' ', ''))\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return words_split(s, \"\\s+\")\nI'd go with this.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [word[0] for word in words_string.split()]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # Split the string into words\n    words = re.findall(' ', words_string)\n    for word in words:\n        if word in re.dic:\n           return word\n           return [word]\n    return [word]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        words.append(word)\n    return words\nAs in:        words_string(\"Hi, my name is John\")                        == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]  and        words_string(\"One, two, three, four, five, six\")                    == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nA better way to make this is to return the string you want the words to be in and then use indexing to find the words:       def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return re.findall(' ').splitlines()\nThis is how I would do it in Python.\nThe Python split() function uses a regular expression to split a string into words.\nHowever, I don't know how regular expressions work, so I would probably do it like you.\nI'm not sure whether the Python way would be faster or more memory efficient.\n\nI would probably do something like this:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = s.split()\n    return []\n\nWhen I saw this I immediately thought \"What if the string contains commas?\" and \"What if it doesn't?\" because you didn't handle both cases. So I did the following:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n\nreturn [word.strip() for word in s]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = ''\n    for word in s:\n        words = words.lower() + word\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    while len(s) <> 0:\n        words.append(s.rstrip(chr(0)) +'' + s.rstrip(chr(1)))\n        words.append(s.rstrip(chr(2)) +'' + s.rstrip(chr(3)))\n        words.append(s.rstrip(chr(4)) +'' + s.rstrip(chr(5)))\n        words.append(s.rstrip(chr(6)) +'' + s.rstrip(chr(7)))\n    return words\nHow do you get rid of the space between the last word and the comma? I tried       words_string(s)   but that returned       [\"Hi\", \"my\", \"name\", \"is\", \"John\"]       instead of       [Hi, my name is John]\n\nThe article is in python", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    word_count = 0\n    word_string = s.strip()\n    for word in word_string:\n        if word.strip() == s.strip():\n            word_count += 1\n            word = word.strip()\n    return [word]\n\nI would even remove the if word.strip() == s.strip() because it won't make a difference at the end anyway.\n\nIn python, the.strip() method doesn't return the character itself, but a new string that just has the character stripped out.\nIn the example above, this means that the method only returns the first element of the array if the string contains an equal number of commas and spaces.\n\nCorrect! Thanks for catching that.\n\nI'm also a big fan of the underscore.py library.\n\nIt's true. He can't leave them alone.\n\n+1 for alliteration\n\nI always use _.split() for that.\n\nThis is a great tip, thanks!\n\n\"return\" is", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return sorted(words_split(s))", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for s in s:\n       if s[0] == \",\":\n          break\n        words.append(s[1:] + s[1:-1])\n    return words\nOne, two, three, four, five, six</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return \" \".join(list(s.split()))\nThis will return a list of strings. If you want the array form, it's pretty trivial to convert to:\nreturn [\"\".join(list(s.split())) for s in words_string(s)]\nor\nreturn [\"\", \"\".join(list(s.split())) for s in words_string(s)]\n\nI don't know why the OP wants to return a dictionary. A dictionary is a form of mapping, which has a different purpose than a list of words.\nHowever, if you really want to return a dictionary, you can do this:\nreturn {\"foo\": \"bar\"}\n\nI have this at the top of my file:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for s in s:\n        word = s.rfind(' ')\n        words = []\n        for word in word:\n            words.append(word)\n    return words\nYou do realize that this is horribly inefficient, right?\nI know its a joke... but if your going to do something like this, at least do it right.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [[words[0] for words in s] for words in [s[1:]], s[2:]], s[3:]], s[4:]],\n    s[5:]], s[6:]], s[7:]], s[8:]]\n\nThis is a good example of the old \"it's okay to do it slow, as long as it's fast enough\" dictum.\n\nIt's not even that slow.\n\nBut I wouldn't call it fast enough. I'd definitely call it _too slow_.\nI think an order of magnitude is a large enough gap for that to be true, no?\n\nIf you want to write an elegant solution then yes.\nBut if you just want something that works then no.\n\nBut it doesn't work if the user just types fast. Which makes it useless as a solution, imo.\n\nIt will still work for most people though.\nI mean, I don't think anyone is using this as a real world solution. It's just a toy.\n\n\"Whoops, looks like there was a typo.\"\n\nSounds like something that'd be fun for a beginner to write. I", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # Get the string\n    s = s.decode('ascii')\n    # Get the length of the string\n    len(s)\n    # Split into words\n    words = s.split(' ')\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = str.split(',', 1)\n    words[0]\n       if words.count(0) == 1:\n          words[0] = words[1:]  # There are one or more spaces at the end.\n       else:\n          words[0] = words[2:]  # There are more than one spaces at the end.\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return word_indexing(s, -1)\n    def word_indexing(s, -1):\n    return s.split()[-1].split()[-1]\nIf you're splitting the string as a whole, I don't see why you need the -1.\nSince there is no such thing as an empty string, there is never a situation\nwhere you'd have to return -1.\nI would just do the split on the whole string and return the first element.\nThat would be as fast as you could get.\n\nNote that doing it this way is faster if the string is very long, as you\ndon't need to iterate over the whole string. However, if the string is\nvery short, it may actually be faster to iterate, because you can avoid\nallocating memory for an intermediate list.\n\nYou might also try iterating over the string once, splitting the string\ninto a list, and then using that list to split the list into an array of\nstrings. You can still use the same list, and it will be faster than using\nan intermediate list.\nYou can find a discussion of this approach in", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    s = sub(r\"\"\"\n    Hi, my name is John\n    \"\", \" \", r\"\"\"\n    One, two, three, four, five, six\n    \"\", \" \", r\"\"\"\n    if s.find(\",\") == 0:\n        return []\n        return s", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        return [x[i] for i in s[:len(s)]]\n\nPython is case-sensitive, and that's why the following will not work:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [word[i] for i in s]\nNow this is where it get's interesting. The following code does not work:\nwords_string(\"This is a string\")\nOne of the expected outputs of this code would be:\n[\"This\", \"is\", \"a\", \"string\"]\nHowever, instead the output is:\n[\"This\", \"is\", \"a\", \"string\", \"This\", \"is\", \"a\", \"string\"]\nThe reason for this is that Python returns the list of words as a tuple, and the string in the tuple is not the same as the one returned by the split function.\nIt seems that the only way to get the same string back is to create the string with the return value of the split function. In this case the code is:\nwords_string = split(words_string, \" \")\nDoes anyone know why Python returns the list of words as a tuple?</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n        words.append(c)\n    return words\n\nThe easiest way to parse that is to go over it line by line. For a \"hello world\" parser, that's pretty much as far as you can go. The next step is to use a tokenizer to break down the line into tokens. If you're working with python, I'd recommend the itertools module.\n\ntokenizer = tokenizer.split(\" \")\nwords = [word for word in tokenizer if word in words_string.split(\" \")]\n\nNow you can start building a grammar. It's much easier to understand than it is to do, so I'll leave it at that for now.\n\nCode:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for c in s:\n         if c == ',' or c =='':\n             return [c]\n    else:\n             return [c]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    while s.endswith(\"\\n\"):\n        if len(s) > 1:\n             words = s.split(\",\")\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    n = len(s)\n    words = set()\n    for i in range(1, n - 2):\n        if s[i] =='':\n           break\n           words.add(s[i])\n    return words\nI don't see the point of this question.\n\nWhat's the point of any question? It's a simple puzzle that serves to measure logical reasoning and problem solving skills.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = re.compile(\"[0-9A-Za-z_][a-zA-Z0-9_]*\", re.IGNORECASE)\n    return words.splitlines()\nThis is a Python 3 version of your code.\nimport re\n    def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = re.compile(\"[0-9A-Za-z_][a-zA-Z0-9_]*\", re.IGNORECASE)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = list(s)\n    for word in words:\n        if word.startswith(' '):\n            break\n            word = word.split(' ')\n    return [word for word in word.split(' ')]\n    def word_to_list(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your\n    task is to break the string into individual words and return a list of\n    the words.\n    \n    For example:\n    word_to_list(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    word_to_list(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    list = []\n    for word in s:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    a = [word.strip() for word in s]\n    return a\n\nBeautiful. Thanks.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    result = []\n    for word in s:\n       if word not in stop_words:\n          result.append(word)\n    return result\nNote that the output format is slightly different to that given. The '#' is\nnecessary to make the output correctly parse as an int.\n\nReverse words:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = string.split()\n    # words may have been split into multiple parts\n    for w in words:\n       words[w] = w\n\nHi, my name is John,\nOne, two, three, four, five, six\n\nThe original string was split into multiple words. Words which have been split can be retrieved with words[w]. If you look at the output of the program, you can see that the string 'Hi' is in the first index position and the string'my' is in the second index position.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n         if word in words:\n             words.append(word)\n             return words\nThis can be written more succinctly, if you know that words are never separated by spaces:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [w for w in s if w.lower() in word_lower() else''.join(w) for w in word_lower()]\nI hate to be that guy, but shouldn't you change the output to something like:\n['Hi','my', 'name', 'is', 'John']\n\nHeh, yeah. You're right. I guess it's a good thing I didn't post this on reddit. They would've eaten me alive.\n\nI posted the following function on reddit recently:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        words.append(word)\n    return words\n\nReferences</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return words_split(s)\nWell, maybe I'm missing something, but shouldn't it be one of:\nwords_split(s)\nwords_split_words(s)\nor\nwords_split_split(s)\nI like the second one best since it has the double meaning of split the string and split the list, as is, in the example code.\nAlso, words_split(s) is ambiguous with split(s) as a function.\nBut, I'm definitely missing something here.\n\n_'words_split(s) is ambiguous with split(s) as a function.'_\nNo, it's not.\nsplit(s, sep) --> list(s)\nwords_split(s, sep) --> list(s)\nwords_split_words(s, sep) --> list(s)\nwords_split_split(s, sep) --> list(s)\nwords_split_split_words(s, sep) --> list(s)\nIn some cases, this can be confusing. But it isn't ambiguous.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n       if word.isdigit():\n          return word\n          word = word.strip()\n    return word.split('')\nThat's not the fastest way to do it, but it's probably the simplest.\n\nI think \"is\" is a reserved word. I know in python, if a function is \"is\" then it's not callable.\n\nIn this context, \"is\" is a variable (which is being passed to the function). It's not being used as a function name.\n\nAhh, thanks for the clarification.\n\nI'm always surprised at the number of \"hackers\" who don't know how to use a regular expression.\n\nI'm always surprised at the number of \"hackers\" who are smug and rude to people asking simple questions.\n\nYou know, I find it really interesting that so many people use the word'smug' to describe my comments. The definition of that word is:\n1\\. having or showing an excessive pride in oneself or one's achievements.\n2\\. affectedly", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n         # split the string into words\n        words = re.split(s,'')\n        return [w for w in words if len(w) > 1]\nHow are you supposed to do this in Python?</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    word_list = []\n    for word in s:\n        word_list.append(word)\n    return word_list", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return s.split(' ', 1)\n\nThe above is Python 3.2+ code.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return []\n    return split(s,'', 2)\nThat's the same algorithm I have. The reason for my question is that this code runs in O(n) time, as opposed to O(1) time. I was wondering if there was a better way to do this.\n\nMy point was that in this case, the words are contiguous. So, there's no point in splitting on a character boundary. A naive O(1) implementation (the one that splits on whitespace) is actually the correct answer.\n\nAh, I see what you mean. Thanks.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in s:\n        if word.startswith('-':) or word.endswith('-':):\n            words.append(word)\n            words = words.sort(key=lambda x:x[1])\n           return words\n\nI've used this for parsing, and I'm fairly confident it is the most straight-forward solution. This is similar to a solution I saw in [1], but I'm not sure how different it is.\n\nAs far as I can tell, the main difference is the use of a regex in the first solution, while the second one uses a string filter (a function that returns True if a substring is found). I've written a bit about using string filters to do string matching in Python:\n\nThe regex approach is probably more efficient, though, since it's written in C.\n\nI've always been in the habit of using.replace() instead of.replaceAll() with a regex. This way, you can specify", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [w.strip().split(\" \")] + []\nThat's better than mine, but I think your solution is slightly flawed. What if the words are all the same length? If the words are all one character, your code will never return anything.\nEdit: I just made mine return a list with a single element.  I think it's more robust.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # e.g. split the string at spaces, and return an array of the words\n    # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    return [w.strip() for w in words_string.split(' ')]", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = re.split(r'\n      ', words_string)\n    words_array = []\n    for word in words:\n        words_array.append(word)\n    return words_array\n\nTo be honest, I did not understand what is the use of this code. Can you please provide a use case? I understand that you want to split the string into words, but that is a pretty straightforward thing to do, and the code above seems overly complicated.\n\nThis is a simple code to demonstrate how to split strings in Python. It's also a good introduction to some standard Python libraries like re (regular expression).\n\nI don't think this is an introduction to regular expressions. You are not showing how to use them at all. You're just using them to split strings which is not the purpose of regular expressions.\n\nThis is a discussion forum for people who are new to programming.\n\nThis is not a discussion forum, it's a Q&A site. And the question is about a code snippet.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # First split the string into words\n    # Then return an array of the words\n    words = list(split(words_string, sep=' '))\nreturn words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return re.split(r' ', s)\nI'm sorry, but what's wrong with that?\nIt might have been better to list it as \"def words_string():\"  but it's not the worst thing I've ever seen, especially considering there is a python comment and the function is only one line.\n\nIt's not \"wrong\" per se, but it's poor code.\nIt's bad code because there is no error handling.\nI've got a function that accepts a list of values and if there is a \"Zero\" (it's a number) in there, it should return \"Zero minus 1 is a Number\".\nInstead, the function simply returns \"Zero minus 1 is a Number\" if there is a \"Zero\" in there, and \"Zero minus 1 is not a Number\" otherwise.\nIt's like this:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return list(re.split(s, \"\\t\", 1) for s in re.findall(' '))\n    def words_array(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_array(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_array(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return list(re.split(s, \"\\t\", 1) for s in re.findall(' '))\n    def words_string_with_spaces(s):\n    \"\"\"\n    You will be given a string of words separated by spaces. Your task is\n    to split the string into words and return an array of the words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = s.split()\n    print len(words)\n    print words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return sorted(s.split())\nIt is good to use sorted() to make sure that you get the words in the order that you expect.\nAnd, if your strings are not necessarily words, e.g. you are working with a different alphabet, you may want to use something like this:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = raw_input(s)\n    words_to_split = [word[0] for word in words if word.strip() not in words_to_split]\n    return words.split(word_to_split)\nI like this solution.  Maybe next time I'll try to use python instead of perl.\n\nI used to do this in C++.\n\nI did something very similar in C, but I just checked whether the first character was a space, a comma, or a letter.\nIt's a very simple problem with a very simple solution.\n\nI did this once in perl, but I just took the first character of the string and returned the character itself.\n\nMeh. I did this in Ruby.\n\nIn C, you can just use strtok(string, \"[\" \"\\t\"]\"). The [] aren't part of the string, so this only breaks on commas and spaces.\n\nIn Python, you can just use the built-in split().\n\nI did this in Python.\n\nI did this in Clojure, but I just took the first character of the string.\n\nI did this in", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        return s.split()\n\nIs this one you just picked up and read? I'm not trying to be condescending, I'm really just curious. I don't know what to do when I see a code snippet like that, and I know there are a lot of programmers out there that aren't sure what to do either.\n\nI think that's the point. It's a challenge to solve it from scratch.\n\nI was actually being sincere. When I see code snippets like that I don't have any idea what to do with them. I can't immediately figure out what the problem is, or if there is any problem at all. It's just a jumble of symbols, I feel like I'm being handed a key and told to go inside a door, but I have no idea where the door is or if I'm even supposed to go inside.\n\nIt's a whiteboard coding challenge. So you are supposed to find out the problem yourself, not be told the solution.\n\nI know. That's exactly what I'm saying. I", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    list = list()\n    return list.split(s)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    try:\n        words = re.split(r'\\s+')\n        for w in words:\n            print(w)\n        except re.MatchError:\n           print(s)\n\nThis was a question on HackerRank last week. They were testing for the obvious bugs, and to see if you understood the code.\n\nThat's still bad design. Even with the except clause, if I've got a bug that causes the exception, I've got a silent bug.\n\nI don't think anyone thinks that's good design.\nI think the point of the question is to see if you're using regular expressions correctly and how to handle the exceptions.\n\nI guess I'm the only one who sees a massive security hole in a language that allows you to control the flow of execution with a string.\nWhat is stopping someone from making a new string that's a command line that executes a shell script?\n\nYou've got the wrong idea. It's a Python function.\n\nNo, I think", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    try:\n        words = []\n        for word in s:\n            if word in word_list:\n                 words.append(word)\n        except:\n            print \"Unexpected %s\" % word\n        return words\n   \nThis is not a very good solution. It is not very efficient, it fails\non unexpected words and it does not work with some punctuation.\nThe solution is to build a list of characters, split the string into\nwords, and then get the first character of each word.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    a = range(0, len(s), -1)\n    if len(a) > 1:\n       a = a[:-1]\n       for w in s:\n          if w[0] == ':' or w[-1] =='':", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n\nreturn [word for word in s.split() if word.startswith(s[-1]))", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words_string = []\n    for s in s_string:\n        for word in s.split():\n           if word == \"\":\n              words_string.append(word)\n    return words_string\nIt's not clear if it was meant to return a dictionary or an array or something else.\nThe code has a bug anyway:\nwords_string(\"A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z\")\nshould return [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n\nD'oh!</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [x.strip().split(\",\")[0]]\n    def count_words(words_string):\n    return words_string.count()", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [\"string\", \"split\", \"is\", \"\"]\nI think that's the second worst of all possible answers, with \"Hello, world!\" being the worst.  It's probably right, but the code doesn't read well.\nYeah, I'm sure you can do it better. It's an academic assignment though, and I don't think the professor is looking for perfection.\nAh.  And, of course, you're right.  What would the professor have to say if the student had written:      def words_string(s):          return \"string\", \"split\", \"is\"\nThat would have been better.  He is making sure they can get the correct answer, not the most elegant.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    n = len(s)\n    for word in s:\n        if word.find(' ')!= -1:\n           word = word.split(' ')\n           n--\n    return [word[0], word[1:] for word in n]\nThis is perfectly valid Python, and will return exactly what you're asking for.  Python doesn't have a function for doing this.\nThanks, I did not realize this. I thought the Python interpreter would not allow something like this, but I suppose it's just a matter of how it's being handled.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return ''.join(s)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    print \"Input: %s\" % s\n    l = s.split()\n    for i in range(1, len(l)):\n        print \"[%s]\", l[i]\n    print \"Words: %s\" % len(l)", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) < 3:\n       return []\n    else:\n       for word in s:\n          if word in word_list:\n             return [word]\n         else:\n             return []\n    return word_list\nI would never write this. I'd write a `split` method or a method `split_on_comma`. It's more explicit and less prone to bugs.\nYes, it's more code but the code is simpler and has less bugs.\nThis is my experience with using dynamic languages (mostly Python and Ruby) for the past 5-7 years.\n\nI don't think it's fair to imply that all dynamic languages are like that, though. If you look at e.g. Clojure, you'll see a dynamic language that gives you just about as much power as Ruby in terms of dynamicism, but whose defaults are very different.\n\nI'm not sure why you think that. He's", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # A couple of helper methods to split the string into words, this is a\n    # simple greedy implementation of the Levenshtein distance algorithm\n    def split_words(s):\n    \"\"\"\n    Given a string of words separated by commas or spaces, split the string\n    into words using the Levenshtein distance algorithm. This works by\n    finding a word in the dictionary that is as close as possible to the\n    word in the string. If the word in the string doesn't exist in the\n    dictionary, or the string is shorter than the dictionary, return an\n    empty dictionary.\n    \"\"\"\n    d = {}\n    for word in s:\n       if word in d:\n           return d[word]\n       d[word] = None\n    else:\n           return d\n    return d\n    def split_words_no_catches(s):", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    #If the string is empty, the function should return an empty array\n    if s == \"\" or len(s) < 1:\n    return []\n    #Split the string by spaces\n    s = r\"\"\"\n      Hi, my name is John\n      One, two, three, four, five, six\n    \"\"\"\n    #Split the string by commas\n    #Get the first word\n    first_word = s[0]\n    #Get the last word\n    last_word = s[len(s) - 1]\n    #Split the string into an array of words\n    words_array = s.split(\"\\n\")", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    # Split the string into words.\n    for word in s:\n        if word in [\":\", \",\"]:\n            return word\n    else:\n            return []\n   \n    return [word for word in words_string(words)]\nWhat kind of problem is this? You're supposed to figure that out on your own.\n\nDoesn't it read like a beginner programming exercise?</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    print(\"Given string: \")\n    print(s)\n    for word in s:\n       if word in word_list:\n          return word_list[word]\n          return []\n    return []", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = [\"\",\n    \"\"for w in s:\n        words += [w]\n        words[-1] = \"\"\"]\n    return words\nTo use this, you would have to import it, and then do something like the following.  I put the code in a function called split_words() which takes a string argument and returns an array of the split words.  You could also use this inside a loop:        for w in split_words(my_string):", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for word in s:\n         # split the word at the first space\n            # if the word ends in a space then add the space at the end\n             if word[-1] =='' and not word[-1] == '\\t' and not word[-1] in '\"' and not word[-1] == '\"' and not word[-1] == '\\t' and not word[-1] in '\"' and not word[-1] == '\\t':\n                # if it's not a word add a space\n                word[-1] = word[-1] +''\n                # or a tab if '\\t' is used\n                word[-1] = word[-1] + '\\t'", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n           if len(s) == 1:\n               return s\n            else:\n                return words_split(s,'', 1)\nI don't know about you, but I wouldn't trust a program that used a regex to do string splitting.\n\nI would just use a dictionary.\nwords_string = {}\nwords_string[\"Hi\"] = \"Hi\"\nwords_string[\"my\"] = \"my\"\nwords_string[\"name\"] = \"name\"\nwords_string[\"John\"] = \"John\"\n\nBut then you'll have to do this every time you add a new string to the dictionary, and will have to update the dictionary in every function that uses it. I think it's a better idea to use the string splitting function in this case, but it depends on the application.\n\nIf you're doing string manipulation in a function, you're probably using the right data structure. A dict isn't really the best choice if you're doing string manipulation.", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = sorted(set(words_string(s)))\n    return words\n\nAnother solution that I used to use for this type of problem:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    print \"Input: \",s\n    input_lines = [s]\n    print \"\n    Slicing: \",words_string(input_lines[0:2])\n    #print \"\\nSlicing: \",words_string(input_lines[3:6])\n    print \"\n    Slicing: \",words_string(input_lines[0:2])\n    #print \"\\nSlicing: \",words_string(input_lines[3:6])\n\nfor line in input_lines:\n    if line.strip() == \"\":\n        print \"\n    Slicing: \",words_string(line)\n\n[code:2zb7gjtr]\n\nHere, the issue is that the program is not putting the line.strip() in the input list to the words_string() function.   If it did, then the program would not be able to print the line.strip() in the loop.   Also, if you are not sure what a certain function does, it", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    for c in s:\n        if c.isdigit():\n          return c.split()\n    return []\nFor the second one, you want:", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    try:\n        return list(x.split())\n    except AttributeError:\n        return [x]\nyou don't have to return the result of that function. it's done when it returns `None`.\nIn Python3, it's done when it returns `<class 'list'>`, but that's not relevant here.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    a = 0\n    for word in words_string:\n        a, word_split = word.split()\n        if word_split == [] or a == len(words_string):\n            return []\n    return a\nIn python, you can just use split() and it'll do the same thing.       words_string = \"This is my string\".split()       print words_string\nYou get the same answer.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [s[1] for s in s.split(',')]\nNice and readable, I like it.\nBut it's O(n) for any length n.\nAnd it's one-pass.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    if len(s) <= 2:\n        return s\n    else:\n        words_string = s.split()\n    return words_string", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return word_split(s, \" \", 2)\nThat's the code I'm running. I want to run the \"word_split\" function but I don't know how.\nThe word_split function is in the \"nltk\" module. The only python docs I can find are http://docs.scipy.org/doc/scipy/numpy/reference/numpy.linalg.functions.html#nltk-word-split but that doesn't work.\nThank you for any help.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return np.array([chr(chr(x)[0]), chr(chr(x)[1]), chr(chr(x)[2]), chr(chr(x)[3]), chr(chr(x)[4]), chr(chr(x)[5]), chr(chr(x)[6]))\n\nNeat! But I always find it so much more readable to use \"words\" and \"split_words\" rather than \"s\" and \"x\", especially when the code is short.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return words_split(s,'')\nAh, the good old days when this was the only solution.</s>", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words_words = []\n    for word in words_string:\n        words_words.append(word)\n    return words_words\n\nI would also have accepted:\nwords_words = []\nfor i in range(len(words_string)):", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return re.split(re.split(s))", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for word in words_string:\n       words.append(word)\n    return words\na = words_string('')", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = s.split()\n    for word in words:\n        print(word, end=' ')\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for c in s:\n       if c =='':\n          continue\n          words.append(c)\n          words = words.pop(0)\n    return words\nI am not sure if this would be a good start to a python solution.  I am a C# developer myself but I thought that this would be a good start.  You would need to do some more error checking etc but I think that this is a good start.\n\nI'd probably do this:\nwords = [c for c in s if c is not None]\n\nThat works for simple cases, but what if you have words like \"and\", \"on\", \"in\", \"the\" etc. I think the way I wrote would take care of that.\n\nI was taught to use \"and\" etc. as one word - I don't think the problem is a big enough one to warrant dealing with it.\n\nIf you are doing the verification by hand, you can get rid of a lot of those if statements", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    words = []\n    for w in s:\n        if w[1] =='' or w[1] =='' or w[1] =='':\n            words.append(w)\n        else:\n             words.append(w[1])\n    return words", "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\" \"\"\"\n    return [w for w in s.split() if w.startswith(' ')]"]]