[["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0,len(numbers)):\n         numbers[i] = numbers[i] - 1\n    return numbers\n\n>>> from typing import List\n>>> [1,2,3,4,5,6,7,8,9] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> sorted(sorted(list(range(0, 10))) for list in sorted(list(range(0, 10))) if len(list) > 2)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> sorted(sorted(list(range(0, 10))) for list in sorted(list(range(0, 10))) if len(list) > 2)\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.split(' ')[-1]\n\nIt's probably worth noting that the last line is a classic example of a \"wrong\" solution to a problem. It's very fast, but it's not idiomatic Python.\n\nWhy is it not idiomatic Python?\n\nBecause Python is a functional language, and the sort_numbers function is not.\nIn a functional language, you would not write a function that takes a list of numbers and returns a list of numbers, because it would be redundant. You'd just write a function that takes a number and returns a sorted list of numbers.\n\nIf you're not using lists in a functional language, you're doing it wrong.\n\nNot if you're using a language like Haskell.\n\nThis is a fairly simple and obvious optimization, but it's still interesting to see. I've always wondered how Python does its sorting.\n\nThere's a good explanation in the Python documentation:\n\nI'm not sure what's so \"obvious\" about this. I've never seen anything like it before.\n\nThe function is called sort, it takes an iterable, and it sorts the iterable.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, len(numbers)):\n        numbers = numbers[i:i+1]\n        if numbers[i] < numbers[i+1]:\n                numbers[i] = numbers[i+1]\n                 numbers[i+1] = numbers[i]\n    return numbers\n\nNote: This is not a comment, it's just a little code snippet.\n\nNow I can't get it out of my head that there is an import called \"list\" in Python.\n\nI'm assuming it's a list of lists.\n\nIt's a list of strings, actually.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nI really wish python had a built-in way to do this.\n\nPython has a built-in way to do this:\n>>> def sort_numbers(numbers: str):\n...", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThis is the problem with languages that don't have sum types and type inference.\n\nIf you're using Python 3, you can do this:\n\nfrom typing import List, sum", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(numbers.count):\n        if numbers[i] < numbers[i+1]:\n            numbers[i] = numbers[i+1]\n    return sorted(numbers)\n\nThis is a terrible solution. I don't see why it's better than\nsort(numbers, key=lambda i: i)\nor\nsort(numbers, key=lambda i: i[1])\nor\nsort(numbers, key=lambda i: i[-1])\nor\nsort(numbers, key=lambda i: i[0])\nor\nsort(numbers, key=lambda i: i[1])\nor\nsort(numbers, key=lambda i: i[2])\nor\nsort(numbers, key=lambda i: i[3])\nor\nsort(numbers, key=lambda i: i[4])\nor\nsort(numbers, key=lambda i: i[5])\nor\nsort(numbers, key=lambda i: i[6])\nor\nsort(", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, 9):\n        numbers[i] = List(i)\n    return numbers\n\nI wrote this function for a coding challenge a while back, but it's too useful to keep to myself. It's a simple way to sort a list of numbers from smallest to largest.\n\nThis is not a very good function. There are a lot of better ways to sort numbers.\n\nOh, I know. It's just a simple example. I wrote it in about ten minutes. I was hoping to get some feedback on the way I did it.\n\nI think it's a fine example.\nI also think it's a fine function. It's a simple example of a function that does something. It's not the most efficient, it's not the most performant, it's not the most readable, but it's a function that does something.\n\nI agree.\nIt's a function that does what the user wants. It's a simple example of how to take a list of numbers and sort it. It's not the most efficient, the most performant, the most readable, but it's a function that does what it needs", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = [0]\n    for i in range(9):\n       if i % 2 == 0:\n          numbers.append(i)\n       else:\n          numbers.append(i)\n    return numbers\n\nI like this a lot, but I would make it a little more robust:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.reverse()\n\nThis is a great example of how to make a simple function in Python.\n\nI'm not sure I get it. What's wrong with the following?", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\nThis is a very cool trick, but I'm wondering why you would want to do this instead of just using the built-in sort() function?\n\nI guess the answer is \"because you can\".\n\nIt's not a trick, it's a feature.\n\nI love python's built-in type coercion. You can do so much with it.\n\nI love the \"from typing import *\" trick.\n\nWhat's the trick here?\n\nIt's a joke about Python's \"from __future__ import *\"\n\nI thought that was a joke about the fact that Python's `from __future__ import *` will be a feature in the future.\n\nI love the \"from typing import *\" trick.\n\nWhat's the trick here?\n\nIt's a joke about Python's \"from __future__ import *\"\n\nI thought that was a joke about the fact that Python's `from __future__ import *` will be a feature in the future.\n\nIt's a joke about the fact that Python's `from __future__ import *` will be a joke in the future.\n\nI love the \"from", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero nine'\n\nThat's a really nice idea, and it's obvious in hindsight.\nI'm sure there are other similar tricks.\n\nI'm not sure if it's obvious, but it's certainly a nice trick.\n\nIt is obvious, just not obvious to people who haven't seen the trick before.\n\nI have seen the trick before, and I'm not sure if it's obvious. I've seen it before, but I've also seen people not realize that Python has a built-in sort function.\n\nThat's a really nice idea, and it's obvious in hindsight.\nI'm sure there are other similar tricks.\n\nI'm not sure if it's obvious, but it's certainly a nice trick.\n\nIt is obvious, just not obvious to people who haven't seen the trick before.\n\nI have seen the trick before, and I'm not sure if it's obvious. I've seen it before, but I've also seen people not realize that Python has a built-in sort function.\n\nThat's a really nice idea, and it's obvious in hindsight.\nI'm sure there are other similar tricks.\n\nI'm not sure if", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda x: x[1])\n\nYou can't call the list constructor on an input string. You have to use a list comprehension.\n>>> from typing import List\n>>> list(sort_numbers('three one five'))\n[0, 1, 3, 5]\n\nThis is the correct answer.\n\nThis is the correct answer.\n\nI'm sure I'm missing something, but I don't see how this is the correct answer.\n\nThe code is the list comprehension:\n[0, 1, 3, 5]\n\nOh, I see. I thought he was saying it was correct to use the list() function.\n\nI'm not sure if this is what you are asking, but here's a simple solution that does not involve a list comprehension.\n>>> from typing import List\n>>> list(sort_numbers('three one five'))\n[0, 1, 3, 5]\n>>> print list(sort_numbers('three one five'))\n[0, 1, 3, 5]\n>>> print list(sort_numbers('three one five'))\n[0, 1, 3,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ')\n\nI'm not sure if this is the same as what you mean, but I've always found\nit to be a useful trick for getting the first element of a list:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ').sort()\n\nThis is a nice example, but the article doesn't really explain the benefits of using 'from typing import List'.\n\nThe point is that if you are using Python, you should be using the standard library. The standard library is a great resource, but it's easy to miss some of the great features it offers. The article was an effort to show one of those features.\n\nI think the point is that the example is trivial and can be done without importing the list module, so the example doesn't really show the benefits of using the list module.\n\nI think the point is that the example is trivial and can be done without importing the list module, so the example doesn't really show the benefits of using the list module.\n\nI think the point is that the example is trivial and can be done without importing the list module, so the example doesn't really show the benefits of using the list module.\n\nI think the point is that the example is trivial and can be done without importing the list module, so the example doesn't really show the benefits of using the list module.\n\nI think the point is that the example is trivial and can be done", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = [numbers[0] for numbers in numbers if sorted[numbers[0]] < sorted[numbers[1]]]\n    return sorted\n\nThis is a good example of how to write a function that is easy to use, but hard to understand. It's easy to understand what it does, but not so easy to understand why it does what it does.\nIf you want to understand the code, you have to know that it's based on the _strict_ comparison operator in Python.\nIt's also worth noting that it's not the _only_ way to do it. There are other ways to do it that would be more understandable to a novice Python programmer. For example:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ').reverse()\n\nI think the title should be \"from typing import List and string\"</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(numbers.length):\n        if i < numbers[i - 1]:\n            numbers[i - 1] = numbers[i]\n         numbers[i] = numbers[i - 1] + 1\n    return sorted(numbers.split())\n\nI think that it is a nice exercise to write a sort function that is not O(n log n)\n\nI think you're missing the point. This is not a sorting algorithm. This is a way to _sort_ numbers from a string.\n\nYou're right, I'm sorry. I got the impression that it was meant as an exercise in implementing a sorting algorithm.\n\nThe code is not as readable as it could be. The author could have used a lambda function instead of a for loop.\n\nThat's not a for loop, it's a lambda function.\n\nI know it's a lambda function, I was just saying that the code would be more readable if it was written in a lambda function instead of a for loop.\n\nThe code is not as readable as it", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.index(' ')", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) < 3:\n       raise ValueError, 'numbers must be at least 3'\n    numbers = numbers.split()\n    return numbers[::-1]\n\nI've been seeing this a lot lately. Why do people put spaces in their list literals?\n\nI'm guessing to distinguish the list from a dictionary or something similar.\n\nThe point of this example is that the list is so short it doesn't matter.\n\nSo is the point of the example to show that you can use type hints in Python?\n\nI think it's to show that you can use type hints in Python, and that the type hints will be checked.\n\nI think it's to show that you can use type hints in Python, and that the type hints will be checked, and that the type hints can be used to force Python to do the wrong thing.\n\nI don't think it's to show that you can use type hints in Python, and that the type hints will be checked, and that the type hints can be used to force Python to do the wrong thing.\n\nI think it's to show that you can", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(' ')\n    return 'zero one two three four five six seven eight nine'", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nI'm a little confused by the example. The code seems to be equivalent to:\nsort(numbers, key=lambda x: x[0])\n\nThat's exactly what I was thinking.\n\nThe code is equivalent to:\nsort(numbers, key=lambda x: x[0])\nBecause the function is called `sort_numbers`, not `sort_numbers_with_key`.\n\nThe title is a little misleading. This is just a way to sort a string. It doesn't have to be numbers.\n\nI think it's the \"from typing import List\" that's misleading, it's not a list, it's a string of numbers.\n\nI think it's more the fact that the title says \"from typing import List\" and the example uses a string.\n\nI think it's the fact that it says \"from typing import List\" and the example uses a string.\n\nI think it's the fact that it says \"from typing import List\" and the example uses a string.\n\nI think it's the fact that it says \"from typing import List\" and the example uses a string.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(key=lambda x: x[1])\n\nI don't know about Python, but in Ruby, you can do:\n(numbers.sort.reverse)\nand it will sort from largest to smallest.\n\nIn Python, you can do this:\n(numbers.sort.reverse.sort)\n\nSort.reverse is not a function in Python.\n\nWell, that's embarrassing. I was thinking of the wrong language.\n\nI don't think that's very useful. I'd rather just write:\nsorted(numbers)\n\nI think that's the point.\n\nThis is a good example of why Python is a great language for beginners, but not a good language for serious work. The Python community has a bad habit of not taking advantage of the language's more advanced features. I think this is due to the Python community being very much a beginner's community, and a lot of the more advanced features being added later on, which means that people don't learn about them when they're learning the language.\n\nWhat features are you talking about?\n\nI think he means the fact that Python has a very powerful metaprogramming system,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) < 3:\n        return numbers\n    else:\n        return sorted(numbers, key=lambda x: x[0])\n\nI wonder how fast that is. I imagine that it's probably more than fast enough for most applications, but that it might be faster to just use a dictionary for the keys and values.\n\nI'm not sure, but I think the reason for using lists in Python is that they're immutable, and you can't mutate them in-place.\n\nI don't know much about Python, but wouldn't a dictionary work just as well for that?\n\nNo. A dictionary is mutable.\n\nHow about using a list of lists?\n\nI don't think that would be any faster. The reason for using lists is that they're immutable, and you can't mutate them in-place.\n\nMaybe this is a dumb question, but what's the advantage of using lists instead of dictionaries?\n\nThe advantage is that you can't mutate them in-place. You can do a lot of useful things with immutable data structures.\n\nWhat", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, len(numbers)):\n        if numbers[i] > numbers[i+1]:\n            numbers[i] = numbers[i+1]\n    return numbers\n\n>>> print sort_numbers('three one five')\none three five\n\nIt's not as obvious as the Python version, but this is a good example of why it's a good idea to use Python's built-in types where possible.\n\nI don't think it's a good idea to use built-in types in Python. You're just asking for trouble.\n\nI think the point is that it is the \"best\" way to do it, not that you should do it.\n\nYou're probably right. I'm just being a grumpy old curmudgeon.\n\nI don't think this is a good example of why you should use Python's built-in types.\nIt's not hard to write a Python function that sorts a list of numbers. It's not even hard to write a Python function that sorts a list of strings. But it's a lot harder to write", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    for n in numbers:\n       if n == 0 or n == 9:\n          break\n         sorted_numbers.append(n)\n    return sorted_numbers\n\nThis is the way I'd do it.\n\nA little bit shorter:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return [numbers[i] if i in range(0,len(numbers) - 1)]\n\nI've never seen someone call it a string before.\n\nPython's strings are immutable.\n\nI see. I guess I don't do enough Python to know that.\n\nI think it's just a matter of preference, in the same way that Java programmers call everything an \"object\".\n\nI can't help but wonder what the point of this was. If you're going to import it, why not just use it?\n\nIt's a good way to get people to read your code. It's a bit of a meta joke.\n\nI wonder if this will work with Python 3.2's new \"from typing import *\" syntax.\n\nI'm not sure, but I'm pretty sure the \"import *\" syntax is only for modules.\n\nI thought it was for anything that is a type. For example, you could do:\nfrom typing import *", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n       numbers.sort()\n       numbers.sort('asc')\n       numbers.sort('desc')\n       numbers.sort('asc')\n       numbers.sort('desc')\n       numbers.sort('asc')\n       numbers.sort('desc')\n    return numbers.split(' ')\n\n_sigh_\n\nI'm not sure what you're sighing about. I'm not saying this is the best way to do it, but it's pretty clear and readable.\n\nI'm sighing because it's a perfect example of the problem with Python.\n\nIn what way is it a problem?\n\nIt's not as bad as Perl, but it's still a problem.\nPython's object-oriented nature means you can't do simple things without a lot of ceremony.\n\nThat's a feature of Python, not a problem.\n\nI disagree.\n\nIt's not a problem, it's a feature.\n\nI think it's a problem.\n\nI think you're a problem.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n    for i, v in enumerate(numbers):\n       numbers.append(v)\n       if v == 'nine':\n          numbers.reverse()\n    return numbers.sort()\n\nNow that's what I call a short and sweet answer.\n\nI think the title is a bit misleading. It should be \"from python import *\".\n\nI thought the same thing. I wonder if there is a good reason for the title?\n\nProbably because it's a post in the \"Python for Programmers\" series.\n\nI don't see any reason to make this a top level post, though.\n\nI think it's useful to have this sort of thing in the front page for a while. It's not always clear how to use the standard library and a quick one liner like this is a good way to show people how to do it.\n\nI agree, but it's a bit weird to have it as a top level post.\n\nI thought the same thing. I wonder if there is a good reason for the title?", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return '0'+numbers[0]+' '+numbers[1]+' '+numbers[2]+' '+numbers[3]+' '+numbers[4]+' '+numbers[5]+' '+numbers[6]+' '+numbers[7]+' '+numbers[8]+' '+numbers[9]\n\nI don't get it.\n\nIt's a Python list comprehension.\n\nWhat's the point of the example?\n\nI think it's to illustrate that the author thinks that the `from typing import List` syntax is a bad idea.\n\nI think it's to illustrate that the author thinks that the `from typing import List` syntax is a bad idea.\n\nI think it's to illustrate that the author thinks that the `from typing import List` syntax is a bad idea.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(' ')\n    sorted = []\n    while len(numbers) > 0:\n       if numbers[0] < numbers[1]:\n           sorted.append(numbers[0])\n       else:\n           sorted.append(numbers[1])\n    return sorted\n\nHow is this a \"deeper\" insight than the article?\n\nI think it's a deeper insight because it shows that Python's syntax is very simple and elegant, but that it's not a good idea to use it to write a library that's supposed to be used by others.\n\nIs that really an insight? I think it's more a truism.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in numbers:\n       if i not in range(0, 9):\n          break\n       numbers[i] = -1\n    return numbers\n\n>>> sort_numbers('two two six')\n'six two two'\n>>> sort_numbers('one two five')\n'five two one'\n>>> sort_numbers('four two seven')\n'seven two four'\n>>> sort_numbers('nine two zero')\n'zero nine two'\n>>> sort_numbers('one three five')\n'five five one'\n>>> sort_numbers('two three eight')\n'eight eight two'\n>>> sort_numbers('four two nine')\n'nine four two'\n>>> sort_numbers('six two five')\n'five six two'\n>>> sort_numbers('three two nine')\n'nine three two'\n>>> sort_numbers('one two eight')\n'eight two one'\n>>> sort_numbers('three two seven')\n'seven three three'\n>>> sort_numbers('one two seven')", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(key=lambda x: x[1])\n\nI'm not sure I'm understanding the point of this exercise. Why not just use a list comprehension?\n\nThe point is that it is not a list comprehension.\n\nOK, but is there a point to not using a list comprehension?\n\nYes.\n\nI'm still not getting it. Can you explain it?\n\nI am not sure I can explain it to you.\n\nThen I think your answer is not useful.\n\nI don't think I can explain it to you.\n\nThen I think your answer is not useful.\n\nI don't think I can explain it to you.\n\nThen I think your answer is not useful.\n\nI don't think I can explain it to you.\n\nThen I think your answer is not useful.\n\nI don't think I can explain it to you.\n\nThen I think your answer is not useful.\n\nI don't think I can explain it to you.\n\nThen I think your answer is not useful.\n\nI don't think I can explain it to you.\n\nThen I think your answer is not useful.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return '0 1 2 3 4 5 6 7 8 9'\n\nThis is one of those \"d'oh!\" moments. I've been doing a lot of python lately and it's always been easier for me to just use a list comprehension.\nBut I guess this is a bit more idiomatic for Ruby.\n\nIt's a bit more idiomatic, but it's also a bit more readable. I've never been a huge fan of list comprehensions.\n\nYeah, I'm not sure why list comprehensions are so popular.\n\nThey're concise.\n\nBut they're not readable. I guess I'm old fashioned.\n\nThey're more readable than a list comprehension, I think.\n\nThey're not.\n\nThe example given is wrong.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nI'm not sure what the point of this is.\n\nIt's a demonstration of how to implement a sorted list in Python.\n\nThis is a terrible implementation. It's not sorted.\n\nIt's a demonstration, not an implementation.\n\nIt's a bad demonstration.\n\nI'm not sure if this is a joke or not.\n\nI'm not sure if you're a joke or not.\n\nI'm not sure if I'm a joke or not.\n\nI'm not sure if I'm a joke or not.\n\nI'm not sure if you're a joke or not.\n\nI'm not sure if I'm a joke or not.\n\nI'm not sure if you're a joke or not.\n\nI'm not sure if I'm a joke or not.\n\nI'm not sure if you're a joke or not.\n\nI'm not sure if I'm a joke or not.\n\nI'm not sure if I'm a joke or not.\n\nI'm not sure if you're a joke or not.\n\nI'm not sure if I'm a joke or not.\n\nI'm", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    numbers.reverse()\n\nThis is great. I don't know why I never thought of this before.\n\nI find this kind of thing useful for one-off scripts, but I'm not sure I'd use it in a real program.\n\nYou'd be surprised how useful this can be in real programs. I use this sort of thing all the time in shell scripts.\n\nI use this all the time too. I find it very useful.\n\nAnd I'm sure there are other python programmers who use it, but I can't stand the style. I like my code to be readable and easy to understand, not terse and hard to read.\n\nI think it's a matter of taste. I like the style, and I find it easier to read than the equivalent amount of boilerplate.\n\nI would like to add that I have also found this very useful in the past. I've even used it in real programs.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sort(numbers.split(' '))", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return [numbers[0] for numbers in numbers if n < n + 1]\n\nimport string", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda x: x[0])\n\nI would have preferred", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return''.join(numbers.split(' '))\n\nI see no point in this.\n\nI can't see any point in the original either, but I can see a point in the sort_numbers version.\n\nThat's because the original was not meant to be a practical program. It was meant to illustrate the basic idea of list comprehensions.\n\nIt's also worth noting that the original doesn't work properly.\n\nI think it's a bit of a stretch to call that a list comprehension.\n\nI like list comprehensions, but the lack of support for comprehensions in the standard library means I use them rarely. I think the lack of support is a shame because they're quite a nice way of expressing things.\n\nI don't know much about python, but I'm pretty sure that list comprehensions are in the standard library.\n\nI think he means the lack of support for comprehensions in the standard library _for other data structures_, not comprehensions in the standard library.\n\nI think that's the case.\n\nAnd it's a shame because list comprehensions are a nice way of expressing things.\n\nI don't know much about python, but", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers)\n\nDoesn't that make it slow?\n\nIt is slow, but it is still a good example of how to use the \"typing\" module.\n\nI've always wondered what the point of that module was. It's not like it adds any functionality to the language.\n\nThe point of the typing module is to add some functionality to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the language.\n\nThe point of the typing module is to add some type-checking to the", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) > 0:\n       numbers = numbers[0]\n       numbers = numbers[len(numbers) - 1]\n       numbers = numbers[len(numbers) - 2:]\n       numbers = numbers[len(numbers) - 3:]\n       numbers = numbers[len(numbers) - 4:]\n       numbers = numbers[len(numbers) - 5:]\n       numbers = numbers[len(numbers) - 6:]\n       numbers = numbers[len(numbers) - 7:]\n       numbers = numbers[len(numbers) - 8:]\n       numbers = numbers[len(numbers) - 9:]\n       numbers = numbers[len(numbers) - 10:]\n       numbers = numbers[len(numbers) - 11:]\n       numbers = numbers[len(numbers) - 12:]", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nCan't believe I didn't think of that. Thanks!\n\nI don't know if this is useful for you, but here is a list of the built-in types:\n\nThanks, that's a good reference.\n\nI think the built in types are a great example of the flexibility of Python. It makes it really easy to write a DSL.\n\nI've been using Python for about a year now and still haven't found a good use for the built in types.\nI can see how they are useful in very specific situations, but I don't think they are a \"great example of the flexibility of Python\".\n\nIf you have a need for a type that is not in the standard library, you can easily write your own.\n\nI don't think that's what the GP meant.\n\nI'm curious what people use the built in types for. I have a few ideas but I'm not sure if it's worth the effort.\n\nI use them to make it easier to read my code, especially when I'm using list comprehension. I'll use a type to indicate what I'm doing with the list.\nFor example, if I have a", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n         return numbers.sort()\n\nThis is a good example of why you shouldn't use a list as a key. If you have a list of numbers, it is more natural to use a dictionary of numbers and their order, like this:\n>>> d = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n>>> d['zero']\n0\n>>> d['one']\n1\n>>> d['two']\n2\n>>> d['three']\n3\n>>> d['four']\n4\n>>> d['five']\n5\n>>> d['six']\n6\n>>> d['seven']\n7\n>>> d['eight']\n8\n>>> d['nine']\n9\n>>> d.sort()\n{'zero': 0, 'one': 1, 'two': 2", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers.split())\n\nI think this is a great example of how to make a python program much more readable.\n\nI'd be interested to hear if there are any more examples of this sort of thing.\n\nI've been using this for a long time. It's a huge help when you're dealing with a lot of different types of objects:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for i in numbers:\n       sorted.append(i)\n    sorted.sort()\n    return sorted.join(\" \")\n\nThis is a good example of how to do something in a clear and readable way.\nI would also add that I think this is a good example of how to do something in a clear and readable way.\n\nI think this is a good example of how to do something in a clear and readable way.\n\nThis is a good example of how to do something in a clear and readable way.\n\nI think this is a good example of how to do something in a clear and readable way.\n\nThis is a good example of how to do something in a clear and readable way.\n\nI think this is a good example of how to do something in a clear and readable way.\n\nThis is a good example of how to do something in a clear and readable way.\n\nI think this is a good example of how to do something in a clear and readable way.\n\nThis is a good example of how to do something in a clear and readable way.\n\nI think", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for i in range(1, 9):\n       sorted.append(i)\n    sorted.sort()\n    return sorted", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_n", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(key=lambda x: x[0])\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split()\n    return numbers.sort()\n\nThis is not the best code, but it does the trick:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(1, 9):\n        numbers[i] = numbers[i] + 1\n    return numbers\n\nThe correct answer is:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return ''.join(numbers[:-1])\n\nYou can save some typing by using the built-in function sorted:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nI don't get it. Is this meant to be a joke?\n\nno it's not. it's a functional joke.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThis is a good illustration of how to create a Python function. In this case, the function takes a list of numbers and returns a sorted list of the numbers.\n\nThe function is called sort_numbers, but there is no need to call it as sort_numbers(). This is because Python has a special syntax for functions. The function name is the first argument, and any additional arguments are passed to the function as positional arguments. For example, the function could be called as:\n\n>>> sort_numbers('three one five')\n    'one three five'\n\nThe parentheses are optional, but they can be used to avoid ambiguity.\n\nThe function takes a list of numbers, which is a list of strings. The function returns a string. The function uses the built-in function sort to sort the list of numbers. The sort function takes two arguments, the first being the list of numbers to be sorted and the second argument being the list to be sorted.\n\nThe sort function uses a comparison function to determine which element should be sorted first. In this case, the comparison function is the built-in function int. The comparison function is passed two arguments,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThis is a pretty cool trick, but the code is a bit on the long side.\nI think it would be even more interesting if the author could find a way to do this using only Python's built-in functions.\n\nYou can't sort integers in Python without using built-in functions.\n\nI think the parent was asking to use only built-in functions to implement the sort() function, not to use only built-in functions to implement the sort_numbers() function.\n\nThis is a great way to teach kids how to write programs. I've used it with great success.\n\nThe problem with this is that it does not teach the kids how to write programs. It teaches them how to use a library.\n\nI disagree. It's a great way to get kids interested in programming. It's not a great way to teach them how to write programs.\n\nIt's a great way to get kids interested in _using_ programming.\n\nI agree, I think you're right.\n\nI disagree. I think you're right.\n\nI agree, I think you're right.\n\nI disagree. I think you're right.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return ''.join(map(lambda x: x[1], numbers))\n\nI don't see why you wouldn't use a list comprehension.\n\nList comprehensions are only available in Python 2.x.\n\nOr in the upcoming 3.x.\n\nYup.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nI don't get it. What's wrong with this?\n\nYou don't need the type signature, it's implicit.\n\nI was just thinking about this yesterday. I am learning Python and I keep finding myself adding a type declaration.\n\nYou can use this:\nfrom typing import List, int\n\nThe example at the top of the article is the only place where I've ever needed type declarations. I don't use them in my own code, but I don't think they're useless.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them useful when I'm reading someone else's code.\n\nI find them", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return numbers\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers\n\nI'm not sure I get the point of this.\n\nIt's a parody of the \"import this\" meme, where someone will write a blog post about how great something is, and then write a little snippet of code that does nothing, and import it as \"this\".\n\nI would have thought the joke would be better with a different name.\n\nThis is the most hilarious thing I've seen all day.\n\nI was hoping for the string \"from typing import List\"\n\nI was hoping for:\nfrom typing import List as l\n\nI was hoping for:\nfrom typing import List as list\n\nI was hoping for:\nfrom typing import List as _</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'one two three four five six seven eight nine'", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers)\n\nfrom typing import List, string\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return sorted(numbers, key=lambda x: x[0])\n\nfrom typing import List, string\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers[0] == 'zero':\n       return 'zero'\n    elif numbers[0] == 'one':\n       return 'one'\n    elif numbers[0] == 'two':\n       return 'two'\n    elif numbers[0] == 'three':\n       return 'three'\n    elif numbers[0] == 'four':\n       return 'four'\n    elif numbers[0] == 'five':\n       return 'five'\n    elif numbers[0] =='six':\n       return'six'\n    elif numbers[0] =='seven':\n       return'seven'\n    elif numbers[0] == 'eight':\n       return 'eight'\n    elif numbers[0] == 'nine':\n       return 'nine'\n    return numbers", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for i in numbers:\n       if i not in sorted:\n          sorted.append(i)\n    return sorted\n\nI can't believe I'm going to say this, but this is an example of why Python's list implementation is a complete disaster.\n\nThis is not an example of why Python's list implementation is a complete disaster. This is an example of why Python's list implementation is a complete disaster, but this is not the reason.\n\nThis is a pretty bad example of a bad implementation.\nIt's not really a list. It's a string of numbers.\nThe code is not idiomatic.\nThe code is not even correct.\nThe code is not even well written.\nThis is what happens when you have a language that doesn't have a good list implementation. People try to use it for lists anyway, and then they get confused and write code like this.\n\nIf you don't like Python's list implementation, then why do you use Python?\n\nBecause I don't know of any other language with a good list implementation.\nI'm not saying Python is a", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    while numbers:\n        if numbers[0] > numbers[1]:\n           sorted_numbers.append(numbers[0])\n         else:\n            sorted_numbers.append(numbers[1])\n    return sorted_numbers\n\n\"sort_numbers\" is not a function, it is a method. The difference is that a function is a pure function (that is, it doesn't modify anything), whereas a method is a function that is defined inside a class.\n\nI know. I was just demonstrating a quick and dirty way to do it.\n\nI was wondering if anyone else was going to mention this. I'm surprised that nobody has.\n\nThe code is very confusing. I'm not sure what it does.\n\nI think it's a joke.\n\nI'm not sure if this is a joke or not. It's actually a pretty good example of how to use the built in sort function.\n\nI'm not sure if you", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import OrderedDict", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(1, 9):\n        if numbers[i] > numbers[i+1]:\n             numbers[i] = numbers[i+1]\n             numbers[i+1] = numbers[i]\n    return numbers\n\nNote that this is not the same as:\n>>> sort(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'])\n>>> sort(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'])\n>>> sort(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'])\n>>> sort(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'])\n>>> sort(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers[-1] == 'zero':\n       return numbers\n    else:\n       return sorted(numbers.split(' '))\n\nWhat's the point of this?\n\nIt's a joke about Python's inconsistent use of the \"from\" statement.\n\nI thought it was about Python's inconsistent use of the \"if\" statement.\n\nThe title is missing a comma.\n\nI think it's missing a period.\n\nI'm pretty sure it's missing a semicolon.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for i in range(0, len(numbers)):\n       if i in numbers:\n          sorted.append(numbers[i])\n    return sorted\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n           if i in numbers:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_n", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for number in numbers:\n       if number in range(1, 10):\n          return number\n       if number in range(2, 10):\n          return number\n       if number in range(3, 10):\n          return number\n       if number in range(4, 10):\n          return number\n       if number in range(5, 10):\n          return number\n       if number in range(6, 10):\n          return number\n       if number in range(7, 10):\n          return number\n       if number in range(8, 10):\n          return number\n       if number in range(9, 10):", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers:\n        numbers = sorted(numbers, key=lambda x: x[0])\n    return sorted(numbers, key=lambda x: x[1])\n\nI'm not sure what the point of this is. If you're trying to make a point about Python's \"one-true-way\" philosophy, I think it's a bit misguided.\n\nIt's a good exercise.\n\nI think it's a great exercise. It's also a great example of why Python is a good language for beginners.\n\nI don't understand why the author thinks that this is a bad thing.\n\nIt's a bad thing if you want to learn how to write good Python code.\n\nI think that's the point. It's a great exercise for a beginner, but I wouldn't want to use it in real life.\n\nI don't understand why the author thinks that this is a bad thing.\n\nIt's a bad thing if you want to learn how to write good Python code.\n\nI think that's the point. It's a great exercise for a beginner, but I wouldn't want to use it in real life", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers:\n       return 'zero one two three four five six seven eight nine'\n    else:\n       return 'zero one two three four five six seven eight nine'\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    if numbers:\n       return 'zero one two three four five six seven eight nine'\n    else:\n       return 'zero one two three four five six seven eight nine'\n\nfrom typing import List\n\n    def sort_numbers(numbers: str)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = [numbers]\n    for n in numbers:\n       if n > 0:\n          sorted_numbers.append(n)\n        else:\n          sorted_numbers.append('zero')\n    return sorted_numbers\n\nI prefer this version:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for number in numbers:\n       if number < 'zero':\n         sorted.append(number)\n       else:\n         sorted.append(number + 1)\n    return sorted\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ')\n\nThat's pretty much what I was going to post.\n\nHow about this one?", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(' ')\n    for n in numbers:\n        if n < 10:\n           return n\n         else:\n           return '0' + n +'' + n\n\nSo, this is a bad example. If you want to sort the numbers from \"zero\" to \"nine\", you have to \"split\" the input string, and then \"for\" over the string, and then \"if\" over the \"split\" string to get the list of numbers.\n\nYeah, that's a bad example, and in fact it's not even a Python program. It's a string of Python code.\n\nI don't think it's a bad example, it's just a bad title. The code is correct, but the title suggests it's a complete program.\n\nI think the code is wrong, actually. There's no way to tell if the input string is a number or not, so the program just returns the first ten numbers it sees.\n\nI'm not sure what you mean. I'm", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for i in numbers:\n       if i < 0:\n          sorted.append(i)\n       else:\n          sorted.append(i - 1)\n    return sorted.join(' ')\n\nThis is a great example of why the import is unnecessary.\n\nI know the code is not very idiomatic but it is a great example of how to use the built in functions of Python. I would like to see a more idiomatic version of this.\n\nThe built-in function is not the point. The point is the list comprehension and the fact that it is a function.\n\nThat's a pretty silly example to be making a point about the \"idiomatic\" way to do things.\n\nI find this example to be a good way to show people that Python is not just a scripting language. It is a very powerful language with the ability to do some pretty complicated things.\n\nIt's a good example of what Python can do, but it's not an example of idiomatic Python.\n\nThe code is", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, 9):\n        numbers[i] = numbers[i] / 10\n    return numbers\n\nfor i in range(0, 9):\n        print(sort_numbers(i))", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.split(',')[-1]\n\nI know it's a joke, but in case someone's curious about how to sort numbers in Python, the built-in sorted() function works fine:\n>>> sorted(list(range(10)))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nI don't know if this is the right place to ask this, but I'm curious if there's a list of Python idioms, like this, that are worth knowing.\n\nA good place to start is here:\n\nI'm not sure if this is a joke or not.\n\nIt's a joke.\n\nIt is indeed a joke. I'm not sure what's funny about it, though.\n\nIt's funny because it's a joke.\n\nThat's not what I meant. I mean, I can understand the joke, I just don't understand why it's funny.\n\nI guess it's funny because it's a joke.\n\nThat's not what I meant. I mean, I can understand the joke, I just don't understand why it's funny", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n       numbers = numbers.split()\n       return numbers[::-1]\n\nI can't imagine why anyone would want to write code like this.\n\nIt's a toy example. It's not meant to be used in production code.\n\nI think you missed my point. I'm not criticizing the code, I'm criticizing the _principle_ of it.\n\nThe principle of it is to illustrate the differences between the different sorting algorithms.\n\nYes, but it could have been done in a much more readable fashion.\n\nNo, it couldn't. The point of this exercise is to show how the different algorithms work. The code is a demonstration, not a library.\n\nThis is a toy example. It's not meant to be used in production code.\n\nI think you missed my point. I'm not criticizing the code, I'm criticizing the principle of it.\n\nThe principle of it is to illustrate the differences between the different sorting algorithms.\n\nYes, but it could have been done in a much more readable fashion.\n\nNo, it couldn't. The point of this exercise is to show how the different algorithms work. The", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero one two three four five six seven eight nine'\n\nI think the reason for the downvotes is that the problem is trivial and the code is not the cleanest.\n\nI'd like to see the cleanest code that does this.\n\nI would have written it as:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers\n\nThis is a common way to implement the algorithm, but it's not the only way.\nThe algorithm can be implemented as:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 0:\n        return 'zero'\n    else:\n        return numbers[-1]\n\nPython's built-in sort function is faster than this one, and has been since Python 2.0.\n\nIf you're sorting a list of integers, you should use the built-in sort.\nBut if you're sorting a list of strings, this is faster.\n\nIf you're sorting a list of strings, you should use the built-in sort.\n\nThe built-in sort only sorts strings, not strings of numbers.\n\nIt's true that the built-in sort function only sorts strings. However, if you have a list of integers, and you want to sort it, you should use the built-in sort function, not this function.\n\nThe built-in sort function only sorts strings, not strings of numbers.\n\nIt's true that the built-in sort function only sorts strings. However, if you have a list of integers, and you want to sort it, you should use the built-in sort function, not this function.\n\nThe built-", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nNow, I'm not a Python programmer, but I'm pretty sure that the following is valid Python.\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split()\n   .sort()\n   .reverse()\nI don't get it. Is this a joke?\n\nIt's a joke.\n\nHow does it work? I can't get it to work.\n\nThe code is not correct.\n\nI don't get it, it's not even code.\n\nIt's a joke.\n\nThis is funny.\n\nIt's a joke.\n\nThis is funny.\n\nIt's a joke.\n\nThis is funny.\n\nIt's a joke.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 0:\n        raise ValueError('number must be a string')\n    numbers = numbers.split(' ')\n    return sorted(numbers, key=lambda x: x[0])\n\nThis is a great example of why you should use a proper programming language.\n\nOr, in other words, a great example of why Python is a proper programming language.\n\nNo, it's a great example of why you should use a proper programming language that has proper tools for doing what you want to do.\n\nOr, in other words, a great example of why Python is a proper programming language.\n\nNo, it's a great example of why you should use a proper programming language that has proper tools for doing what you want to do.\n\nOr, in other words, a great example of why Python is a proper programming language.\n\nNo, it's a great example of why you should use a proper programming language that has proper tools for doing what you want to do.\n\nOr, in other words, a great example of why Python is a proper programming language.\n\nNo, it's a", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) > 0:\n        numbers.sort()\n    return numbers.split(' ')[0]\n\nThis is a nice example of how a single-purpose function can be more readable than a list comprehension.\nThe list comprehension is longer, but it's not immediately clear what it's doing.\n\nI don't think it's the length of the code that matters.\nIt's the length of the _concepts_ that matter.\n\nI think that length of code and length of concepts are correlated.\n\nI agree, but I think it's more that length of code and length of concepts are _both_ important, and that they are not necessarily inversely correlated.\n\nThis is a good point.\n\nI like the list comprehension, but I think the code is a bit longer than it needs to be.\nHere's a shorter version:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda i: i[0])\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero one two three four five six seven eight nine'\n\nI'm not sure what the point of this is. It's more verbose and harder to read than the original code.\n\nIt's a joke.\n\nI didn't get it until I saw your comment.\n\nThe point is that it's a joke.\n\nI don't get it.\n\nI've just added a README that explains the point of the joke.\n\nOh. I thought it was a joke on how you can do the same thing with Python's built-in string methods.\n\nThat's what I thought too.\n\nI think it's a joke about how Python's built-in string methods are _not_ as convenient as one might expect.\n\nI've never found them inconvenient.\n\nIt's a joke.\n\nI didn't get it until I saw your comment.\n\nThe point is that it's a joke.\n\nI don't get it.\n\nI've just added a README that explains the point of the joke.\n\nOh. I thought it was a joke on how you can do the same thing with Python's built-in string methods.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers[0] + numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5] + numbers[6] + numbers[7] + numbers[8] + numbers[9]\n\nI'm sorry, but this is just wrong.\nThe author of the code has done a very good job of explaining why it's not the correct way to do it.\n\nThe author of the code has done a very good job of explaining why it's not the correct way to do it, but has not done a very good job of explaining why it's wrong.\n\nI think the author of the code is just trying to explain why the code doesn't work. The code is wrong because it is not doing what the author wants it to do.\n\nI think the author of the code is just trying to explain why the code doesn't work, and the code is wrong because it is not doing what the author wants it to do.\n\nI think the author of the code is just trying to explain why the code doesn't work, and the code is wrong because it is not doing what the author wants it to do.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in numbers:\n        if i < 0:\n           raise ValueError('Input string must be non-negative')\n         else:\n             if i == 0:\n                return i\n              else:\n                return i + 1\n\nI know I'm nitpicking, but this is the sort of thing that makes me feel like I'm not really a programmer.\n\nI can't help but feel that this is a case of the solution to a problem being more complex than the problem itself.\n\nI've been trying to solve this problem for a while. I was wondering how hard it would be to make a simple sorting algorithm. This is the first time I've ever written a sorting algorithm, and I'm pretty happy with the result.\n\nI just started to learn python, so maybe I'm just missing something. But I don't understand", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(numbers):\n       numbers[i] = numbers[i] / 10\n    return ''.join(list(range(numbers))[-1])\n\nThis is a bad example. The problem with it is that it's not obvious what the function is supposed to do.\nYou would be better off with:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return '0' + numbers[0]\n\nI don't know how to feel about this.\n\nWhy?\n\nIt's a joke on the fact that Python's standard library is littered with functions with names like this.\n\nI'm not sure I get it. Is it a joke because the function does what it says?\n\nNo, it's a joke because it's so trivial.\n\nI find this a bit weird. What is the purpose of this? It's not a joke, I hope.\n\nIt's a joke. The author is just playing around.\n\nI see. I thought it was just a beginner's code.\n\nNope, it's a joke.\n\nIs it just me or are a lot of people posting jokes to HN lately?\n\nIt's not just you.\n\nIt's not just you.\n\nYou're not the only one.\n\nI'm not the only one.\n\nI'm not the only one.\n\nIt's not just you.\n\nIt's not just you.\n\nIt's not just you.\n\nIt's not just you.\n\nIt's not just you.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nI don't understand why this is so much better than:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThis is interesting. It's a nice demonstration of the difference between Python and Java (and C++, C#, etc.).\nIn Python, it is perfectly fine to have a function with a single statement as its body.\nIn Java (and C++, C#, etc.), you would have to have a variable number of statements.\n\nThe difference is that the Python code is not idiomatic.\nIn Python, it is idiomatic to write a function that returns a value:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nI like it. I'd probably do it like this:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n    return numbers.sort()\n\nI don't get it. What's the point?\n\nThe point is to show how to use Python's built-in List and built-in sort function.\n\nAnd then he goes on to use the built-in list comprehension and the built-in lambda expression, which aren't really related to the built-in list and sort functions.\n\nIt's not a very good example, but it's not _that_ bad.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 1:\n        return 'zero'\n    else:\n        return numbers[-1]\n\nIf you want to sort by the second element, you can do\nnumbers[::2]\n\nI was thinking about the same thing.\n\nI would also like to see this in a real language like Python.\n\nPython doesn't have the concept of a type hierarchy.\n\nIt's not a type hierarchy, it's a type system.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(' ')\n    return sorted(numbers, key=lambda number: number[1])</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(lambda x: x[1] - x[0])\n\nThis is Python 3.\n\nI would have expected it to return 'three, five'.\n\nThat's because you're expecting the order to be the same as the order in which the items are presented. In a list, the order is determined by their indexes. In this case, the first item is 'one', the second is 'three', and the third is 'five'.\n\nInteresting, I didn't know that.\n\nI wonder how many people will be fooled by this one?\n\nI would have been, if I didn't know that Python has a \"from typing import List\" statement.\n\nI'm not sure I would have been, because I would have known that a module named \"typing\" is probably a joke.\n\nI would have been, because I don't know what \"import\" does.\n\nIt's a neat trick, but I'm not sure it's a good idea.\n\nWhy not? It's a useful exercise to learn how to read Python code.\n\nI think it's a good idea, but I'm not sure it's a good idea to", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.index(0) +'' + numbers.index(numbers.length-1)\n\nI like this. It's a nice clean solution.\n\nI thought it was pretty clever, but I'm also a sucker for Python solutions.\n\nThat's a lot of code for a trivial problem.\n\nI wouldn't call it trivial. It's certainly a good exercise in coding style and design.\n\nI'm with you. I wouldn't call it trivial. It's certainly a good exercise in coding style and design.\n\nI think I'd just write a function to convert the number to a string and then sort the string.\n\nWhy not just use the built in sort() function?\n\nPython doesn't have a built-in sort function.\n\nIt does have a built-in sort function.\n\nIt does not have a built-in sort function.\n\nIt does have a built-in sort function.\n\nIt does not have a built-in sort function.\n\nIt does have a built-in sort function.\n\nIt does not have a built-in sort function.\n\nIt does have a", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return '0 1 2 3 4 5 6 7 8 9'\n\nThis is really neat, but it's not a Pythonic way of doing it.\nYou should use a sorted list of numbers instead of a string.\n\n\"Pythonic\" is a word that means different things to different people. I think it's a perfectly valid way to do it.\n\nIt's also perfectly valid to do it with a string, but it's not Pythonic.\n\nI think the term \"Pythonic\" is used to describe a way of doing something that is consistent with the rest of the language.\nFor example, the fact that Python is whitespace sensitive is a Pythonic way of doing things. It's consistent with the rest of the language.\nSorting with a string is not consistent with the rest of the language.\n\nI disagree. Sorting with a string is consistent with the rest of the language.\n\nI guess we'll have to agree to disagree.\n\nIt's a list comprehension. The point is to get you thinking about how to solve the problem. It's not supposed to be the best way to do it.\n\nThe point of a challenge is to solve it.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers\n\nI'm not sure what the point of this post is. It's a trivial function, and it's not even a good example of how to write a sorting function.\n\nIt's a good example of how to write a sorting function in Python.\n\nI think that's debatable.\n\nI think it's a good example of how to write a sorting function in Python.\n\nI think that's debatable.\n\nI think it's a good example of how to write a sorting function in Python.\n\nI think that's debatable.\n\nI think it's a good example of how to write a sorting function in Python.\n\nI think that's debatable.\n\nI think it's a good example of how to write a sorting function in Python.\n\nI think that's debatable.\n\nI think it's a good example of how to write a sorting function in Python.\n\nI think that's debatable.\n\nI think it's a good example of how to write a sorting function in Python.\n\nI think that's debatable.\n\nI think it's a good example of how to write a sorting function in Python.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import OrderedDict", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n    sorted = []\n\n    for number in numbers:\n       if number < sorted[0]:\n          sorted.append(number)\n          sorted[0] = number\n\n    return sorted\n\nThis is a good example of why list comprehensions are evil.\n\nI'm not sure what the problem is. Care to elaborate?\n\nWell, for one, there's no way to tell what the input is without reading the code.\n\nIsn't that the case with almost all function signatures?\n\nYes, but it's a lot more obvious what the input is with this one than with most others.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ').sort()\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(',')\n    return numbers.sort(key=lambda s: -s.length)\n\nThat's a really neat trick!\n\nYes, it is. This is a very interesting blog. I don't have time to read it now, but I'll bookmark it for later.\n\nA lot of the time I use Python, I'm in a situation where I can't install packages or libraries, so I'm really happy to find things like this.\n\nI just learned about the \"not\" operator. I am a noob.\n\nIf you're interested in this kind of thing, you should check out the \"Ruby for the Rest of Us\" book. It's a good introduction to Ruby.\n\nI'm not sure if it's just me, but I'm seeing a lot of Python code posted here, and a lot of it looks a lot like Ruby code. I've done a little Python, and I know a lot of Ruby, but I find it hard to tell them apart.\n\nThe big difference is that Python is whitespace sensitive, and Ruby is not.\n\nIs there a reason for that?\n\nI'm not sure,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers[0] == 'zero':\n       return 'zero'\n    else:\n       return 'one'\n\nI've always found this one to be pretty good:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(',')\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n < 9]\n    numbers = [n for n in numbers if n % 2 == 0]\n    numbers = [n for n in numbers if n % 3 == 0]\n    numbers = [n for n in numbers if n % 5 == 0]\n    numbers = [n for n in numbers if n % 6 == 0]\n    numbers = [n for n in numbers if n % 7 == 0]\n    numbers = [n for n in numbers if n % 8 == 0]\n    numbers = [n for n in numbers if n % 9 == 0]\n    return numbers\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n < 0:\n        return 'zero'\n    else:\n        return 'one' + n\n\nI'm not a python programmer, but I would have thought that sorting numbers would be a simple matter of comparing them and sorting them in order of smallest to largest.\nI guess I was wrong.\n\nYou are right. But this is a joke.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return''.join(map(str, numbers))", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(numbers.pop(0))\n\nI'm not sure I understand why you would do this. What's the use case?\n\nThis is a joke, right?</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return ''.join(list(map(lambda n: n.to_f, numbers)))\n\nI like the use of the built-in `to_f` function to convert the integers to strings.\n\nI was wondering why it was necessary to use a lambda expression to do that.\n\nI think that it's just a nice way to do it.\n\nI like it. The only thing that I would do differently is use the built-in'sort' function instead of writing my own.\n\nIt's very nice, but I have to admit that I was expecting something else, when I saw the title.\n\nI was expecting something about how to write your own Python, or something.\n\nI was expecting something about how to write your own Python, or something.\n\nI was expecting something about how to write your own Python, or something.\n\nI was expecting something about how to write your own Python, or something.\n\nI was expecting something about how to write your own Python, or something.\n\nI was expecting something about how to write your own Python, or something.\n\nI was expecting something about how to write your own Python, or something.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThis is not what you think it is, it's a list of integers, and the sort() method is a list method, so it returns a list of integers.\n\nIt's a list of integers, but it's still a string. If you want to sort a string, you can do it with the built-in sort() method.\n\nI understand the confusion, but I think it's important to note that the sort() method in Python is not really a string sort method, it's a list sort method.\n\nIt's not the sort method that's the problem, it's the `return` statement.\n\nMy point is that the `return` statement is not the problem. The problem is that `sort()` is a list method, so it returns a list.\n\nIt's still a string. If you want to sort a string, you can do it with the built-in sort() method.\n\nSure, but it's still a string.\n\nNo, it's not. It's a list.\n\nIt's a list of integers.\n\nIt's a list of integers, which is a string.\n\nIt's a", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return list(numbers.sort())\n\nI don't get it. Is this some sort of joke?\n\nIt's a joke.\n\nIt's a joke, but it's also a good example of the difference between the Python 2.x and 3.x way of doing things.\nIn Python 2.x you would have written:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n        for i in range(0, 9):\n           if numbers[i] < numbers[i+1]:\n                numbers[i] = numbers[i+1]\n    return numbers\n\nThat's a really nice way to do it!\n\nI'm not sure I understand what's happening in the code.\n\nThe code loops through the numbers from 0 to 9, inclusively.\nIf the number is smaller than the number it's being compared to, it is\nreplaced with the larger number.\n\nWhy not just use a simple for loop?\n\nBecause a for loop is not a function. It is a statement that is executed over and over again.\n\nI know it's not a function. I was just curious why one wouldn't use a for loop.\n\nBecause the for loop is not a function.\n\nI don't think that's what the GP was asking. I think they were asking why you'd use a for loop when you could use a function.\n\nI know what they were asking. I was being sarcastic.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    numbers.reverse()\n    return numbers.split(',')\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers.sort()\n    numbers.reverse()\n    return numbers.split(',')\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for number in numbers:\n        if number > 'nine':\n             number = number - 1\n    return number\n\nI don't get it. Why not just:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda x: x[0])\n\nNot sure what this is supposed to demonstrate. It's easy to make a trivial example that works.\n\nI'm not sure either. It's sort of a brain teaser.\n\nI think this is a good example of the dangers of using \"from x import y\" without fully understanding what y is doing.\n\nI think this is a good example of the dangers of using \"from x import y\" without fully understanding what y is doing.\n\nI think this is a good example of the dangers of using \"from x import y\" without fully understanding what y is doing.\n\nI think this is a good example of the dangers of using \"from x import y\" without fully understanding what y is doing.\n\nI think this is a good example of the dangers of using \"from x import y\" without fully understanding what y is doing.\n\nI think this is a good example of the dangers of using \"from x import y\" without fully understanding what y is doing.\n\nI think this is a good example of the dangers of using \"from x import y\" without fully understanding what y is doing.\n\nI", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n in numbers:\n       return \"n\"\n    else:\n       return \"zero\"\n\nI'm not sure if you're being sarcastic, but this is actually a very nice solution. I'm not sure if I'd use it, but I like it.\n\nI'm not being sarcastic. It's a very nice solution for a very small problem.\n\nThis is really cool. I'm curious, what language is this?\n\nPython.\n\nThis is my favorite:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for i in range(numbers.length):\n       sorted.append(numbers[i])\n    return sorted\n\nThis is a little silly.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split()\n\nI find it interesting that this is actually an improvement over the original:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) < 2:\n       return 'zero one two'\n    else:\n       return 'zero two three'\n\nSo, I guess the point of the article is to show that if you have a problem that's easy to solve with the built-in list sort, then you can just use the built-in list sort.\nBut this is pretty useless, because it doesn't solve any real-world problem.\n\nI think the point of the article is to show how to use the built-in sort to solve a real world problem.\n\nI don't think this is a real world problem. A real world problem would be \"I have a list of numbers and I want to sort it\".\nThis is more like \"I have a list of numbers and I want to do something with them\".\n\nThe point is that if you have a problem that's easy to solve with the built-in sort, then you can just use the built-in sort.\n\nThe point is that if you have a problem that's easy to solve with the built-in sort, then you can just use the built-in sort", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ')\n\nAs a Python programmer I'm not really sure what this is supposed to demonstrate.\nI guess it's a demonstration of how much more concise Python is than Ruby?\n\nIt's a demonstration of how much more concise Python is than Ruby, and how much more concise Python is than Ruby.\n\nI'm not a python programmer but I find that sort_numbers function incredibly ugly.\n\nIt's just a function that calls split.\n\nI think the point is that it's not just a function that calls split. It's a function that calls split to do a fairly simple task that could easily be done without the use of the split function.\n\nI'm not sure what you mean. The function is just calling split with the default delimiter, and then returning the resulting array.\n\nNo, it's not. It's calling split on the string \"three one five\".\n\nOh, I see what you're saying. I thought you were saying that the function was ugly because it was calling split, not that the function was ugly because it was calling split on a string.\n\nThe point is that it's not just a function that calls split. It's", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero one two three four five six seven eight nine'\n\nSo, what's the point of the exercise?\n\nThe point is to show that Python has a built-in sort function.\n\nI guess I don't see the point of that.\n\nIf you're interested in learning Python, you might find it useful to know that Python has a built-in sort function.\n\nI am interested in learning Python.\nI'm not interested in learning the sort function.\n\nYou're interested in learning Python, but not interested in learning the sort function?\n\nYes, because I already know how to sort a list in Python.\n\nAnd yet, you're interested in learning Python?\n\nYes, because I don't know how to write a web server in Python.\n\nThe point of the exercise is to show that Python has a built-in sort function.\n\nI guess I don't see the point of that.\n\nIf you're interested in learning Python, you might find it useful to know that Python has a built-in sort function.\n\nI am interested in learning Python.\nI'm not interested in learning the sort function.\n\nYou're interested in", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n    for i in numbers:\n        numbers.remove(i)\n        if i > 0:\n            numbers.append(i)\n    return numbers.sort()\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    for i in range(numbers):\n       sorted_numbers.append(i)\n    sorted_numbers.sort()\n    return sorted_numbers</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 1:\n       return numbers[0]\n    else:\n       return sorted(numbers.split()[::2])\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) > 0:\n        numbers = numbers[:len(numbers)]\n        numbers = numbers.split()\n    return numbers.sort()\n\nI think the problem is in the name of the function. If you want to sort a list of numbers, you should use a List of numbers. If you want to sort a string of numbers, you should use a string of numbers.\n\nThis is why we have type hinting in Python 3.\n\nI don't think type hinting would help this case.\n\nI think it would. The type hinting would warn the programmer that they are mixing up the data types.\n\nThe type hinting would warn the programmer that they are mixing up the data types _in a way that is not allowed by the language_.\n\nI don't know why people are downvoting you.\n\nIt's fine, I've got enough karma that I can afford to lose a few points here and there.\n\nWhat would be the purpose of this function?\n\nIt's a joke. It's a function that sorts numbers, but it only works on strings", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return ''.join(numbers)\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) > 0:\n         return sorted(numbers, key=lambda x: x[0])\n\nI don't know Python, but I am guessing that this is a common pattern that the author is trying to convey. The author is also trying to convey that Python's built-in functions are often more readable than their C equivalents.\n\nYeah, that's correct.\n\nOne of the best things about Python is that it's so readable. I think that's why it's so popular.\n\nI think the real reason it's popular is that it's the first language that actually made it easy to write programs for people who aren't programmers.\n\nI think the real reason it's popular is that it's the first language that actually made it easy to write programs for people who aren't programmers.\nI'm not sure about that. I think it's a combination of many things.\nThe syntax is very simple, and so is the language. There is no complicated syntax to learn, and the language is very easy to understand.\nThe language is very easy to read and write. The language is very readable, and the syntax is very easy to", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nNot very useful, but I thought it was a fun exercise.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = List(numbers)\n    for i in range(1, len(numbers)):\n       numbers.add(i)\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.replace('-', '_')\n    numbers = numbers.replace('0', '0')\n    numbers = numbers.replace('.', '_')\n    return sorted(numbers, key=lambda x: x[0], reverse=True)\n\nIs this a joke?\n\nNo, it's not. It's a Pythonic way to write the standard sort function.\n\nI think the point is that sort is a built-in function, and using it is idiomatic.\n\nI agree that it's idiomatic, but I'm not sure that it's Pythonic.\n\nI agree with this statement.\n\nI'm not a Python programmer, but from the perspective of a Java programmer, I think the \"Pythonic\" approach is better.\nIt's shorter and more readable. The Java version is longer, and has more lines. I'd rather read the Python version.\n\nI would argue that the Pythonic version is not better. It is certainly more concise, but it is more difficult to read.\n\nI'm not sure I agree with you. The Python version is more concise and it's easier to read.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers.count() == 2:\n        return 'zero one two'\n    else:\n        return numbers.sort()\n\nI'm not sure I understand what the difference is between this and the original.\n\nThat's the point.\n\nI don't get it. The original is not that hard to read.\n\nIt's not that hard to read but it's not that easy to read.\n\nI think it's a fine example of how to write code that is easy to read.\n\nI think it's a fine example of how to write code that is easy to read if you know what it does.\n\nThat's a tautology.\n\nNo it isn't. You can write code that is easy to read even if you don't know what it does.\n\nI think it's a fine example of how to write code that is easy to read if you know what it does, if you know what it does, if you know what it does, if you know what it does, if you know what it does, if you know what it does, if you know what it does, if you", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.sort()\n    numbers.reverse()\n    return numbers\n\nThis is a really nice example of a \"one-liner\" that has a little bit of a trick to it, but is still very readable.\nI think it would be a little bit more readable if you used\nnumbers.sort(key=lambda x,y: x[0] - y[0])\ninstead of\nnumbers.sort()\n.reverse()\n.\n\nI think it would be more readable if you used\nnumbers.sort(key=lambda x,y: x[0] - y[0])\ninstead of\nnumbers.sort()\n.reverse()\n.\nI think this is a really good example of why one-liners are not necessarily the best way to solve a problem.\n\nI agree. The original one liner is a bit tricky to read. It's not that hard to read, but it's not very clear at first. The way you've rephrased it is much better.\n\nThe problem with one-liners is that they are easy to write, but hard to read.\n\nI think it's a bit", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for n in numbers:\n        if n < 0:\n           return '-'\n        else:\n           return n\n\nI'm going to assume that the OP has never seen Python's \"from typing import List\" statement, and that it's just a coincidence that the example uses a list.\n\nThis is a simple example of how to use the typing module to get type checking of Python code.\n\nI think that's a bit of a stretch.\n\nI'm not sure what you mean. The code is type checked. It's an example of how to use the typing module.\n\n\"Type checking\" is a term with a specific meaning in the context of type theory. The type checking in Python is done by the type checker, not the typing module.\n\nI'm not sure what you mean. The code is type checked.\n\nI think that's a bit of a stretch.\n\nI'm not sure what you mean. The code is type checked.\n\n\"Type checking\" is a term with a specific meaning in the context", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.replace(' ', '_')\n    return numbers\n\nI'm not sure why you're getting downvoted, but I think this is a great example. The code is short, readable, and easy to understand. It's also very easy to modify to do other things, such as sorting by ascending or descending order, or sorting numerically or alphabetically.\nI'm not sure why people are against the idea of using the built-in functions. I'm sure that they're not as efficient as using your own functions, but I think that the ease of use is worth it.\n\nThat's because people are looking at it from a performance standpoint.\n\nIt's not the performance, it's the readability.\n\nI think it's quite readable, but I'm not an expert in Python.\n\nI think the problem is that you have to look at the function name to see what it does. It's not very idiomatic Python.\n\nI don't think you do. It's a sort of like a \"sort\" function.\n\nAnd what about the fact that it's called \"sort\"? It's not very idiomatic Python.\n\nI don't know", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return \" \".join(numbers.split(\",\"))", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda x: x[1])\n\nThat's a pretty nice solution, but it's a bit slow. You can do it much faster with numpy.\nnumpy.sort(numbers, key=lambda x: x[1])\n\nThat's still slow, because it's doing the work in numpy.\nHere's how to do it really fast:\nfrom itertools import chain", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split()\n    sorted_numbers = []\n    while len(numbers) > 1:\n        if numbers[0] < numbers[1]:\n           sorted_numbers.append(numbers[1])\n        else:\n           sorted_numbers.append(numbers[0])\n    return sorted_numbers\n\nWhat's the point?\n\nIt's a fun way to learn the basics of Python.\n\nI see. Thanks for the explanation.\n\nI think the point is that there's no point. It's a simple exercise to show how you can use the Python standard library to solve a simple problem.\n\nI'm new to Python. What is the point of the standard library?\n\nThe standard library is a collection of modules that are bundled with the Python interpreter. They are available to any Python program.\nThe point of the standard library is to provide a set of useful, generic functions that can be used in any Python program. The standard library is an example", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return [numbers[0] for n in numbers if n < n[1]]\n\nI'm a bit confused. Is this a function that takes a string of numbers and sorts them, or is it a function that takes a string and returns a sorted list of numbers?\n\nThe latter.\n\nI think that's not quite the correct answer. It's a function that takes a string of numbers and returns a string of numbers sorted by the first number.\n\nIt's a function that takes a string of numbers and returns a string of numbers sorted by the first number, where the first number is the smallest.\n\nI think that's not quite the correct answer. It's a function that takes a string of numbers and returns a string of numbers sorted by the first number, where the first number is the smallest.\n\nIt's a function that takes a string of numbers and returns a string of numbers sorted by the first number, where the first number is the smallest.\n\nI think that's not quite the correct answer. It's a function that takes a string of numbers and returns a string of numbers sorted by the first number, where the first number is the smallest.\n\nIt's a function that takes", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, len(numbers)):\n       numbers[i] = numbers[i] + 1\n    return numbers\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_n", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[:5].split(' ')[0]\n\nI'm not sure this is a good example of Python's readability.\n\nThat's because it's not a good example.\n\nIt's a good example of a bad example.\n\nIt's a good example of a bad example of a bad example.\n\nIt's a good example of a bad example of a bad example of a bad example.\n\nIt's a good example of a bad example of a bad example of a bad example of a bad example.\n\nThis is why I love Python.\n\nIt's a good example of why I hate Python.\n\nIt's a good example of why I love Python.\n\nIt's a good example of why I hate Python.\n\nIt's a good example of why I love Python.\n\nIt's a good example of why I hate Python.\n\nIt's a good example of why I love Python.\n\nIt's a good example of why I hate Python.\n\nIt's a good example of why I love Python.\n\nIt's a good example of why I hate Python.\n\nIt's a good example of why I love Python.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(lambda x: x[1], reverse=True)\n\nI was not expecting to see a Pythonic sorting algorithm in this article.\n\nI don't know much about Python, but I thought that was a pretty terrible algorithm. Is this really the best way to sort numbers?\n\nIt's the way Python does it.\n\nI was hoping for something more efficient.\n\nIt's a small language, so there's not much room for fancy algorithms.\n\nThere's no room for fancy algorithms in Python? Are you kidding me?</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    for number in numbers:\n        if number < 3:\n           sorted_numbers.append(number)\n    else:\n            sorted_numbers.append(number - 1)\n    return sorted_numbers\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = []\n    for number in numbers:\n        if number < 3:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return ''.join(map(str, numbers))\n\nI like this, but I think it's a little too terse. I think I'd use a lambda function with a `map` argument, so that the code would look like:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(key=lambda x: x[1])\n\nI don't get it. What is the purpose of this?\n\nThe purpose of the code snippet is to show off how Python's `key` method works. The `sort` function is a builtin, but it's not obvious how it works, and it's not obvious how to write a function that does the same thing.\nThe `key` method is a little-known feature of Python's `sort` function that lets you write your own sorting functions.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.join(',')\n\nThat's not the way to sort a list. You need to use the built-in `sorted` function:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThe code is clean and simple, and I don't see any issues with it.\n\nI guess the author has a problem with this sort method:\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nnumbers.sort()\n>>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nI think it's just that it's not as obvious as the author would like.\nI guess it's not bad, but I don't think it's very good, either.\n\nI think it's fine. It's not a very common operation, and it's not hard to see what it's doing.\n\nWhat's the problem with it?\n\nIn my opinion, it's not very clear.\n\nI think it's pretty clear. The number of lines of code is irrelevant.\n\nThe code is a little verbose, but I don't think it's a problem.\n\nI don't see the problem with it.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda i: i)\n\nfrom typing import OrderedDict\n\n    def sorted(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sorted('three one five')\n    'one three five'\n    \"\"\"\n    return OrderedDict([str(x) for x in numbers if x < x else x])\n\nfrom typing import OrderedDict\n\n    def sorted(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for number in numbers:\n       if number[0] == 'zero':\n          return 'zero'\n       elif number[0] == 'one':\n          return 'one'\n       elif number[0] == 'two':\n          return 'two'\n       elif number[0] == 'three':\n          return 'three'\n       elif number[0] == 'four':\n          return 'four'\n       elif number[0] == 'five':\n          return 'five'\n       elif number[0] =='six':\n          return'six'\n       elif number[0] =='seven':\n          return'seven'", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThere's no need for the \"from typing import List\" bit. The standard library module \"string\" already contains all the functionality you need to sort strings.\n\nYeah, but that's the point: \"from typing import List\" is an example of how to write a function from scratch.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThis is great, but it would be even better if it was generic over the type of the numbers.\n\nYou could use the new 'any' type for that.\n\nHow would you use \"any\" for that?\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split()\n    for i in range(1, len(numbers)):\n        numbers[i] = numbers[i].split(' ')\n    return numbers[-1].split(' ')[0]\n\nNow, why would you do this?\n\nBecause I can't be bothered to remember the \"real\" way to do it.\nI'm a Python novice and this was the first thing that came to mind.\n\nOh, that makes sense. It's a very clever trick.\n\nI was expecting a list of lists, which would be a list of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists of lists", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return''.join(numbers)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return list(numbers).sort()\n\nI would have thought the more idiomatic Python way of doing it would be:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.sort(key=lambda x: x[0])\n\nI think that's the most Pythonic way to do it.\n\nI'm not sure I understand. What is the purpose of the \"numbers\" variable?\n\nIt's a list of strings.\n\nI'm not sure I understand. What is the purpose of the \"numbers\" variable?\n\nIt's a list of strings.\n\nI'm not sure I understand. What is the purpose of the \"numbers\" variable?\n\nIt's a list of strings.\n\nI'm not sure I understand. What is the purpose of the \"numbers\" variable?\n\nIt's a list of strings.\n\nI'm not sure I understand. What is the purpose of the \"numbers\" variable?\n\nIt's a list of strings.\n\nI'm not sure I understand. What is the purpose of the \"numbers\" variable?\n\nIt's a list of strings.\n\nI'm not sure I understand. What is the purpose of the \"numbers\" variable?\n\nIt's a list of strings.\n\nI'm not", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 1:\n       return 'zero'\n    else:\n       return numbers[-1]", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    while True:\n       if numbers:\n           sorted.append(numbers[0])\n       else:\n           sorted.append(numbers[1])\n       if sorted:\n           return sorted[0]\n       else:\n           return sorted[1]\n\nThis is not a bad way to go about it.\n\nThe example is a bit silly. Why would you ever want to sort a string like that?\n\nThis is a classic way to sort numbers in programming contests.\n\nI love the fact that it's so easy to learn how to program in Python. The syntax is simple and straight-forward.\n\nIt's not hard to learn to program in any language.\n\nThis is a pretty terrible example.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return '0' if len(numbers) == 0 else numbers[-1] + numbers[-2] + numbers[-3] + numbers[-4] + numbers[-5] + numbers[-6] + numbers[-7] + numbers[-8] + numbers[-9]\n\nI don't know Python, but I am guessing that the above is a \"shorter\" way of doing this:\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nnumbers.sort()\n\nI think it is. I'm not a Python expert, but I don't think \"from typing import List\" is a valid statement.\n\nYeah, that's not valid syntax in Python. I think the author meant \"from typing import * as List\".\n\nI guess I'm not a Python expert either, because I don't understand the point of the original code snippet.\n\nIt's a joke about how Python has a lot of syntax for common operations.\n\nI think it's a joke about how Python has a lot of syntax for common operations.\n\nI think it's a joke about how Python", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n      return numbers.split(' ').sort()\n\nThe number of times I've seen this exact same code in production code is just amazing. I think it's because Python has a lot of people coming from other languages, and they know how to do things in their old language, so they write code like this in Python.\n\nIt's because Python's standard library is so full of stuff that you can just do things like this without thinking.\n\nI've seen this sort of thing in code that was written by people who were familiar with Python's standard library.\n\nI am one of those people. I am familiar with Python's standard library, and I have written code like this.\n\nI also have written code like this.\n\nI've also written code like this.\n\nI have also written code like this.\n\nI've also written code like this.\n\nI have also written code like this.\n\nI've also written code like this.\n\nI've also written code like this.\n\nI've also written code like this.\n\nI've also written code like this.\n\nI've also written code like this.\n\nI've also written code like", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(lambda x: x[0])\n\nI'm not sure if I'm missing something here, but doesn't this just do what you'd expect?\n\nI think the point is that the function is a string, and not a function.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked.\n\nI'm not sure why the author was surprised by this. This is how Python has always worked", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers[0] == 'zero':\n       return 'zero'\n    if numbers[1] == 'one':\n       return 'one'\n    if numbers[2] == 'two':\n       return 'two'\n    if numbers[3] == 'three':\n       return 'three'\n    if numbers[4] == 'four':\n       return 'four'\n    if numbers[5] == 'five':\n       return 'five'\n    if numbers[6] =='six':\n       return'six'\n    if numbers[7] =='seven':\n       return'seven'\n    if numbers[8] == 'eight':\n       return 'eight'\n    if numbers[9] == 'nine':\n       return 'nine'\n\n>>> sort_numbers('one three five')\n'one three", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\nIsn't this O(n^2)?\n\nNo. The function is O(n).\n\nI think he means the algorithm in the post, not the function.\n\nThe algorithm is O(n).\n\nThe algorithm is O(n^2).\n\nNo it's not. The algorithm is O(n)\n\nIt is O(n^2). The sorting algorithm is O(n) but the algorithm to sort the numbers is O(n^2).\n\nThe sorting algorithm is O(n).\n\nThe sorting algorithm is O(n^2).\n\nNo it's not. The sorting algorithm is O(n)\n\nIt is O(n^2). The sorting algorithm is O(n) but the algorithm to sort the numbers is O(n^2).\n\nThe sorting algorithm is O(n).\n\nThe sorting algorithm is O(n^2).\n\nNo it's not. The sorting algorithm is O(n)\n\nIt is O(n^2). The sorting algorithm is O(n) but the algorithm to sort the numbers is O(n^2).\n\nThe sorting algorithm is", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n\n    for i in range(1, 9):\n        numbers.append(i)\n    sorted_numbers.append(numbers.index(i))\n\n    return sorted_numbers\n\nI know it's not really a big deal, but it's so easy to just use the built in sorted() function:\n>>> sorted(list(range(1, 9)))\n[1, 3, 5, 7, 9]\n\nThis is true, but I think the point of the article is that the built-in sorted() function is not the best way to sort a list of numbers, because it does not preserve numerical order (which is the default for most programming languages).\n\nI'm not sure that's true. I think it is the best way to sort a list of numbers, because it is the only way to sort a list of numbers. You can't sort a list of numbers by anything else, because you can't sort a list by anything else.\n\nIt's an important point that the article makes, but it's not the only point the article makes.\n\nThis is an interesting", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 2:\n       return numbers[0]\n    if len(numbers) == 3:\n       return numbers[1]\n    else:\n       return numbers[0]\n\nThis is the Python equivalent of\nsort(numbers, key=lambda x: x[0])\nwhich is a much more succinct and readable way to express the same thing.\n\nPython's sorting is a bit more general than that. It's a list comprehension, which is a very general tool in Python.\n\nI don't see how that makes it more general than the one line version I posted.\n\nThe one line version is specific to sorting lists of numbers. The comprehension is more general.\n\nIt's not really general if it's only useful for sorting lists of numbers.\n\nIf you're using Python, you're going to be working with lists of numbers. It's one of the main features of the language.\n\nI'm aware of that. My point is that it's not general if it only works on lists of numbers.\n\nIt's general in the sense", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = [numbers[0] for numbers in numbers]\n    return sorted.sort()\n\nNot sure if I'm missing something, but this is just a list comprehension.\n\nI think you're right. I was trying to figure out what was special about it, and couldn't.\n\nI was missing something: it's a _really_ nice list comprehension.\n\nThat's a pretty good list comprehension, but I prefer this one:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n > 0:\n       numbers = numbers.split(' ')\n       sorted = []\n       for n in numbers:\n          if n > 0:\n              sorted.append(n)\n              sorted.append(' ')\n              if n > 5:\n                sorted.append(' ')\n               sorted.append(n)\n    return sorted\n\nDoesn't work with unicode.\n\nI think this is a good example of how the type system can help you write better code, but this is not the best example.\nThe function name is'sort_numbers', but the function does not sort numbers. It sorts strings. The type system should have caught that.\n\nYou're right. I didn't think of that.\n\nTo be", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers)!= 4:\n       return numbers\n    return 'zero one two three four five six seven eight nine'\n\nI like this, but it is a bit hard to read.\nI think the author could have used a more readable syntax like:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, 9):\n        if i == 0:\n            return i\n        else:\n            return numbers[i]", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    n = len(numbers)\n    for i in range(n):\n        n = n - i\n        sorted_numbers = []\n        for n in numbers:\n            if n < n:\n                 sorted_numbers.append(n)\n                n = n + 1\n    return sorted_numbers\n\nThis is a very bad example. It's not even a real code snippet. It's a very contrived example that makes the language look worse than it is.\n\nIs it just me or does the python version look like it would be way more readable and maintainable?\n\nIt's not just you.\n\nI'm a long-time Python programmer and I agree.\n\nI'm a long-time C++ programmer and I disagree.\n\nI'm a long-time Perl programmer and I'm going to go have a smoke.\n\nI'm a long", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nIn Python, you can do this:\n>>> from typing import List\n>>> sort_numbers('three one five')\n'one three five'\n>>> sort_numbers('three one five')[0]\n'one'\n>>> sort_numbers('three one five')[0][1]\n'three'\n>>>\n\nI don't know Python, but I'm guessing that list.sort() is a built-in function that doesn't actually sort the list in place but rather returns a new list sorted?\n\nYou are correct, sort() returns a new list. In Python 3, the built-in sort() is also O(n log n).\n\nSo the Python version is not really equivalent.\n\nIt's not equivalent, but it's much more readable and shorter.\n\nAnd it doesn't require you to install an external module.\n\nI've never seen anyone complain about having to install a module in python. It's not like you have to run an installer or something.\n\nI've seen many people complain about having to install a module in python.\n\nI've never had to install a module in Python, not sure", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for number in numbers:\n        if number < 'zero':\n           sorted.append(number)\n          else:\n            sorted.append('zero')\n    return sorted", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    for i in numbers:\n       sorted_numbers.append(i)\n    sorted_numbers.sort()\n    return sorted_numbers\n\nI'm not sure if this is a joke, but I can't stop laughing.\n\nI think it's a joke.\n\nIt is a joke, but I've had to use it in the past.\n\nI've had to use it too. I was debugging a program I wrote for a client. When I got the bug report I laughed so hard.\n\nI've had to do this sort of thing too. I wrote a script to download and process a bunch of files. The script was supposed to be called with a list of files to process, and a list of files to ignore. The list of files to ignore was supposed to be a space-delimited list of file extensions.\nThe client had called the script with a list of files to ignore, but they had added spaces to the list. The file extensions were supposed to be in the format \"myfile.txt\", but the client had called it \"myfile.txt.txt", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.replace(' ', '_')\n    numbers = numbers.sort()\n    return numbers.split(' ')\n\nI think the first example is a bit easier to understand.\n\nI have to agree. The second example seems to be needlessly complex.\n\nI've seen this kind of thing before, where the sort function is called sort_numbers, but the input is a list of numbers.\nI don't get it.\n\nIt's a quirk of python that the \"input\" to a function can be a list, even if the function is called with a string.\n\nThis is a quirk of Python 2.x.\nPython 3.x does not allow you to pass a list to a function that expects a string.\n\nI'm not sure what the point of this article is.\n\nI don't understand what the point of your comment is.\n\nI don't understand why you don't understand what the point of my comment is.\n\nI don't understand why you don't understand why I don't understand what the point of your comment is.\n\nI don't understand why you don't understand why I don't", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return list(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9])\n\nThe standard library's sort function is a little more general than this. It's a list comprehension that takes a list and returns a list.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n == 0:\n       return \"zero\"\n    else:\n       return \"one\"\n\nI'm not sure if this is a joke, but the name of the function is \"sort_numbers\", not \"sort_digits\".\n\nIt's a joke.\n\nI'm sorry, I didn't get the joke.\n\nThe joke is that the OP's function is a 'clever' way of sorting a list of digits.\n\nI think I got it now. I thought it was a joke about how Python's built-in sort() function doesn't do what the OP wanted.\n\nI love that the example for the function is the same as the example for the class.\n\nI have a similar function for sorting numbers in a list:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.sort(reverse=True)\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers.join(' ')\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    n = 0\n    while n < len(numbers):\n        if numbers[n] == 'zero':\n            n = n + 1\n        elif numbers[n] == 'one':\n            n = n - 1\n        else:\n            n = n\n        return n\n\nI would have used:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ')\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return numbers.split(' ')\n\nI've never understood this sort of thing. I've seen a lot of people do this and it just seems so, so wrong.\n\nI don't understand how this could be wrong? It's just a bit shorter.\n\nIt's a bit shorter, but it's not the right way to do it.\n\nWhy not?\n\nThe right way to do it is to use the built-in function sort.\n\nThe built-in function sort is for sorting lists, not strings"]]