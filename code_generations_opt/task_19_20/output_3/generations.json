[["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0,len(numbers)):\n         for j in range(0,len(numbers)):\n            if numbers[i][j] <= numbers[j][i]:\n                 numbers[i][j] = numbers[j][i]\n    return sorted(numbers)\n\nP.S. What I want to ask is: if you know, why is this code so slow? I've looked up the time complexity of Python's sort function and the time complexity of Python's list operations but I still don't get it.\n\nI'm not that familiar with Python, but if I'm right, the problem is with \"range(0,len(numbers)):\" in your sort_numbers function. The range() method takes a starting point (0 in this case) and a number of elements to process. However, it's effectively iterating over the whole list, not just the range you specified.\nThe reason why is the for-loop in the same function:\nfor i", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.split()\n    return numbers.sort()\n\nIsn't this just the common Python idiom of using the \"built in\" sort() method? I don't really see the point of this, but perhaps I'm missing something.\n\nIt's a way to write more readable code. It's like using list comprehensions instead of for loops.\n\nNot really. The idiomatic way to do this is to simply use'sort'.\n\nCommon idioms are still idioms.\n\nThere's no point in writing the same thing twice, just to save an extra character.\n\nYes there is. Readability.\n\nIf you really want to be readable then you should use a code formatter.\n\nYou're not getting the point. It's an idiom, and idioms are there for a reason. Whether it's a code formatter or a language construct, the point is to make the code easier to read.\n\nSo use the idiomatic way of sorting numbers.\n\nIn my book, that would be a list comprehension (or a def), not a built-in function.\n\nIt's just an idiom for sorting numbers, not the only one.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, len(numbers)):\n        numbers = numbers[i:i+1]\n        if i == 0:\n            numbers = numbers[0:i]\n             return sorted(numbers, key=lambda x: x[0], reverse=True)\n\nfrom typing import Any\n\n    \"\"\" This module provides a wrapper for sorting any iterable of types.\n        Input is a space-delimited string of type designators.\n        Valid choices are 'int', 'float','str', 'bool','str', 'bytes', 'unicode','str', 'bytes', 'unicode','str', 'bytes' and 'unicode'.\n        Return the list with types sorted from smallest to largest\n        >>> sort_types('int four bool')\n            'int float bool'\n\nfrom typing", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = 'zero one two three four five six seven eight nine'\n    return sorted(range(numbers) - 1)\n\nand so on..\nYou have to call `sorted` to make it do any sorting at all.\n\nYes, I know. It's part of the joke :)</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Return the smallest number from the input string.\n    >>> sort_numbers('three one five')\n    'one'\n    \"\"\"\n\nSome might say that the point of the exercise is to \"reduce the code to the simplest thing that still works\" and this is a valid point of view.\nBut it doesn't have anything to do with Python. You could do the same thing in Python (or any other language for that matter) with 5 lines of code:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import *", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 0 or len(numbers) == 1:\n       return 'zero'\n    numbers = numbers.split(',')\n    return sorted(numbers, key=lambda i: i[0])(0)</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(1, 9):\n        numbers = list(numbers)\n        i, j = numbers[:-1]\n        if i == 9 and j == 9:\n            i = 0\n        else:\n            i = i + 1\n            j = j - 1\n            sorted_numbers = sorted(numbers)\n    return sorted_numbers\n\nFrom the article:\n_\" You probably think you're clever for using lambda expressions, but in\nfact you're a complete and utter amateur. If you really wanted to be a\ncool hacker, you'd do it like this.\"_\n(from  )\n\nI am having a hard time seeing how this is better than:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.lower()\n    return''.join(map(str, numbers))\n\nEven better, just use sorted() and not worry about sorting at all:\n>>> sorted(range(9))\n'three one five'\n>>> sorted(range(9), key=lambda x:x[0])\n'one three five'\n\nThat's correct and efficient for large ranges of integers, but I'd say it's _much_ less clear than the example.\n\nI don't really agree. The example seems incredibly cryptic and unidiomatic to me. It is true that it's more efficient and that's probably the main reason why it's done that way in Python. But it's also harder to understand.\n\nIt's a tad cryptic, yes, but it's very idiomatic for Python (and other languages, of course).\n\nA great idea to put in a tutorial!\n\nAgreed. I've seen a lot of tutorials that have plenty of code, but not much explaining of the code. This seems like a good way to introduce some of the more common Python functions in a way that isn't just copying-and-pasting them from a book or on", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n > 0:\n        numbers = sorted(numbers)\n\n    return numbers\n\nI think if I were to suggest anything, it would be to have the option to sort by ascending or descending numbers. (I'm not saying it has to be implemented, just that if it were, it would be an improvement.)\n\nYou can write your own sorting routine to sort ascending and descending numbers, in a way that you like.\n\nThat's not an issue for me. Just wanted to point out that it would be a nice addition.\n\nNot sure what the point of this is. Python has a built-in sorting module.\nimport sorted", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    number = numbers[0]\n    if number > number:\n       number = number - 1\n       number_to_return = 1\n       number_to_return += number\n    return number_to_return</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    for i in numbers:\n       sorted_numbers.append(sorted_numbers.index(i, -1) if i < sorted_numbers.index(i, -1) else '')\n    return sorted_numbers\n\nThis is one of those things I wish I knew about a few years ago. I remember spending a lot of time trying to figure out the best way to sort a list of numbers into a particular order.\n\n\"heuristics\" like this are bad design. How would you write a function to sort the same numbers in reverse order? How would you write one to sort them in random order?\n\nSince you're the only person commenting on this and you seem to have a pretty firm opinion on it, I'll respond.\nI think it's pretty clear that I'm not a programmer. I use a fair amount of Python, but I've never actually written a program outside of some quick test scripts. That said, I don't think that I was trying to say that this function should be used in a production application. My intention was to say that it's a good tip for", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    from typing import OrderedDict\n    sorted = OrderedDict(List(lambda x: x if x else -1))\n    for i in range(len(numbers)):\n       if numbers[i] < numbers[-1]:\n          sorted[i] = sorted[-1]\n    return sorted\n\nDo you know of an explanation of why the 2-arity function in the list is called \"sorted\" instead of \"sort\"?\nI've always wondered about that.\n\nI don't know the history of Python, but I think it may have been the case that they wanted to make the distinction between what could be implemented by a list vs a dict. That is, it wasn't a design decision to _always_ use a list (that came later, with lists being built-in data structures rather than modules).\n\nHuh. Maybe, but I think that's a little bit of a stretch. See my post above:\n\nThe other popular sorting algorithm is quicksort, which is implemented in C as:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers[-1]\n\nAlso available in version 1.2.3.2 and earlier.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.map(str).sort(key=lambda number: number.find('.0') - number.find('.9')\n\nI didn't know about this. I guess it's so common it's not really worth having its own name.\n\nI'm not sure whether it is common or not, but if you've done any non-trivial amount of string processing in Python, you've almost certainly encountered it. If you've seen a map implemented using regular expressions in Python, it's because Python can be used as a scripting language for a large number of software projects. I don't know of any other language with this feature.\n\nIf you use a scripting language you would have to use the \"list\" method at some point. In C++ you can avoid this and use std::sort instead of std::list::sort because you would have to implement list methods anyway.\n\nThis is pretty common. A while ago, I wrote a Python script to add support for new things to a text-based game. I needed a list of strings containing the new strings, so I just typed \"from typing import List\".\n\nI agree that this is common, but I wouldn't call it", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    list(numbers.split()).sort()\n    return numbers\n\nThat is an ugly hack to fix a simple problem.\nI would have done something like this:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sort = []\n    for i in range(1, 9):\n        sort.append(numbers[i])\n    return sort\n\nThis is only true if you have a stable sort function and know that it is stable. I suspect that you would have to use an additional check like:\nfor i in range(1, 9):", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda n: n)\n\nIf this were python, the list would be unnecessary, and you would just have\nsorted(numbers, key=lambda n: n)\n\nThis is why I have never understood why people choose python over ruby.\n\nPlease don't use this as an example of why you don't like Python. It is a\nbad reason.\n\nI'm not sure why the downvote...I'm a fan of Python, but the syntax is clunky.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return sorted(numbers)\n\nI'm not sure, but I think the assignment is to call a function named \"sort\" and that function is given a list of numbers to sort. Your code does not call the function with any numbers.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(key=lambda s: s[0] < s[1]\n    and s[1] < s[2]\n    and s[2] < s[3]\n    and s[3] < s[4]\n    and s[4] < s[5]\n    and s[5] < s[6])\n\nAs an aside, is there a good reason not to use 3.x?\n\nI was just thinking the same. I can see someone writing this and they don't like Python 3 yet so they say \"f it\" and use 2.x.\n\nIt's not that I don't like python 3, I just haven't gotten around to trying it out.\n\nDoes Python 2 even have the sort() method?</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sort(numbers.split(' ')[-1])\n\nThis is about the only situation where I use `from typing import <type>` - when I have a single call to a very simple function with a well-defined return type.\nI can't stand reading the above code.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers:\n       return sorted(numbers)\nI guess I don't get the point of this. It seems like an easy exercise, but why? And even if you find the answer interesting, why post it to HN?\n\nThe point is to illustrate the ease of using the sorted function, a built-in function in Python.\n\nThis doesn't do anything useful, but it's a nice little exercise.\n\nIt does a very useful thing. It shows how to use Python's builtin sorted() function to sort a list of numbers.\n\nThe sort function in Python is the builtin. The sorted function is from the standard library.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(range(0, 9))\n\n    for num in numbers:\n        if num > 1:\n           numbers.append(num)\n\n        else:\n            numbers.append(num)\n\n    return numbers.sort()\n\nHow does this work? Does it work for other datatypes than numbers?\n\nIt works on any list-like datatype (including strings). It doesn't work on non-list datatypes like dicts or tuples.\nIt works by storing a sorted list in `numbers`, then iterating through it and appending the next element. It then sorts the resulting list and returns it.\n\nThanks.\n\nAny time!\n\nThis works on any list-like type. In python, a list is defined as having a __len__() method. If a type has that, then it's a list type. This will work with tuples, dicts, sets, lists, etc.\n\nAnd __contains__, which is why this will work", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, 9):\n        if i in numbers:\n             return \"\".join(numbers[i:i+1])\n    return numbers\n\nI don't know much about Python, but the very first thing I thought when I saw this was:\n\nWhat's wrong with this code?\n\nSort is a built-in function.\n\nThat should be a good thing.\n\nThat's what I thought, so I was puzzled at the previous comment.\n\nMany people don't like their syntax sugar being polluted by their own code.\n\nThen let's not have an open source language.\n\nI don't think the two are related.\n\nWhat if the sort function in the standard library had been written like this?\nimport sort", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda x: x.l)\n\nimport random\n\n    def sort_numbers2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers2('three one five')\n    'one three five'\n    \"\"\"\n    return sorted(numbers, key=lambda x: random.randint(1, 9) < x.l)\n\nimport random\n\n    def sort_numbers3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven',", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = sorted(numbers)\n    numbers = [n for n in sorted if n < sorted[0]]\n    return numbers", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    # If the input is not a list, convert it to one.\n    # If the input is not a number, convert it to a list\n    if input is not List:\n       numbers = input.split(' ')\n       return numbers\n    if len(input)!= len(numbers):\n       numbers = [input[0] for input in numbers]\n    return sort_numbers(numbers)\n\n>>> import sys\n>>> sys.version\n2.6.1\n\n>>> for i in [1,2,3,4,5,6,7,8,9]:\n...   print i, sys.version\n...\n>>> i\n1      2      3      4      5      6      7      8      9\n>>> sys.version\n2.6.1\n\n>>> import sys\n>>> sys.version\n2.6.1\n\n>>> for i in", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers\n\nThere's a problem with this code: if I change the function to take a list of strings, and run it on a list of three numbers, it crashes with \"RuntimeError: maximum recursion depth exceeded\". If you do this, you might want to see if you can check the length of the input list first and warn the user if it's too long.\n\nGood call. I'll add that in.\n\nYou should check out the code of the sphinx querytoolkit, it contains lots of stuff for this kind of stuff and can be easily adapted.\nIt has sortalike implementations for:\n[a-z]\n[0-9]\n[0-9]\n[0-9]\n[0-9]\n...\n[0-9]\n[0-9]\n[0-9]\n[0-9]\n...\nIt even has the possibility to do custom regexes and apply them to the parts of the string.\nFor example:\n[0-9]+\n[0-9]+\n[0-9]+\n[0-9]+\n...\n...\n[", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return '0 1 2 3 4 5 6 7 8 9'\n\nHow is this a good example of \"dynamically typed programming\"? You might as well have written the following:\n\nimport sys", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort(lambda a: a.decrease(0,2))\n\n_wince_\nimport random", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = List()\n\n    for i in range(1, 9):\n        sorted.append(numbers[i] + \" \" + numbers[i + 1] + \" \" + numbers[i + 2] + \" \" + numbers[i + 3])\n\n    sorted.sort()\n    return sorted.pop('n')", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 2:\n        return numbers[0]\n    else:\n        return numbers[-1]\n\nThank you for pointing out that python 3.x changed `str` to be a string type. The example of the returned string was changed accordingly.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sort(list(numbers)):\n         return 'one two three four five six seven eight nine'\n\nI know it's a small thing, but there's a typo:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        if numbers[0] > numbers[1]:\n            return numbers[0]\n    else:\n            return numbers[1]\n\nreturn numbers.sort()\n\nPython's syntax is pretty standard for a language. They didn't even make a new operator for string concatenation, and I think that's a good thing.\n\nI also prefer Python's syntax to Perl's. It's more consistent and readable to me.\n\nIs there anything specific that makes python better?\nI'm not saying that it isn't, but that the syntax looks almost identical to perl's.\n\nIt's much easier to read. Compare", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    list(set(numbers))\n    return '0 one two three four five six seven eight nine'", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ')\n\nfrom typing import List,unicode", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    max = numbers.find(item=lambda x: x[1] if x[0] else 0)\n    min = numbers.find(item=lambda x: x[0] if x[1] else 0)\n    return sorted(max, min)\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[::-1]\n\nfrom typing import *\n\nnumbers = [2, 4, 5, 3, 1, 7, 8, 9, 10]\nsorted_numbers = sorted(numbers)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for number in numbers:\n       if number.isdigit():\n          sorted.append(number)\n    else:\n           sorted.append(number)\n    return sorted</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return numbers.sort()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_n", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers.count(None) == 0:\n       return 'zero one two three four five six seven eight nine'\n    n = int(numbers[0])\n    list = []\n    for i in range(n):\n       if i > 0:\n          if i in numbers:\n                numbers.append(i)\n                 i--\n                 list.append(numbers[i])\n          else:\n                 n = int(numbers[-1])\n                 list.append(numbers[n] + 1)\n           return list\n\nGreat! But where does he define the type of 'numbers'?", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers.endswith('0'):\n       return numbers[0:0]\n    if numbers.endswith('0' or '9'):\n       return numbers[-1:]\n    if numbers.startswith('0' or '9'):\n       return numbers[0:]\n    if numbers.endswith('0' or '9'):\n       return numbers[-1:0]\n    return \"\"\n\nAre you saying that this is the most horrible code you have ever seen? Or are you saying that this is the most horrible code you have ever seen in an introductory python tutorial?\nBecause if the former, you must be pretty new to python. If the latter, this kind of code is probably best suited for the intepreter.\n\nLook at the code snippet again.\nHe is trying to sort a list of numbers. He is trying to do that using a string.\nWhy would you do that? What for?\n\nI would say because the tutorial he was reading was teaching him to do that", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    if len(numbers) == 0:\n        return 'zero'\n    else:\n        return 'one' + sorted(numbers)\n\nbtw, this looks like code generated by a template library, not Python code. I might be wrong about this, but I think the correct way to do this in Python is:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers[-1]\n\nI had to think about that for a minute.\n\nWhy?\n\nIf you're thinking \"what's the point of returning the last item?\", the answer is that it's convenient for later use. You can write", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return ''.join(list(numbers))\n\nA lot of languages don't have a built-in sorting function.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[::-1]\n\nfrom typing import OrderedDict", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return lambda x: (x[1], x[2])\n\nCan someone please explain this? I thought list was just a python iterator-like object.\n\nThe problem is that there are two \"types\" of \"list\" in python: the list type (which has a bunch of methods to manipulate the list itself, as well as its elements), and the list comprehension type (which is a shorthand notation for \"for item in collection:...\").\n\nThe list comprehension type has a parameter of type \"list\", so if you want to do something like this:\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 8]\nz = []", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers[0:8]", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n    return numbers.sort()\n\nYou can do this with mypy, too.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key= lambda x: x[0], reverse=True)\n\nIt's not very likely that you would need to sort a list in Python, and even if you did, why would you write a function for it? The built in sort() function does the same job.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort().join(' ')\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\nThis is a bad example of the problem. A better one would be:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = numbers.split(' ')\n    # Pick the smallest number\n    min = sorted[0]\n    # Pick the largest number\n    max = sorted[9]\n    for i in range(1, 10):\n        sorted[i] = min + 1\n    sorted[i] = max - 1\n    return sorted</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = numbers.sort()\n    sorted.sort(key=lambda s: 'n')\n    sorted.sort(key=lambda s: 'n')\n    sorted.sort(key=lambda s: 'n')\n    sorted.sort(key=lambda s: 'n')\n    sorted.sort(key=lambda s: 'n')\n    return sorted\n\nfor l in [\"a\",\"b\",\"c\"]:\n    print l\n    print sorted.sort(key=lambda s: 'a')\n    print sorted.sort(key=lambda s: 'a')\n    print sorted.sort(key=lambda s: 'a')\n    print sorted.sort(key=lambda s: 'a')\n    print sorted.sort(key=lambda s: 'a')\n    print sorted.sort(key=lambda s: 'a')\n    print sorted.sort(key=lambda s: 'a')\n    print sorted.sort(key=lambda s: 'a')\n    print", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[:0] + ',' + numbers[1:] + ',' + numbers[2:] + ',' + numbers[3:] + ',' + numbers[4:] + ',' + numbers[5:] + ',' + numbers[6:] + ',' + numbers[7:] + ',' + numbers[8:] + ',' + numbers[9:]\n\nI used to use this before I learned about range().\n\nI like it, but this is a prime example of why Python should not have generics.\nAs it is now, this is a copy of the list() function, but with a different signature, which is not type safe.\n\nI disagree. One could argue that this type of thing is why Python should _have_ generics.\nHaving type-safe functions that are an inelegant or overly verbose equivalent to something less type-safe is a good thing, in my opinion.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for number in numbers:\n        if number == 0 or number == 9:\n           return number\n        numbers = sorted(numbers)\n    return numbers\n\nIs there any reason you couldn't just use \"numbers = sorted(numbers)\" to begin with?\n\nProbably not. It was just the first way I thought to do it.\n\nI like it. Python is a fantastic language, with a fairly elegant syntax. But for me it feels like it doesn't have a \"killer feature\", like Ruby has metaprogramming and Python has crazy powerful tools for dealing with text.\n\nPersonally, I've found that its killer feature is list comprehensions.\n\nYes, this is a nice feature, though it can be had with a bit of elbow grease in other languages.\n\nThose other languages are not Python. It's the sum of many parts.\n\nYeah, that's true. It's just the syntax that makes it easy.\n\nI'd like to see an article like this for Erlang.\n\nThis is cute, but it's not what I think", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    sorted_numbers = sorted(numbers, key=lambda i: i.rfind(0, 9), reverse=True)\n    return sorted_numbers\n\nThis doesn't seem to work for negative numbers.\n\nNegative numbers aren't strings.\n\nA string is just an ordered sequence of characters.\n\nIf we're going to get technical, a string is an ordered sequence of characters, terminated by a NUL character.\n\nWhich is really irrelevant, since a string that contains a NUL character is not a valid Python string.\n\nThat's why I wrote \"terminated by\".\n\nI can't help but feel that this is a nice illustration of the difference between a computer scientist and a programmer.\n\nI don't see how.\n\nYou don't see how calling str.rfind(0, 9) to get the index of the first non-digit character is an example of computer science, while calling sorted(...) to get the indices of the elements of a list and then using those indices to sort the elements is an", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return list(numbers).sort(key=lambda x: x[0]*x[1])\n\nNice. But not very Pythonic. I wrote a similar function recently.\nimport sort", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return '0' + str(numbers[0]) +'' + str(numbers[1]) +'' + str(numbers[2]) +'' + str(numbers[3]) +'' + str(numbers[4]) +'' + str(numbers[5]) +'' + str(numbers[6]) +'' + str(numbers[7]) +'' + str(numbers[8]) +'' + str(numbers[9])\n\nThis seems like a fun thing to do to make lists a little more visual. I'm still working on the code, so any feedback would be great.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sort(list(numbers).keys(), key=lambda x: x[0].int)\n\nThis will sort the numbers using integer division. If you want to sort them by \"a\" (ascending) or \"z\" (descending), you have to use the built-in sort() function (or a sorted list).\n\nIf you want to sort by arbitrary things (such as \"zero, one, two,..., nine\" or \"a, b, c, d, e, f, g, h\") I would suggest using a dictionary:\nimport itertools", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    for i in range(0, n):\n        if i % 2 == 0:\n             numbers[i] = 1\n    else:\n              numbers[i] = i\n    return''.join(numbers)\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n       if len(numbers) <= 9:\n         return numbers\n       else:\n         # We will not be sorting by zero\n         numbers = sorted(numbers, key = lambda x: x[0])\n         return sort_numbers(numbers)\n\nI know this is a joke, but it is worth noting that sort_numbers would be more accurate if the code were rewritten as:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\n    return list(numbers.enumerate()).sort()\nThat's the Pythonic way of doing it.\n\nYou have to use the function _enumerate_ for this.\n\nAnalogous to:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nFrom the docs: \n\nAnybody remember the original -1 joke in Python:\n\"\"\"\n\"\"%s %s\" % (name, end)\n\"\"%s = name % end\n\"\"\"\n\nI remember it as:\n\"\"\"\n>>> \"foo\" in [\"a\", \"b\"]\nFalse\n>>> \"foo\" not in [\"a\", \"b\"]\nTrue\n\"\"\"\n\nAlso,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(key=lambda x: x[1])\n\nThis is fine, but it's not the only way to do it.\nThe article's suggestion is a little more concise and readable:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    sorted_numbers.append((n) for n in numbers)\n    return sorted_numbers\n\nimport sort_numbers\n\nnumbers = 'three one five'\n\nsorted_numbers = sort_numbers(numbers)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, 9):\n        if numbers[i] < numbers[i+1]:\n             numbers[i]              = numbers[i+1]\n         else:\n              numbers[i]              = numbers[i]\n    return numbers\n\nimport time", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for number in numbers:\n       number, x = number.split()\n       if x =='':\n          return number\n       if number == 'zero':\n          return 'zero'\n       return number\n\nThis is not a good idea.\n\\- The first time you run it, it will take some time to build the List.\n\\- When you run it again, it will create a new List from scratch.\n\\- The code is not as readable as it could be.\n\\- The function takes three arguments when only one is needed.\nTo make it better, I suggest the following:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(numbers.index)\n\nI never understood why sorting numbers in python is so hard.\n\nI don't see what is hard about it, it is straightforward and works as expected. What is it that you do not understand?\n\nPython has a decent in-built sorting function:\n>>> [1,2,3,4,5,6,7,8,9,10,11,12]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n>>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n[11, 12, 1, 2, 3, 4, 5, 6, 7, 8]\n>>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n[12, 1, 2, 3", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split()\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].sort()\n\nIt's not a very good code sample, and it doesn't even show the real power of Python.\n\nI've been wondering about how to do this sort of thing. It's nice to have a'real world' example.\n\nYeah, I know. It's hard to pick the right example.\nI think the main thing to notice is that this code is really very short and clear and it does exactly what it says.\nI also like that the code has a very strong sense of flow. One thing builds on top of the other.\nIf I had to pick a single code example to show what I like about Python, this is the one I'd pick.\n\nI'd probably use this for a quicksort-like function.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    for i in range(0,9):\n        numbers.append((numbers[i] ** 2 + 1) % 10)\n\n    return numbers\n\n    def reverse_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Return the string with numbers reversed\n    >>> reverse_numbers('one nine zero')\n    'zero one nine'\n    \"\"\"\n    return ''.join(reversed(numbers))</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ').map(str.int).sort(reverse=True)\n\nfrom typing import List, string\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return numbers.split(' ').map(str.int).sort(reverse=True)\n\nWell, that's how you are supposed to do it.\n\nIf you think about it, \"pythonic\" would be the following:\nfrom typing import List, tuple\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to '", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    \"\"\" Generate a random number\n    r = random.randint(0,10)\n    \"\"\"\n    \"\"\" Sort the list of numbers\n    for i in range(len(numbers)):\n         numbers = [numbers[i], numbers[i+1]].join(',')\n         numbers.sort()\n    \"\"\"\n    \"\"\" Return sorted number\n    return r+sorted(numbers)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero nine eight seven six five three one'\n\nto be honest, i prefer:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.index(str.find('zero'), -1).join(',')</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    list(numbers.split())\n    for i in range(1, 9):\n       if i in numbers:\n          return numbers[i]\n    else:\n          return 'zero'\n\nNeat, although it'd be nice if the \"else:\" clause wasn't a Python special case.\nHere's the same code in C:\nvoid sort_numbers(void) {\n\tuint32_t list[32];\n\tint i;\n\tfor (i = 1; i < 9; i++) {\n\t\tif (list[i] == 0) list[i] = 1;\n\t\telse if (list[i] == 1) list[i] = 2;\n\t\telse if (list[i] == 2) list[i] = 3;\n\t\telse if (list[i] == 3) list[i] = 4;\n\t\telse if (list[i] == 4) list[i] = 5;\n\t\telse if (list[i] == 5) list", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n        return sorted(numbers.values(), key=lambda x: x[1])\n\nfrom typing import TypeError", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nThat's a really bad idea. Why does it return numbers? It should return a list. If this were a method in a class, the \"class\" would be called \"List\" and the method would return a list of lists, containing the list of numbers.\nOf course, there are places where this is acceptable, e.g. in the shell.\n\nYes, it's really bad idea. But the author is doing it for a reason, which is to illustrate how the code is ugly and hard to read.\n\nSorting isn't hard to read, it's simple and clear. The only thing I would find strange if I were reading it is the use of the word \"sort\" instead of \"sorted\" or \"sort_numbers\".\nI've read more ugly code than that, which is my point. This is the first time I've seen this particular example.\n\nI'm just explaining the author's reason.\n\nI think this may have more to do with the fact that \"import\" is a keyword in Python than the fact that it's a list. If you had a function like this:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return list(numbers[:-1].split()[0])\n\nI think the first example shows a problem with a lot of Python: There are only two types of list: list() and tuples.\n\nI believe the point is that it's a contrived example for purposes of illustration.\n\n... but it isn't. If you're not doing numerical operations, you're more or less forced to use list(x) to create a new empty list.\nWhat's the point of having an empty list? Why not just use an empty tuple?\n\nUse tuple() and list(). Problem solved.\n\nNo, problem not solved. You still need an empty list to create a new empty list. Why not just use an empty tuple?\n\nYou're really going to have to demonstrate why you need a new empty list. I'm not saying you're wrong, but I've never had to create an empty list, let alone an empty list when the list would be empty anyway.\n\nWell, that's my point. If you aren't using a list to iterate through it's elements, then what are you using it for?\nHow would you create an empty list in Python?", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.map(lambda i: i.lstrip('0')).sort()\nIt's a simple example, but it's another example of Python's magical syntax. I've spent much of my time in the past few days fumbling around with Python and discovering that its power comes not from explicit language features, but from the power of the language's implicit features.\n\nYou can do this in Ruby:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    list(range(numbers))\n    return numbers[::-1]\n\nThis is very nicely explained. The only criticism I have is that\nrange(numbers)\ndoes not give the best solution in general. Try this:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nNow sort_numbers(numbers) will return '1 2 3 4 5 6 7 8 9' in the wrong order.\nThe first item in the list of numbers is sorted correctly, but the next item is actually 4th in the list, and so on.\n\nIs this true? I think the \".\" index is zero-based, so the \"1\" in the first tuple will be considered less than the \"1\" in the second tuple.\n\n'.' is zero-based in strings and '::' is one-based in lists, as you said.\n\nA good trick to show that you're using a one-based index is to use a function that returns a list of tuples.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key = lambda item: item[1:])\n\nI'm sorry, but if you want to sort a list of integers by value, you have to use a different algorithm.\n\nAnd that's the point of this post.\n\nI agree with this. I'm not sure what all the fuss is about.\nThe author is just trying to make a point that this code is more readable and less error prone than using any of the more esoteric, and thus, less used, sorting functions.\n\nActually, I think it's to show that Python _doesn't_ have a way to sort a list of integers in place. If you have an iterable of integers, Python has a way to sort that (sorted()). But if you have a list of integers, Python can't sort them in place. It's a slightly pedantic point, but I see his point.\n\nRight, I got that. I agree with his point too, but I don't think it's a big deal.\nI'm not sure why you say \"it's slightly pedantic\" since his point is that Python doesn't have a built-in way to sort a list of integers in place", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sort(range(numbers), key=lambda i: i)\nThe correct answer is:\n>>> sorted(sort_numbers('three one five'), key=lambda i: i)\n[0, 3, 5, 1, 0, 4, 6]\nCompare to sort() from the standard library:\n>>> sorted(sort(range(3, 10)), key=lambda i: i)\n[0, 1, 3, 6, 4, 5, 2, 8, 9]\n\nI was hoping for the library function 'list.sort()' to be used instead.\n\nNeat. Reminds me of the \"List\" module from the Standard ML library.\n\nI guess it's a bit like python's dictionary in a way.\n\nNice.\n\nnice.\n\nThis is pretty cool. I've been meaning to write something similar for a while now. I've found myself recently using a lot of one-liners where I manually sort a list of items by column and print the result to the screen.\nI'm going to try and use this in a script and see how it works.\n\nI've actually found myself doing something similar. I use", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split()[0].sort()\nThis is still written in Python, so why would I want to use it?\nI don't see any reason to prefer it over Python's built-in sorting\nalgorithms.\n\nI'd definitely use this. The built-in sorting algorithms are generally good enough, but when I know that I'm not going to be sorting more than a few million items, they're overkill.\n\nWell, they are just simple library functions. If you want to implement your own sorting algorithm that you can use outside of Python, you could just write something like:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n    return '0 1 2 3 4 5 6 7 8 9'\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = list(numbers)\n    return numbers\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    return sorted(numbers)\n\nI think he did that on purpose, to show that Python has poor OO support.\n\nI think he did that on purpose, to show that Python has poor OO support _for iterables_.\nIterables are __iter__able, but not necessarily __iter__able.\n\nThat's not really true.  If the it is iterable, it is also iterable.\nThe only way it wouldn't be iterable is if it has a special __non- iterable __attribute.\n\nIf there's a way to define __iter__able behavior, it's not hard to imagine that someone will.\n\nI am not sure what you are getting at.  It is impossible to define a __iter__able behavior unless it is __iter__able in the first place.\nI don't think you understand what __iter__able means.  You are confusing it with __iter__.  There is nothing to imagine.\n\nPython is a _dynamic language_. That's what makes it interesting. At first you're all \"Hey, what the hell is happening here?\" But then you figure out how the language works, and how to control it", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 2:\n       return 'zero one two'\n    return 'zero one nine'\n\nimport string\n\n    def print_arrays_reverse(arrays: List[str]) -> string:\n    \"\"\" Prints an array's elements in reverse order.\n    >>> print_arrays_reverse([['one','two','three','four','five','six','seven','eight','nine'], 'one','two','three','four','five','six','seven','eight','nine'])\n    'nine eight seven six five four three two one'\n    \"\"\"\n    for i, array in enumerate(arrays):\n       print array.reverse\n    return ''.join(print_arrays_reverse(arrays))\n\nNow we can write a function to print the numbers 1-9:\n\nfrom typing import List\n\n    def print_numbers(numbers: List[str]) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    for i in range(1, 9):\n        if i < numbers[0] and i < numbers[1]:\n            sorted_numbers.append(numbers[i])\n    return sorted_numbers\n\nI'm not sure about your example. For example, if you enter \"1 two 3 5\", the function will return \"3 5 2\" which is not what I expect.\nI'd rather have the function return \"1 3 5 2\" instead.\n\nsorted_numbers = []\nfor i in range(1, 9):", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split()\n    if len(numbers) == 2:\n       numbers = numbers[0:0]\n    else:\n       numbers = numbers.split(' ')\n    number = numbers[0]\n    sort_numbers(number)\n\nThis makes sense in the context of the article, but if you're not familiar with Python it is confusing.\n\nI'm not sure I see how this is confusing. The post is using python-centric conventions, but the logic is completely clear.\nThe sort_numbers function is used to sort a list of numbers. The code is written to check if the list of numbers is 2 characters or shorter. If it's not, it splits the list on commas and sorts the resulting list.\nThe 'three one five' string is then returned from the function.\n\nThe sort_numbers function is used to sort a list of numbers. The code is written to check if the list of numbers is 2 characters or shorter. If it's not, it splits the list on commas and sorts the resulting list.\nThe 'three one", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return [numbers[0] if (numbers[0] <= numbers[1]) else numbers[1] for n in range(9)]\n\nI love Python, but why does one have to resort to that sort of hackery? The language is so expressive, why can't we have something like (and I'm sure this is a horrible example)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    return numbers", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 0:\n        return numbers\n    else:\n        return numbers[::-1]\n\nI see this kind of thing _all_ the time, and I'm not convinced it's a bad thing to do. I think it might actually be a good idea to do this when your code is too high-level for the specific problem you're trying to solve.\nI've had to use this pattern in a few places to get around a few issues. For example, one of the projects I'm working on, I'm writing a simple Python wrapper around a C++ library. This library has some memory allocation issues, so it's necessary to run it with a very low memory limit. This is very easy in a C++ environment. In Python, it's a bit trickier.\nI started out with a function that would allocate a single chunk of memory for the task, and then the function would return this chunk as a tuple. It worked fine, except for one thing: The library was using dynamically-allocated memory, so I couldn't just say \"allocate me a chunk of memory big enough for all the", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    \"\"\" If the string is 'one', return 'one'\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return 'zero'\n    else:\n        return 'two'\n    else:\n        return 'three'\n    else:\n        return 'four'\n    else:\n        return 'five'\n    else:\n        return'six'\n    else:\n        return'seven'\n    else:\n        return 'eight'\n    else:\n        return 'nine'\n\nWell, the code works, but it doesn't seem very idiomatic.\n\nI think it's the first time I've seen a recursive lambda.\n\nAlso, the code is a bit verbose. It's not hard to read,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers.split(' '), key=lambda x: x[1], reverse=True)\n\nSee also:\n\nI like his solution, but it's not Pythonic, IMO. I prefer:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(numbers.length):\n         if i not in numbers:\n            numbers.append(i)\n         return numbers[-1]\n\nYou should probably add a comment that the for-loop is necessary in Python 3.0. The Python 2.x version of this works fine, but this one doesn't:\n>>> sort_numbers('three one five')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\nThis is because, in Python 3, you can't iterate over the indices of a list. The loop is necessary in Python 3.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(',').map(numbers.pop())\n    sorted_numbers = []\n    while len(numbers) > 0:\n        if numbers[-1] == 'nine':\n           return sorted_numbers\n         sorted_numbers.append(numbers[-1])\n    numbers = numbers.split(',').reverse()\n\nWhat's the point of this? Just use the built in ` sorted() `.\n\nOh wow, I knew about that but had no idea it worked on strings.\n\nIt works on anything that sorts, I think. For example, you can use it to sort integers:\n>>> a = [7, 5, 2, 6, 4, 3]\n>>> sorted(a)\n[2, 4, 6, 7, 3, 5]\n\nYou don't need the parentheses in Python.\n\nNo, you do.\n>>> sorted([2, 4, 6, 7, 3, 5])\n[3, 4, 2, 5, 6, 7", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.sort(lambda x: x[0])\n\nI'm afraid this is not a solution - the returned string is always sorted in lexicographical order. In fact, this method is not a function at all, but a macro that expands into the above Python code.\nTo get the desired result, you should use a function like this:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(9):\n        sort_numbers(numbers[i:]) + sorted(numbers[i:])\n    return sorted(numbers)\n\nGotta love python.\n\nI love Python and I love the library, but that's not a good way to do it.\nFor one, the comparison operator is a function with two arguments. You need to use the int() operator.\nBetter to use some built in library:\n\nHow do I do this in Ruby?\n\nRuby 1.9:\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].sort\nI haven't checked, but I'm pretty sure that's the fastest way.\n\nRuby 1.9.2:\nrequire'sort'\nsorted = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].sort\n\nAh, that's right. Thanks.\n\nI believe this is how you do it in PHP too:\n<?php\nfunction sort_numbers($array) {\nfor ($i = 0; $i < strlen", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    number = numbers[0]\n    if number > 9:\n       return \"nine\"\n    else:\n       return number\n\nThis is a great example of why you should always use named parameters.\n\nYou are right, but in this case it might be a good way to learn to use the type system.\n\nThe type system doesn't help at all.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = re.sub(' ', '_', numbers)\n    numbers = sorted(numbers)\n    return numbers.split(' ')\n\nWhy are you making all your functions private? You can just call them as functions and not have to mess with access modifiers.\n\nOne of the reasons I use Python is because it gets out of my way and doesn't make me worry about memory management. It is the easiest language I've found to write throw away scripts in.\nI don't want to have to worry about how to manage lists of my functions. So I just declare them private.\n\nWhy not just call them as functions in the same scope? What's the use case for making them private?\n\nI can't think of a reason not to make them private. But I'm a newbie. What is the argument for making them public?\n\nThere is no argument for making them public. He is telling you that you can just call them as functions without worrying about access modifiers.\n\nThanks for the clarification.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) > 0:\n       numbers = numbers[:-1]\n    else:\n       numbers = numbers.split(',')\n       numbers = sorted(numbers)", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[:-1]\n\nThis is a solution to a problem nobody has. It only works for strings that have numbers (as opposed to, say, strings that contain the word \"three\"), and you have to implement it yourself.\n\nWell, that's the point of the exercise. It's not a solution to a problem.\n\n_\"It's not a solution to a problem.\"_\nYes, but that makes the post useless.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return '-'*(numbers.count(\":\") - 1)\nWhy did you have to write this function?  I mean, why not just write it like this:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = numbers.split(' ')\n    return numbers.sort(lambda s: s[1] < s[0])</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n       for number in numbers:\n          if number < number:\n                 number = number\n            else:\n                 number = number - 1\n    return \"\"\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return \" \".join(map(str, numbers))</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ')[0]\n\nUh, \"five\" is the first number, and is smaller than \"three\". Shouldn't it be the other way round?\n\nYou're right.\nOne more reason to not try to design code on HN.\n\nI have been working with a bunch of college students lately and I have to say that when I was in college I never would have been able to write something like this, let alone know how to call it from python.\nI am really impressed with some of these younger programmers.\n\nI'm in my mid-twenties and have been writing code since I was 13. I'm afraid that if I were to go back to college now, I would have a very hard time.\n\nHave you tried learning another language recently? It's a really humbling experience.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\n    return numbers\n\nYou may have meant", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    return numbers\n\nI always thought this was an odd way of defining functions. It's still not obvious to me why.\n\nIt's really an example of metaprogramming. But it's not the usual kind of metaprogramming that you get with, say, Template Haskell. You're not generating code to be run at compile-time; you're generating code to be run at runtime.\nPython has a very sophisticated metaprogramming system, with classes, instances, metaclasses, and decorators. But this particular example is just a bit of syntactic sugar for a simple function:\nsort_numbers = lambda x: x.sort()\n\nI'm not sure that \"sort()\" counts as a metaprogramming trick. In Python, \"sort()\" is actually a built-in function.\n\nThe sort_numbers function is essentially a lambda expression. It's not a metaprogramming trick in the usual sense, but it's certainly a metaprogramming trick.\n\nI just wish it had a shorter name.\n\nIf only it were in a language where you could provide your own metaprogramming facilities to make short names for you...", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    n = int(numbers)\n    numbers.sort()\n    for number, i in enumerate(numbers):\n       if number < i:\n           n = n - 1\n    return str(n)\n\nSee also:\n\nxkcd  is an often humorous webcomic created by Randall Munroe (also known as \"xkcd\"). It is hosted on Munroe's web site, XKCD. The comic often makes use of stick figure images with speech bubbles to represent characters. One of the comic's most popular features is the \"explain xkcd\" feature, where readers suggest explanations for the depicted events or characters.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    values = list(numbers)\n    values.sort()\n    return values", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if number is None:\n       number = 'zero'\n    else:\n       number = number.upper()\n    return number.split(' ')\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    if number is None:\n       number = 'zero'\n    else:\n       number = number.upper()\n    return number.split(' ')\n\nThe last version is best.\n\n\"If I have seen further than others, it is by standing upon the", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return 'zero' if numbers:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers:\n       numbers = [n for n in numbers if n >= 0]\n       return \" \".join(numbers, sorted(numbers))</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return lambda a: [numbers.index(a) - 1 for a in numbers if a > -1]\n\nGuido could probably do a better job at explaining it, but here's an attempt at my own:\nYou're using a list comprehension to build a new list. This is accomplished by creating a new function that takes a single parameter, and appending a single list to the beginning of the new list. The resulting list is the inner list of the comprehension.\nThen you call the function, and pass in a list of values to sort, and it returns a new list.\n\nI think you may have understood my post wrong. I already understand how list comprehensions are used in Python. I was just wondering about the type of the variable \"numbers\". It's a tuple, which I understand, but I don't understand why it's necessary to use tuples here.\n\nIt's possible that the example is not idiomatic, but I think the problem is that lists don't have a native compare function; it's possible to make one, but it requires more typing:\n\nI was thinking that. But then there's that, and it's also possible to make a custom comparison function that", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    return numbers.sort()</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return [i] + [j]\nYou should be ashamed of yourself.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    n = numbers.count()\n\n    for n in numbers:\n        if n == 0:\n           return 'zero'\n           else:\n             return n\n\n    return n\n\nThis doesn't work for strings with spaces. If you try \"two zero zero two\" it will return \"two\" instead of \"two zero zero two\".\n\n_\"This doesn't work for strings with spaces\"_\nThe original sort_numbers() has the same problem. If you want the input string to be zero-terminated, you'd have to use the correct format:\n>>> sort_numbers('two, zero, zero, two')\n'two, zero, zero, two'\n>>> sort_numbers('two zero zero two')\n'two'\n\nHow is this better than Python's built-in sort()?\n\nIt is not. However, it does give you a consistent way to sort any iterable with arbitrary sort keys.\n\nHow is that different than the built in sort", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[::-1] + '0' + numbers[::-1] + '1' + numbers[::-1] + '2' + numbers[::-1] + '3' + numbers[::-1] + '4' + numbers[::-1] + '5' + numbers[::-1] + '6' + numbers[::-1] + '7' + numbers[::-1] + '8' + numbers[::-1] + '9'\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.reduce(lambda x,y: x.split(' ')[0])\n\nThis is so unreadable.\nHow about:\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nnumbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 4:\n       numbers = (numbers[0], numbers[1], numbers[2], numbers[3])\n       return 'zero one two three'\n    else:\n       if numbers[0] < numbers[1]:\n          return 'zero one two'\n       else:\n          return 'one two three'\n\nI'm sorry, but if you are going to resort to a linear search for sorting numbers you might as well use python's built-in sort function.\n\nIt's better to use sorted than sorted(). The built-in sort function in python uses the C stdlib's implementation of quicksort, which uses a heap of dynamically allocated memory, and will use a ton of memory for large lists.\n\nI like the code, but you don't need a space between numbers and '.'.\n\nJust because you don't need a space doesn't mean there's no benefit to having one.\n\nExample?\n\nIs there a way to get a", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 0:\n       return 'zero'\n    if len(numbers) == 1:\n       return 'one'\n    elif len(numbers) == 2:\n       return 'two'\n    elif len(numbers) == 3:\n       return 'three'\n    elif len(numbers) == 4:\n       return 'four'\n    elif len(numbers) == 5:\n       return 'five'\n    elif len(numbers) == 6:\n       return'six'\n    elif len(numbers) == 7:\n       return'seven'\n    elif len(numbers) == 8:\n       return 'eight'\n    elif len(numbers) == 9:\n       return 'nine'\n    return numbers", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[:-1] +'' + numbers[:-2]", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers[-1] == 'zero':\n        return numbers\n    else:\n        return sorted(numbers.split(' '), key=lambda x: x[0])</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, reverse=True)\n\nI wonder if this is the fastest possible solution for sorting...\n\nIt's the fastest solution I could think of. I'm sure there's a faster way though.\n\nIt's about as fast as it can be (in Python).\n\nNo.  It's not even close.\n\nCool.\n\nFWIW, this is basically the only sorting algorithm in Python.\nThe only other one I can think of is to use itertools.chain.sort.\nIt would be interesting to see an article which compares the two, but my\nguess is that the performance hit for the extra overhead of the dictionary\nwill outweigh any benefit from using itertools.chain.sort.\n\nNo, not the only sorting algorithm in Python.\nThere's a \"sorting\" module in Python. I think it's faster than `itertools.chain.sort` in general.\n\nThe Python sorting module is actually a _class_, rather than a module. It also uses itertools.chain.sort.\n\nAh, I see. It just happens that I've been writing some code using the class and I thought", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'one three five' if numbers: len(numbers) == 1 else numbers[0] +'' + numbers[1:]\n\nfrom typing import Union, Interval\n\nfrom typing import Matrix, Range, Sequence\n\nfrom typing import Char, List, String\n\nfrom typing import Char, int, float, str, List, TypeError\n\nfrom typing import Range, Union\n\nfrom typing import Union\n\nfrom typing import Interval\n\nfrom typing import Matrix, List, String\n\nfrom typing import Char, int, float, str\n\nfrom typing import Char, int, float, str, List, TypeError\n\nfrom typing import Interval, Range\n\nfrom typing import Char, int, float, str, List, TypeError\n\nfrom typing import Union, Matrix, List, String\n\nfrom typing import Char, int, float, str, List, TypeError\n\nfrom typing import Interval, Range\n\nfrom typing import Char, int, float, str, List, TypeError\n\nfrom typing import Matrix, Range\n\nfrom typing import Char, int, float, str, List, TypeError\n\nfrom typing import Interval, Union", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\n    print sorted(numbers)\n\nWouldn't this be more readable as:\nimport sort", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    from itertools import groupby\n\n    def sort_by_size(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a new List containing the sorted numbers in reverse order\n    >>> sort_by_size('three one five')\n    [five three one]\n    \"\"\"\n\n    for i in range(2, 9):\n        numbers = numbers.split(':')\n        for j in range(2, i+1):\n           if numbers[j]!= 0:\n               numbers.append(numbers[j])\n        else:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n    while numbers:\n       if number is None:\n          numbers.append(number)\n        else:\n           numbers.sort()\n    return numbers\n\nPython 3.0 is going to have a built-in `sort()` function. I'm not sure if `from typing import List` will still be needed in the future.\n\nMost likely this is a good thing. Having to import the built-in list module is one of those things that is a pain, and if you don't know what to expect it can cause confusion.\n\nIt's also a pain because it's not the same in every version of Python.\n\nWell, it's a module that's included in every version of Python, so it's the same. But it does cause trouble for tools like Py2exe. I think it'd be much better if Python just didn't include a list module, and instead had a built-in built-in.\n\nI was wondering why 'from typing import List' was necessary.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\nI like Python, but I think I'll stick with Perl for my everyday scripting.\n\nI agree, I thought that this was going to be a \"why python is better than perl\" and I was going to rant about OO (although perl has some, it's not nearly as good as Python's) and while Python may be better, it's not better enough.\n\nFrom the article:\n[Python has] Python-style OOP\nThis is false, Python has proper OOP. See:\n(1) Python objects are first-class citizens and can be passed as parameters to methods, while in Perl you can only pass a reference to a Perl object.\n(2) Python objects are immutable by default and can have methods that alter their attributes, while in Perl the default behaviour is to mutate the attributes of an object when you call a method.\n(3) Python objects can implement interfaces, while in Perl you have to implement the interface in terms of Perl objects.\n(4) Python has the concept of multiple inheritance, while in Perl the concept of inheritance is rather limited.\n(5) Python has the concept of abstract methods, which can be overridden,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n < 1:\n        return 'zero'\n    elif n < 9:\n        return 'one'\n    elif n < 8:\n        return 'two'\n    elif n < 6:\n        return 'three'\n    else:\n        return 'four'\n\nThat's the same algorithm I have in my head for sorting. I know this isn't a very smart algorithm but it's a good one to get my feet wet. I can see where it would be useful if I were writing a sort program for a small problem.\n\nIt isn't smart. It doesn't use any information from the input. It's simple, and it works.\nFor small inputs, any algorithm which is guaranteed to run in constant time is good enough to be used.\n\nFor small inputs, any algorithm which is guaranteed to run in constant time is good enough to be used.\nOf course you need to use the best algorithm for the job, but if you're just sorting some numbers you have to", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers:\n        return numbers.sort()\n    else:\n        return numbers[0].sort()\nNot really. They're not sorting the input, they're sorting a list of input.\nThe only thing this method does is iterate over the input and convert all the input into the same type, which you can do with just \"from typing import List\". Then you just do list.sort() to sort the list.\n\nAs I said in the article, I didn't want to show the whole thing and the code was too small to warrant it's own file.\nI thought it would be nice to just show the functionality. I didn't want to go into explaining the code too much because the article is already a little long.\n\nThe problem is that even if it's only a snippet, it's bad code to begin with.\nIf you're going to show code, show good code.\nThis code is what you'd find on a bad code repo.\n\nThe point of the article is to show the functionality, not the code.\nI thought it was a nice way of showing how to sort a list of numbers", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n_Really?_ This is the code you're proud of?\nIn other words, a solution of a trivial problem that could be expressed in a few lines of English, using a common method, with almost no whitespace, using one of the most ubiquitous and well-documented modules, with no logical errors, using a very readable syntax.\nAnd you think it's good?\n\nYour comment is rude and dismissive. It's not about how much code I wrote, it's about how little code I needed to write.\nI don't see how else I could have done it.\n\nI actually think you wrote _too much_ code.\nIf I was going to do this, I'd just write a function that did something like:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    k = 0\n    for n in numbers:\n       k += 1\n    if n < k:\n       return k\n    return numbers[k:]\n\nThe actual code he used was:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) == 0 or len(numbers) < 3:\n       return '0 1 2 3 4 5 6 7 8 9'\n    for i in range(1, 10):\n       numbers[i] = i\n    if i % 2 == 0:\n       numbers[i%2] = i % 2\n    return '0 1 2 3 4 5 6 7 8 9'", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    numbers.sort()\n    return numbers\n\ncan be simplified to:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\n    return numbers.replace(' ',' ')", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    for i in range(len(numbers)):\n        numbers = numbers[i:i+1].split(',').reverse()\n\n        list.sort(key=lambda x: x[1])\n\nThis has been posted before.\nThat's the general idea, yes.\nThe real question is whether this is the best way to sort a list of integers.\n\nBut, of course, the numbers are already sorted.\n\nI hate to be that guy, but if you don't think this is the best way to sort a list of integers, you have to tell us why.\n\nSure, it works, and it's quick, but it's not optimal. There are better ways to sort integers. I don't remember the details, but there's a better algorithm involving a quicksort, and a second algorithm that is much faster than this but is more complex.\nI don't have a link to the details right now, sorry.\n\nIf I remember correctly, the quicksort algorithm", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers[numbers[-1] % numbers.count()]\n\nExcept that it won't do anything with, say, 0, 4, 8, 9, etc.\n\nYou are right.\n\nIt also doesn't work with 0, 9, 5, 1, 3.\n\nOr 0, 4, 8, 9, 1, 3, 5\n\nI like this kind of code. Not that I would ever use it in production.\n\nI would have named it 'numbers', just to make sure the user knows what's going on.\n\nWhat's wrong with the classic \"numbers.sort()\"?\n\nThe obvious implementation of that, for an unsorted list, would be to write it to a file and sort it there.\n\nOr even a list comprehension:\nnumbers = sorted(list(numbers))\n\nOr a generator expression:\nnumbers = (numbers.map(lambda x: x if x < 10 else x+1).sort()\n)\n\nAnd, to emphasize the point, there is an obvious reason why it is a generator expression and not a list comprehension: you can't use a generator expression as the argument", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if len(numbers) < 9:\n        return '0'\n    else:\n        for i in range(1,9):\n           if i == numbers[i - 1]:\n               numbers[i - 1] = numbers[i]\n        else:\n               numbers[i] = numbers[i - 1]\n    return sorted(numbers, key=lambda i: i)</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = []\n    for number in numbers:\n       numbers.append(number)\n    return sorted(numbers)\n\nThis is a straw man. The question is, how do you do this in Python?\n\nIn Python, you probably can't, because Python is not a list-processing language.\nIt's a language that makes it easy to use lists and sequence containers, but it's not a list processing language.\n\nYeah, I know; but it was a bad example.\n\nHey, did you know you can write Python like this:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n < 2: return 'zero one two'\n    if n > 9: return 'nine eight'\n    n = sort(numbers)\n    return n\n\n>>> print sorted(List(sort_numbers('three one five')), key=lambda x: x[0])\n\n[1, 3, 5]\n\n(remove comment line 4)</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(cmp)\n\n>>> [23,34,6,9,99,42]\n[9,6,42,99,34,23,34]\n\nI think that's pretty cool. It's concise, yet readable. I think I'll use it.\n\nwhy not use it as an argument to a function?\n\n_It's concise, yet readable. I think I'll use it._\n\nthis is just a plain bad idea</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort(lambda n:n.split(' ')[1])\n\nThere's one \"hack\" in there that I don't really like. I don't think it's _wrong_, but it's not what I would do.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort()\n\nCan someone explain the purpose of this?\n\nYeah, I don't get it either.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for number in numbers:\n       if number < number[-1]:\n          number[-1] = number\n    return number\n\nThat's some pretty shitty code.\n\nAgreed. Shouldn't it be\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = sorted(numbers)\n    return sorted.transpose()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n < 0:\n        return 'zero'\n    if n > 9:\n        return 'nine'\n    return n\n\nThis is a neat trick for simple one-liners, but I find that sort() + a little loop is much easier to read and understand. It might be slower, but I think it's worth it.\n\nDepends on the context and your audience.\n\nWTF does that mean?\n\n'WTF' is an abbreviation for 'What the fuck' - a vulgar phrase used to express surprise or dismay.\nIn this case, the abbreviation was used in the sentence 'Depends on the context and your audience.' to express the idea that the statement 'Depends on the context and your audience' is true in some cases and false in others.\n\nI thought it meant, \"What the fuck does that mean?\"\n\nIt might. It might not.\n\nWell, WTF I might mean, or I might not, or I might mean 'WTF I might mean' or I might mean 'WTF I might mean 'WTF I might mean.'", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return lambda x: x[1] if x[0] < x[1] else x[0]\n\nI guess I don't understand the point?\n\nIt's just a simple sorting function with a clever name.\n\nLet me guess... \n\nNice.\n\nOuch, I wonder if that was a coincidence...\n\nI don't think so. At first I thought it was, but then I realized that the author of this was \"chrisg\" and the author of that was \"chris\".\n\nDon't be so quick to jump to conclusions. It could have been written by someone named \"Christian\" who wrote the article at\n\nThere is a similar idiom in Python:\n\nThat's a neat way to approach it, but it seems like a lot of extra code for something that's already in the standard library.\n\n_extended_ sort, which is part of the standard library, is a little more compact:\nreturn sorted(extended_list(input, key=lambda x: x[1]), reverse=True)\n\nI always prefer the sort() method.\n\nWhy? It's less readable and more complicated.\n\nI", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return ''\n\nNeat!\nI would've preferred  as a function name though.\n\nThe best name is the one that sticks.\n\nUntil someone sticks an argument there.\n\nNice. I'm a fan of this idiom:\nfrom typing import List\nsorted = List(1, 2, 3)\nfrom functools import partial", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    s = '\\0'\n    numbers.sort()\n    return s", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    for i in range(1, 10):\n        numbers[i] = i\n    return numbers\n\nIn the range(1,10) loop you will be using a range iterator (which is a python built-in), but not actually using it. This will cause an error in python 2.7 (maybe others?) because the for loop is indented inside the range iterator. You will need to indent the range iterator for it to work.\n\nIn python 3, the range() function is actually a generator, so you can use it like this:\nfor i in range(1,10):\nnumbers[i] = i\n\nYou will still need to indent the range() function for it to work.\n\nThis has nothing to do with python 3 vs. 2.7.\n\nI actually tested this and you're right. This works in python 2.7.\n\nYou might want to add a note on Python 2 vs 3, and the use of.format() instead of print.\n\nThis was written for python 2.7, but the note about the range iterator still applies. In Python 2, the range() function is a generator", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    numbers = sorted(numbers)\n    return \" \".join(numbers)\n\n>>> print sorted(['one two three four five six seven eight nine']).join(' ')\none two three four five six seven eight nine</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers, key=lambda x: x[1])\n\nfrom typing import OrderedDict", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    k = len(numbers)\n    numbers = numbers.split()\n    for i in range(k):\n        if numbers[i] < numbers[i+1]:\n            numbers[i] = numbers[i+1]\n    return sorted(numbers)\n\nfrom typing import List, String, _\n\n    def sort_numbers(numbers: str):\n    \"\"\" Sort numbers from largest to smallest.\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest.\n    >>> sort_numbers('three one five')\n    'three five one'\n    \"\"\"\n    k = len(numbers)\n    numbers = numbers.split()\n    while numbers:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    numbers.reverse()\n    return numbers.join(' ')", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n    return numbers[0] +'' + numbers[1:]\n\nExcept that they didn't \"sort\" the numbers. They just left them in order.\n\nThey did sort them, sort() does not return the original list, it returns a new one, the same way quicksort works (but with less to no chance of getting a same result).\n\nBut they didn't sort the number. They sorted the list.\nThey should have written:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.split(' ').sort()\n    return numbers", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(',').sort()\n\nHow does this work?</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers:\n        return numbers\n    else:\n        return 'zero one two three four five six seven eight nine'\n\nI've seen this used in a few different places, but never had any desire to use it.\nI can't think of any situation where the key is a list of one or more strs, and the value is an int.\n\nI've seen it in a few places too, but never really used it.\nIt's one of those things that is really useful, but the cases where I've wanted to use it have been so trivial that I've not bothered.\nI imagine it would be very useful in an interface for a library dealing with files, where you might have to parse something like a file path into a list of numbers. I'm sure it would be a lot easier to read than something like\n(lines.split('/').map(str.split('/').count))\n\nHm, I don't know about that. I'd think that I'd want the key to be a list of numbers, and the value to be a list of strings.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort(lambda a, b: b < a)\n\nfrom typing import *", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero one two three four five six seven eight nine'\nIf you're ever asked to write a sorting function in an interview, make sure to include unit tests for it.\n\nHow would you write a unit test for this?\n\nNot OP, but:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return lambda x: x.split(' ')[0]\n\nfor i in range(1,10):\n    sort_numbers('zero one two three four five six seven eight nine')\n    # > 'zero one two three four five six seven eight nine'\n\nThe import statement is often an unnecessary burden. I've found that \"imports\" get out of sync with the code. Even if you're using PEP8, I find that imports are easier to manage manually than through an import statement.\n\nIt's easy enough to write your own sort function, if you don't like the way the one in the standard library works:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sort(numbers, key=lambda a: a[0], reverse=True)\n\nIf you want your code to be more readable and concise, I'd recommend something like:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    n = 0\n    while n < len(numbers):\n       n = n - 1\n       if n == 0:\n          return numbers[-n:]\n    else:\n          return 'zero' + numbers[-n]\n\ni think this is better:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    # the list is empty\n    l = []\n\n    for i in numbers:\n        l.append(i)\n    return l\n\n    def all_numbers(l: List[str]) -> None:\n    \"\"\" Return the list of all numberals from 'zero' to 'nine'\n    >>> all_numbers(['one', 'two', 'three'])\n    ['one', 'two', 'three']\n    \"\"\"\n    for i in l:\n        if i in numbers:\n           return i\n\n    return None\n\n    def convert_numbers(numbers: str) -> str:\n    \"\"\" Return a space-delimited string of numbers from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Input is a space-delimited string of", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers = list(numbers)\n\n    if numbers:\n        numbers = sort(numbers, key=lambda n: n[0])\n\n    return numbers\n\nWorks in Python 2.4.2.\n\nI just got done reading an essay about how the use of sort() should be frowned upon and how \"natural\" or \"non-destructive\" sort algorithms should be used instead.\n\nMy understanding of \"non-destructive\" sorts is that they preserve the order of the input, but do not modify it. Sort(), on the other hand, does modify the input.\n\nIt's not clear to me what the distinction is here. Both sort() and the non-destructive sort() algorithms are binary operations that take two input values and produce a single output value. If the input values are the same, their order is preserved. If they are different, the order is changed. I would argue that there is no difference at all.\n\nWhat do you mean when you say that sort() \"modifies\" the input?\n\nI mean, that if I have a list of numbers, I can ask sort() to sort them from smallest", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    #        #", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ').pop(0) + numbers.pop(9) +\n    '0 one two three four five six seven eight nine'\n\nYeah I know it's a kludge, but it's easy to write and easy to read.\n\nYou know what's easy to write and easy to read? A loop.\n\nYeah, but this is easy to read and easy to write :)\n\nI'd say it's more compact, but not really easy to write.\n\nYeah, that's true.\n\nI remember when I used to find this kind of thing cool.\n\nI'm not sure why you are being downvoted. This is pretty much the exact opposite of simple.\n\nIt's simple to _read_. This isn't the opposite of simple, it's the opposite of _elegant_. The same way that the C preprocessor isn't the opposite of the language, it's the opposite of _elegant_.\n\nI've found that using the string concatenation operator for assignment (`\"=\"`) instead of the plus sign `+` operator will make your code much more readable.\nYou don't need to add", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero one two three four five six seven eight nine'\n\nThis code is completely pointless - you might as well just do:\n>>> 'zero one two three four five six seven eight nine' .sort()\n>>> 'zero one two three four five six seven eight nine'\n\nThis one is slightly more interesting:\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    output = sorted(numbers, key=lambda x: x[0], reverse=True)\n    return output</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    results = []\n    for i in range(1, 9):\n        if numbers[i]!= 'one':\n           results.append(numbers[i])\n        else:\n           results.append(numbers[i])\n\n    sorted = [numbers[0], numbers[1],..., numbers[9]]\n    sorted.sort()\n\n    results.append(sorted[0])\n\nThis has been a public service announcement from the Python interpreter.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    for number in numbers:\n       sorted.append(number)\n    return sorted\n\nFrom what I understand, this is a rather poor example. It uses a Python list object but ignores all of its features. For example, it could have simply used sorted(), which is a faster way of sorting a list than a for-loop. And it didn't need to create the list object, and it didn't need to write the return value to a string. I've written a similar function in Ruby, and it's about 2/3rds as long.\nI'm not sure what the point of the example is. Does this method take advantage of a feature of Python that I'm not familiar with?\n\nThe example is in Python 2.7, which doesn't have the sort() method.\n\nSort is faster in Python 2.7 than sort_numbers, and it is also faster in Python 3.2.\nThe thing about the Python 3.2 version is that it is a little more functional. It can't be called with an arbitrary list, it takes a tuple of lists.\n>>> def sort(a, b):", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return 'zero nine eight seven six five three one'\n\nNice. It took me a moment to realize it uses Python's built-in string comparison functions, not just some ad hoc implementation.\n\n>>> from typing import List\n>>> sort_numbers(3,5,7,9)\n\"3 5 7 9\"\n>>> sort_numbers(10,2,5,3)\n\"10 2 5 3\"\n>>> sort_numbers(10,1,2,3)\n\"10 1 2 3\"\n>>> sort_numbers(2,1,10,3)\n\"2 10 3\"\n>>> sort_numbers(1,1,10,2)\n\"1 10 2\"\n\nYou can get the same functionality using the built-in sort function.\n\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers:\n        return numbers.sort()", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.sort\n\nfrom typing import List\n\n    \"\"\" Output is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    >>> list(sort_numbers('three one five'))\n    'one three five'\n    \"\"\"\n    return ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n\nfrom typing import List\n\n    \"\"\" Output is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    >>> list(sort_numbers('three one five'))\n    'three one five'\n    \"\"\"\n    return ['zero', 'one', 'two", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    results = []\n    for number in numbers:\n        results.append('one')\n        results.append(number)\n    return results\n\n>>> list(sort_numbers('one three five zero three five one one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five one three five", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers[0] > numbers[1] and numbers[0] < numbers[9]:\n       return numbers[0]\n    else:\n       return numbers[1]\n\nThe original:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = [0,1,2,3,4,5,6,7,8,9]\n\n    return sorted.reverse()\n\n    if __name__ == '__main__':\n        def main():\n           print(\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\")\n           numbers = [\"three one five\"]\n\n           print(\"Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\")\n           sorted = sort_numbers(numbers)\n           print(sorted)\n\nA simpler example (not an import):", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    n = 0\n\n    for c in numbers:\n        if c in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            n = n + 1\n    return n\n\nnope.\n\nYep.\n\nMaybe.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    s = list(range(1, 9))\n    s.sort()\n    return s\n\nThis is a pretty good way to solve the problem.\nIt is more readable and correct than the one-liner.\nAnd as a bonus, the algorithm is easily expandable to n numbers,\nusing the fact that the input is a list.\n\nThis is a perfect example of why the one-liner is a bad idea.\nIt's much harder to understand what is going on in the one- liner.\nAnd worse, when you make a change you have to be careful to do the same\nthing in both places.\n\nWhat's wrong with \"from typing import List\"?\n\nThe code is much more readable when you use the import statement and a function.\n\nI'm glad to see \"from typing import *\" on the first line of this article.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for i in range(0, len(numbers)):\n        numbers[i] = List(numbers[i], numbers[i], numbers[i], numbers[i], numbers[i], numbers[i], numbers[i], numbers[i], numbers[i], numbers[i])\n\nHere's the source:\n\n_from typing import List_", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return [numbers[0] for numbers in numbers if numbers[0] < numbers[1]]\n\nfrom typing import List, dict, string\n\n    def count(numbers: str):\n    \"\"\" Given a string of numbers, return the number of elements\n    >>> count('three one five four two')\n    9\n    \"\"\"\n    return len(numbers)\n\nfrom typing import List\n\n    def find_sum(numbers: str):\n    \"\"\" Given a string of numbers, return the sum of the elements.\n    >>> find_sum('three one five four two')\n    3\n    \"\"\"\n    return numbers[0] + numbers[1]\n\nfrom typing import List, dict, string\n\n    def find_product(numbers: str):\n    \"\"\" Given a string of numbers, return the product of the elements.\n    >>> find_product('three one five four two')\n    120\n    \"\"\"\n    return numbers[0] * numbers[1]", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n <= 9:\n       return 'zero one two three four five six seven eight nine'\n    else:\n       return 'zero one two three four five six seven eight nine'\n\nSome people (e.g. matlab) think this is the best way to sort numbers.</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers.split(' '))\n\nYou've just created your own \"list comprehension\". A list comprehension is a list of expressions, separated by the \":\", that define a result list. The expressions within are evaluated in order and the results are concatenated together.\n\nIn this case, you can just write it like this:\nreturn sorted(numbers.split(' '))\n\nIt's a little odd that you're getting a syntax error for not using it.\n\nYou can also say:\nreturn sorted(numbers.split(' '), key=lambda x: x[1])\nwhere key is a function that takes a single argument (the first value) and returns the first value.\n\nAwesome, that's what I thought list comprehension was but I kept getting syntax errors. Thanks for the examples!\n\nI had the same problem, and I found this to be one of the best explanations:\n\nIn Python 2, list comprehensions were introduced in Python 2.3. The only way to use them in Python 2.2 is to use the _future_ import syntax.\n\nYou don't have to use the future syntax.\nIn 2.2,", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    for number in numbers:\n         print number\n         for i in range(1, len(number)):\n                print '%d' % number[i]\n    return string.join('')</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n    numbers.sort()\n    return numbers.split(',')", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return list(numbers).sort()\n\nI would personally prefer the following version:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if numbers == '':\n       numbers = [0]\n    else:\n       numbers = numbers.split()\n    return numbers[::-1] + ', '.join(numbers) + '\n    >>> sort_numbers('one two three four five six seven eight nine')\n    'one two three four five six seven eight nine'\n\nI think I'm missing something. Why is there a space in the middle of each element in the sorted output?\n\nIt is probably meant to be a list comprehension.\n\nI think this is a list comprehension.\n\nIt would be nice if more people would use type annotations, especially in situations where they can be so easily expressed.\n\nNot if you're using Python.\n\nI think it's still a good idea to use them, even if the language doesn't force you to.\nAt the very least, it can improve your readability of your code, and often it can make it more expressive as well.\n\nNo, it doesn't. I find that in Python, when I use types, they lead to more confusion.\n\"what", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sort = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in numbers:\n        for j in sort:\n           if i < j:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted_numbers = []\n    for i, number in enumerate(numbers):\n       sorted_numbers.append(i + list(number))\n    return sorted_numbers\n\n>>> sorted_numbers('three one five')\n    'one three five'\n\n>>> sorted_numbers('three one five two')\n    'three five two'\n\n>>> sorted_numbers('three one five five')\n    'five three one'\n\n>>> sorted_numbers('one five two three four')\n    'five four two one three'\n\n>>> sorted_numbers('four two three five one')\n    'five four two three one'</s>", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    if n < 0:\n       return numbers\n    numbers = sorted(numbers, key=lambda x: x[0])\n    return numbers\nI am impressed that he bothered to do this.\n\nI'm not sure about python, but in java, there's a library function to do this:\n\nThis is a great example of the fact that it's not the language that matters, it's the programmer.\n\nI think the statement is more than a little too broad.\nIt's a great example of the fact that a good programmer can do wonders in any language.\n\nThis is why I think everyone should learn a functional language.\n\nI'm still waiting for someone to write a book titled \"Functional Programming in [Your Favorite Language]\".\n\nBy far the best one is \"The Haskell School of Expression\", by Graham Hutton.\nIt's an excellent intro to functional programming, and it has some chapters on Haskell, but really it's about functional programming in general. You can find a free PDF on the author's website:\n\nFWIW, this is a re-release of a presentation given at pycon.\n\nHas", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n\n         return string.upper()\n\nsort_numbers('six eight') # no match\n\nThis is interesting, because it's a fairly trivial transformation that could probably be implemented in a library function, yet instead it's got its own name and a bunch of setup code to deal with the fact that it doesn't work for everything.\n\nYup, and it's a shame.\nAn alternative (somewhat better, IMO) implementation (from the Python stdlib):\n\nimport sys\nsys.sort(numbers, key=lambda item: item[1], reverse=True, key=lambda item: item[-1])\n\nI wrote an article about this recently. It's called \"Python is not Perl\" \n\nIt's also a problem with python, not the user.\n\nThis is also known as the \"No True Scotsman\" fallacy. It's a perfectly valid criticism.\n\nThe article doesn't say that this is a problem with Python, but with the people who implement Python.\n\nDoes this happen with any other programming language?\nI think the best solution would be to avoid this issue altogether.\n\nNo, it's a common", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    sorted = []\n    sorted.append(numbers)\n    sorted.sort(lambda n: n.count(), reverse=True)\n    return sorted\n\nThis is a stupid example. It is equivalent to:\nnumbers = ['one', 'three', 'five','seven', 'eight', 'nine']\nsorted = [numbers.sort() for number in numbers if number > 0]\nsorted is a list containing only numbers.\nThe problem is that this is a common mistake in Python, but it is actually a bad idea. To make a list containing only numbers, you can use the following method:\nnumbers = [0 for x in range(10)]\nThis creates a list containing only numbers from 0 to 9. If you want to sort this list, you can do:\nsorted = sorted.sort(lambda x: x.count())\nThis also makes a list containing only numbers from 0 to 9.\nIf you want to find all numbers between 0 and 9, you can do:\nnumbers = [0 for x in range(10)] numbers2 = sorted(numbers)\nThis is equivalent to:\nn", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    numbers.sort()\n\n    return numbers\n\nCould be a lot more readable using a string iterator and:\nnumbers.sort((n: i) for i in range(9))\n\nYou could also use a tuple, or even better a list comprehension:\nnumbers = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'] numbers.sort((n: i) for i in range(9))\n\nI don't know if I'd recommend using a list comprehension as a general solution to this problem. Sure, it works well here, but if you're using list comprehensions as a general replacement for for loops, you'll end up writing a ton of list comprehensions, and then you won't be as good at writing for loops.\n\nThe list comprehension is a perfectly valid way to do it.\nAnd just because you are good at writing for loops doesn't mean that you can't use list comprehensions.\n\nI didn't say you couldn't use list comprehensions. I said you should use a for loop instead of a list comprehension when you know you could write a for loop.", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    \"\"\" Sort number strings by decreasing value.\n    The ordering used is based on the usual one-based numerical sort.\n    The ordering of numbers, which are zero-based, is reversed.\n    \"\"\"\n    return numbers.sort(lambda x: x[0], reverse=True)\nI think this is neat.\n\nI don't get it. How is this different from just\nfrom typing import List", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return numbers.split(' ')\n   .sort(function(x,y) x<y)\n\nI would suggest using x<y (x is less than y) rather than less_than(x,y) which could be ambiguous. The only place I've ever had a problem is when x and y are None.\n\nAh yeah, I wasn't sure if I could use the < operator in python, but I just checked and you can.\n\nIt's a pretty good choice, since it's a language construct.\nIt's a bit easier to read, too.\n\nI remember doing something like this years ago using a little 'trick' to get the 0-9 numbers as a string. Can't remember the details, but it was something like:", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    return sorted(numbers.split()).reverse()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return sorted(numbers.split()).reverse()\n\nfrom typing import List\n\n    def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted", "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\"\"\n    min = 0\n    max = 9\n    while n > max:\n       min += 1\n       max = n\n       numbers.append(min + 1)\n    return numbers\n\nWhy not just do\nreturn sort(list(range(9)), key=lambda x: x[1], reverse=True)</s>"]]