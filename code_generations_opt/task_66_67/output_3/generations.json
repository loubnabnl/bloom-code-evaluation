[["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    for i in range(0,len(s)-1):\n         a = s[i:i+1]\n         s = s.replace('a','')\n         return a", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if '\\n' in s:\n    return 0\n    count = 0\n    for c in s:\n        if c >= 32:\n            count = count + c\n            return count\n    return 0\n\nI feel like this is just wrong. The first implementation is just fine.\n\nI think the first one is \"just fine\" too, but I disagree that it is _just fine_.\nThe actual problem (as described in the assignment) is not that the algorithm works, but that it is written clearly. I think that the second implementation is clearer than the first.\n\nThe problem (as I read it) was that the student used a non-standard function (i.e., a built-in) instead of a standard function. If he had used the built-in _fscanf_ instead of _scanf_, I'd agree that he was clearer. I don't see much difference between his use of _digitSum_ and his use of _scanf_, though, so I don't think", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(ord(s.split(' ')[0])+ord(s.split(' ')[1])+ord(s.split(' ')[2])+ord(s.split(' ')[3])+ord(s.split(' ')[4])+ord(s.split(' ')[5])+ord(s.split(' ')[6])+ord(s.split(' ')[7])+ord(s.split(' ')[8])+ord(s.split(' ')[9])+ord(s.split(' ')[10])+ord(s.split(' ')[11])+ord(s.split(' ')[12])+ord(s.split(' ')[13])+ord(s.split(' ')[14])+ord(s.split(' ')[15])+ord(s.split(' ')[16])+ord(s.split(' ')[17])+ord(s.split(' ')[18])+ord(s.split(' ')[19])+ord(s.split(' ')[20])+ord(s.split(' ')[21])+ord(s.split(' '", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return sum(s[:digitIndex(s)])</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(map(int, range(len(s))))\n\nThe (range(len(s)))... part will count the number of characters in the string. The map will convert the number to an int. The sum will sum the ints.\n\nThe key to solving this puzzle is to think about the problem in the \"big picture\" and not as a series of \"little pieces\".\n\nimport string\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    return sum", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    digitSum = lambda s:\n         if s.upper() in [31, 63, 67]:\n            return s.upper()\n    else:\n            return 0\n\nReferences\n\nExternal links\nhttp://www.justlearnpython.com/list/python-beginners/python-intro-tutorial.html\nhttps://www.python.org/downloads/\n\nPython</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(repr(repr(int(s))) + s[0])", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.split('.'))\nYou need to handle non-ASCII characters if you want it to be an actual sum.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return len(s) - len(u) + 1", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.upper()).sum()\n\nThis is the correct solution.\n\nI wish it was accepted :(\n\nIt's probably better to read the docs and think about it.\nThe input is a string, so the problem is parsing the string into an int. You know that you can do that, so the first part of the problem is done.\nAfter that, the problem is to find the sum of the characters in the string. You know that you can do that, so the second part of the problem is done.\nThe last step is to return the value to the user.\n\nIt's not the simplest solution, but it's the correct one. I can see how a lot of programmers would prefer to go the other way and use recursion, though.\n\nI wrote a similar one that accepts any integer as input and returns the sum of the digits, and also has a recursive solution. It's here:\n\nNeat.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    \"\"\"print sum(upper(s))\n\nSee also\nPython\nPython programming language\n\nNotes\n\nReferences\n\nExternal links\nPython for Dummies\n\nPython</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(map(ord, s))\n\nThis is not very interesting, and it may be faster to do the ASCII code conversion yourself.\n\nConsider using a lambda instead of map. Also, you may be able to use \"O\" or \"o\" instead of \"ord\" in order to avoid the unnecessary conversion of ord(s) to int.\n\nI'd use this trick to do this:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return (s[len(s)-1:]) + s[len(s)-1:]\n\nI was expecting this to be some strange language or something. But it's just Python.\n\nI was surprised that it's Python, too. The article itself is so beautifully written, I was expecting something very sophisticated.\n\nThis is also a good one for learning how to write tests in Python. The author\nincludes a test module that demonstrates how to test functions for correct\nbehavior and the correct return value.\n\nI was expecting it to be some sort of logic puzzle in disguise, but it's just Python.\n\nMe too. Especially since the author is talking about \"subroutines\" and \"calling\" and \"local variables\".\n\nYes, and with a name like \"digitSum\" I was expecting it to be some sort of logic puzzle.\n\nYes, the same thought crossed my mind. I wonder if the author was going for the same effect, or if the name was just a happy accident.\n\n\"Happy accident\" is an excellent way of putting it.\n\nI was expecting this to be a logical puzzle in disguise, but I was pleasantly surprised to find it's just", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if len(s) <= 2:\n        return 0\n    else:\n        for c in s:\n           if c == '0':\n               return c\n             else:\n                return sum(c)\n\nIt is hard to argue against that.\n\nNote that this program has a bug. It will give you incorrect results for example if you have:\n\"abcCd\" \"abcd\"\nYou'd have to do \"sum(c) - sum(c) + 1\" for the correct answer.\n\nThis is not a bug, it's a feature. It's to support languages that do not have the same character set.\n\nThat's interesting. If you write a program in a language that doesn't distinguish upper case from lower, how do you deal with things like \"hello\" vs \"H E L L O\" vs \"HELLO\" or \"HELLO", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    def __main__(self):\n    \"\"\"Main program.\n    Prints the sum of digits as a string.\n    Parameters:\n        s: string to sum\n     \"\"\"\n    return sum(digitSum(s))\nI'm gonna go ahead and assume that s is a string of ASCII codes, since that's the only way I can see it working as a function.\n\nYou're right.\n\nI'm curious. Why not have the program just have a single, built-in function that returns the sum of the upper ASCII codes of a string?\n\nThat is the built in function. DigitSum simply calls it.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(int(ord(char(s))) for char in s)\n    if \"char\" in s else 0\nIt's a bit ugly.\n\nI'm not sure that's really the right way to think about this, though. For example, consider \"aaaXa\":\n>>> digitSum(\"aaaXa\")\n55\nIf you're not used to thinking about ASCII encoding, you might think that it would have the same result as \"abXa\", but it doesn't. To have the same result as \"abXa\", it would have to be \"aaaXaXa\":\n>>> digitSum(\"aaaXaXa\")\n55\nSo the way to think about it is to recognize that \"aaa\" is the same as \"a\" (and so on). The problem is that you can't just look at the ASCII codes and make that decision. Instead, you have to either know the ASCII codes or use a table of some kind. The ASCII code for \"a\" is 65, so you could write a function to figure out which character to use for each ASCII code:\n>>> def ord(char):\n...", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.split(' '))[:4]\nWhat does it mean to return int(s.split(' '))[:4]? I don't know what that means.\nThat means to return the 4 elements of the list int(s.split(' ')) (you may have to make that list) and then the first 4 integers.   The output of this will be:   0 0", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    s = str(s)\n    return str(sum(ord(c), 1)) + s\nYou have to use `ord()` in order to ignore the 0 and the first character.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(int(ord(chr(0))) for chr in str(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(s)[i])</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    input = \"abcCd\"\n    output = 0\n    for char in input:\n        if char in [0123456789, A-Za-z]:\n             output += char\n             break\n             output += input[:char]\n            return output\n\nThe problem is that it doesn't work if the string contains a single blank.\n\nI think it's a bug in the requirements.\n\nI think that's the point.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(ord(s.upper()))\nI'd call that a task too.  Not just for the algorithm but to express the intent of the solution.\nAnd it's not a bad one, either.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    upperSum = 0\n    for s in range(len(s)):\n        upperSum += ord(ord(s[len(s) - 1]))\n    return upperSum\n\nI'm not a Python programmer, but I believe the above would be more idiomatic.\n\nThanks for the tip. I'll make the change.\n\nI'm not a Python programmer but I think the above would be more idiomatic.\n\nAs a Python programmer I believe the above would be more idiomatic.\n\nI like the last two, but the second one could be made more readable by using sum(ord(ord(s))), and the first one could be more readable by using sum(ord(s.split()))\n\nI would make the last one sum(s.split()[0]), but otherwise agree.\n\nAll of these are great. I like the last two in particular.\nI would make the last one sum(s.split()[0]), but otherwise agree.\n\nI'm not a Python programmer, but I think the above would be more idiomatic.\n\nIs there a way to change the title", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.replace('[^a-zA-Z ]','',''))\nI prefer a regex for this.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    for c in s:\n        c = int(c)\n        return c", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n         return sum(upper(s))\n\nI was taught that in C, if you're going to use a function that takes a variable number of arguments, you should always use parentheses. It's a common mistake for programmers new to the language to leave them off.\n\nI'm not a C programmer, so I don't know how common this is, but I have been taught that you can omit the parentheses if the last argument is a list, and that's how I do it in JavaScript.\n\nIn JS (and most other languages) this is equivalent to:\n(function(arg1, arg2, arg3,...) {\n// do something with arg1 and arg2\n// do something with arg3 and arg4\n...\n})(arg1, arg2, arg3,...)\nThis means that in JS it's not only OK to omit parentheses, you _have_ to omit them in the case of a list.\n\nInteresting, in Python I've only seen the parentheses-less way (but admittedly, it is rare to see it).\n\nTo be fair, you're not the only one here who's only seen it that way.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return \"0\" if s == \"\" else sum(map(ord, s))\n\nThe function digitSum is a recursive function that takes a string as input and returns the sum of the upper characters only (ASCII codes).\n\nThe function returns 0 if the input string is empty.\n\nThe function returns the sum of the upper characters (ASCII codes) of the string s.\n\nExamples:\n\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153\n\nExample code:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(chr(ord(s)[0]))\nThat's what I would do.  You could also do it with a mapping from ord(s)[0] to sum(chr(ord(s)[0]))</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n          if s.upper() == s.lower():\n            return 0\n          else:\n            return int(s.upper()) + int(s.lower())", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.rstrip())\nIn this case, you might be better off using a regex.\n\nWell, yeah, but regexes are more difficult to understand and use. :)</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(s[0:len(s)-1]))\nCan someone explain this to me? I'm learning C now and this is the first I've seen of sum and ord. How do you use them?</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n        sum = 0\n\n        for c in s:\n           sum += ord(c)\n    return sum", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    # XXX use atoi() instead of str.lower()\n    digits = []\n\n    # XXX is it reasonable to expect the result to be an integer?\n    if digits[0] == '0':\n        return 0\n    else:\n        return digits.pop() + digits[0]\n\nThis is supposed to be a two-hour task, but it is a bit long so I'll post more later.\n\nTo make sure that this was not a special case (I was trying to work out how to do this when I noticed this page), I ran the code on a range of strings (lower to upper) and found that it worked. I then modified the code to use digits to do the sum and changed the result to int. The code:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return len(s) * ASCII.upper(s)\n\nI think the challenge is just a bad idea.\n\nI'm not sure if it's bad or not. It's a useful exercise for those who want to see how much can be done with a few lines of code and a lot of knowledge about the language and its libraries.\nIt's definitely not a challenge for newbies, though.\n\nIf it's not a challenge for newbies, why would anyone expect it to be of interest?\n\nI'm a newbie and I found it interesting. What's your point?\n\nHis point is that you are not the average newbie.\n\nIt's a good point, but I also think that it's not entirely accurate.\n\nI feel like if you have to write a program to solve it, it's a challenge for newbies. If you can solve it without a program, it's a challenge for intermediates.\n\nIf that were true, then the entire concept of compsci as a discipline would be a challenge for newbies, which is clearly not the case.\n\n\"If that were true, then the entire concept of compsci as a discipline would be a challenge", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return s.split(\"\")\n   .pop()\n   .pop()\n   .pop()\n   .pop()\n   .pop()\n   .pop()\n   .pop()\n   .pop()", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    c = '\\0'\n    c_sum = 0\n    for x in s:\n        if x not in c:\n           c_sum += ord(x)\n    return c_sum", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    def digitSum(s):\n    return sum(s.split(\" \").pop(0))\nThank you for your help, that's what I came up with, I just had a nagging doubt I guess.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(upper(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    # Let's read the input\n    f = open(\"input.txt\", \"r\")\n    t = f.read()\n\n    # Get the upper characters\n    upperChars = set(t.split(\"\\n\"))\n\n    # Iterate over the characters\n    for char in upperChars:\n        i = 0\n        sum = 0\n\n        for c in char:\n            sum += ord(c)\n            i += 1\n            if i == len(upperChars):\n              break\n\n    return sum\n\nWhat is the use of open? Can't you just use f.read? Or is that just a convention of python?\n\nThe `open` function allows you to read from files without specifying the file name. This is useful when you are not sure in advance which file you want to read.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s[:i])", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n     return len(s) == len(s[::-1]) + 1\nIt's not hard to write a function that's buggy in a different way. Here, the author has made the mistake of treating the string as a number of characters, when he should have been treating it as a number of integers (or \"digits\" as he calls them). The correct function would be:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    a = ''.join(s)\n    return a.rstrip()  + a\nIt's faster to just call string.split() than to construct a list of characters and join them. Also, why bother stripping the trailing newline?           return string.split('.') + string.split(' ')\nHow about this, much faster:                  return string.split('.') + string.split(' ')\nAlso, why not use the built-in string concatenation:      return string.join(string.split('.')) + string.split(' ')\nI was trying to make it as simple as possible while still being correct.\nI was making a joke. This was a response to OP's post.\nI know that, I was saying that I was trying to keep it as simple as possible and still be correct.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s[::-1])\nI have no idea how you get 153 as the sum of that string.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.split(' ')[0]) + int(s.split(' ')[1]) + int(s.split(' ')[2])\n    + int(s.split(' ')[3])\n\nIt's a very naive approach. Note that it won't work on a single-byte character set, like ASCII, because the first character doesn't have an upper byte.\n\npython-3.2.2 on my ubuntu box:\n>>> from string import bytes >>> digits = bytes('1') + bytes('0') + bytes('1') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0') + bytes('1') + bytes('0", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s.split(' '))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    s = s.upper()\n    return int(s.upper() + s.upper() + s.upper() + s.upper() +...)\n    def main():\n    input = raw_input(\"Enter the number: \")\n    if input == \"\":\n        print \"Please input a number\"\n    else:\n        digitSum(input)\n        print \"The total is %d\" % digitSum(input)\n   \n    \"\"\"\n\nAccording to the documentation, this is how Python deals with integers:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    return (int(ord(s)[0]) + int(ord(s)[1]))\n    + int(ord(s)[2] * 5)\n    + int(ord(s)[3])\n    + int(ord(s)[4] * 11)\n    + int(ord(s)[5])\n\nThat's an OK approach, and it works, but it's", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    # The letters have an ASCII code of 32 (an upper case letter)\n    # When they are on the same line and in the same row, their ASCII code is the sum of their ASCII codes.\n    return (ord(ord(s[0])) + ord(ord(s[1])) + ord(ord(s[2])))\n\nThe letters in the above example have ASCII codes of 32, 45, and 65, respectively.\n\nWhen they are on the same line and in the same row, their ASCII code is the sum of their ASCII codes.\n\nCode for the above Python program.\n\nimport string", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    \"\"\"import string\n\n    \"\"\"import math\"\"\"\n    \"\"\"return sum(map(chr, string.ascii_uppercase))\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    for s in range(len(s) - 1, len(s) + 1):\n        sum = 0\n        for i in range(len(s)):\n            sum += s[i]\n    return sum", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    result = 0\n    while s.charAt(0)!='':\n        result = result + int(s.charAt(1))\n    return result\nNot bad, but for the first example, is it that the `\".\"` is treated as a digit?\n\nI think this is a pretty good solution. I'll probably steal it for my own use. The first example is trickier than it looks, because you need to make sure that \".\" is interpreted as a digit. It would be better to just test the first character, and if it is a period, then return the value. If it's not a period, then remove the period and return it.\n\nI think you'd be better off using a counter to keep track of the current digit.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return (", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\nYou have a function called \"digitSum\" but it has a typo.\n\nI don't think that's a typo, but it's not clear what it does. Is it supposed to sum the ASCII codes of the digits? That's not a very good way to do that, because ASCII codes are only numbers, so you lose the decimal points.\nIs it supposed to sum the numbers in the ASCII codes? That's wrong because some numbers are not ASCII codes. (Try \"aAaaaXa\".)\n\nYou're right, it was a typo. It's supposed to be 'digitsSum'. I'll make the correction. Thanks for pointing it out.\n\nWow. I like this. I've been wanting to learn more about Python, and this is a great way to do it.\nI have an idea for a game where you have to type in a string and it tells you what it is. I know you can't have duplicate entries, so it would be helpful to not have to loop through the string again. So, if the string is \"aAaaaXa\" and it is equal to \"aAaaaXa\", I'd like to know that.\nBut, in your example,", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(map(chr, s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def ssum():\n        r1 = \"\"\n        for x in range(0, len(s), 1):\n            r1 += x\n    return r1\n    return ssum\n\nand here is the output:\n$ python3 digitSum.py\n0\n1\nabAB\n0\n1\nabcCd\n0\n1\nhelloE\n69\n1\nwoArBld\n131\n153\naAaaaXa\n\nThe output is not what I expected. I am trying to figure out what is going wrong.\n\nSUMPRODUCT is a special function that operates on arrays. You don't seem to be using the right syntax here.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n        return 0\n        return s[:upper]\n        return '', digitSum(s[:upper], 'a')\n        return '', digitSum(s[:upper], 'x')\n\n>>> import collections\n>>> import string\n>>> sum_digits = collections.defaultdict(int)\n>>> sum_digits[:] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n>>> sum_digits[str(x) for x in xrange(10)]\n>>>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    i = 0\n    while s:\n        i = i + sum(chr(i) for chr in s[i:])\n    return i", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     \"\"\"\n    return sum(chr(ord(s[i]))) + 1\n\nThis is a good one for interviewers to throw at you.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s.split(' '))\n\nIt seems like this is the right answer, but there's a little twist in the \"right\" answer that would be good to point out.\nIn the last case, you are going to get 0 as a result, even though there are more than one ASCII code. If you were to change the test to sum(s[::-1] instead, you'd get the right answer.\n\nI'm not sure I see how this works. I've tried it with '0a', '0b', '0c', '0d', and '0e', all of which produced the correct answer of 0.\n\nIt works because the function is called on the string \"0a\" and returns a value \"0\".\nThe `split` method returns a list (`[0]` in this case) of characters from the string. If you look closely, you'll see that `sum` is called on the empty list (`[]` in this case), and as such returns 0.\nIf you do:\n>>> sum(['0a']) 0\n>>> sum(['0a', '0b', '0c', '0", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n             return (sum(chr(ord(c)) for c in s))\n\nThis program is written in Python 3.\n\nThis is, quite possibly, the worst way of implementing a digit sum I have ever seen. Python 3 makes it easy to use the built in string functions, so why not use them?\n\nMy solution is faster. It uses a stack to hold the ASCII codes, and iterates over each ASCII character in the string, adding it to the stack. When the stack is full, it prints the sum.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    for j in range(len(s)-1):\n        return sum(digit[j])", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    for c in s:\n        return int(c)\nWhat this snippet shows is that the author is not afraid to use the language features.\n\nSure, but I have never used that feature. It may be a very good feature, but as a programmer in the trenches, I don't need that level of efficiency.\n\nOne of the nice things about Python is that there is always _something_ you can do to make your code faster. You're not writing assembly, but you can always get a few percent extra speed out of your programs with a little work.\nAnd if you're not in the trenches, but instead at a company that has to support a large Python code base, those few percent extra speed add up very fast.\n\nI'm not sure that is a given. There are tons of languages, and I don't think you can say that every language has at least one thing you can do to get a little faster.\n\nWhat I meant is that there is always _something_ you can do to get a little faster. That is to say that there is _always_ some way to improve the speed of your program, even if it's just moving a function into", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return string.upper()\nMore like \"write a function that takes a string and returns the sum of the upper characters only\".</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return (ord(ord(s[0]), 1) + ord(ord(s[1]), 1))\n    * (ord(ord(s[2]), 2) + ord(ord(s[3]), 2))\n    * (ord(ord(s[4]), 4) + ord(ord(s[5]), 4))\n    * (ord(ord(s[6]), 6) + ord(ord(s[7]), 6))\n    * (ord(ord(s[8]), 8) + ord(ord(s[9]), 8))\n    * (ord(ord(s[10]), 10) + ord(ord(s[11]), 10))\n    * (ord(ord(s[12]), 12) + ord(ord(s[13]), 12))\n    * (ord(ord(s[14]), 14) + ord(ord(s[15]), 14))\n    * (ord(ord(s[16]), 16) + ord(ord(s[17]), 16))\n    * (ord(ord(s[18", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return s.upper() + s.upper()\n\nThis is why comments in programming are important.\n\nThat's a fun programming exercise.\n\nIt's fun to read, at least.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    result = []\n    for char in s:\n        result.append(0)\n    return result\nI'm trying to think of a legitimate application for this. I think the only one is to verify that the user is typing in the correct number of digits and not randomly hitting buttons, but that's not that important.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    \"\"\"\n    def digitSum(s):\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n       \"\"\"\n    return s.lower().upper()\n\nThe function:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return (s[i] - s[i+1]) + s[i+2]\n\nWhy on earth would you write a digit-summing function that returns a string?\n\nIt's a simple example, but it shows you that if you have a sequence of characters and you want to get the sum of the digits (as opposed to the sum of the characters), then you need to add the digits one at a time, and then throw away the characters that you don't need.\n\nAh, it's not clear that the function has anything to do with numbers. I think that's why the question was asked.\n\nOdd. I find that python's numeric types are extremely flexible, and I've not run into any problems that have required me to use a different type.\n\nI'm not talking about number type. I'm talking about actual numeric type.\n\nHere's an idea: how about if you'd like to create a new numeric type in Python, you actually create a new numeric type in Python?\n\nIt's too bad you got downvoted for this comment. I was curious what you meant by this as well. Here is my understanding.\nYou can't add a", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return s.upper().split(\",\")\n    print(digitSum(\"aAaaaXa\") )\n    print(digitSum(\"abAB\") )\n    print(digitSum(\"abcCd\") )\n    print(digitSum(\"helloE\") )\n    print(digitSum(\"woArBld\") )", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    digitSum = lambda s:\n         return int(sum([str(ord(s[1])) for ord in range(len(s))))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return ''.join(str.upper() for s in s for s in s)\nSo it returns the ASCII code of the first character, then the ASCII code of the second character, then the ASCII code of the third character, etc.  This is, of course, completely wrong.\n\nJust a typo\n\nIt is a good exercise but I don't see why it is a task.\n\nAh, I think I get it now. You have to actually write the function and return it. It's not a bunch of examples given to you to be copied/adapted.\n\nYeah, you are right.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(len(s) - len(''))\nThis is a completely useless function. It does not solve any problem, it does not work any faster than any other method, it does not guarantee any sort of accuracy.\n\nWell, this is a trivial and short program that demonstrates a few features of Python.\n\nI don't get the obsession with being \"trivial\". Things like this are going to turn new programmers off Python.\n\nI think it's a pretty neat way to learn. It's something you could do to fill a few minutes if you were bored. It's not a part of Python that you'd use in a real program.\n\nReminds me of the classic:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if s.startswith('0'):\n         return 0\n    else:\n         return int(s.upper() * (s.length - 1))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(chr(i))) for i in range(len(s))\nThe basic problem with the approach in the original article is the same as the one with this function: it doesn't work for non-ASCII characters. That is, the last example is very likely to fail because there is no ord() function for arbitrary characters.\n\nYes, that's a very good point. I think the easiest way to go about this would be to use an ord() function that handles Unicode characters.\n\nOr instead of creating a function that tries to handle everything, make a function that handles the things you want.\n\nCan someone enlighten me as to what the purpose of this article is? Is it simply to encourage people to think about how to program? Or is it to show us some new, powerful technique that will revolutionize how we do programming?\n\nIt's to show that in a world where people are ever-so-eager to use the most clever, obscure, mind-blowingly brilliant new language that's been invented, there's still a lot of interesting things to be done in the old one.\n\nI think the article is more to the point that the difference between the two", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return s[0:-4]\n\nThat's not a function, that's a lambda.\nThe point of this exercise is to make a function, with a name.\n\nYou can call it whatever you want. I would never use a lambda as a function, as it's got no name, but that's just me.\n\nIf you're learning python for the first time, it's good to learn the idioms used to organize programs. This is one of them. In general, you should always try to use lambdas as a \"black box\" and only \"name\" them when you need to distinguish them from other lambdas.\n\nIs this a programming lesson or a lesson on Roman numerals?\n\nIt's a lesson on Roman numerals. I'm not sure why it's on HN.\n\nWell, it's got three points (as of now) and you've replied to it, so at least some people found it interesting.\n\nI'm a student in the course the lecture is taken from. So I can say it is a very nice course to follow, especially if you're a computer science student (and, in my case, there are a few people who", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if s.find('\\u0000') == 0:\n        return 0\n    for i in s:\n        digitSum = digitSum(s[i:i+6])\n        return sum(digitSum)</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s.upper() for s in s.split(\"\\n\"))\n\nI'm confused by the need for the's.split(\"\\n\")' part.\n\nI also am, but the article states it's necessary to specify a delimiter.\n\nYes. I'm not sure how it's possible to get the character count without it.\n\n>>> \"ab\".count()\n0\n>>> \"ab\" == \"ab\".split(\"\\n\")\nFalse\n>>> \"ab\".upper()\n'a'\n>>> \"a\" == \"a\".split(\"\\n\")\nTrue\n>>> \"a\".upper()\n'a'\n>>> \"a\" == \"a\".upper()\nTrue\n>>> \"a\".count()\n0\n>>> \"a\" == \"a\".split(\"\\n\")\nTrue\n\nWhy would you ever need a function like this?\n\nWhen I needed to sum up all the chars in a given string without worrying about the upper/lower bit, I just did a simple split.\n\nHe's not summing up the characters. He's summing up the ASCII values of the characters.\n\nOops, sorry,", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    # This is a range with the function returning an int value\n    # This is an example of a case statement\n    case 'a':\n        return 0\n        return 31\n        return 59\n    case 'A':\n        return 0\n        return 31\n        return 59\n    case 'B':\n        return 0\n        return 31\n        return 59\n    case 'C':\n        return 0\n        return 31\n        return 59\n    case 'd':\n        return 0\n        return 31\n        return 59\n    case 'e':\n        return 0\n        return 31\n        return", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    digitSum = lambda s: lambda s[0:5]: sum(s[0:5]*32)\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n    print(digitSum(\"XaYaYaXaXaYaYaYa\"))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    sum = 0\n    for c in s:\n         sum += len(c)\n    return sum", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return sum(digitCharacters(s))\n\nThere are simpler ways to implement this, but this is the most idiomatic python solution.\n\nThe C way is a whole lot more straightforward and faster. A C programmer would write:\nunsigned char sum = 0;\nfor (unsigned char i = 0; i < strlen(s); ++i) sum += strchr(s, i);\n\nThe C way is not idiomatic C, or Python.\nThe Python way is idiomatic Python, but it's not idiomatic C either. It's not idiomatic C because it's a function that returns a value instead of a function that takes a value as input and returns a value. It's not idiomatic Python either because it's not idiomatic C.\n\nIf you're going to claim that something is not idiomatic C, you should actually be able to point out the standards that it violates, rather than a style guideline from C99 (which is about to be obsoleted by C11).\n\nWell, I certainly couldn't do that. I've never been a very good C programmer.\nIn any case, the C way is \"more straightforward\" than the Python way, and", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if len(s)!= 0:\n        return s[len(s) - 1:]\n    return 0\nI am not sure why this is getting downvoted.  It is a valid solution that looks fine to me, and its simplicity is probably the reason it is getting downvoted.  The other solutions are more complicated and might have been the reason for the question being posted.\n\nI wrote the solution that I posted. It was originally posted to a python forum (IIRC), where the OP was looking for a solution. I thought it might be useful for others.\nI'm sure there are better solutions out there, but I didn't want to take the time to find them.\n\nI think it is better to not downvote something just because it is simple.  It is the person asking for help that is choosing the solution.\nIf your solution is the best in that case, then it will get upvoted.  If someone else has a better solution, then they should post it and the one with the better solution will get upvoted.  That is the system working.\n\nJust because it is simple does not mean it is the", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return sum(s[i:i+4] for i in range(len(s) + 4))\n\nI'm not sure why you chose to ignore the first four characters of the string.\n\nWhy would you want to write code that breaks strings for no good reason?\n\nWhat if the first four characters are zeroes?\n\nI was working on the assumption that if you knew how to convert the string to binary, you could also simply ignore the first four characters.\n\nThis is a bad assumption.\n\nIf your strings don't start with zeroes, then you should still only need to care about the first four characters. I'm sure there are some edge cases, but those are edge cases.\n\n>You can convert to binary with any of the following:\nNot really.\nAny of the following:\na b c d\n10 11 00 01\na b c d\n01 01 11 00\na b c d\n01 01 11 00\n10 11 00 01\n01 01 11 00\n...\n...\n>Any of the following:\n>import ctypes as c\n>import re\n>from string import a, b\n>a = 'a", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153 \"\"\"\n\n    return len(s.split(\" \"))\n\n>>> print digitSum(\"abcd\")\n131\n>>> print digitSum(\"helloE\")\n69\n>>> print digitSum(\"woArBld\")\n131\n>>> print digitSum(\"aAaaaXa\")\n153\n>>> print digitSum(\"abcd\")\n131\n>>>\n\n==> 157\n\nJust in case anyone doesn't know, this is the correct way to do this:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    # Split the string into a list of strings\n    sList = [s.split(\"\")]\n    # Use the letter case function to separate upper and lower case letters\n    sList = [sList.lower() for sList in s.lower().split()]", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n     s = s.split()\n     return int(int(ord(i) for i in s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n     return 0\n\nIs this just a reminder to use the language's operators?\n\nAnd I'm guessing \"helloE\" is there to see if you are a python user...\n\nAnd the language is Python.\n\npython is a language?\n\nThe _real_ question is: what language are you coding in?\nI was half-expecting \"Perl\" to be the answer, but I was pleasantly surprised.\n\n<3 python</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(chr(ord(s) - ord(' '))) for chr in s)", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\")", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return numpy.sum(map(str, range(0,len(s))))\n> digitSum(\"abcCd\") => 67\n>   digitSum(\"helloE\") => 69\nNumpy.sum(map(str, range(0,len(s))), dtype=int64)\n\nThanks for catching that - this is the most commonly used line of code I've seen today!\n\nWhat's the advantage of using numpy.sum() instead of just sum(str, 0, len(str))? I've always used the latter and it works fine.\n\nIt's the same as the one you use.\n\nI wrote a python script to do this task a few weeks ago, but it also reads the entire file at once. The script, along with a few others, can be found at .\n\nI just added a \"verify\" function to this script to check that the sum of the digits is equal to the number of digits.\n\nAh, nice. It's an interesting little exercise. If you're interested in this kind of thing, I highly recommend reading _The Little Schemer_, which is available for free online.\n\nThe", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    def digitSum(s):\n        # Is the string a valid ASCII?\n        if len(s) == 0:\n           return 0\n         # Is there a '0' in the string?\n        if len(s) == 1:\n           return 0\n         # Is the '0' at the end or the beginning?\n        if s[0]!= '0':\n           return 1\n          # Is there a '1' at the beginning or end?\n        if s[1]!= '1':\n           return 2\n          # Is the '1' at the end or beginning?\n        if s[2]!= '1':", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(chr(ord(s) & ord(0)) for s in s.split(\"\\n\")\n\nThis is a good example of the value of good variable naming. \"digitSum\", unlike \"lower_case_sum\", \"upper_case_sum\", etc, is unambiguous.\n\nBut the variable names are not capitalized!\n\nI was actually pretty happy to see the author capitalized the letter following the name.\n\nI don't like the way the author is trying to explain it. The code is not more concise or readable.\n\nI think the author is a bit confused.\nHe's taken the idea of using a sum function for the lower case, and then a upper case version of the same function, and then made the mistake of thinking that this idea should be applied to the digit set.\n\nI can't seem to find the bug in his code.\n\nIf the argument is a string, like \"hello world\" it has two digits, and you call:\ndigitSum(\"hello world\")\nthen you get 0.\nThat's not what you'd expect.\nIf you call\ndigitSum(\"0123\")\nthen you get the correct", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(map(str, range(len(s)), range(0, len(s))))\nThat was the very first thing that popped up in my head when I read the question. I'm not a programmer or anything, I just do it for a hobby.\nI don't get why people are upset over the code.  I mean, I can't tell whether I'm actually a good programmer or if I'm just a dick that can write code.\nI think this is exactly the reason why people are upset. A lot of programmers use the first thing that pops in their heads without even giving it a second thought. For me it's not hard to see the problems with this code, so I think I'm a good programmer, and the author of the code is just a dick who can write code.\nOh, I see. I try to be logical when writing code and I'm probably the only one that does. I'd rather be a dick who can write code than a logical person who can't.\nIt's good that you're logical, but that's not all you need to be a good programmer. Being a good programmer means making choices that are appropriate for the problem and the project.\nTrue.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if s in list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']):\n          return s.find(0) + s.find(1) + s.find(2) + s.find(3) + s.find(4) + s.find(5) + s.find(6) + s.find(7) + s.find(8) + s.find(9) + s.find(10) + s.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if s[:len(s)-1]!= '\\n':\n        return len(s[-1])\n    else:\n        return int(s[-1]) + int(s[-2])", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def upperCodes(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the string of\n    all upper characters.  The resulting string should be the same length as\n    the input string.\n\n    Examples:\n        upperCodes(\"\") => \"ABC\"\n        upperCodes(\"abcCd\") => \"BCDE\"\n        upperCodes(\"helloE\") => \"HELLO\"\n        upperCodes(\"woArBld\") => \"WOBBLD\"\n        upperCodes(\"aAaaaXa\") => \"AXXXA\"\n        upperCodes(\"abcBcCd\") => \"ABCD\"\n        upperCodes(\"abcDcEe\") => \"DEECD\"\n        upperCodes(\"abcDcEf\") => \"DEFCD\"\n        upperCodes", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\nIn Python, you might be able to do something like this:\n\n>>> import string\n>>> a = string.ascii_uppercase()\n>>> b = string.ascii_lowercase()\n>>> print(digitSum(a + b))\n67\n\nBut I'm not sure how to get the ASCII codes of letters as strings, which is probably what you want. You might be able to do it using ord, but I haven't tried it out.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    print('>'+ s)\n    for c in s:\n        if c > 32:\n           return c * 10 + s[c]\n        else:\n           return 0", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n         sum += str(i)\n    return sum", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s[::-1])</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(chr(ord(char(s)), 16))\n`''\nIn Python you can do this with:\n>>> from itertools import chain\n>>> a = lambda x: x + 1\n>>> for i in range(0,10):\n... print(a(i))\n... print(chain.from_iterable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n>>> print(chain.map(a, range(3)))\n3", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    if type(s) == str:\n         return s.upper()\n    else:\n         return 0\n    else:\n         # To keep the example simple, we'll not allow the user to enter non-numeric\n         # values here.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(chr(x, k)))\nThat's just asking to have every second input fail to parse.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s.upper() for s in s.split())\n\nThat's not bad!\n\nI hope that was a joke...\n\nIt was. :)\nI thought it was a rather obvious joke, but you never know.\n\nSure, it was obvious to me.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(s[1:]) + ord(s[0]), 2)\n\n\t\t# main\n    import sys\n\n\t\t# Read the input from standard input\n    sys.stdin.readline()\n\n\t\t# This function is a new task\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    return sum(ord(s[1:]) + ord(s[0]), 2)\n\n\t\t# The main task.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    digitSum = lambda s: sum(s[chr(c) + len(s)-1])", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    from collections import Counter\n    from collections import OrderedDict\n    from collections import defaultdict\n\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    if not s.endswith(\"Z\"):\n        Counter = Counter(s)\n        i = 0\n        l = Counter.index('a', 0)\n        while l >", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return str.upper()\n\nI would suggest using str.count() instead.\n\nNope. str.count() would return a list of the ASCII codes, whereas str.upper() will return a string. str.count() is not suitable for use in this context.\n\nNope. str.count() will return a count of the characters, which would be perfectly suitable for use in the context of this problem.\n\nThis is a generalization of the str.count() function, and it will likely return a string instead of a number of characters.\nThe specific definition that's provided is a \"Task\", so the \"string\" must be evaluated as a string.\n\nYou are incorrect. str.count() returns a count of the characters in a string.\n\nWhy not:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    total = 0\n\n    for c in s:\n        if c!= 'a':\n           break\n        total += c\n    return total\nI don't get this.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.upper() + int(s.upper() + 1) + int(s.upper() + 2))\n\nThis was intended to be a joke, I don't see any need for this.\n\nThis is intended to be a joke. You can leave out the last three lines.\n\nI actually did this and then started wondering if this might be a way to do a case sensitive sort in python (I ended up using the Z-Order CaseSensitive library)\n\nMy first thought was that it'd be a neat trick to have a string that is guaranteed to be as long as it needs to be for the purpose of a string comparison.\n\nWorks for me.\n\nYou forgot to add the last three lines\n\nI thought that was the joke\n\nI would call it kwality.\n\nHow does one go from that to calling it a joke?\n\nI think it was supposed to be a joke...\n\nI think you're wrong.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return '' + int(ord(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return s.upper()\n\nObligatory reference to Python:\n>>> print(digitSum(\"\"))\n0\n>>> print(digitSum(\"abab\"))\n131\n>>> print(digitSum(\"abcCd\"))\n67\n>>> print(digitSum(\"helloE\"))\n69\n>>> print(digitSum(\"woarbled\"))\n131\n>>> print(digitSum(\"aAaaaXa\"))\n153\n>>>\n\nAnd a follow up note about the original post: this isn't a functional programming problem.\n\nYeah, it's not a \"functional programming problem\", it's a \"data processing problem\". We just happen to use functions.\n\nMaybe there is a reason for the underscore.\n\nYes. This is a functional programming problem.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    # Decode the string\n    raw = str(s)\n    # Count the number of characters\n    cnt = len(raw)\n\n    # If the string is \"hello\", then return the sum of \"hello\" only\n    if \"hello\" in raw:\n        return (cnt-1) * 10 + cnt\n    elif \"world\" in raw:\n        return (cnt-1) * 10 + cnt\n    elif \"abc\" in raw:\n        return (cnt-1) * 10 + cnt\n    elif \"123\" in raw:\n        return (cnt-1) * 10 + cnt\n    elif \"abcd\" in raw:\n        return (cnt-1) * 10 + cnt\n    elif \"123abc\" in raw:\n        return (cnt-1) * 10 + cnt", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    for i in range(len(s)):\n        return int(s[i] + ord(s[i]) + ord(s[i]) + ord(s[i]))\n\nMore examples:\n\"abcdefghijklmnopqrstuvwxyz\" => 12\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" => 7\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" => 9\n\"hello123hello\" => 111\n\"abcdefghijklmnopqrstuvwxyz123abcdefghijklmnopqrstuvwxyz\" => 143\n\"123abcdefghijklmnopqrstuvwxyz123abcdefghijklmnopqrstuvwxyz\" => 7\n\"123abcdefghijklmnopqrstuvwxyz123\" => 12\n\"hello123hello\" => 111\n\"123abcdefghijklmnopqrstuvwxyz123abcdefgh", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(upper(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(upper(s))\nI mean this is just a simple example, but you get the idea.\n\nThis is not a solution to a problem, but a description of a task. It's not an assignment.\n\nIt's a solution to the problem of creating a program that returns the sum of the upper characters only of a string.\n\nIt's a solution to the problem of writing an empty function.\n\nThis is a good submission, but the headline is really misleading. I don't know who is at fault: the submitter or the editors?\n\nI have to agree. I was expecting a new programming language that is more like natural language.\n\nI was expecting something along the lines of \n\nI think it's a good submission, but the title is a bit misleading.\nI thought it would be a new programming language which is more like natural language.\n\nyeah, it's a good submission, but the headline is a bit misleading.\n\nI thought it would be a new programming language that is more like natural language.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153 \"\"\"\n\n    return sum(s.upper())\n\n    import sys\n\n    import string\n\n    sys.argv = [digitSum(\"\"), digitSum(\"ab\"), digitSum(\"abc\"), digitSum(\"hello\"),\n    digitSum(\"woArBld\"), digitSum(\"aAaaaXa\"), digitSum(\"\", \"a\", \"a\")]\n\n    for arg in sys.argv[1:]:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return ord(s[len(s)-1]) + s[len(s)-1]\nYou may wish to change to int instead of ord.\n\n\"len(s)\" would be needed, too.\n\nThe variable \"len\" is assumed to be known to the programmer.\n\nWell, as long as you know that \"s\" can be any string of variable length, and that the length of \"s\" is also variable, and that you've bothered to read the description, and the OP doesn't expect a 1-liner, you're right.\n\nThanks for the feedback guys. I'll add them to the article.\n\n>for this to work we need to get the codebase of the python interpreter and load it in your program.\nNot quite. Just use `import re`, not `import python`.\n\nI read \"for this to work\" as \"for this to work (in the sense of not just displaying the output of the interpreter), we need...\"\n\nIt would have been better to say, \"for this to work _properly_...\"\n\nor \"to actually run your program...\"</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n         result = 0\n         for c in s:\n            result += c\n           return result\n\nThere's no need for a function to return the sum of the upper characters only.\nIf you just want the sum of the string, you can do something like this:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if len(s) == 1:\n        return len(s)\n    else:\n        return digitSum(substring(s, 1))</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return 0", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n        s = string.punctuation\n        for letter in s:\n           return letter +'' * (int(letter.upper()) - int(letter.lower()) ** 2)\n\nNow I'm not really a Python person, but this seems like a horribly convoluted way to do this. You could use something like this:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    a1 ='' + '0' + str(len(s))\n    sum = 0\n    for c in s:\n        if c in a1:\n           sum = sum + a1[c]\n        sum = sum / len(a1)\n    return sum", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    digitSum = lambda s: return s[:5]\n    return digitSum\n\nSyntactic sugar:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    num = 0\n    while True:\n        num = int(s[len(s)-1])\n        if int(s[len(s)-1]) == 'a':\n             if int(s[len(s)-1]) == 'a':\n                  print 'a' + str(num) + \"\\n\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(s))\nfor x in range(10):", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    result = 0\n    for c in s:\n         result = result + int(c)\n    return result\n\nimport sys\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n      \"\"\"\n    if len(s) == 0:\n         raise ValueError('s must be a string')\n    result = 0\n    for c in s:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(s.split(' ')[-1])\nThis is the correct solution. The OP's method is not correct.\n\nThat's correct. Although I would use f.split() instead of s.split(). But, still, the OP's answer is incorrect.\n\nHow do you create a new line with split()?</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return s.upper().count(0) + 1\n\nThis makes me wonder: are there functions that do this kind of thing, but are instead optimized for efficiency? That is, if you need to do this with a large data set, would it be more efficient to use a function like this?\n\nIf you're using Python, this is more efficient than the built in sum().", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\nThis is Java.  It's fine to return a value of type String.\nThis is Java, not Perl.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    a, b = [s[i] for i in range(len(s)-1)]\n\n    for i in a:\n        d = digit(s[i])\n        if d < 10:\n               a.append(b[i])\n               d = digit(s[i])\n               if d > 128:\n                    a.append(b[i])\n                  d = digit(s[i])\n                  if d < 10:\n                    a.append(b[i])\n                   d = digit(", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    #'s' is an input string\n    s = string.ascii_letters(s)\n    return sum(len(s) for _ in range(0, len(s)))\n    \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return numpydoc.upper.get('\\u000100', s) + numpydoc.upper.get('\\u001000', s)", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(x) for x in s)\n\nThis is a toy example, it's easy to write a function to do what the author wants. This code, however, is a very bad idea.\nFor one, it's not obvious what the function does.\nIt's not obvious how to use it.\nWhy use sum instead of just adding everything together?\nIt's not obvious what the return value is.\nIt's not obvious what the input parameters are.\nIf I want to use this function on a string that is not ASCII characters, I need to do some heavy lifting.\nThe author should have used a library such as numpy instead.\n\nI was under the impression that it is obvious what the function does. For example, if you want the sum of the ASCII codes of the characters in a string, you would use that function.\nA function's job is to do a thing. If it does the thing it's supposed to do, then it's obvious what the function does.\n\nI think it is obvious that if you write:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(upper(s))\nThis is a cool exercise, but it's not clear from the description what the expected output is. Maybe that's the point of the exercise.\n\nThe expected output is in the example</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n    \"\"\"\n        UpperCase the string and return the sum of the upper characters\n\n        if len(s) > 0:\n           return sum(upper(s))\n    \"\"\"\n    return sum(upper(s))\n\n>>> digitSum(\"abcCd\")\n33\n>>> digitSum(\"aAaaaXa\")\n45\n>>> digitSum(\"abcCd\")\n45\n\nThis is the old method of the lesson, and is the version I have used since this lesson was given. However, the new method is just as elegant, and probably more correct. I would use this version, if I was writing a program for a non-beginner.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n        return ord(upper(s))\nI'm trying to figure out how you'd convert \"123\" to \"123\" in this function.\n\nI think you need to look a little closer at the code :)\n\nI'm still confused.\n\nYou're meant to look at the next line down.\n\nI'm not sure that helps.\n\nThe \"s\" parameter to \"digitSum\" is a string, not a number. The function checks to see if the string has any non-ASCII characters in it. If it does, then it returns the number of such characters.\n\nAh. So it doesn't do ASCII codes. It does all characters, including non- ASCII.\nThat's what threw me off.\n\nI like it.\nThis reminds me of something I saw in a Ruby book that I thought was clever. It was a Ruby-like language that didn't have any functions, just methods. So if you wanted to sum, you could write:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.split(' '))\nIt's quite easy to write that function by hand, but not so easy to implement it without the use of a lot of string manipulation.\n\nThis was a great exercise for me as I have only recently learned Python. I'm not sure it's something that would be useful in the real world for me, but it was fun to learn and certainly could be. Thanks!\n\nThe question is: would it be useful for you?</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return digits.upper()\n\n>>> import math\n>>> import sys\n>>>\n    print math.digitSum(\"\")\n       0\n    print math.digitSum(\"ab\")\n       131\n    print math.digitSum(\"abc\")\n       67\n    print math.digitSum(\"hello\")\n       69\n    print math.digitSum(\"woArBld\")\n       131\n    print math.digitSum(\"aAaaaXa\")\n       153\n\n>>>\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"ab\") => 131\n        digitSum(\"abcCd\") => 67\n        digit", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\nThe fact that it's a \"task\" is the most infuriating thing about this.\n\nI think it's more infuriating that there are users who would actually have to use this, instead of just using a calculator.\n\nHere's a better one: \n\nIt's interesting how some \"write a program\" tasks are so difficult to express in Python. You have to use list comprehensions to sum up the ASCII values. A lot of times I use other languages instead of Python for these tasks.\n\nNot really. It's difficult to express in Python if you don't know how to express it in Python.\nlist(map(lambda s: ord(s.charCodeAt(0)), input))\n\nExactly. The fundamental design principle of python is to make things as easy as possible. What is here a 'problem' in python is more likely a non-problem in other languages because they are not designed to be so intuitive and easy.\n\nThis is a bit silly. The point of the task is to write a function that checks if an input string is a valid number, and returns the sum of its ASCII values. Writing a function that calculates the ASCII values of a string is easy in any language,", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    if s.startswith(\"a\"):\n    return len(s)", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    def __call__(self, s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\"\"\"\n    digitSum = 0\n    if s:\n        digitSum = sum(int(ord(s[:digitSum])) for ord in range(0, 9))\n    return digitSum\n\nThe sum function needs to be rewritten:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return int(s.split(\"\\r\")[0]) + int(s.split(\"\\r\")[1]) + int(s.split(\"\\r\")[2])\n\nThe original was", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(upper(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def __main__(args, **kwargs):\n    print \"Enter string: \"\n    v = raw_input(args.lower())\n    return digitSum(v)\n\nThe string \"aAaaaXa\" is invalid, so the program will not work as intended.\n\nThe string \"aAaaaXa\" is invalid, so the program will not work as intended.\n\nThis is not a bug, but a feature.\n\ni got your point, but why does it say _\"This is not a bug, but a feature.\"_\nwhat does it mean exactly?\n\nIt means that the OP is trying to figure out why the program doesn't do what they expected, when it does exactly what the description says it does. This is the type of bug that is specifically described as not being a bug.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(s) for s in range(len(s)))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return sum(upperCase(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(map(str.upper, s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return s[0:len(s)-1]\nIf this is supposed to be a task, then you should make the program a lot simpler and more clear.   Also, you should use a list comprehension instead of a loop.   Also, you should explain what a \"s\" is, and why you need to use a string instead of just writing it directly.\n\nWhy would you use a list comprehension instead of a loop?\n\nI would use a loop, because it is faster, and requires less memory.\n\nI am not sure how you would use a list comprehension on a string.\n\nYou can use list comprehensions on strings. There are two ways to do it. You could use the regular syntax, or you could use `list(str(s))` syntax. Here is an example:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    s = string.ascii_upper(s)\n    return sum(s)", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if (s.startswith(\"+\"))\n        return s.rjust(1) + s.rjust(4)\n    else:\n        return s.rjust(1) + s.rjust(s.len(0))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return sum(numeric_cast(ord(chr(i)) * 10))\nThis is a good example, because it would return 153 when the input string is \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    digitSum = lambda s: (str(s[:i]) + str(s[i+1]))\n\n>>> print(digitSum(\"\"))\n0\n>>> print(digitSum(\"abAB\"))\n131\n>>> print(digitSum(\"abcCd\"))\n67\n>>> print(digitSum(\"helloE\"))\n69\n>>> print(digitSum(\"woArBld\"))\n131\n>>> print(digitSum(\"aAaaaXa\"))\n153\n\n>>> print(digitSum(\"sdfg\"))\n72\n>>>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return 0\n\nYou might get a better reception if you explain what the code is doing and why you wrote it.\n\nI'm not sure I follow, I was just making a joke about how much people like to complain about Python's white space.\n\nI don't know Python, but it seems you have to put spaces before the first and last character of every line, right?\n\nNo, the language has no such requirement. The difference between Python and C/C++/Java/C#/etc. is that there are no semicolons at the end of a line.\n\nThis sounds like a variant of the \"A language without semicolons is not a language\" argument.\n\nI believe it is more about the fact that many people write code with a lot of indentation and a lot of spaces so that you can easily see where everything is. In python, the indentation is optional. That is to say, you can write the above code with no indentation at all.\n\nWhat about a language which doesn't have any spaces at all, only tabs?\n\nWhy would you want that?\n\ntabs are easier to read.\nI'm not saying I'd use", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n         return sum(upper(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    s = ''.join(s)\n    sum = 0\n\n    if len(s) > 0:\n        sum += ord(s[i])\n        s = s[:len(s)-1]\n\n    return sum\nThis is not a method.\nSure it is. It's a function. It's called `digitSum()` or `def digitSum(s):`.</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    \"\"\"\n    return sum(filter(chr, s[1:]) + filter(chr, s[0:]) +", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(int(ord(s[0])) for s in string(s))</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return (s[0] + s[1])\nThat's not even a function, it's a string with some extra whitespace.\n\nI'm assuming that the quotes are part of the problem and they should be removed?\n\nThe quotes are part of the problem.\n\nThere are a few more of these if anyone is interested.\n\nThese are a great way to start your morning! Thanks for posting!\n\nEsp. the one about the correct spelling of \"definitely\"\n\nVery fun, though the title is a bit misleading. It's not about hacker \"test\" problems but rather \"fun\" programming problems that are not necessarily very useful. The Hacker Test is really about gauging a programmer's ability to solve a problem with little or no guidance.\n\nI like this one:\n\n\"Write a function that takes a string as input and returns the sum of the upper characters only\"\nIf it's a good exercise, why not post the answer as well?\n\nBecause this is how it is done in computer science. You are expected to figure out the answer. You are not expected to be spoonfed.\n\nFor a university CS class, perhaps.\nBut in the", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if s.startswith(\"0\"):\n       return int(s.rstrip()[::-1])\n    else:\n       return int(s.rstrip())\n\nThe \"if s.startswith(\"0\"):\" part is stupid. The rest is fine.\n\nThis is an example of how Python makes it easy to shoot yourself in the foot. The coder didn't fully understand what he was doing.\n\n\"The coder\" is me, and I completely understand it.\nI understand that some people might prefer if it was something like:", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n        \"\"\"\n\n    return int(ord(s[:len(s)])+1)\n\nAnd that's it.\n\nThe second implementation demonstrates the use of a more complex algorithm.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    print(\"Enter a string: \")\n    print(\"\\n\")\n    s = raw_input()\n    print(\"Sum: \", digitSum(s))\n    return s", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153 \"\"\"\n\n    return s.split('.')[0]\n   .filter(chr(ord(s.split('.')[1])), '.')\n   .sum()", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    print s", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(chr(ord(s)), 0)\n\nThis is a great example of a task that starts out simple and then gets more complicated. For those who don't know, sum() is a function that returns the sum of a list of integers. However, that function is for integers, not characters. So, let's start out with a simple string to string translation, and then move on to something more difficult.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return sum(ord(s))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return [s[:i] for i in range(len(s), 0, len(s) - 1)]\nYou need to be in Python 3.", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    import re\n   \n    for i in range(1,len(s)):\n         if i in s:\n            return i\n        return 0\n\n    def lowerCase(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the lower case version of that string.\n    Examples:\n        lowerCase(\"abc\") => abc\n        lowerCase(\"The quick brown fox jumps over the lazy dog.\")) => \"The quick brown fox jumps over the lazy dog.\"\n    \"\"\"\n    s = re.sub(r'[^a-zA-Z0-9]', '', s)\n    return s\n   \n\nI don't like this. Sure it works, but you end up copying the input into memory in order to return it.\n\nA better solution is to use a generator.\n\nI really like the C++ example.\n\nIn python you", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return 0", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    if s.startswith(\"0\"):\n    return s\n    else:\n    return sum(s.split(\" \"))\n\nThe \"startswith\" method is broken.\nThe second argument to the function is a function. That's not a bug in the code, that's a bug in the description.\n\nPerhaps the author of the problem was thinking in Python...</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n\n    return sum(ord(s[i:i+len(s)]) for i in range(len(s))\n    )", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    digitSum = lambda s: return sum(s[:len(s)-1])\n    print(digitSum(\"\"))", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return s.upper()\n\nSee also\n Python programming language\n List of Python idioms\n\nReferences\n\nExternal links\n Python Style Guide\n Python FAQ\n Python Best Practices\n Python Style</s>", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return int(s.upper().decode('utf-8'))\nThat's not the Pythonic way. You want:\nreturn int(s.upper().decode('ascii') + s.lower().decode('ascii'))\nor even better:\nreturn int(s.upper().decode('ascii'), s.lower().decode('ascii'))\nwhich does the same thing with fewer characters, and is much more idiomatic.\n\nWell, I didn't put it this way because I thought it would be shorter (I actually wrote it that way at first, but it turned out to be longer than the original version). But I agree with you.\n\nI didn't mean to pick on you specifically, there are many other examples of code like this in the thread. I'm just not a fan of code that uses raw string concatenation for things like this, and I want to make sure the habit doesn't get picked up by the next generation.\n\nWhat I find interesting is that many people will use tools like whitespace-based languages, the Unix command-line, or even a program like vim to save time, but then they", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    # 1. split the string into an array\n    s = 'aAaaaXa'\n    # 2. sort array in decreasing order of ASCII codes\n    arr = [x[0] for x in s]\n\n    # 3. loop through array and append the sum\n    for i in arr:\n         arr[i] += digitSum(arr[i - 1])\n         print arr\n\n    print '\n         '", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    def digitSum(s):\n    return sum(map(ord, s))\nThis is even easier:\n>>> digitSum(\"abcCd\")\n69\n>>> digitSum(\"aAaaaXa\")\n153\n>>> digitSum(\"abCD\")\n67\n>>> digitSum(\"abCD\")\n69\n>>> digitSum(\"aAaaaXa\")\n123\n>>> digitSum(\"AaaaX\")\n255\n>>> digitSum(\"aaX\")\n255\n>>> digitSum(\"aaXa\")\n255\n>>> digitSum(\"aaXa\")\n255\n>>> digitSum(\"aaaaXa\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaaX\")\n255\n>>> digitSum(\"aaaa", "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\" \"\"\"\n    return ''+s.upper()"]]