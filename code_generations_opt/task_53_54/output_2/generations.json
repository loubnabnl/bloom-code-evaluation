[["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __add__(self, x, y):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThe add() function is called twice in the example.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI'm not sure what you're getting at here.\n\nThe first one is a function, the second one is a method.\n\nA method is just a function with a special signature.\n\nI'm not sure what you're getting at here.\n\nThe first one is a function, the second one is a method.\n\nA method is just a function with a special signature.\n\nYes, I understand that. I'm not sure what you're getting at here.\n\nThe first one is a function, the second one is a method.\n\nA method is just a function with a special signature.\n\nYes, I understand that. I'm not sure what you're getting at here.\n\nThe first one is a function, the second one is a method.\n\nA method is just a function with a special signature.\n\nYes, I understand", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(5, 7)\n    12\n    >>> add_int(2, 3)\n    5\n    \"\"\"\n    return add(x, y)", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nI don't know why, but I really like the idea of \"return x + y\" being the definition of add.\nIt's the most succinct definition of the operation.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nYou have to use the same variable names in your examples as in your definition.\n\nOhh ok, I didn't know that. Thanks!</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI'm no Python expert, but it looks like the second one is much more readable.\n\nI'm not a Python expert either, but I would say that the second one is more readable only if you already know what add does.\n\nI disagree. It's much more readable to see that the function takes two arguments and returns a result. The first version doesn't really tell you anything.\n\nThe first version tells you that it's a function that takes two arguments and returns a result.\n\nBut it doesn't tell you what it does. The second version tells you that it takes two arguments and adds them.\n\nI'm not sure what you're talking about. The second version doesn't tell you what it does any more than the first.\n\nIt's not as obvious as the second, but it does tell you that it returns the sum of the two arguments.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think the second one is a bit clearer.\n\nI agree. I actually prefer the first one.\n\nI like the first one, too.\n\nThe first one is better, because it's more concise.\n\nI like the first one because it's more terse.\n\nI like the first one, because it's more succinct.\n\nI prefer the first one because it's more succinct.\n\nI prefer the first one because it's more terse.\n\nI like the first one because it's more terse.\n\nI prefer the first one because it's more succinct.\n\nI prefer the first one because it's more terse.\n\nI prefer the first one because it's more succinct.\n\nI prefer the first one because it's more terse.\n\nI like the first one because it's more terse.\n\nI", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x, y):\n    \"\"\"Add x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int(x, y):\n    \"\"\"Add x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int(x, y):\n    \"\"\"Add x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int(x, y):\n    \"\"\"Add x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI don't know what this is, but I love it.\n\nIt's a translation of the Python example given in the article:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_all(x: int, y: int):\n    \"\"\"Add all numbers x and y\n    >>> add_all(2, 3, 4, 5, 7, 8)\n    18\n    \"\"\"\n    def add_list(x: int, y: int):\n    \"\"\"Add all numbers in a list x and y\n    >>> add_list(['a','b','c'], 'd')\n    ['a','b','c','d']\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x, y):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    return x + y\nI really don't like this style.\nI don't like the fact that I have to look at the function signature to know what the function does.\nIn your case, I would have preferred something like:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI thought you were supposed to use spaces instead of tabs.\n\nI'm a tab man myself.\n\nHow about a \"def add(x: int, y: int):\" instead of \"def add(x, y: int):\"?\n\nI prefer the former, but I'm a tab man.\n\nI'm a tab man too, but I prefer the latter.\n\nThis is an interesting debate. I'm a tab man, but I prefer the latter.\n\nI'm a tab man, but I prefer the former.\n\nI'm a tab man, but I prefer the latter.\n\nI'm a tab man, but I prefer the former.\n\nI'm a tab man, but I prefer the latter.\n\nI'm a tab man, but I prefer the former.\n\nI'm a tab man, but I prefer the latter.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nThis is really bad style.  All you've done is define a function which returns the same thing as the built-in function +.  And there's no reason to define it as a class method instead of just a function.\nIt's not supposed to be a function.  It's a method.  It's supposed to be a class method, because it's supposed to be the method that adds two numbers together for the class.  It's not supposed to be a function because that's not what the class needs.\nA method is just a function that is defined within a class.  You're just creating a function with an extra level of indirection.  The only reason to do that is if you're working in a language that doesn't support functions, like Java.\nThat's a nice definition, but it's not what I mean.  I mean that it's a method that adds two numbers together for a class.  It's not supposed to be a function, because the class doesn't need a function.  It needs a method.\nIn Java, you can't create a function that adds two numbers together.  So it's just a function with an extra level of ind", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nYou could have just named the function \"add\", and then named the function \"add(x: int, y: int)\" and it would have worked the same way.  The only difference is that in the latter case, the function name is the same as the function signature.\n\nI think the point of this is to demonstrate that the function is named add and that the function signature is identical to the name.\n\nThis is a bad example. The problem is not with the name, but with the function signature.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __add__(self, x, y):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think I'll stick with Python.\n\nI think this is a bad example. It's more like:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __init__(self, x: int, y: int):\n    \"\"\"Initialize the adder\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    self.x = x\n    self.y = y\n    return self\nThat's about as elegant as I can get it.\n\nMy python is rusty but I would use a list comprehension:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __init__(self, x: int, y: int):\n    \"\"\"Initialize a new instance of the add function\n    >>> add = __init__(2, 3)\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def __call__(self, x: int, y: int):\n    \"\"\"Return the sum of two numbers x and y\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nThe code above is a straightforward translation of the Python code. Note that Python doesn't have a static type system, so the definition of the function add is in the global scope, which is a problem because it is a function that is used in many places, and so it needs to be wrapped in a class.\n\nIn the example above, the class add has two methods, one that initializes the class and one that calls the add function.\n\nThe initializer is the constructor. It has one argument, x,", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nAs a matter of style, I would prefer:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI have no idea what this is supposed to do.\n\nI think it's a python joke.\n\nI'm not sure what the joke is supposed to be.\n\nThe joke is that the code is syntactically correct but semantically meaningless.\n\nI don't think it's a joke, I think it's a serious example of what's wrong with Python's syntax.\n\nIt's not a joke, it's a very real example of how Python's syntax is, in fact, very powerful.\n\nThat's not very convincing.\n\nPython is a great language. It's just that it's too powerful for most people to use.\n\nI think this is a good example of why you shouldn't use Python. It's just too easy to write code that doesn't make sense.\n\nI think this is a good example of why you shouldn't use Python", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nWhat is this supposed to accomplish?\n\nNothing. It's a joke.\n\nYeah, I get that, but what's the joke?\n\nThe joke is that it's a terrible way to implement the add function.\n\nI think it's a great way to implement the add function.\n\nI think it's a terrible way to implement the add function.\n\nI think it's a great way to implement the add function.\n\nI think it's a terrible way to implement the add function.\n\nI think it's a great way to implement the add function.\n\nI think it's a terrible way to implement the add function.\n\nI think it's a great way to implement the add function.\n\nI think it's a terrible way to implement the add function.\n\nI think it's a great way to implement the add function.\n\nI think it's a terrible way to implement the add function.\n\nI think it's a great way to implement the add function.\n\nI think it's a terrible way to implement the add function.\n\nI think it's a great way to implement the add function.\n\nI think it", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nIt's not a matter of syntax. It's a matter of readability.\n\nI'm not sure I understand the difference.\n\nThe first is not readable.\n\nIn what way? It's a little wordy, but I don't see how it's less readable.\n\nI don't know about you, but when I read a piece of code, I like to be able to see the flow of execution. I can't see the flow of execution in the first code.\n\nThe flow of execution is the same in both.\n\nIt's not. In the first, I have to look at the definition of \"add\" twice to see what it does, and then I have to read the code to see what it does. In the second, I have to read the code once.\n\nI think you are confusing the flow of execution with the flow of data", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x > y:\n       return x + y\n    return x + y + 1\nWhat's wrong with this?\n\nYou can't add an int and a float.\n\nYou can't do that in any language that I know of.\n\nI'm pretty sure that's not true. In python, for example, you can do something like this:\n>>> a = int(input(\"Enter a number: \"))\n>>> b = float(input(\"Enter a number: \"))\n>>> a + b\n5.0\n\nI don't think you can add an int and a float in python.\n\nWhat is the type of + in python?\n\nPython has a type system?\n\nYes, it's called duck typing.\n\nI don't think it's duck typing. If I remember correctly, you can't do that in", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think this is a bit of an unfair comparison. You are comparing a simple function that does not take any arguments to a function that does take arguments and returns a value.\nIn this case the function is better served by returning a value.\n\nThe point is that there are cases where the function is better served by returning a value and cases where it is better served by returning a function.\nThe question is when to use which, not which is better.\n\nI see the point, but the example is still not very good.\n\nThe point is that, in a language like Python, it's not obvious whether the function is better served by returning a value or a function.\n\nI think the point is that, in a language like Python, the function is _always_ better served by returning a function.\n\nThis is a matter of opinion.\n\nNo, it's", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\n    def multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    9\n    >>> multiply(5, 7)\n    25\n    \"\"\"\n    return x * y\nThe title of the article is \"A simple example of the power of Python\".\nThe power of Python is not in adding two integers.\n\nThe power of Python is in being able to write code like this, which is\nclear, concise, and readable.\n\nThe power of python is in being able to write code like this, which is\nclear, concise, and readable.\n\nI'm not sure how this is clearer than the Java version.\n\nThe Java version is, in fact, not clear.\nIt's hard to tell which \"x\" and \"y\" are being multiplied by what.\n\nYou can't tell which \"x\" and \"y\" are being multiplied by what in the Python version either.\n\nI can.\n\n_\"I can.\"_\nThen you can't read, or", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI don't think this is the best way to go about this.  I think the author should be using a recursive function that calls itself.  This is more readable and easier to maintain.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    >>> add(2, 3)\n    5\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    >>> add(2, 3)\n    5\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    >>> add(2, 3)\n    5\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    >>> add(2, 3)\n    5\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_x(x: int, y: int):\n    \"\"\"Add x and y\n    >>> add_x(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.\n\nThis is the most elegant solution.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_two(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_two(2, 3)\n    5\n    >>> add_two(5, 7)\n    12\n    \"\"\"\n    def add_three(x: int, y: int):\n    \"\"\"Add three numbers x, y and z\n    >>> add_three(2, 3, 4)\n    11\n    >>> add_three(5, 7, 9)\n    16\n    \"\"\"\n    def add_five(x: int, y: int):\n    \"\"\"Add five numbers x, y, z, w and x\n    >>> add_five(2, 3, 4, 5, 7)\n    15\n    \"\"\"\n    def add_seven(x: int, y: int):\n    \"\"\"Add seven numbers x, y, z, w, x, y and z\n    >>> add_seven(2,", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think this is the best solution.\n\nI think the original solution is better because it's easier to read.\n\nI like the original solution better, because it's more explicit.\n\nThis is an example of why I don't like Python's syntax for functions.\nThe first one is much easier to read, IMO.\n\nI prefer the original solution.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.\n\nThe original solution is better.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nWhat's wrong with this?\n\nI think the point is that the code is verbose, not that it is wrong.\n\nYes, and I agree with the article that it is verbose. But it's not hard to understand or to read.\n\nI've always found that writing the long version of something, then writing a shorter version, then taking the shorter version and expanding it to the long version, is a good way to learn about the language.\n\nIt's a good way to learn the language, but the article is not about learning the language.\n\nI've been writing Python for a few years now and I still find it hard to write terse code. I've started using the linter pylint to help me out.\n\nI'm not sure why this is getting downvoted. Pylint is a great way to enforce good coding practices in", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is the most concise and readable version.\nThe next two are still readable but they are not as concise.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nThis is a function that will return the sum of two numbers. The definition of the function is:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nI think I'd rather use a dictionary.  The above example is obviously not a good one, but I would use dictionaries to define functions that are more complex than what this function is doing.\n\nI'd rather use a function.\nI don't think I'd ever use a dictionary to define a function.\n\nWhat is the benefit of using a function?\n\nI'm not the guy you asked, but I'll take a stab at it. I'd like to be able to write something like this:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is what I would expect.\n\nI would expect that, too, but it's not what I'm getting.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nYou should probably add some tests, since this is a common interview question.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x < y:\n       return x\n    return y + x\nThis is obviously a joke, but I have to ask: what would be wrong with that?\n\nYou can't have a function that takes a tuple as a parameter and return a tuple, because the return value is not a tuple. The return value is an integer.\n\nYou can have a function that takes a tuple as a parameter and return a tuple, because the return value is a tuple. The return value is an integer.\n\nYou can't have a function that takes a tuple as a parameter and return a tuple, because the return value is not a tuple. The return value is an integer.\n\nYou can have a function that takes a tuple as a parameter and return a tuple, because the return value is a tuple. The return value is an integer.\n\nYou can't have a", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nHow is this bad?\n\nI would have written it this way:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x+y\nI'd much prefer:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int_int(2, 3)\n    5\n    >>> add_int_int(5, 7)\n    12\n    \"\"\"\n    def add_int_int_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int_int_int(2, 3)\n    5\n    >>> add_int_int_int(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x, y):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think this is more idiomatic.\n\nI think it's a bit more idiomatic to use the more explicit name \"addition\", and then the more concise name \"add\" for the function.\n\nI don't think it's clear that \"add\" is a function name in Python. It's more like a reserved word.\n\nI don't think it's clear that \"add\" is a reserved word in Python. It's more like a reserved word.\n\nI don't think it's clear that \"add\" is a reserved word in Python. It's more like a reserved word.\n\nI don't think it's clear that \"add\" is a reserved word in Python. It's more like a reserved word.\n\nI don't think it's clear that \"add\" is a reserved word in Python. It's more like a reserved word.\n\nI don't think", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is just a trivial example of what is commonly referred to as a \"naked function\" (because it doesn't have a name) and it is almost always a bad idea.\n\nI agree with your point, but this isn't a naked function.\n\nWhy not?\n\nIt has a name.\n\nBut it doesn't have a name in the context of the code it's in. It has a name in the context of the code it's defined in.\n\nIn that case, I don't think you can call anything a \"naked function\" since every function has a name in the context of the code it is defined in.\n\nNo, I meant that the function doesn't have a name in the context of the code it's in.\n\nI think that's a very strange way to look at it. If you look at the function as a whole", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nThat's the obvious one, but what about:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x < y:\n        return x + y\n    return x + y\nThat's what I would do.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\n    def subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    2\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is an example of the \"code smell\" of \"poorly named methods\".  The method name is not descriptive of what it does.  It should be named something like \"add_and_return_x_and_y\" or \"add_and_return_x_and_y_and_return_the_result\".\n\nI don't think that's a code smell, I think it's a language smell. Python should have a \"return the result\" syntax for functions.\n\nI'm not sure if this is a language smell, or just a bad design decision.\nI think \"return the result\" is a good idea, but I also think that it should be a separate function. Otherwise, it's very easy to forget to call it.\n\nI agree. I think it's a language smell because it's so easy to get wrong.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add_one(x: int, y: int):\n    \"\"\"Add one to number x\n    >>> add_one(2)\n    3\n    >>> add_one(5)\n    6\n    \"\"\"\n    def add_one(x: int, y: int):\n    \"\"\"Add one to number x\n    >>> add_one(2)\n    3\n    >>> add_one(5)\n    6\n    \"\"\"\n    def add_two(x: int, y: int):\n    \"\"\"Add two to number x\n    >>> add_two(2)\n    3\n    >>> add_two(5)\n    7\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nHaha, that's pretty funny.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI'm not sure if you're being serious or not...\n\nIt's an example of how you can do this in python.\n\nI know, but it doesn't really add anything to the article, it's just a one-liner that could be rewritten as:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI have a feeling this is a joke, but I don't get it.\n\nThe joke is that this is a perfect example of what not to do when you have a function with two very similar names. The first version is correct, the second one is not.\n\nI didn't get it because I'm not a python programmer. I'm guessing the first one is correct because it returns the result of the operation?\n\nYes, the first one returns the result of the operation. The second one returns the result of the addition of two integers (which is 5) and then adds that result to the value of y (which is 7).\n\nI think this is a great example of why you should always use descriptive variable names.\n\nI think the joke is that the second version is actually a valid python statement.\n\nI think the joke is that the second version is actually a", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI know this is a joke, but it's a very bad one. I'm assuming that you are either a student or a junior developer. I'm sure you know that this is a horrible way of writing code.  If you're not, then you're a bad programmer.\n\nI'm curious why you think that. I don't see any problems with the above code.\n\nIn general, I'm not a fan of having a single function which does two completely different things.\nI can't see any benefit in having a single function which takes two numbers and returns the sum. It doesn't make the code any shorter, and it's much harder to read.\n\nI don't think that the author is claiming that the above function is better than two separate functions, but that it is better than using += and a temporary variable.\n\nI think that you're right, but I", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nThat's not how you write Python.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is the most common idiom for this.\n\nI don't know why you're getting downvoted. I've seen this idiom a lot in functional programming, and it is a valid point that this is the most common way to do it.\n\nI think it's because the OP is asking about the _idiomatic_ way to do it, and the idiom you describe is not idiomatic in Python.\n\nI think it is. I've seen it in many places. I would call it idiomatic.\n\nPython has no idiomatic way of doing this. In Python, you're expected to be explicit about your intentions. The OP is asking about idiomatic ways to do this in Python.\n\nI would call it idiomatic.\n\nI'm not trying to be a dick, but I'm genuinely curious. Where have you seen this idiom in Python", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\n    def multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(3, 5)\n    15\n    >>> multiply(2, 2)\n    4\n    >>> multiply(7, 3)\n    21\n    \"\"\"\n    return x * y\n    def divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(7, 3)\n    1\n    >>> divide(3, 7)\n    2\n    >>> divide(2, 3)\n    0\n    \"\"\"\n    return x / y\n\nThe problem with this is that there is no way to specify that a function should return a value, or that it should return a value of a certain type. The language is also very limited in what it allows you to do.\n\nThe other problem is that there is no way to specify what a function does. For example, there is", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int_and_string(x: int, y: int, z: string):\n    \"\"\"Add two numbers x and y and a string z\n    >>> add_int_and_string(2, 3, \"hi\")\n    5\n    >>> add_int_and_string(5, 7, \"hi\")\n    12\n    \"\"\"\n    def add_int_and_string_and_int(x: int, y: int, z: string):\n    \"\"\"Add two numbers x and y and a string z\n    >>> add_int_and_string_and_int(2, 3, \"hi\", 5)\n    12\n    \"\"\"\n    def add_int_and_string", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThe first is Python 3.5, the second is Python 3.4.\n\nIt's a good example of how Python 3.5 is going to be much more like a \"JavaScript-style\" language, with its syntax more closely resembling Java or JavaScript.\n\nNot really.\n\nI'm not sure why people are so down on this. I think it's a great addition to the language.\n\nIt's a terrible addition to the language.\n\nI'm not sure why people are so down on this. I think it's a great addition to the language.\n\nIt's a terrible addition to the language.\n\nI'm not sure why people are so down on this. I think it's a great addition to the language.\n\nIt's a terrible addition to the language.\n\nI'm not sure why people are so down on this. I think", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x == y:\n    return x\n    return add(x+1, y)\nThat's pretty much the way I would write it.  I would use the \"return\" keyword instead of \"return x\" though.\n\nI'm not sure I understand your question. Are you asking how to return a value from a function?\n\nI think it's pretty self explanatory.\n\nWhat is the purpose of this code?\n\nIt's a simple way to add two numbers.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nI think this is a bad example. Why not use a built-in function?", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI don't get it.  What's the difference between the two?  I'm a bit of a newbie.\nI think the first one is more flexible because you can use it as a function, and pass in any number of arguments.\nThe second one is more concise.  It's a one-liner.  It's not a function.  You can't pass in any number of arguments.\nThe first one is more flexible because you can use it as a function, and pass in any number of arguments.  The second one is more concise.  It's a one-liner.  It's not a function.  You can't pass in any number of arguments.\nI see.  I'm a bit of a newbie so I'm still learning.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThe first one is more readable and shorter.\n\nYour example is a little contrived, but I think it's worth mentioning that the second version is _more_ readable and shorter, not less.\nThe second version is a single statement, whereas the first is a single statement with a comment.\nIf you're concerned about the length of the method call, you can always use the \"inline\" keyword in Python.\n\nYes, I would definitely argue that the second version is more readable. I also think that it's more concise, but that's a matter of opinion.\n\nI think the first version is more concise because it's a single statement.\n\nI think the second version is more concise because it's a single statement.\n\nI think the second version is more concise because it's a single statement.\n\nI think the second version is more concise because it's a", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI don't get it. What does this mean?\n\nIn python, the syntax for adding two numbers is:\nx = x + y\nSo, the first line of code is equivalent to", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __add__(self, x, y):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return self + x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x+y\nI think that's pretty much it.\n\nI agree, but I'd go further and say that the following is equally valid:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think that the second is clearer.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x+y\nThis is a very common mistake, but it's not a mistake at all. It is a deliberate decision.\n\nThe only time I've seen this in the wild is when people have been using Python 2 and haven't yet migrated to Python 3.\nThe author of the article is using Python 3, so I'm not sure why they chose to use the old form.\n\nI think it's a mistake because the new form is _more_ readable.\n\nI think the new form is less readable.\n\nI disagree, but I don't think it matters. Python 3 has been out for a decade. If you're still writing code that uses the old form, you're doing it wrong.\n\nI don't think the new form is less readable. It's just different. I do think that it's a mistake to use the new form because it's different. The new form", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nWhat's the point of having both?\n\nI think the point is to illustrate the pointlessness of the question.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is a great example of how the article is wrong. The only difference is that the first one is a little more readable.\nThe second one is more verbose, but it's also more readable. It's more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.\nThe second one is more readable because it's more clear what it does.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nYou're adding a local variable to the global variable x.\n\nWell, that's the joke.\n\nI think it's not a good joke. It's a bad joke.\n\nI think it's funny. It's a good joke.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is not Pythonic.\n\nI think it's a reasonable choice for a simple example.\n\nSure, but it's not Pythonic.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI'm not sure if this is a good idea, but it might be good to have a function that takes a function and a parameter and returns a function with the parameter replaced by the function.\nThis could be useful in some cases, but in others it might make things more complicated. I'm not sure.\n\nYou can do that with map.\n\nI think the OP meant that you could take a function that takes a function as a parameter and returns a function that takes a parameter and returns a function that takes a parameter and returns a function, and so on.\n\nYou can do that with a recursive function.\n\nI think the OP meant that you could take a function that takes a function as a parameter and returns a function that takes a parameter and returns a function that takes a parameter and returns a function, and so on.\n\nI think the OP meant that you could take a function that takes a function as a parameter and returns a function that takes a", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        return self\n    def add(self, x, y):\n        return x + y\n    def main():\n        a = add(2, 3)\n        b = add(5, 7)\n        print(a)\n        print(b)\n        print(a + b)\n        print(a - b)\n        print(a * b)\n        print(a / b)\n        print(a % b)\n        print(a % 2)\n        print(a % 3)\n        print(a % 4)", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_i(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_i(2, 3)\n    5\n    >>> add_i(5, 7)\n    12\n    \"\"\"\n    return add\n    def subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return subtract\n    def multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    25\n    \"\"\"\n    return multiply\n    def divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    7\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    7\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    7\n    \"\"\"\n    def add(x: int, y: int):", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __add__(self, x, y):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return self.__class__.__add__(x, y)\nThis is the best answer, IMHO.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think you mean:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __call__(self, x, y):\n         return x + y\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return __call__(x, y)\nThat is the point of the article, to show that these are not the same.\n\nI don't get it. The first one is the one I would write, because I don't want to have to remember that add is a function. The second one is the one I would use, because I don't want to have to remember that add is a function.\n\nI don't think it's about remembering a function, it's about the fact that the second one has a \"return\" statement, which is a programming concept. The first one is just an expression, but it's a bit unclear what it means.\n\nIn Python, the first one is a function and the second one is an expression. In Python, the", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add_sum(a: int, b: int):\n    \"\"\"Add two numbers and return the sum\n    >>> add_sum(2, 3)\n    7\n    >>> add_sum(5, 7)\n    12\n    \"\"\"\n    def add_sum(a: int, b: int):\n    \"\"\"Add two numbers and return the sum\n    >>> add_sum(2, 3)\n    7\n    >>> add_sum(5, 7)\n    12\n    \"\"\"\n    def add_multiply(a: int, b: int):\n    \"\"\"Add two numbers and return the product\n    >>> add_multiply(2, 3)\n    7", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThis is not a joke.\n\nI think the author is trying to point out that Python's list comprehension syntax is actually the same as the lambda syntax used in functional languages.\n\nI think the author is trying to point out that Python's list comprehension syntax is actually the same as the lambda syntax used in functional languages.\n\nI think the author is trying to point out that Python's list comprehension syntax is actually the same as the lambda syntax used in functional languages.\n\nI think the author is trying to point out that Python's list comprehension syntax is actually the same as the lambda syntax used in functional languages.\n\nI think the author is trying to point out that Python's list comprehension syntax is actually the same as the lambda syntax used in functional languages.\n\nI think the author is trying to point out that Python's list comprehension syntax is actually the same as the lambda syntax used in functional languages.\n\nI think the author is trying to point out that Python's", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nWhat's wrong with this code?\n\nI'm not sure why you're being downvoted. I think you are making a valid point.\nThe problem with the above code is that it doesn't consider overflow, which can cause bugs.\nIn the add(2, 3) example, you are adding two numbers that are not of the same type. Therefore, the result is not guaranteed to be an integer.\nIn the add(5, 7) example, you are adding two integers. However, the result will be greater than the maximum value of an int, so you will have to add a type cast to ensure that you are not adding a negative number.\n\nI'm not sure why I was downvoted either. I was just trying to be helpful.\n\nI think the problem is that you didn't explain the problem with the code, just pointed out that there was", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nThat's not what it does, though. It returns an instance of the function add, which returns the sum of the arguments.\n\nI was just about to write the same thing.\n\nI was just about to write the same thing.\n\nThat's not what it does, though. It returns an instance of the function add, which returns the sum of the arguments.\n\nI think he meant that the author of the article should have used an example like:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\n    def sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    2\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n    def div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    1\n    \"\"\"\n    return x / y\n    def mod(x: int, y: int):\n    \"\"\"Modulus operation. Returns the remainder when x divided by y.\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nThis is a good example of what not to do.\nWhat's the problem with it?\nThere is no way to tell if add(x,y) is supposed to return a new value or not. It can be either a function or a method, and the only way to tell is to look at the source code.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThe number of times I've seen this is unbelievable.\n\nI don't think it's a bad thing. There's a difference between", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    return x + y\nThat's not a good example, because `add_int` is only a few characters longer than `add`.\n\nI think the point is that it's easier to read and understand if you've seen the function before.\n\nIt's also easier to read if you've seen the function before, if you're familiar with Python and know that \"add\" is a built-in function.\n\nI think you're missing the point.\nThe point is that it is a good idea to name functions in a way that people who are familiar with your code can easily understand what the function does.\n\nI don't understand what the point is. The fact that the function is called `add` has no bearing on the fact that the function is supposed to add two numbers.\n\nThe point is that if you name it `add_int`, people who are familiar with your code will understand what it does, and it's easier to read and understand", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nIf you're trying to make a point about using a function instead of a method, you should use a function instead of a method.\n\nThis is not an example of a function. This is an example of a method.\n\nThere is no difference in python between a function and a method.\n\nThere is a difference. A function is a first class citizen. A method is not.\n\nHow is a function a first class citizen, and a method not?\n\nIn python, all functions are methods, but not all methods are functions.\n\nI like to use the same convention as Ruby:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    >>> add(2, 3)\n    Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    AttributeError: 'int' object has no attribute 'add'\n    \"\"\"\nI'm not sure I understand the motivation for this. It's not the case that all builtins are built the same way, and you don't even have to look at the implementation of `add` to see that this isn't the case.\n\nI think it's a good idea. The problem with the original add() is that it's not obvious that it takes two arguments.\nI don't know how well it scales up to the more complex builtins, but for simple builtins like this I think it's a good idea.\n\nI think it's a good idea too.\nIt's not about the complexity of the built-ins, it's about the complexity of the problem the built-in is trying to", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x == 0:\n        return y\n    else:\n        return add(x - 1, y) + x + y\nI like this better:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x, y: int):\n    \"\"\"Return the sum of x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\nThere's no need to use the \"def\" keyword at all in Python. It's just a convention to do so for readability.\n\nThere is also a difference in how \"def\" is used in Python. \"def\" is used to declare a function or class. \"def\" can be used inside a function to declare a local variable, but in that case it is not a function or class.\n\nI'm not sure why you were downvoted. This is exactly what the Python documentation says about the difference between \"def\" and \"def\":\n\nI think there's a bug in the parser.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    return add(x, y)\n    def add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    return add(x, y)\n\nI don't think this is a good example of the OP's point.\n\nI think it's a great", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __init__(self, x: int, y: int):\n    \"\"\"Initialize add function\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    self.x = x\n    self.y = y\n    def add(self, x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return self.x + self.y\n\nThe only thing I don't understand is the last line of code. I know what + does, but why is it defined as a function?\n\nI'm not sure what you mean by \"defined as a function\". The \"+\" operator is a function in Python, so it's defined as a function.\n\nIt seems odd to me that the + operator is a function. I don't know any other languages that do that.\n\nIt's a", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __call__(self, x: int, y: int):\n    \"\"\"Return the sum of x and y\n    >>> sum(add(2, 3))\n    7\n    \"\"\"\n    return x + y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI like this, but I would also add a comment to explain the line:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nWhat's the point of the article? I'm not sure I understand.\n\nThe point is that the Python version is less readable than the Java version, because it's harder to tell what it does at a glance.\n\nI'm not sure that's true.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI'm not sure why this is a good example. In your first version, the return type is int. In the second version, the return type is int.\n\nThere is a difference between the two. In the first version, the compiler has to do the addition. In the second version, the compiler knows that the type is int and so it can return the result directly.\n\nBut the difference is one of implementation, not of type.\n\nThe difference is one of _semantics_.\n\nI'm not sure why this is a good example. In your first version, the return type is int. In the second version, the return type is int.\n\nThere is a difference between the two. In the first version, the compiler has to do the addition. In the second version, the compiler knows that the type is int and so it can return the result directly.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.\nThe \"def add(x: int, y: int):\" is a function definition, not a class definition.", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add_int(x, y):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    def add_int_int(x, y):\n    \"\"\"Add two numbers x and y\n    >>> add_int_int(2, 3)\n    5\n    >>> add_int_int(5, 7)\n    12\n    \"\"\"\n    def add_int_int_int(x, y):\n    \"\"\"Add two numbers x and y\n    >>> add_int_int_int(2, 3)\n    5\n    >>> add_int_int_int(5, 7)\n    12\n    \"\"\"\n    def add_int_int_int_int(x, y):\n    \"\"\"Add two numbers x and y\n    >>> add_int_int_int_", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nThis is a terrible example. It's not clear at all what the type of `x` and `y` are.\nx and y are ints, because it's a Python function.\nIn the example, yes. But the function itself is not specified to be an int.\nWell, of course, but I don't see how that's relevant to the question.\nI was just saying that the example given was a bad one.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI had to do a double take when I saw this. I was like \"there's no way this is the same code\".\n\nWhat's the issue? It's a very simple function that does what it says on the tin.\n\nIt's not the same code. The code you posted is in Python, while the code in the OP is in C++.\n\nOh, I was looking at the code in the OP. I see what you mean now.\n\nThis is a great example of why you should always use your own variable names.\n\nI don't know, I think I would have done this:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    return x + y\nWhat is the problem with this?\nIt's a function that does what it says.  I think it's a good example of a function that is not only concise but also useful.\nIt's also not very useful. What if you want to add two arrays of numbers?\nThen you use the Python list comprehension syntax, which is (list(x) + list(y)).\nRight, but you could write a function that takes two lists and returns a list of the sum of the lists.  I don't know if that's a useful thing to do, but it's possible.\nYou're right, but I think in this case the original function is more useful.  If you want to add two lists of numbers, then the list comprehension syntax is probably more useful, but the add() function is more useful if you want to add two arbitrary numbers.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __init__(self):\n    \"\"\"Constructor\"\"\"\n    self.x = x\n    self.y = y\n    def add(self, x, y):\n    \"\"\"Return the sum of x and y\"\"\"\n    return self.x + self.y", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x == y:\n    return x\n    return y\nYou can't do that, because the language doesn't let you define a function that doesn't do anything.\n\nYou can if you define a function with no parameters and then use that as the base function:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The second one is a method.\n\nThe first one is a function. The", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nAnd this is why people should write unit tests.  If you write this as a test, you can just run it to verify it works, and you'll be alerted if it breaks.\n\nI'm a big fan of unit tests, but I don't think they're a complete solution.\nIf you have a complex function, it's not always easy to write a unit test that exercises all the edge cases.\n\nThis is a valid point, but the point of unit tests is not to test the edge cases, but to test the common cases.\nFor example, if you have a function that takes two numbers and adds them, you'd write a test that takes two numbers and adds them. You'd test that the result is what you expect.\nIf you have a function that takes a list of numbers and adds them, you'd write a test that takes a list of numbers and adds", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __call__(self, x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThat is the most concise, pythonic version of this I've seen yet.\n\nIt's not quite the same, but it's pretty close:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nI think this is the most concise way to write it.  It is a bit too concise, though.  What if I want to add two numbers where the sum is not an integer?\nAlso, I think the following is a bit easier to read:", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\nThe first one is more obvious and easier to read.\nThe second one is more efficient, and also more obvious.\nI'm not sure I agree that the second one is more obvious. It's more obvious that the first one is more obvious.\nThe second one is more obvious because it's more obvious.</s>", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x > y:\n       return 1\n    else:\n       return x + y\nI don't see how this is a better example of \"readable code\".\n\nIt's readable because it's easy to read.\n\nI don't see how this is a better example of \"readable code\".\n\nIt's readable because it's easy to read.\n\nI don't see how this is a better example of \"readable code\".\n\nIt's readable because it's easy to read.\n\nI don't see how this is a better example of \"readable code\".\n\nIt's readable because it's easy to read.\n\nI don't see how this is a better example of \"readable code\".\n\nIt's readable because it's easy to read.\n\nI don't see how this is a better example of \"", "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\" \"\"\"\n    def __add__(self, x, y):\n    \"\"\"Add the two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return self.__add__(x, y)\n    def __mul__(self, x: int, y: int):\n    \"\"\"Multiply the two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    10\n    \"\"\"\n    return self.__mul__(x, y)\n    def __div__(self, x: int, y: int):\n    \"\"\"Divide the two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return self.__div__(x, y)\n    def __"]]