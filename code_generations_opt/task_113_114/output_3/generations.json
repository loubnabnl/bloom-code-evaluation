[["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if i in lst:\n           return i\n    return []\n\nThis is an example of a Turing machine: it's a program that takes a string as input, and returns a list of length 1.\n\nNote that the input string can be arbitrary length. The output is guaranteed to be a list of length 1. In particular, if the input string is empty, the output will also be empty.\n\nThe problem is that this program is not guaranteed to halt.  More generally, no such program is guaranteed to halt.  Therefore, we can't say that it's a program that can solve the halting problem.\n\nNotation\n\nSome people try to prove the existence of a program that can solve the halting problem by assuming that the language is the standard language of the lambda calculus, and that it uses the traditional \u03bb notation.  Then, we're just looking for a program with one free variable, whose expansion is the halting problem.\n\nThis is not a very natural approach.  But, it's a useful one, since it allows us to", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    #       Create a new list of elements with the number of odd elements\n    #        in each string.\n    #       For each element of the input, replace the element with the\n    #          number of odd digits.\n    output = []\n    for i in lst:\n         output.append(i+1)\n    output.append(str(int(i)))\n    return output", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if not list(lst):\n        return []\n    for s in lst:\n        if s.isdigit():\n           # We're done with this one.\n            return list(s)\n        else:\n         # We're done with this one.\n            return list(lst[i:])\n    return list(lst)", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n       return lst\n    else:\n       if len(lst) == 1:\n         return [lst[0]]\n       else:\n         return [lst[0]:lst[1:]*2]\n    return [lst[0]:lst[1:]*2]\n    def even_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of even elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n\n    >>> even_count(['1234567'])\n    [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n    >>> even_count(['3", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return [i for i in range(len(lst)) if i not in lst]\n\n>>> odd_count(['1','2','3','4','5','6','7','8','9'])\n[1,3,5,9,15]\n\n>>> odd_count(['1','2','3','4','5','6','7','8','9','0'])\n[1,3,5,9]\n>>> odd_count(['123','456','789','987','123','456','789','987','123','456','789','987','123','456','789','987','123','456','789','987','123','456','789','987'])\n[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    while len(lst):\n       if lst[-1] == '.':\n          break\n      for i in range(1,len(lst)-1):\n           if lst[i] == '0':\n             return [lst[i],i]\n       return []", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return [int(lst[i:i+1] % 2) for i in range(len(lst)-2)]\n\nThis one might be a bit tricky for people who are learning the language. If you are a python programmer, you will be able to understand it right away.\nIt took me a while to get the hang of it. I still sometimes get confused when I'm doing something more complicated. I think the problem is that it's just not something I do very often.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i,o in enumerate(lst):\n        if len(i) > 1:\n           i = i[:-1]\n          else:\n            i = ''\n    return [o for o in odd_count(i)]\n\nGiven the way the English language is used today, it would be more appropriate to use \"odd\" rather than \"even\". In the original English text, \"odd\" means \"different from the usual number\".\n\nThat's what I thought too, until I remembered that in the original text, the \"even\" and \"odd\" of \"2\" and \"4\" were not the same. The \"odd\" of \"2\" was \"1\", and the \"odd\" of \"4\" was \"3\".\n\nGood point. It would have been nice for the author to have explained the notation for odd and even numbers a little bit.\n\nNotation would be interesting. For any number N, odd(N) is the smallest integer k such that k > 2*N", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for s in lst:\n        if len(s) == 3:\n           return [s[1],s[2]]\n    return []\n\nI'm not sure what's the benefit of using Python over the built-in string functions in C. It seems like the time it takes to write this is more than the time it would take to write the C version (and in C it would be more efficient, too).\n\nI tend to agree. Plus, this does not scale well to longer inputs.\n\nthis is one of the most useless \"python\" code samples I have ever seen.\n\nYou should look at the source code of some of the prominent Python packages. I'm not saying that the Python community is bad at programming, but I have not seen a lot of good code coming out of there.\n\nI think this may be a consequence of the relatively young age of the community. Most of the stuff out there is pretty new.\n\nThis is a fine demonstration of the value of using Python.\n\nWhy is the main() function not returning a value?\n\nIt does, you just don", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [p for p in lst if p%2==0]\nFor anyone who didn't get it:\nThe answer is indeed 1 because [1]  is the only element in the output.\n\nThis is the classic first question to ask in interviews.\n\nAnd the classic answer is to replace \"odd elements\" with \"even elements\" in the problem statement, and ask for an answer to that question.\n\nThis is a great example of a \"brain teaser\". A brain teaser is a question that asks you to find a clever solution. The correct solution is to use a function called even_count.\n\nThe answer is 1.\n\nI think the point was to come up with a solution that wasn't as obvious as using a built in function.\n\nAnother way to do it is to iterate through the list, create a list of the evens, and then use the even_count function:\nx = [1,2,3]\neven_evens = [x[0] for x in x if x % 2 == 0]\neven_count(even_evens)\n>>> even_count(even_evens)\n[1, 3]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if i not in xrange(0,len(lst)):\n            return lst[i]\n    return list(int(lst[i]))\n\nThis code makes some assumptions about the list of numbers. I don't see any mention of the list being sorted or that the numbers are all different.\nI don't know if this is how the Python standard library implementation works, but in my mind, it would be more efficient to do something like:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i,s in enumerate(lst):\n        if i[1:]!=0:\n           return i\n    return []\nHow about:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [x+1 for x in lst if x % 2]\nI am not sure what this algorithm achieves that a single-pass depth-first search through the list of strings would not.\n\nIt's a single pass. I think you might be confused about the definition of odd_count:\n>>> odd_count([123, 456, 0, 2, 3, 0, 5, 1, 0, 3, 7, 1, 0])\n[0, 2, 1, 5, 3, 1, 7, 2, 0]\nIt's not a depth first search (which would be [0, 2, 0, 1, 3, 5, 0, 7, 3, 0] )\n\nOh, OK. I misunderstood the claim \"Given a list of strings, where each string consists of only digits\" as \"Given a list of strings, where each string consists of only digits and is sorted.\"\n\nYeah, and I thought you meant \"Given a list of strings, where each string consists of only digits and is sorted and you can recursively call it with itself.\"\n\nI'm not sure if this is idiomatic C++.\n\nIt's not idiomatic", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in sorted(lst) if i % 2]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    count = 0\n    for i in lst:\n        if i[0] == 0:\n            count = count + 1\n        else:\n            count = count - 1\n        return [i for i in range(1, count)]\nThe loop variable i should be on the left side, not the right side.\n\nRight, I saw that while trying to debug but couldn't find how to fix it. I'll try to look into it more when I get home.\nThank you!</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.index(str(i) for i, lst in enumerate(lst) if str(i)!= '0')\n\nThat would be an indexing function. The function in question is a counting function.\n\nI wonder if there are any use cases for this code?\n\nProbably more useful is the fact that Python allows to write your own enumerate functions with no overhead, using the enumerate built-in.\nHere is a 3-line implementation of a permutations enumerate:\nfrom functools import partial", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [lst[i+1] for i in lst if i%2]\nThe python version is actually faster, and the output is shorter.  I'm not trying to be a dick. I'm just saying.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    i = 0\n    for i in lst:\n        i = i + 1\n        if i % 10 == 0:\n            return i\n    return []", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    for i in lst:\n        # this is the \"index\" of the i'th string in the input list\n        # this is the \"index\" of the i'th \"odd\" digit\n        # this is the \"index\" of the i'th \"odd\" element in the i'th string\n        # this is the \"index\" of the i'th \"odd\" element in the lst\n        # this is the \"number of odd elements in the string i of the input.\"\n        # this is the \"number of odd elements in the string i of the input.\"\n        # the \"number of odd elements in the string i of the input.\" is\n          the \"number of odd elements in the string i of the input.\"\n            # the \"number of odd elements in the string i of the input.\" is\n            the", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    def split_numbers(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits,\n    return a list of lists.\n\n    The first list is a list of the strings where each string consists of only\n    digits.\n    The second list is a list of lists where each list contains an element\n    for each pair of adjacent digits. For example, the first element of the\n    second list will be [0,1], the second element will be [1,2], etc.\n    \"\"\"\n\n    return [\n         [],\n         [\n           [0,0],\n            [0,1],\n            [0,2],\n            [0,3],\n            [1,0],", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    # return a list of tuples\n    return list(x.split(\",\"),\n       x.count(lst),\n       x.split(\",\"),\n       x.count(lst),\n       x.split(\",\"),\n       x.count(lst))", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.group(0)\n    if len(lst) == 1:\n       return lst\n    else:\n       return [lst[0] for lst[0]]\nI thought I could do it better: \n>>> def odd_count_a(lst):\n...     \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n     Each element i of the output should be \"the number of odd elements in the\n     string i of the input.\" where all the i's should be replaced by the number\n     of odd digits in the i'th string of the input.\n\n    >>> odd_count_a(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n...     \"\"\"Given a list of strings, where each string consists", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return list(str(n) for n in sorted(lst, key=lambda i: i % 2))\n\n>>> odd_count(['1234567'])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> odd_count('01234567')\n[0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n>>> odd_count('1111222')\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [0 for i in range(len(lst),1)]\nI'm not sure if this is the best solution, but I wrote this in a few minutes.\n\nNot sure if it's the best way to do it, but it's easy enough to add a print statement to the end of the function:\nfor i in range(len(lst),1):", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    i = 0\n\n    for s in lst:\n\n         if s[1:]:\n            if s[3]=='1':\n                       i += 1\n\n               if s[3]=='2':\n                         i += 2\n\n                if s[3]=='3':\n                          i += 3\n\n                if s[3]=='4':\n                          i += 4\n\n                if", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sorted(lst,key=lambda s:ord(ord(s[1])))\nIf you have a list `[str,str]`, `lst` can't possibly be a list, since a list requires a single element, not two.\nInstead, you probably want `sorted(lst, key=lambda s: ord(ord(s[1])))`\n\nYes.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    \"\"\"This code works because there are a lot of odd numbers in the list.\n    >>> odd_count(['123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [str(x for x in lst if x % 2!= 0)]\n\nThis function is obviously really simple. I didn't think so at first, but it\nturns out there is a relatively easy solution. What is it?\n\nP.S. The answer is a bit long, but it's not difficult. The hardest part is\nfinding a good strategy to approach the problem. The rest is just the\napplication of that strategy.\n\nP.P.S. There's also a good lesson to be learned from this exercise.\n\nP.P.P.S. The other lessons are not so good.\n\n--\nMarius Gedminas\n\nthe only reason i read this post is to see if you would call the function\n\"obviously really simple.\"\n\n2. You can use list(range(len(lst))). This is how I solved the problem.\n\nIt's a simple solution, but it's not obvious.\n\n--\nMarius Gedminas\n\nOf course this is not obvious!\nYour solution is too simple and I don't see why it is a good solution.\n\nAnyway, here is my", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if str(i) in ['0','1','2','3','4','5','6','7','8']:\n           # all elements except the first are odd\n            # output \"1\"\n         else:\n            # all elements are even, output \"0\"\n            # output \"1\"\n    return lst[i:i+2]\nGood job, but you don't need len(lst) here.  You already know the length of lst in the call to range().</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    i = 0\n    if len(lst) == 0:\n       return lst\n    for s in lst:\n       if s[0] == 0 or s[1] == 0:\n          continue\n       if s[0] == 1 or s[1] == 1:\n          i = i + 1\n       if s[0] == 2 or s[1] == 2:\n          i = i + 2\n    return i\n\nOops, should have noticed that. Thanks for the correction.\n\nThat's okay. I'm sure you'll soon have a compiler that does.\n\nAre you the one that always gets the last word?\n\nI'm sure you'll soon have a compiler that does.\n\nThe Python approach is an efficient and straightforward one, but not general purpose.\nMore generally, any programming language that supports recursion and tail calls can define the odd function in the same way as Python.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if i.isdigit()]\nHaha, nice one</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if i % 2!= 0:\n           return lst[i] + 1\n    return lst\n\n\"Ralph O'Connor\" <ORConner@nospam.com> on 05/18/2000 11:28:53 AM\nPlease respond to \"Ralph O'Connor\" <ORConner@nospam.com>\nTo:\t<r-sig-strictly-dca@mit.edu>\ncc:\nSubject:\tStrictlyDCASig - Numbering Conventions\n\n>\n>\n> Subject: Numbering Conventions\n>\n>\n> As per StrictlyDCASig's request, I have generated the following\n> list of possible numbering conventions for the attached\n> agreement.  The idea is that this list can be used as a starting point\n> for discussion of the issue.  The list is not intended as an exhaustive\n> list of all possibilities.\n>\n>\n>\n> 1.  Continue with the present convention (1.1", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    out = []\n    for i in range(len(lst)):\n        if i[0] == 0:\n            out.append(i)\n    return out", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    # split the input string into list of strings\n    x = lst.split()\n    # get the first odd character\n    current_char = x.pop()\n    # get the remainder of the first string\n    rest_of_first_string = x[current_char:current_char+len(x)]\n    # get the remainder of the rest of the first string\n    rest_of_rest_of_first_string = x[current_char+len(x)-1:]\n    # get the remainder of the rest of the rest of the first string\n    rest_of_rest_of_rest_of_first_string = x[current_char+len(x)-2:]\n    # get the remainder of the rest of the rest of the rest of the first string\n    rest_of_rest_of_rest_of_rest_of_first_string = x[current_char+len(x)-3:]\n    # get the remainder of the rest of the rest of the rest of the first string", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst) == 0:\n        return []\n    for x in lst:\n        if x[0] not in [0,1]:\n            odd_count(x) += 1\n    return odd_count(lst)", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    a = 0\n    for c in lst:\n        a += 2\n    return a\n\nIt's a neat trick, but it's only needed in certain use cases. A for loop that uses the \"modulo\" function, or the modulo operator itself, would do the trick in this case.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [list(x+1 for x in lst if x % 2 == 0 for x in lst) for x in lst]\n\nI use this all the time.\n\nEvery time I see code like this, I get a twitch in my eye.\nHow is it possible to write code like this and not feel a little bit ashamed?\n\nIt's the python way.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    input_list = list(lst)\n    return input_list.sort(key=lambda x,y: len(x)+1, reverse=True)</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [lst[1] for lst[1] in lst if is_odd(lst[1])]\n\nThat's an example of a standard, a-priori approach. As opposed to an a- posteriori approach, where you know the final result, and you define a recursive function which solves the problem.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if i[0] in ('0','1','2','3')]\n\nhmmm. i'm not seeing how this is any better than using the built in string functions.\n\nThat's because it's not.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    # convert every string to a list of numbers\n    for i,str in enumerate(lst):\n          i = int(str[0])\n          return str\n    return lst", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    # Pick the list of strings\n    n = len(lst)\n    # Convert each string to a list of characters\n    for string in lst:\n        # If the string is not all digits, then we're done\n        if len(string)!= n:\n           return []\n        # Loop through each digit\n        for char in string:\n           # If the character is odd, then we're done\n           if char!= '0':\n              # We've reached the end of the list\n             return []\n        # If the character is odd, then we're done\n        # If not, then add it to the list\n        for i in range(1, n-1):", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    for s in lst:\n         i = int(s.strip())\n\n    return i", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst)!= 0:\n        return []\n    else:\n        odd_count_ind = []\n        for i in lst:\n            if i[0]!= '0':\n               odd_count_ind.append(i)\n             else:\n                odd_count_ind.append(0)\n    return odd_count_ind\n\nI suppose this was done for the sake of readability. But this is a language. You should be able to read it.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    result = []\n    for i in lst:\n        if i[0] == 0:\n            result.append(1)\n            i = i[1:]\n            break\n             result.append(0)\n    return result\n\nThis is just the definition of what the function is supposed to do. The Python interpreter will not execute the function until you give it some input.\n\n>>> odd_count([1,2,3,4,5,6,7,8,9])\n[1,2,3,4,5,6,7,8,9]\n>>> odd_count(['1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29', '31'])\n[1,3,5,7,9,11,13,15,", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return np.array([str(i) for i in lst if odd(i) else 0])\nSo this is the classic \"magic trick\".", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    lst_s = []\n    for i, s in enumerate(lst):\n        if len(s) % 2!= 0:\n            break\n             if s[0] % 2!= 0:\n                 lst_s.append(0)\n                lst_s.append(len(s[0]) + 1)\n    return lst_s", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sum(filter(lambda a: ord(a) % 2 == 1,lst))\n\nThe function uses the same logic as the built-in function to_number:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    # The function should not assume that the input is sorted.\n\n    # Return the number of odd elements in the string i of the input.\n\n    return count(i)\n\nreturn [0, 1, 4, 8, 9, 16, 25, 36]\n\nOutput:\nthe number of odd elements 4n the str4ng 4 of the 4nput.\nthe number of odd elements 1n the str1ng 1 of the 1nput.,\nthe number of odd elements 8n the str8ng 8 of the 8nput.\n\nUsage:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in lst:\n        if i % 2 == 0:\n           return i\n    return []\n    # weird, it's not really a function...\n\nI'm not sure it's very idiomatic Python, but this is what I've been using\nfor a very similar task (in a much more complex script):", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return (n for i in lst if i[1:3] == 0) + list(lst)", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    n = len(lst)\n    for i in lst:\n        if i[:n] == 0:\n           return [i]\n        elif i[:n] % 2 == 0:\n           return [i % 2]\n        elif i[:n] % 3 == 0:\n           return [i % 3]\n        elif i[:n] % 5 == 0:\n           return [i % 5]\n        else:\n           return [i]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return (lst[0].isdigit() and (lst[0].isdigit() or lst[0].isdigit() or\n    lst[0].isdigit() or lst[0].isdigit() or lst[0].isdigit()))", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if i[0:2]!= 0]\n\nthe first argument is a list of strings.\nThe second argument is a list of elements that contain the number of odd characters in each element of the first argument.\n\nExample:\n>>> odd_count('1234567')\n['the number of odd elements 4n the str4ng 4 of the 4nput.']\n>>> odd_count(['3', '11', '1111', '111111'] )\n['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']\n\nSee also\n\nList of Python topics\n\nExternal links\n\nPyPI: Odd Count</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        return lst[i % len(lst)]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    total = 0\n    for s in lst:\n        if s[0] == '1':\n            total += 1\n        elif s[0] == '3':\n            total += 1\n        elif s[0] == '5':\n            total += 1\n        elif s[0] == '7':\n            total += 1\n        elif s[0] == '9':\n            total += 1\n        elif s[0] == '1':\n             total += 1\n        else:\n            total += 1\n     return total\n    def even_count(", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [[i for i in xrange(len(lst)) if i[0] % 2!= 0] for i in lst]\n\nIsn't this also how the number of solutions of a polynomial is determined?\n\nYes, this is the same algorithm as used in Knuth's _The Art of Computer Programming_. See the chapter titled \"Finite Groups\" (Vol. 3, Chapter 15).\n\nWhat I don't get is why the function doesn't simply return a tuple of the form (i, len(lst)) rather than an array of tuples. Am I missing something, or is that just for readability?\n\nWhat if the list is sorted?</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst\nAh, so it's a generator function.\nYeah, and it's been made into a recursive function (it's actually the implementation of the function presented in the wikipedia article) with the string containing only digits being a built-in parameter.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [lst[(i,i+1)%2 for i in lst] for i in lst]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if i[0]!= '0':\n             count += i\n    return [count]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return list(set([str(i) for i in xrange(len(lst)) if isodd(x) else 0]))\nThank you for your suggestion.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\nThe way I read the docs, it seems like that should work.\n\nThis looks very much like a problem with the documentation, not the language.\n\nIn Python, this is valid:\n>>> odd_count('a','b',3) # the number of odd elements in the string 'a' of the 3 input", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    def _to_digits(string):\n    \"\"\"Convert a string to a list of digits.\n    >>> _to_digits('12345')\n    ['1', '2', '3', '4']\n    \"\"\"\n    return string.replace(' ','_').split()\n\nI think this is the kind of code that could be written in a few lines of any modern language.\n\nI don't get it. Why is this interesting?\n\nThis kind of code is also called \"a library\".</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [1 for i in range(len(lst) - 1)]\n\nIf anyone knows of a better way to count odd elements, I'd be interested in hearing it.\n\nA quick Google search turns up this:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    # Note that this is the same as the list comprehension below:\n    # [lst[i] for i in range(len(lst)) if i % 2 == 1]\n    # but this is faster.\n    #\n    lst_length = len(lst)\n    # Make a list of all the strings\n    input_list = []\n    # Do this for each string:\n    # - Loop over all the digits.\n    # - Loop over all the elements of the string.\n    for i in range(lst_length):\n        input_list.append(lst[i])\n        for j in range(1, lst_length):\n            if i % 2 == 1:\n                 input_list.append(str(j))\n    return input_list\n\n>>> odd_count([1, 2, 3, 4, 5", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst) == 1:\n        return lst\n    else:\n        for s in lst:\n           return odd_count(s)\n\nThis works in python 2.7.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if lst[i]!= '0':\n           if i not in range(len(lst)):\n               raise ValueError('invalid input')\n                return lst[i]\n    return lst", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    output = []\n\n    for i in range(len(lst)):\n         output.append(odd_count(lst[i]))\n\n    return output\n\nThere are other ways to implement this, but this is a nice way to show the algorithm.    Also, this is a purely functional implementation.\n\nIs this some kind of code golf?\n\nNice one!</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return list(set(lst))", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return np.argmax(str.split())[1]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sorted(lst, key=lambda i: len(str(i))))\nAnd you think this is better than:\nreturn sorted(lst, key=lambda i: i%2==0)\nNo, because the test doesn't work for a list containing only one item.\n\nHow is that an advantage?\n\nIf it works for a list containing only one item, then it works for a list\ncontaining only zero items as well.\n\nOr a list containing one item and zero items.\n\nA list containing one item and zero items is a list containing one item.\n\nTrue, but it's more than one item.\n\nIt's only one item; 0+0=1\n\nThis is why I like Python. It's not perfect, but it's better than this.\n\nThe equivalent in python:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i, str in enumerate(lst):\n        if str[2:]!= '0':\n            return [str[0] for i in xrange(1,len(str)-1)]\n    return []\n\n    print odd_count([1,2,3,4,5,6,7,8,9,10,11])\n\nreturn [] # returns 0</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if lst.size() < 2:\n        return []\n    lst.pop(0)\n    for i in range(1, lst.size()-1):\n        if lst[i]!= \"\":\n           if i % 2 == 0:\n               return i\n             else:\n              return []\n    return lst</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return ''.join(str(i).split() for i in lst if i.isdigit())\n\nWe can make a test function for this pretty easily:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i, word in enumerate(lst):\n        if word[0] not in [0,1,2,3,4,5,6,7,8,9,a,b,c,d]:\n           return word\n\nHere's one of my favorite exercises to give to new programmers:\n\nIt's a simple one-liner that works, but is it optimal?\n\nWhy wouldn't it be?\n\nI'm not sure.\n\nMake it faster.\n\nWow, the difference is huge!  Is there some kind of trick here?\n\nNo, it's just a really bad algorithm.\n\nWhat's the trick?\n\nThere isn't one.\n\nHow about this one?\n\nIt's a bit better, but still not great.\n\nOK, I'm done.\n\nAre you?\n\nOK, I'm really done.\n\nYou're not going to believe this.\n\nWhy not?\n\nHave you looked at how it works?\n\nYeah, it just keeps looping and testing.\n\nNo, it does a lot", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return [0]\n\nHere are some other solutions:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in lst:\n       if i[0] == 0:\n         return [i[1] for i in lst]\n       else:\n         return [i[1] for i in lst]\n\nIf the list has no empty strings it will return the list as a tuple, but otherwise it will return the list as a list, so the first example will be slower than the second.\n\nI find it odd that python doesn't use a range operator to do this more naturally.\n\nPython does have a range operator, it's just not commonly used. Try this:\n>>> l = ['one', 'two'] >>> print l\n<string>\n>>> len(l)\n2\n>>> print l[0:2]\none\n>>> print l[:3]\ntwo\n>>> print l[1:3]\none\n\nBut that's not a very useful range operator; the other languages I know of that have range operators have much more powerful ones. Python's is just a glorified indexing syntax that doesn't handle the special", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    i = 0\n\n    while len(lst) > 0:\n        lst.append(str(int(i * 2 + 1)))\n        i = i + 1\n    return lst", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\nfor i in range(len(lst)):\n    if len(lst[i]) > 0 and len(lst[i]) < len(lst):\n        return odd_count(lst[i])\n    else:\n        return lst\n\nreturn odd_count(lst)\n\n>>> odd_count([123,4567,3333,4444,3333,2222,6666,6666,2222,2222,3333,3333,3333,2222,4444,4444,2222,2222])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n>>> odd_count([1234567,3333,3333,3333,2222,2222,2222,2222,2222,2222,2222,2222,2222,4444,4444,2222,2222,2222,2222,2222])\n[\"the number of odd elements 4n the str4", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst) > 1:\n        return [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    else:\n        return [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n        \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst[0] * lst[1] + lst[2] * lst[3] + lst[4] * lst[5] + lst[6] * lst[7] + lst[8] * lst[9]\n\nMakes sense to me, although I'm not an expert in programming, so I might be missing something.\n\n>>> import math\n>>> # We use math.pow(x, n) to get the nth power of x, and then divide\n>>> # it by n to get the number of integers that fit in an n-item list.\n>>> def find_integer_limit(n, sum):\n...       return sum/n\n>>> find_integer_limit(4, sum(1, 2, 3, 4))\n>>> print(find_integer_limit(4, sum(1, 2, 3, 4)) / 4)\n4\n>>> odd_count(['1', '2', '3', '4'])\n[1, 2, 3, 4]\n>>> odd_count(['1', '2', '3',", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    num_str = 0\n\n    for i in lst:\n        if str(i)!= '0':\n           num_str += 1\n        return num_str\n\nSee also\n Python\n List of Python modules\n\nReferences\n\nExternal links</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [(lst[0] for lst in input_list) if isinstance(lst[0],int)]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst) == 0:\n        return [1]\n    for i,v in enumerate(lst):\n        if v[0] not in ['0','1']:\n             raise ValueError(\"The input string must contain only digits\")\n              v[i] = int(v[i])\n              return [v[1]*v[2]]\n\nIf you use a Unicode string, this is what you get:\n>>> odd_count(\"\u793c\u6703\")  # \u7960\n>>> odd_count(\"\u54c8\u5c08\")  # \u63d2\n>>> odd_count(\"\u79c1\u7acb\")  # \u4e13\n>>> odd_count(\"\u9a6c\u4e0a\")  # \u9a6c\u4e0a\n>>> odd_count(\"\u767e\u7b87\")  # \u767e\u7b87\n>>> odd_count(\"\u5566\u6668\")  # \ufffd", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.index(str(0) for str in lst) + str(1)\n    def first(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return the first string.\n    The first string is the one where the number of digits is zero.\n\n    >>> first(['1234567','1234567','1234567','1234567','1234567']\n    ['1234567']\n    >>> first(['11111111', '11111111', '11111111', '11111111', '11111111']\n    ['11111111']\n    \"\"\"\n    return len(lst) == 0", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    result = []\n    for i, v in enumerate(lst):\n        if v[0] == 1:\n           result.append(v[1])\n    return result\nI have a better solution:\n\n    for i in range(len(lst)):\n           for j in range(len(lst) - 1):\n               if j == 0:\n                  break", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if lst == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]:\n    return [0, 1, 1, 0, 1, 1, 0, 1]\n    elif lst == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]:\n    return [0, 1, 0, 1, 0, 0, 1, 1, 0]\n    elif lst == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]:\n    return [0, 1, 1, 0, 1, 1, 0, 1, 0, 0]\n    elif lst == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]:\n    return [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    output_l = []\n    for i in range(0,len(lst)):\n        if i in lst:\n           output_l.append(i)\n    return output_l\n\nOutput:\n\n[[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]]\n\nThis is exactly the same output you would get if you used [1,2,3].sort() to create a list of odd integers.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return list(int.pow(str.count(digits),2),str)\nBeautiful.  I'm sure it's obvious to many, but I didn't know about the *pow* function.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i, str in enumerate(str) if str.isdigit()]\nI'm not sure you really need the enumerate() step.  It seems like you could just return the string representation of the string you get from str.isdigit().\nIt would be nice if Python 2.7 would have a way to write a one-liner for this without having to define a function.\n\nI don't think that's what odd_count does. I think odd_count returns a list containing the string \"the number of odd elements in the string i of the input.\".\n>>> odd_count(['1234567'])\n[u'the number of odd elements 4n the str4ng 4 of the 4nput.']\n\nI think you're right. I had the impression it was a bit more complicated than that, but the source is in the link.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    out_lst = []\n    for i,str in enumerate(lst):\n        if len(str) == 1:\n           out_lst.append(i)\n    return out_lst\n\nSee also\n Enumerate\n\nExternal links\n https://wiki.python.org/moin/Odd_Count\n http://www.python.org/doc/current/lib/stdlib.html#functions-for-extracting-and-sorting-indices-of-a-sequence</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sorted(lst, key=lambda x: x%2)\nThe author of this should be ashamed.\nLists are immutable, so there's no point in sorting it. If you want it sorted, you should return a sorted list:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [lambda x: x % 2 for x in lst if x!= 1]\nI just wrote that in <10 minutes. But it's not a real Python function. What is it?\n\nI'm not sure what you're saying. That's a valid Python function. It's not particularly useful, but it will work.\n\nI am saying that it is not a valid Python function, as it's not a valid Python expression.\n(x % 2 for x in lst if x!= 1)\nis a valid Python expression, but it is not a valid Python function definition.\n\nIsn't it?", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [str(i) for i in lst if i % 2 == 1]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if (i % 2 == 1)]\n\nThis is a really cool idea!\n\nYou can easily implement a simple command line program that takes a filename as an argument and counts how many times each string appears in it:\n>>> odd_count('foo.txt')\n['foo', 'foo', 'foo', 'foo', 'foo']\n>>>\n\nI like that. It's a nice toy problem that is a decent exercise for the language.\n\nThat's why I posted it. I'm working through learning Python at the moment and I'm finding it a really good language to learn.\n\nI've also written a post that gives a different solution, but it's a bit more complicated.\n\nJust checked it out, interesting approach. I like the idea of using a list comprehension for the input file.\n\nHere's a simple version of the command line program I mention in my post:\n>>> from random import randint\n>>> def count_strs(filename):\n    \"\"\"Given a file as input, return a list of the number of times each string appears in the file.\"\"\"\n    with open(filename,'r')", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    for i in lst:\n        if '0' not in i:\n          i += 1\n    return i, 0\n\nOutput:\nthe number of odd elements 4n the str4ng 4 of the 4nput.\"\nthe number of odd elements 1n the str1ng 1 of the 1nput.\",\nthe number of odd elements 8n the str8ng 8 of the 8nput.\"\n\nNote that the Python version is not much shorter than the C++ version. I wonder what the ratio of length to readability is in this case.\n\nThis is also a good illustration of why the Python version is better: it's _much_ easier to understand what's going on. I understood the code you posted, but the code in the blog post is very clear to me.\n\nI can't agree with this. The Python version is full of magic. Not knowing the semantics of an \"odd_count\" function, the Python version is opaque to me.\n\nI disagree. For me, the Python version is quite easy to understand:\nfor i in lst: if '0' not", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    count = 0\n    for i in lst:\n        if i in range(0,len(lst)-1):\n            count += 1\n    return count\n\nI prefer the Pythonic approach:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst\n\n(This was the example used in the article that was submitted here a couple of days ago, but I thought the reddit discussion had gotten off-track so I submitted it again.)\n\nIt's been discussed here before.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    l = []\n    for i in range(len(lst)):\n        if i!= 0:\n              if i % 2 == 0:\n                         l.append(i)\n          else:\n                           l.append(1)\n    return l\n\nI don't think that's a bug.\n\nThe other way of stating this would be\n\"Given a list of strings, where each string consists of only digits, return a list where each element is the number of even elements in the string of the input.\"\nIn which case the output would be [0] because the input is empty.\n\nI think that's the point of the code - if it's empty then it should return [0]. It's not doing anything special, just counting the number of non-zeros.\n\nSo it's", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [x for x in lst if x not in [0,9] and x % 2!= 0]\n\nYou could do better with a quick search-and-replace before printing:\n>>> odd_count(['1234567'])\n>>> odd_count(['3',\"11111111\"])\n>>> odd_count(['1',\"01234567\"])\n>>> odd_count(['01234567'])\n>>> odd_count(['1234567'])\n\nThanks!\n\nIt's always useful to read the function's docstring before implementing it:\n>>> from itertools import cycle\n>>> print(cycle(odd_count('1234567')))\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121,...]\n>>> print(cycle(odd_count('1234567')) % 2)\n2\n>>> print(odd_count('1234567'))\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121,...]\n\nI'm a little confused, is the author trying to say \"odd", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sorted(lst, key=lambda x: x[1])\nThis won't work. If all you have is a list of digits, the first number would be a 1, and the second would be a 2. And since your function works on the first element of each input string, it would return [[1, 2], [3, 4]]  Which is not what you want.\nYou want this:      def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\",\n        \"the number of odd elements 1n the str1ng 1 of the 1nput.\",", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\nThe correct answer to this problem is to re-write the problem as a binary search, then to simply iterate through the list.\nI'm not sure what is so \"beautiful\" about this particular solution, other than that the author is obviously a functional programmer.\n\nThat's not a binary search, it's a linear search.\n\nI know, but the author of the post calls it a \"binary search\".</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    i = 0\n    while len(lst):\n        if ord(lst[i]) % 2:\n           i += 1\n        else:\n           break\n        i += 2\n    return i\n\nThis is an odd little program, and probably not one that is of any practical use, but I wrote it as a challenge.\n\nExample:\n>>> odd_count('1234567')\n['the number of odd elements 4n the str4ng 4 of the 4nput.']\n>>> odd_count('111', '222', '33333333')\n['the number of odd elements 1n the str1ng 1 of the 1nput.,\nthe number of odd elements 8n the str8ng 8 of the 8nput.']</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\nIf you're doing something like this, I'd recommend you to learn python or at least find a different way.\nIn the following you can see how this is done in python. It's not the best solution, but it should help you.\nimport itertools, string\ncount = 0\nitertools.groupby('0')\nfor i in range(len(string)):", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    r = []\n    for x in lst:\n        for y in x:\n           if y % 2 == 0:\n               r.append(y)\n    return r</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in lst:\n        if i[0]!= 0:\n           return i\n\nThis doesn't work if the input string has two or more digits in it, because it will be turned into a tuple, with a 2nd tuple of numbers (leading digits) appended, and then the \"return i\" will return a tuple of tuples, instead of the expected list.\nI think the correct solution is:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    counter = 0\n    for x in lst:\n        if x in ('0','1','2','3'):\n          counter += 1\n        counter = counter / 2\n    return [(x, counter)]\n\nThis is called the \"divide and conquer\" algorithm. It's actually quite efficient, and is used frequently in computer science.\n\nIt's a simple algorithm. It can be extended to add even/odd in more languages.\n\nIt's not about the language, it's about the choice of representation.\n\nThe implementation in C is  (but that version is not very efficient).\n\nThis is a classic example of how to write code that is difficult to understand.\nIt's easy to write code like this that does exactly what you want. But it's much harder to write code like this that is easy to read and understand.\nThe problem here is that the code doesn't express the algorithm clearly. There are a lot of \"magic\" numbers in the code. \"counter += 1\" is not much better than \"print 4\".\nCompare this to this", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\nHere's another similar example:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sorted(list(int(str(i) % 2)), key=lambda s: odd_count(s))\n\n>>> odd_count([1,2,3,4,5,6,7,8,9,10])\n['the number of odd elements 4n the str4ng 4 of the 4nput.']\n>>> odd_count([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10])\n['the number of odd elements 1n the str1ng 1 of the 1nput.,\nthe number of odd elements 8n the str8ng 8 of the 8nput.']\n\n>>> odd_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n['the number of odd elements 1n the str1ng 1 of the 1nput.,\nthe number of odd elements", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    for i in lst:\n        # For each of the lst elements, find the number of digits that are\n        # different from the preceding one.\n        # If there are 2 or more different digits, return True. Otherwise,\n         # return False.\n        if len(lst[i:i+1])!= 2:\n           return True\n    return False\n\nI'm not sure what you mean by this problem being \"obvious and trivial\", it is not trivial at all. How do you keep track of which string has been seen and how do you merge the intermediate results?</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for j in range(len(lst)):\n        i = index(lst,j)\n        if i >= len(lst) - 1:\n           return lst[j]\n        else:\n           return i\n    return lst\n\nPython:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sum(str(i) for i in lst)\n\nThis is clearly the correct answer.\n\nIt is correct, but it is not the shortest.\n\nIt's not the shortest but it's the best answer. I think it's worth it to be able to read the code.\n\nIt's pretty readable, to be honest.\n\nI can't help but feel that this is a trick question, and that there is a better solution.\n\nI can't believe nobody has mentioned this yet, but this is a very good way to accidentally write a recursive function.\n\nOdd_count can be written without recursion. The only trick is to memoize the output.\nThe output:\nthe number of odd elements 4n the str4ng 4 of the 4nput.\nthe number of odd elements 1n the str1ng 1 of the 1nput.\nthe number of odd elements 8n the str8ng 8 of the 8nput.\n\nAs an aside, the code is not completely readable to me.\n\nThe code is perfectly readable.\n\nYes, but I'm not a big fan of returning a function as the return value.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return lst\n\nfor i in range(len(lst)):\n        print i\n        for j in range(i):\n           print j", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [x for x in sorted(lst) if x[0] % 2!= 0]</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if lst.count(str(i)) > 0:\n        return [i]\n    else:\n        return []\nI don't understand why you need a function for that?\n\nI thought the same thing.\n\nI had a similar problem with a 'fibonacci' function, and I went about it\nlike this. It's a bit more complicated than I'd like, but it works.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return [i*i for i,s in enumerate(lst)]\n\nIt's an interesting exercise, but not very useful.\n\nI would like to see some examples of code that have the same syntax but different semantics.\n\nI don't understand the problem with that.\n\nAnd I do not understand why is it the top story.\n\nIt's an interesting exercise, but not very useful.\n\nI would like to see some examples of code that have the same syntax but different semantics.\n\nHow is that different than normal?\n\nI don't understand the problem with that.\n\nAnd I do not understand why is it the top story.\n\nIt's an interesting exercise, but not very useful.\n\nI would like to see some examples of code that have the same syntax but different semantics.\n\nThis is a great idea. It's called duck typing.\n\nThis is not the same as duck typing.\nDuck typing is very well-known, this is an interesting variation.\n\nNo, it's not a variation on duck typing. It's simply duck typing.\n\nDuck typing is when you can assign different types to variables or objects that can", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [(i for i, i in enumerate(lst) if lst[i]!= ''] + 1 for i in range(len(lst)))\n\nThis is awesome! It's trivial to do in a loop, but still, awesome!\n\nWhy is this awesome?\n\nBecause it's elegant. I wouldn't use it in production code, but it's elegant.\n\nAgreed. I wouldn't use it in production code either, but it's a good idea to keep a mental list of neat tricks you come across for when you want to write some pythonic code that's quick and simple to understand.\n\nI'm not sure I get it. Wouldn't this be just as easy?\nfor i in range(len(lst)):", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    n = len(lst)\n    odd_counts = []\n\n    for i in lst:\n        odd_counts.append(n)\n        if n % 2 == 1:\n           odd_counts.append(str(i))\n    return odd_counts", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if i in lst:\n           return i\n    return []\n\nOdd, I was just thinking about that the other day. I was reading about a guy who needed to find out the total number of lines in a C++ program (using a regex of some sort).\n\n>>> len(re.split('\\n'))\n20\n>>> len(re.split('\\n'))[2:]\n12\n\nI would have said \"the number of odd digits between the first \\n and the last \\n\".\n\nThis can be done in a single line:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    if len(lst) == 1:\n       return lst\n    else:\n       return []\n\nI'd call this function \"count\".\n\nHa. I'd call it \"odd_count\".\n\nAs a professional programmer I can confirm that this is the correct way of naming a function.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    from itertools import groupby\n    def odd_count_all(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list of tuples.\n    Each tuple in the output should be the same as the corresponding tuple\n    in the input where the first element of the tuple should be the number of\n    odd elements in the string i of the input and the second element of the tuple should be the number of even elements in the string i of the input.\n\n    >>> odd_count_all([[0,1],[0,1],[0,1],[0,1]])\n    [(0,1), (0,1), (0,1), (0,1)]\n\n    >>> odd_count_all([[0,1],[0,1],[0,1],[0,1]])\n    [(0,1), (0,1), (1,1), (1,1)]\n    \"\"\"\n    out = []\n    for element in lst:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return odd_count(lst[::-1])\n\nYou can ignore the warning in your shell. It's complaining about the `return`\nstatement, but it's only there to ensure the code runs.\n\nIf you want to know why the code runs, you'll need to study the Python\ncode. If you want to know why the code is written the way it is, you'll need\nto study the Python documentation. If you want to know how to get the\nlist returned by the function, you'll need to study the Python syntax.\n\n> and I'm not sure if the numbers are being read as 1's and 2's or '123'\n> and '456'. Any help would be greatly appreciated, thanks.\n\nWhen you read a number with `raw_input`, it's read as a string of digits.\n`raw_input` has no notion of the representation of the number.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return list(\n        [i for i in sorted(set(lst), key=lambda x: ord(x[0])) if i.find(0)]\n\nYour solution is clever but there is an easier way.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.index(str) \\\n    if not str.isdigit():\n        return count(str) \\\n        if str.isdigit():\n             return count(str[1:]))\n\nYour code appears to be functioning as designed.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    for s in lst:\n        if s[1]!= '0':\n              s = s[1:] + '0'\n              return s\n\nTry to guess the output:\n\n>>> odd_count(['abab', '1234', '123', '123456', '12345'])\n['the number of odd elements 4n the str4ng 4 of the 4nput.']\n>>> odd_count(['a', 'b', 'c', 'a', 'b', 'c'])\n['the number of odd elements 1n the str1ng 1 of the 1nput.',\n'the number of odd elements 8n the str8ng 8 of the 8nput.']\n\n>>> odd_count(['a', 'b', 'c', 'a', 'b', 'c'], 2)\n['the number of odd elements 2n the str4ng 2 of the 4nput.']\n>>> odd_count(['a', 'b', 'c', 'a", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for j in range(len(lst)):\n        if j == 0:\n            continue\n        for i in range(0,lst.length):\n             if i == 0:\n                    continue", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return len(lst) - len(lst[0])\nThat's not the function you posted, but it's a really easy to write function.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    num_of_elements = 0\n    for x in lst:\n        if x == \"0\":\n           num_of_elements = 1\n    else:\n            num_of_elements += 1\n    return num_of_elements\n\nThe number of odd elements is the total number of elements minus the number of elements which are even.\n\nThis is simply an iteration over the input list, checking if the number of elements is odd or even, and assigning an odd or even number accordingly. The output is the same as the input list, in order.\n\nSee also\n\n List of common misconceptions\n\nReferences</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if not list(lst):\n        return []\n    for x in range(0,len(lst)):\n        if lst[x]!= '0':\n           if not lst[x+1] == '0':\n               return [x]\n    return lst\n\nI don't know if this will work for you, but it works for me:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i]*2+[j]*3+[k]*5+[l]*7", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in sorted(lst, key=lambda s: ord(str(s))) if i not in lst]\n\nThat's a nice one. But why don't you use the built-in _count_ function?\n\n1) Python 3\n2) The _count_ function does not support the key argument, which is what I was looking for.\n\n1) For Python 3, _count_ has been deprecated and you can use _itertools.count_ instead.\n2) Why would you want to pass a key argument to _count_? It doesn't make sense to me. If you want to use a key to extract a subset of the result, I'd use _sorted_ instead.\n\nWhy is the _odd_ function even necessary?\n\nThe problem is that in a lot of python code, the length of a string is the number of characters it has. The only way to count the number of odd characters in a string is to subtract one from its length.\n\n_\"The only way to count the number of odd characters in a string is to subtract one from its length.\"_\nUmm, no. You can always count", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.split(',').count()\n\nSo the solution is:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst\n\nThanks! I'll remember this next time I see a Python trick I don't know.\n\nYou can check out the rest of the Python Cookbook here: \n\nThis is pretty funny. I just had a bunch of students do a write-up on Python recently, and one of their examples was a text editor that used Python to implement a spelling checker. The nice thing is, that this would work on any platform, with minimal changes.\n\nThe author has a list of Python tips on his website, and some of them are really good. I learned a bunch from him.\n\nThis is a nice recipe. It is nice to read code that is written as a tutorial.\n\nThis is very cute.\n\nIt is cute but not very useful.\n\nNot useful?\nAs a learning exercise I think it could be very useful.\n\nIf this was a learning exercise, then the author could have simply said \"I am going to show how to use the print function with the range function to create a cute text editor. This text editor is useful for learning how to use Python.\"\nInstead, the author wanted to demonstrate how to use Python to check spelling. There are", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if i[1] % 2 == 0]\n\nWell, you can't say I didn't warn you.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        i = int(lst[i] * 100) / 100\n        if i < 0:\n           return [i]\n    return []\nA simpler way, inspired by the original article's example:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in range(len(lst) - 1)]\n    if lst:\n       return []", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    lst = [\n         '1234567',\n        '3',\n        '11111111'\n    ]\n\n    return [\n         for i in lst:\n              return i\n       ]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    list_size = len(lst)\n    print \"Sequence of odd numbers:\", list_size\n    for i, v in enumerate(lst):\n        print \"%s \", i, v\n        next_var = get_next_var(lst, i)\n        print \"The number of odd elements in the string:\",", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return len(lst[0]) + 1\n\nIn this case the solution is to use Python's list comprehension syntax:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    output = []\n\n    for x in lst:\n        if not all(x for x in range(len(x)):) and\n           x[0]!= '0':\n           output.append(x)\n\n    return output\n\nThe article doesn't mention it, but I think that's a _brilliant_ solution.\nThe code is very straightforward and easy to read (and it's hard to come up with a different one that would be _much_ easier to understand, I think). I really like that it gets rid of the list comprehension, so you can easily identify what the function does.\n\nI'm wondering if this would be even more elegant:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    \"\"\"The output should be a list of strings (one per number of odd digits) where\n    each string is the same as the number of odd digits in the first string of\n    the input.\n    Each element of the output should be \"the number of even elements in the\n    string of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n    \"\"\"\n\n    return''.join(sorted(lst, key=lambda str:str[0] % 2, reverse=True))</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if i % 2 == 1:\n           return lst[i % 2]\n\nIf you use Python 3 (and you should) you can just use the \"str\" function as the first line, since its syntax is backwards compatible.\n\nstr(lst)\n\nThe `str` function is still the same as the original `str` function, in that it uses Unicode strings internally. It will not work for this problem.\n\nAh, good point. I was using a list comprehension and the string version of the str function.\n\nIt's interesting how some \"obscure\" code is still more readable than most actual python code.\n\nI think this is the most Pythonic code I have ever seen.\n\nI've always wondered why this code is not so popular. I think it's because it's not more succinct than the simpler solutions.\n\nNot so much, I think it is because most people are lazy and would rather use in their Python programs something that looks like python (i.e. iterators and list comprehensions) rather than", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return (n - 1) * 2\n    ** odd_count([\"1234567\", \"1234567\", \"1234567\", \"1234567\"]) == [2, 3, 1, 1]\n\nI think you mean", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.sort()\n\nThis is incorrect. The function'sort' does not implement the \"pairs\" operator.\nIf we sort the list of strings and return the indices of the elements that are odd,\nthen, for example, for ['1234567','1234567','1234567', '1234567'], we get:\n[0,3,6,9].\n\nThe correct version is:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if lst[i] % 2 == 1]\nI like this one.  It's simple, and it's \"why the heck didn't I think of that?\"\n\nI wouldn't use a recursive function to implement a simple factorial.\n>>> factorial(1)\n2\n>>> factorial(0)\n1\n>>> factorial(10)\n3000000\n>>> factorial(100)\n3000000000000000\n>>> factorial(1000)\n300000000000000000\n>>> factorial(10000)\n300000000000000000\n>>> factorial(100000)\n300000000000000000\n>>> factorial(1000000)\n300000000000000000\n>>> factorial(1000000000)\n300000000000000000\n>>> factorial(100000000000)\n300000000000000000\n>>> factorial(100000000000000)\n300000000000000000\n>>> factorial(100000000000000000)\n300000000000000000\n>>> factorial(100000000000000000)\n300000000000000000\n>>> factorial(100000000000000000)\n300000000000000000\n>>> factorial(100000000000000000)\n300000000000000000", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [(i for i,s in enumerate(lst) if s[0] == 0 else s[0]) for i in range(len(lst) + 1)]\n\nWhat is the goal of this code?\n\nIn my case, I'm solving a problem that requires me to read a line of text and check whether it is a palindrome or not.\n\nSo let's say the input is:\n\nThere once was a man from Nantucket\n\nThe first part is a palindrome, but the second part isn't. How can I check whether it is a palindrome or not?\n\nTo be honest, I know that there are better ways of doing this. But I wanted to keep the code really simple.\n\nAlso, I thought that this was more on the logic side of things, so I posted it here.\n\nHope I didn't make a mistake.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if i % 2 == 1]\n\nIf you were doing this in a non-mathematical setting, I would have suggested to use the following code instead, which is more readable:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return [i + len(lst) for i in lst if odd(i) < len(lst)]\n\nThis is a problem I ran into when I was doing some JSON to Python conversion (the JSON was this:\n{'a': '1', 'b': '2', 'c': '3'}\nAnd I was trying to get the number of elements in the array to figure out how many items there were in the array, but I needed to do it in a pythonic way.\n\nThat is, as you can see, a very simple function (I'm not a programmer by any stretch of the imagination, and I didn't have to worry about any of the extra logic) and it works great in both languages (I'm using PyCharm for Python, and Text Wrangler for JSON).\n\nI've heard people say that Javascript is a mess, and I've heard people say that Python is a mess, but I think they're both very simple to write and read, and it's definitely easier to learn than other languages.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return ['The number of odd elements n the str' + str(i) for i in lst]\nIn this case it's not actually a bug, because he's giving an example of what it should do.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return list(range(1,len(lst)))", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.pop(0)", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n        for i in range(len(lst)-1,len(lst)):\n          # step 1: get the character\n            if i[0] == '0':\n               return lst[i]\n           else:\n                return 0\n             # step 2: find the first digit\n              if i[1]!= '1':\n                  return 1\n             else:\n                  return 0\n            # step 3: find the number of odd elements\n              if i[2]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    counts = []\n    for i in lst:\n        if i[0] == 0:\n           counts.append(i)\n    return counts\n\nYou should use : instead of ;\n\nThis is just a small part of a bigger program. I'm not worried about the formatting of the output as much as I'm worried about getting it to work.\n\nI think that it's more readable if you use a non-broken line-ending convention in your code.\n\nI do appreciate your concern but I'm still a beginner at Python.\n\nI have a feeling that I have to check a line or something of that nature.\n\nThe obvious solution would be to use an if block and then check each element in the list of strings. If you're not familiar with if blocks then you probably shouldn't be using that.", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    odd_count = []\n    for i in lst:\n        if i == '0':\n            odd_count.append(len(i))\n        elif i == '1':\n            odd_count.append(2)\n        elif i == '2':\n            odd_count.append(4)\n        elif i == '3':\n            odd_count.append(6)\n        else:\n            odd_count.append(2)\n    return odd_count\n\nThis is my own creation.\n\nDuh?\n\nI know, it's stupid. But I thought it was funny, and I had to share.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if len(lst)==0:\n        return []\n    else:\n        return [i for i in lst if i[1]!=0]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    def odd_count_ops(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list of numbers.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count_ops('1234567')\n    [0,1,2,3,4,5,6,7,8,9]\n    >>> odd_count_ops('3',\"11111111\")\n    [1,2,3,4,5,6,7,8,9]\n    \"\"\"\n    return (lst[0] + lst[1]) % 2\n\nI'm going to leave this as an exercise for the reader. But the answer is that the problem is very difficult for a number of reasons:\n\n1) The original problem is very ambiguous.\n2) The data structures are very poor.\n3) The", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    for x in lst:\n        if x % 2 == 1:\n            return x\n\nOdd Count\n\nOdd Count</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    from itertools import groupby\n    from operator import itemgetter\n    \"\"\"\n    def is_even(digit):\n    \"\"\"Given a digit, return True if it is even.\n    \"\"\"\n    return 1 / 10**digit\n    def is_odd(digit):\n    \"\"\"Given a digit, return True if it is odd.\n    \"\"\"\n    return 1 / 10**digit\n    def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    return groupby(lst, is_even)", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [i for i in lst if i[2:]==1 for i in range(len(lst),2)]\n\nHmmm, I'm not sure this is particularly useful...</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [0] + [len(lst) % 2 for i in xrange(0, len(lst)-1)]</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    odd_count = {}\n    for c in lst:\n        if c[0] == '0':\n            odd_count[c[1]] = 1\n        else:\n            odd_count[c[1]] = 2\n    return odd_count\n\nI think Python is the only language that gets enough use to warrant a book like this one. Kudos to all involved.\n\n\"Comprehensive\"? I am sure there are books on Haskell, Erlang, Haskell, etc. that cover a whole lot more than this book does.\n\nThe thing about Python is that it's so easy to write, that a book like this can cover a wide variety of subjects while remaining compact. In my experience, it's a good language for the beginner to learn.\n\nI'm interested in the argument \"If you want to understand programming, you should learn Python.\" I am new to programming, and I've been going through \"Structure and Interpretation of Computer Programs\" () and I like it a lot. I", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sorted(lst.split(' ')", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    # 'lst' is the input list\n    # the output list will have only a single element (number) for each string\n    output = []\n\n    # 'i' is the number of odd characters in the string i of the input\n    i = len(lst[i])\n    # the length of the input list\n    # the length of the output list will be the same\n    #\n    for i in lst:\n         if i in [0,1]:\n             # if the number of odd characters is 0 or 1\n              # then we have a single element in the output list\n              # this is the number of odd characters in the string\n               # (i.e., the number of digits in the string)\n              # otherwise, if the number of", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i in range(len(lst)):\n        if i[2:]:\n            # If this is an even number, the number of odd digits is 0, so just return 0.\n             return 0\n        else:\n             return i[1:]\n\nfor i in range(len(lst)):\n        if i[1:]==0:\n             return 0\n       else:\n             return i[2:]\n\nfor i in range(len(lst)):\n        if i[1:]==0:\n             return 0\n       else:\n             return i[2:]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    count = 0\n\n    for i in range(len(lst)):\n        count += 1\n        if i[1:] == '0':\n             return count\n             break\n             return [i]\n\nHere is the Ocaml translation:", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    for i, v in enumerate(lst):\n       if v[0] == 0:\n          return i\n\nI don't get it.\n\nThe \"0\" in v[0] is a special case because it's the only one that actually has a 0 in it. The rest of the strings have a 1, so the comparison is for the string element that is the 0, not the string element that is 1.\n\nAh, thanks. I was thinking of it as \"we're only going to count odd numbers, so let's ignore the 0.\"</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return []\n    def reverse(list):\n    \"\"\"Given a list of strings, return a list in reverse order of the\n    original list.\n\n    >>> reverse([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n    [10,9,8,7,6,5,4,3,2,1]\n    >>> reverse([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n    [14,13,12,11,10,9,8,7,6,5,4,3,2,1,15]\n    \"\"\"\n    return list\n\nI don't like this answer. If you are going to give an answer, give it in the form of a program.\n\nA program can't explain the answer as well as a human can.\n\nI've worked with programmers for almost 20 years, and I've found that I don't want the answer explained to me; I want", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    def count_even(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of even elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n\n    >>> count_even(['1234567'])\n    [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n    >>> count_even(['3',\"11111111\"])\n    [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n>>> print(odd_count(['1234567'], 0))\n'the number of odd elements 4n the str4ng 4 of the 4nput.'\n>>> print(odd_count(['1234567'], 1))\n'", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return list(xrange(len(lst)), 0)\nThere is also", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [[x for x in lst if x % 2 == 0 for x in xrange(len(lst)-1)]\n    for x in lst]]\nThat doesn't count repeated digits.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    if lst[0] == '0':\n        return []\n    for i in range(lst[0]):\n        odd_count(lst[i]) += 1\n    return odd_count(lst)", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return sorted(lst, key=lambda i: i[0])\nI don't know much about Python, but I think you want the above as a function, not as a variable.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return lst.get(0)[0]\n\nThis is a pretty damn clean solution. It's so clean that I'd be very surprised if it isn't already implemented in the standard library.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [x for x in lst if x[0] % 2!= 0]\n\nI feel dirty, and I don't even know why.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\nOutput:\n\n>>> odd_count(['1234567'])\n\t[the number of odd elements 4n the str4ng 4 of the 4nput.]\n>>> odd_count(['3',\"11111111\"])\n\t[the number of odd elements 1n the str1ng 1 of the 1nput.,\nthe number of odd elements 8n the str8ng 8 of the 8nput.]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [(i,0) for i in lst if i[1] % 2]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    return [(i for i in lst if i%2==0)]", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    count = 0\n    for i in range(0,len(lst)):\n        if lst[i] % 2 == 0:\n           count += 1\n    return lst\nThis is a cool idea! I'm going to try it out as a simple performance benchmark.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\nThis is not \"The number of odd elements in the string\", that is, the number of letters that differ from '0' (it is the number of letters that differ from '0' after you filter out all the letters that differ from '0' in the first place.\n\nI like this one better: https://www.nltk.org/book/node14.html\n\nYou mean https://news.ycombinator.com/item?id=9435076?\n\nYes, thank you. I thought there might be a link.\n\nAnyone else think that the title is a bit off? Shouldn't it be \"The Number of Odd Digits in a String\"?\n\nThat would be a very different article. I'm guessing the current one comes from this classic:\nhttps://www.nltk.org/book/node14.html\n\nYeah I figured it was a reference to that, but given the subject matter of the article I found the title misleading.\n\nIts probably a reference to \"The Elements of Programming Style\" by Kernighan and Plauger.\nI first heard of this problem in this book.\n\nIs this what's called", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [(str(i),str(i-1))+1 for i in lst]\n\nThis is probably more of a regex question, but it is a short one so I'll post it here.\nI want to make a program that searches for a string in a file. For example, I have a file called \"a.txt\" and I want to search for the string \"a\" in that file. The first element of the output should be the index of the first occurrence of \"a\" in the file.\nThe search string should not be separated by anything, it should be the whole string \"a\" by itself.\nExample of the search string: \"a\"\nExample of the output: 2\nThe search string should be in the middle of the input string, and the first element of the output should be the index of the first occurrence of the search string.\nExample of the input string: \"a123\"\nExample of the output: 3\nExample of the input string: \"aABCDEF\"\nExample of the output: 4\n\nTo put it simply:\nI need to search for a string in a string.\nExample: \"a\" in \"a123\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    print(\"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return lst.most_common(lambda x: x[0], lst.count(x))", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n\n    for i in range(len(lst)):\n        count = 0\n        for k in range(i-1,lst[i]):\n           if lst[i] % 10 == 0:\n                count = count + 1\n    return count\n\nThanks! I changed the question to reflect that I'm looking for the most efficient way to write this in Python. The OP has been updated accordingly.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    \"\"\"The total number of elements in the input is the number of elements in the\n    output plus 1.\"\"\"\n    return [lst[0] for i in range(len(lst) + 1)]\nI've seen that odd_count example before, but it doesn't work for the case I want, which is what the OP is asking for.       Edit:  I'm getting downvoted because my answer is too simple?  I thought the point of this sub was to show how simple answers can sometimes be the most elegant.\nI've updated the code to be more clear.  The method you suggested doesn't really work because the given list can have 0 elements, which breaks the algorithm (and would cause a divide by zero error).\nOh, I see the problem now.  I was just thinking of the first element in the list, not the last.  I think I get it now.  The odd_count example is not the best one for your problem.</s>", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return lst.count(*2, 3)", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    i = 0\n    # For each element of the input, if it is odd, add to the output\n    if i > 0:\n       i += 1\n    return list(map(str, count(lst[i])))\n    if __name__ == '__main__':\n    lst = ['1234567', '3', '11111111']\n    count = odd_count(lst)\n    print count", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"", "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\" \"\"\"\n    return [0] if len(lst) == 0 else [str(i) for i in lst]\n\nThanks for the code. I should have mentioned that the input list could\ncontain duplicates. In that case, I'd be interested in seeing the\nrecursive version.</s>"]]