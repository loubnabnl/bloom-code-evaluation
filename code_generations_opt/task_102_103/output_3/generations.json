[["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return -1\n    else:\n       return x + y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x >= y:\n        return 0\n    return x / y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return -1\n    if x == y:\n       return x\n    return x * 2 + y\nYou can probably omit the *2 if you want to be very efficient.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x % 2 == 0:\n        return x\n    else:\n        return y\n    for i in range(x):\n        for j in range(y):\n          if i + j > x - y:\n              return -1\n              else:\n                return i\n    return -1\n\nSee also\n List of common math functions\n\nExternal links\n Definition in a classic text (The Art of Computer Programming, Volume 1)\n\nReferences</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n       return x\n    return min(x, y - 1)\n\nIn my opinion the reason why the author feels that Python is better for this\nproblem is that Python doesn't have a'max' function.\nPython has the equivalent of Python's'max', in this case:\nmax(x, y - 1)\nPython has the equivalent of Python's'min', in this case:\nmin(x, y - 1)\nPython has the equivalent of Python's 'choose_num', in this case:\nchoose_num(x, y)\nI don't have a problem with the code in the article at all.\n\nWhy is that? I think the following python program does the same thing:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    else:\n        return x + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    else:\n        return choose_num(y - x, x)\nI was going to say that you are missing a \"return\" before the \"choose_num\" function definition, but then I realized that you are actually missing two. :-)\n\nSo now what?</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return -(x ** 2 + y ** 2)\nThis is a very simple function. Are you sure it's right?</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return abs(x-y)\n    + abs(x+y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n        return x\n    elif x == y:\n        return y\n    elif x > y:\n        return -1\n    return int(math.floor((x + y) / 2))", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n       if x < y:\n         return x\n       if x == y:\n         return y\n       return -1\n\nimport sys\n\nnum_choices = 3", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x & (x!= y) + y & (y!= x) + (x - y)\nThanks, I came here looking for this.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x * x + y * y for x, y in zip(x, y))\nIf you're going to use python, might as well use \"None\" instead of -1.\n\nSome might use -1, some might use None. As this is a Python forum, I\nchose to use None.\n\nI see no reason to use None over -1.\n\nI see no reason to use -1 over None.\n\nWhy not return the highest number in the range?\n\nBecause I already had a function that does that.\n\nYou've got to be kidding me.\n\nWhat's wrong with a function that takes two positive numbers and returns the\nbiggest even integer that is in the range [x, y] inclusive?\n\nWhat's wrong with using the built-in <?\n\nNothing, if you want to count the number of lines of code in your program.\n\nIf you can't count the number of lines of code, you're doing something wrong.\n\nThere's nothing wrong with writing code to do something that's already built in. But, if it's for a small project, there's also no problem in just using built", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if abs(x) < abs(y):\n        return x\n    else:\n        return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x % 2 == 0:\n       return (y / 2)\n    if y % 2 == 0:\n       return (x / 2)\n    return (y + 1) % 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x % 2 == 0) + (y % 2 == 0)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n        return -1\n    else:\n        return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return(x ** 2 + y ** 2)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == 0:\n        return -1\n    if y == 0:\n        return -1\n    return max(1, x*y) + 1\n\n def choose_first(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest integer number that is in the range [x, y] inclusive. If there's\n    no such number, then the function should return -1.\n\n    For example:\n    choose_first(12, 15) = 15\n    choose_first(13, 12) = -1\n    \"\"\"\n    if x == 0:\n        return -1\n    if y == 0:\n        return -1\n    return x*y + 1\n\n def choose_second(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y]", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x <= y:\n        return x\n    else:\n        return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x - y, y - x)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x > y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    else:\n        return y\nI'd suggest naming it choose_numb(x, y), but that's just my preference.\nYou should also get rid of the assert that you have return values.\nYou should also consider using the * operator, rather than the += operator, for the last part of the function.\n> (3 + 6)*(3 + 6)\n> # this is 1 + 4 + 4 = 13\n> +\n> (3 + 6) + (3 + 6)\n> # this is 6 + 6 + 6 = 18\n\nWhy is the operator overloading not enough?\n\nJust for the sake of clarity. Overloading is definitely enough, but I thought it would be useful to have a function called \"add_all_evens\" that took two values and added them all together.\n> 3 + 6 * 3 + 6\n> # this is 1 + 4 + 4 + 4 + 4 + 4 + 4 + 4 = 26\n\nYou could also use the * operator for that.\n> 3 + 6 * 3 + 6", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return abs(x) + abs(y)\nWell, it does.  Did you mean to write `abs(x) + abs(y) <= x + y`,\nbecause that would be true.\n\nNo, I meant it as it is.\n\nI think it's broken for negative numbers.\n\nHeh. So it is. If you enter -5 and -3, it returns 0.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x > y:\n        return y\n    return x+y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    for x in xrange(x, y):\n         for y in xrange(y, x):\n            if x % 2!= 0:\n                return x\n               if y % 2!= 0:\n                 return y\n                return -1\n    return x\n\nHere is the Python code:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x >= y:\n        return x\n    else:\n        return (y + 2) / 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x if x <= y else -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return max(x - min(x, y), y - min(y, x))", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x - 1) + (y - 1)\nThis will return -1 for any negative integer (one of y or x), or zero if they are equal.  Since the range is [0, y) + [0, x) this is more correct, but I prefer the clarity of the above implementation.\n\nThe function in the article returns -1 if both x and y are negative. (It returns 0 if they're both zero.)\n\nThis is more succinct, but it's not more clear.\n\nThe second version is clearer if you are familiar with the -1 trick.\n\nI am not familiar with the -1 trick.\n\nA quick look at the first version would suggest that the function will return -1 if either x or y is negative (or zero if they are both zero). It will also return -1 if one of x or y is positive and the other is zero. This is not the case.\n\nI see it. Thanks.\n\nIn the first version, if x is negative and y is positive, it returns 0. In the second version, if x and y are both negative, it returns -1.\n\n\"The second version is clearer", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (y < x)? -y : -x\n\nAfter reading the other answers I was expecting a bit more.\n\nIndeed. How would you improve the code to be less verbose?\n\nImplementing this algorithm in Python is fairly easy:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x if x!= y else y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x+y, min(x, y))", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x - y) > 0 and x <= y\nThis should be \"x <= y\" (unless you're trying to return -1)\nAnd it looks like you have a missing return.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n       return x\n    else:\n       return y\n\nNot sure why you're getting downmodded. This is a valid point. If you want to write code that is platform independent, using Python and having to deal with.h files is not a good thing.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return -1\n    else:\n        return x\n        x = x / 2\n        y = y / 2\n\n    return choose_num(x, y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x > y? x : y\nI would have said:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return -1\n    else:\n        return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x > y? x : y\nOh, I see the problem. It should be > instead of >=.\n\nThe set of all > numbers is not the same as the set of all >= numbers.\n\nIn this case, they are. The function returns the biggest even integer number in [x,y], and 12 > 15.\n\nI actually thought about this exact problem the other day. I thought of the following way to solve it:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return abs(x+y) > 0\n\nwhile True:\n    print choose_num(random.randint(0, 100))\n\nWhat is this?\n\nRMS is the Root Mean Square, which is a measure of the \"average\" value of the squared data (which is the mean squared value of the data).\nThe RMS is a good way to look at whether data is \"noisy\", or full of randomness.  Here's a great article about it:\n\nIt's interesting to note that the RMS is defined without regard to the units, so it's not a bad way to answer the question \"What's the average value of this data?\"\n\nthis is so much better than rms() in Python (which I'm sure exists), thanks for posting.\n\nWhat do you mean? Is it that rms() in python is slow? I've only used it once or twice, so I don't know what I'm missing.\n\nYes, it's very slow in Python.\n\nI did this in 10 minutes...", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    else:\n        return y\n\nIt's a joke. It doesn't work.\n\nI thought the joke was that it's a real function (so it will work with integers, but not with floating-point numbers), and that it's just not called by a real Python program.\n\nIt's a function, so it should work with floating point numbers.\n\nThat's right. But the author of the article chose to implement it for integers only.\n\nIt does work, but it's buggy. It assumes that the input is in range, so it returns the larger of the two even if one is outside the range.\n\nThe odd part is that it actually works for integers in the range (2,3) but fails for floating point numbers in the range (2.0,3.0).\n\nNot really a joke. It works fine in python, but only integers in [2,3]\n\nAh, this is why I love the Python community.\n\nWhy is this on the front page? I don't understand.\n\nBecause people like the humor", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return Math.max(x, y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    return choose_num(x, y - 1)\n\nThis code prints 0, 1, 3, 9, and 14.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return -1\n    return int(x ** 2 + y ** 2)\n\nYou can use the second derivative test to see if it's converging.  If\nyou can do that, it's best to show that it converges to the answer.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n       if x == y:\n          return -1\n       if x < y:\n          return x\n       if x > y:\n          return x + 1\n       if x == y and y > 0:\n          return x\n       return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x if x>=0 else y\nI've seen a ton of this style of code in the past few years. Is there a name for this kind of code?\n\nPython has named parameters.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    else:\n        return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return math.floor((x > y)? x : y) + 1\n\n    return choice", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n       return -1\n    if x == y:\n       return y\n    else:\n       return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    if y > x:\n        return y\n    return int(sqrt(x*x + y*y))\nI can't help but think this is terrible code. You have a two dimensional problem and you've selected a data structure that requires two multiplies to do a single add. I've seen this sort of thing in a lot of places, and while it may be \"correct\", it is almost never the best way to solve the problem.\n\nWhat do you mean by a two dimensional problem? The domain of the function is a single interval, not two.\n\nThe domain is a single interval, but the problem is to find the largest number in a two dimensional space.\n\nI find myself doing a lot of work in two dimensions, so I wrote this little function to make it easy to write a sort of \"cross-section\" of the space at a given point.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return min(x, y) if x < y else x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x % 2 if x == 0 or y % 2 if y == 0 or -1\n    if x > -1:\n        return -x\n    return x\n\nThis is Python, not Ada, where you'd have to specify how to treat the\nnumber if it's negative.\n\nFYI, this is how you would write it in Ada:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return math.ceil(x*y + 1)\nIt seems to work, but is there a more general function that can do this?\n--\nPosted via http://www.ruby-forum.com/.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y: return -1\n    if x == y: return -1\n    if x > y: return x\n    if x < 0: return -1\n    if x == 0: return -1\n    if x > max(x, y): return -1\n    if x == max(x, y): return x\n    return max(x, y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n         return -1\n    else:\n         return x\nThis is the way I'd do it.  I'm not sure why anyone would think that a loop should be written like that.\n\nBecause you think that y+x<x, so in the worst case y+x should be equal to x, but you don't want to return x, you want to return the bigger of the two numbers. The code looks like the expected behaviour (and is therefore simpler) than your solution.\n\nThat is in the worst case. In the best case, you always get the smaller number, and that would be pretty nasty.\n\nI think the OP is confusing the behavior of an if statement with that of a loop.\n\nThe line where I mention the loop is where I say \"if x < y:\".\n\nI know it's been said before, but there's a reason we have languages that allow us to express higher order constructs.\n\nUsing a loop for this is just wrong.\n\nI would do something like this:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    if x < y:\n        return y\n    return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x % 2 == 0:\n       return x\n    else:\n       return (x + y) // 2\n\nYou can also use the standard function min.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n        return -1\n    if x > y:\n        return x\n    if x == y:\n        return x\n    else:\n        return choose_num(x - y, y)\n\nIs there a way to get the function to return a negative number if the two arguments are equal?\n\nthanks\n\nThere's no way to do that, because the function is to be used to choose the smallest positive integer in the range given by the two numbers. The way it works is it first checks to see if the numbers are equal, and if they are, it returns the lesser of the two (the one closest to zero). If they're not equal, it checks to see if the smaller is less than zero, and if so, it returns the smaller number. This is equivalent to the C++ code below:\n\nint choose_num(int x, int y) {\n    if (x == y) return y;\n    if (x < y) return x;", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if (x > y) or (y > x):\n        return x\n    else:\n        return choose_num(x, y - 1)\n    print(\"choose_num(%d, %d): %s\" % (x, y, choose_num(x, y)))", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x - y, x + y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n        return -1\n    if x == y:\n        return x\n    else:\n        return x + y\n    return None\n\nThat's not entirely true.\n1. It can only be used if the range is finite. (This is not mentioned, but if you add the footnote, it is obvious.)\n2. It doesn't return the largest integer in the range. The largest number returned is not necessarily the largest number in the range, but one of the two numbers.\n\nIt does return the largest integer in the range, and the range is finite. That is, the range is defined as a subset of the integers, and integers are a subset of the positive integers. So, this function returns the largest integer in the range.\n\nYou forgot to define the function.\n\n\"The idea of this site is to provide a place where you can post your code and have it commented by the community, and also to learn about programming in general.\"\n\nI am learning from this. It has a function that isn't defined.\n\nIt", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x, y)\n\nimport math", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return x\n    else:\n       return y - 1\n>Is there a way of accomplishing this using a for loop?\nYes, but the \"if x < y:\" part is a bit onerous.\n>I have a feeling I could use a list comprehension, but I'm not sure what I'd use to accomplish it.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x, y)\n\nThis solution is not optimal. The input x and y are not guaranteed to be\nintegers. So you will always get a warning message when running the program.\n\nHere's an even better solution:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x & (y - x)) / 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    else:\n        return (x / y) + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n        return y\n\n    if x > y:\n        return -1\n\n    return x\nI'm not sure how many languages this is valid Python, but it's not valid\nStandard Python. It's a function that returns a different number each time\nyou run it.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (y - x)**2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    print(\"Choose num(12, 15):\", choose_num(12, 15))\n    print(\"Choose num(13, 12):\", choose_num(13, 12))\n    return choose_num(12, 15)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n       return -1\n    return x\n\nWhat if x and y are both 0?\n\nIt's a corner case, but it's not undefined.\n\nAnd there are plenty of other values that are not exactly integers, such as 0.5\n\nIt's not a corner case, it's a case of interest. The function is supposed to return a value from a set of numbers, and here there are two numbers in the set that are not even numbers, 0 and 1.\n\nYou're right, but I don't think it's worth the effort to force a round-trip to the server just to check if there's a number in a set of numbers.\n\nIt's not about checking for a number in a set of numbers, it's about checking if the number you are currently checking is an even number. And the only way to do that without going out of your way is to roundtrip.\n\nI get the reason for the OP's article but I don't see the utility of this as an example.\nI'm also confused at how it can be a corner case. If one of the input parameters is 0, then", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    else:\n        return 2 ** (x - y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x <= y: return x\n    else: return -1\n\nI think you'll find that you get a 'ValueError: invalid syntax' because you're calling it like this:\n\nCode:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return x\n    return -1\nWhat if x and y are equal? The return value will be the value of the function, but it will be undefined since you didn't check it.\n\nNice catch. I just edited the code in the post.\n\nI thought about doing something like this a while back, but with an emphasis on maintaining the input values in a stack. My goal was to have a Python-like language for teaching programming to my 5 year-old. But I never got around to it.\n\nMaybe I'm just a language nazi, but I don't like this. In a way it's worse than most of the old-style BASICs that would crash or generate meaningless results if you asked them to do something they couldn't.\n\nI agree. My only goal was to show off the cool syntax for the __len__ function.\nI just changed the function to return 0 if __len__() is invoked and 1 if the function encounters an error.\n\nThat's a really interesting approach to the problem. I think that the more I look at it the more I like it.\n\nRemind", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x % 2 + y\n    if (x%2 > y)\n        return x%2\n    else\n        return y%2\nThis is not a good example. You don't want your code to break if your first argument is larger than the second argument.\n\nI agree. It's not a good example. However, I don't think the function should break because of that. I would rather the program just print an error message.\n\nI think the only way to do it correctly is to have a separate function to detect integer overflow:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x > y)\n    if x < y:\n        return -1\n    # add 1 to the argument for x to force it to be positive\n    return (x > y + 1)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return -1\n    if x > y:\n        if y == 10:\n           return 13\n           else:\n            return 14\n    return (x + y) % 2\n\nThis is really neat, and it's certainly more readable than the equivalent recursive function.\n(FWIW, I think this is the way recursion is usually taught in undergraduate algorithms courses -- given an example like yours, you'd get a nice lecture about how you could write a more general algorithm that would work for any numbers.)\nThat said, this particular example (choose_num) probably isn't a good one, because the recursive version (using the _built-in function_ ) is _significantly_ more efficient:\n>>> choose_num(12, 15)\n<function choose_num at 0x7fbc8071ef98>\n>>> choose_num(13, 12)\n<function choose_num at 0x7fbc8071", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    if x < y:\n        return -x\n    return floor(x/y)\nI had to read this code to realize that it could be a perfect match for the problem at hand!</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x < x + 1\n\nYou have a problem if x is -1, -2, -3, etc. Or for negative numbers of either x or y.\nYou have a bigger problem if y is 0.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return x + y\n\n    x = int(input(\"Enter positive integer in the range [0, 10]\") * 2)\n    y = int(input(\"Enter positive integer in the range [0, 10]\") * 2)\n\n    if x < 0 or y < 0 or x > 10 or y > 10:\n        print \"Sorry, please enter a positive integer.\"\n    return -1\n\nPython is a great language, but it does have a lot of its warts. I have a hard time using it as a teaching language because it's so easy to write bad code. (I've been known to tell students that Python is a good language to learn bad habits in.)\n\nWell, bad code in any language is easy to write, and good code is easy to write in any language.\nIt's just that bad code in Python is easier to write than bad code in other languages.\n\nHow so?\n\nWith C, you can shoot yourself in the foot by writing bad code, but it's a little more difficult.\nWith Python, you can shoot yourself in the foot with a BB gun.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return min(x, y)\n    # -1 if there's no number\n\nNote that min is defined as x - y for x >= y.\n\nAlso note that, as a member function, you can declare it as:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return x > y? x : -x\n\n    def sum_numbers(numbers):\n    \"\"\"This function takes a list of positive integers and returns the\n    sum of all the integers in the list. If the list is empty, it should\n    return 0.\n    For example:\n    sum_numbers([1, 2, 3, 4]) = 6\n    sum_numbers([]).__class__ = int\n    \"\"\"\n\n    return numbers.count()\n\n    import operator\n    import array\n    def int_to_int(x, y):\n    \"\"\"This function takes two integer numbers and returns the smaller\n    of the two. If the two numbers are the same, it should return 0.\n    For example:\n    int_to_int(10, 5) = 5\n    int_to_int(10, 10) = 10\n    \"\"\"\n\n    return x < y? x : y\n\n    import operator\n    from", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x >>> y\nThat's not correct - it returns the biggest integer in the range [x,y], not the biggest number that's in that range.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return -1\n    if x > y:\n        return x\n    if x < y:\n        return y\n    return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return ((x >= y)? x : y + 1) % 2\nIn my mind, this has the same problem as the usual comparison operator.\n\n What if the numbers are in the range [0,1]?\n\nThen you have bigger problems than comparison operators.\nIf you want to compare two floats to see if they are in the same range, why not just convert to integer, compare, and convert back to float?\n\nBecause you are comparing two numbers for equality.\nIt's not useful to compare numbers that are not integers (and it's not even possible).\n\nI guess I don't see the point in having a comparison operator that can only be applied to numbers that are in the same range. What is the purpose of that?\n\nFor most values of _most_, it's useful to be able to say \"I have a number in this range\", and compare it to another number in the same range.\n\nSure. But why make a \"compare to integer\" operator that is limited to the range of integers?\n\nIt's not limited to the range of integers.\n\nIf the function chooses a number by checking whether the x value is bigger than the y value,", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    # We will pick the largest number in the range\n    if x == y:\n        return -1\n    else:\n        return x\nI don't know what the -1 is about, but in general you don't want to return the biggest number in the range if it isn't equal to both input arguments. The only exception to this rule is when you're looking for the biggest number in an empty list (i.e., for list() or something like that).\n\nThe -1 is meant to represent \"no such number\". I should have mentioned this.\nThanks for pointing out my error.\n\nMaybe that's what you meant, but a better way to represent \"no such number\" would be None. -1 is typically returned when an error occurs.\n\nIn python, it can be either an error or an empty value.\n\nFunny, I don't see it there. Can you show me where it says that?\n\nIt doesn't say it explicitly, but look at the behavior of python's built-in isempty function.\n>>> isempty([]).\nTrue\n>>> isempty(\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return x + y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    else:\n        return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    else:\n        return y\n    else:\n        return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return int(x*2) + int(y) + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return 2**x + y % 2\n\n\"</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return -1\n    if y > x:\n        return x\n    return int(choose(x, y))", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x > y)? x : y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return x\n    else:\n       return y\n\nThis function is so simple. It's like asking \"how do you make a for loop?\"\n\"Make a function that takes an integer and returns an integer\".\n\nI'm surprised this doesn't come up more often in these things.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if (x!= y) or (x == y):\n        return -1\n    return x*x + y*y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y:\n        return x\n    else:\n        return y\n\n    return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return 0\n    else:\n        return x + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x%2) + (y%2) + (x+y) + 1\n\n    def add(x, y):\n    \"\"\"This function adds two numbers and returns the result. For example:\n    add(3, 4) = 7\n    add(5, 6) = 11\n    \"\"\"\n    return x + y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return -1\n    return x*x + y*y</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x + y\n\nI am trying to make a function that takes two positive numbers and returns the biggest even integer number that is in the range [x,y] inclusive. I'm trying to use a combination of functions and loops to do this but I am stuck on the for loop part.\n\nI know I want to use a for loop, and I know I want the function to take two numbers (x and y) but I am unsure of how to structure the for loop. The reason I want to use a loop is because I have already written two functions to do this and I want to use the functions I have already written.\n\nThank you for any help you can provide.\n\nNovember 9th, 2012, 07:14 AM\n\nnplus\n\nRe: For loop help\n\nIt looks like you've tried to do too much in one function.\n\nTake out the for loop. Just take your two numbers and use the functions you have written to compare them. When you have an appropriate result, return that number.\n\nNovember 9th, 2012, 07:44 AM\n\njoshuamk\n\nRe: For loop help\n\nI have a list of numbers that", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return [x + (y - x) / 2 for x in range(x) for y in range(y)]", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return int(x)\n    else:\n        return int(x) - int(y)\nThe C solution is shorter, but the Python solution is clearer, is it not?\n\nI think it's the opposite. Python code looks like pseudo code.\n\nIn what way is this true?\n\nUsing a for loop is a lot more readable than any iteration method. It just doesn't look like a language that's meant to be executed.\n\nThe Python version is shorter and easier to read, and it has less code. I see no real value in the C version.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x%2 == 0 and y%2 == 0 or -1\nThis is an obvious, but brilliant fix. I'll upvote this.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    return y\n\n    def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return x\n    return y\n\nNext day's blog:\n\nHacker News Discussion: https://news.ycombinator.com/item?id=13106629\n\nClever, but I don't think this is really any better than a simple, non-recursive version.\n\nOr just use the non-recursive version, and throw away the conditionals.\n\nOr just use a non-recursive version and use an if statement for the few", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n       return -1\n    if x > y:\n       return (x-y)\n    if x < y:\n       return (y-x)\n    if x == y:\n       return x\n    return 1\n\nx = 'A'", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x == y:\n        return x\n    else:\n        return (-1)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x * y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return int(x - y) + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return int(x) + int(y) if x > y else -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == 0 or y == 0:\n         return -1\n    return max(x + 1, y + 1)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return int(x) + int(y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return x > y? x : -1\n\n    def choose_sum(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    sum of the two numbers, i.e. x + y. If either one of the numbers is\n    negative, the function should return the negative of the sum.\n\n    For example:\n    choose_sum(12, -12) = -12\n    choose_sum(13, -13) = 13\n    \"\"\"\n\n    return x + y\n\n    def choose_product(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    product of the two numbers, i.e. x * y. If either one of the numbers\n    is negative, the function should return the negative of the product.\n\n    For example:\n    choose_product(12, -12) = -36\n    choose_product(13, -13) = -78\n    \"\"\"\n\n    return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(floor(x*x + y*y, 2) + 1, floor(x*x + y*y, 2) - 1)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n       if x == y:\n          return x\n      else:\n          return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n       return x\n    else:\n       return x + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x if x > y\n    return y if x < y\n    else:\n    return -1\n\nThe Python implementation of this algorithm is shown below:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    return x + y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return 12 * (x - y) + y\n\nIt's always good to read the code before trying to write it!</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < 0:\n        return -1\n    if x == 0:\n        return x\n    if y < 0:\n        return -1\n    if y == 0:\n        return y\n    return (x - 1) * 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    if x > y:\n        return y\n    return x % y + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x-y) % 2 == 0\nI've always wondered about that syntax. It's quite elegant but how do you read it? Does it mean \"return x-y, if the result is 0, then the answer is 1 else it's 0\"?\n\nLooks like it's a python thing. I don't know python, but here's some info:\n\nI don't know much python either, but I'm pretty sure I read on here that it's best to never use this syntax as it is very confusing and difficult to read, so he probably got a good grade on this assignment for using it.\n\nI don't know Python either, but I read the following on Wikipedia:\n>>>   def choose_num(x, y):\n         return (x - y) % 2 == 0\n>>>   choose_num(12, 15)\n14\n>>>   choose_num(13, 12)\n-1\n\nThis is actually pretty useful, I have been playing with a data set and I wanted to find the values that are in a certain range. I thought about using a for loop but this is much nicer.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return x\n    else:\n        return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n         return -1\n    if x > y:\n         return x\n    return x ** 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x > y:\n        return x\n    elif x == y:\n        return y\n    else:\n        return (x + y) % 2 == 0", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x >= 0 and y >= 0:\n        return int(x + y)\n    else:\n        return -1\n\n    return 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    def __call__(self, x, y):\n    if x == y:\n        return -1\n    max_value = None\n    if x > y:\n        max_value = x\n    if y > x:\n        max_value = y\n    if x < y:\n        max_value = y\n    if x == y:\n        return max_value\n    if max_value is None:\n        max_value = int(x)\n    return max_value\n\nWhich language/environment is that?\n\nThe language is Python. I think that's the standard naming convention for a function that returns a single value.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    else:\n        return y\n\n    return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return -1\n    else:\n        return x + y\n\nIn Ruby, a more idiomatic way to express this problem is to write:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x if x%2 == 0 else y\n\nHere's a Python version of this function:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x + y, 0)\nI'm pretty sure this one is written by someone who doesn't know python.\n\nSurely he knows Python, that's the whole point of the post.\n\nI think the point of the post is \"If you write a language that can be used to write any program, there's going to be a lot of crappy programs written in it.\"\n\nThis is what happens when you allow people to write bad code:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return x\n    else:\n       return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x ** 2 ** k ** 2 for k in range(x, y))\nI don't think that's right, though I'm having trouble understanding the problem.\n\nI think this is a reasonable solution.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return min(x, y) if x > y else max(x, y) if x < y else -1\n\nf1 = choose_num(6, 4) # int = 4\nf2 = choose_num(5, 7) # int = 7\nf3 = choose_num(6, 8) # int = 4\nf4 = choose_num(7, 4) # int = 4\nf5 = choose_num(8, 4) # int = 4\nf6 = choose_num(9, 4) # int = 4\nf7 = choose_num(4, 5) # int = -1\nf8 = choose_num(5, 4) # int = 4\nf9 = choose_num(9, 4) # int = 4\n\nThis one is pretty nifty.\nThe \"min\"/\"max\" stuff is straightforward, but the \"if x > y else max(x, y)\" part is very smart. It basically means \"if x > y, return the biggest number that's greater than or equal to both x and y, otherwise return the biggest number that's less than or equal to both x and y\".", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    result = -1\n\n    while result!= -1:\n       if x > y:\n          result = max(x, y)\n          break\n       elif y > x:\n          result = min(x, y)\n          break\n    else:\n        if x == y:\n           result = x\n           break\n       elif x < y:\n           result = y\n           break\n    return result</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == 0 and y == 0:\n        return -1\n    return x + y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return len(x - y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    # Converting the double to integer\n    if x >= 2 and x <= 2**32:\n        return x\n    else:\n        return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return y\n    else:\n        return x", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n       if x > y:\n         return -1\n       elif x < y:\n         return x\n       else:\n         return (x + y) + 1\n       return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    elif x == y:\n        return y\n    elif x > y:\n        return x - y\n    else:\n        return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return int(y)\n    else:\n        return int(x)\n\nWhat is the problem?\n\nTo put it simply: The function return -1 for a input of 13 and 12. Which is not the biggest even integer between 13 and 12, which is 13.\nI hope that answers your question. I'm sorry if it doesn't.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return -1\n    return x + y % 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if (x > y) and (x - y > 0):\n        return x\n    else:\n        return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    if x < y:\n        return y\n    if x == y:\n        return -1\n    return int(x ** y)\n> def choose_num(x, y):\n> if x < y:\n> return y\n> if x > y:\n> return x\n> if x == y:\n> return -1\n> return x**y\nThat's exactly what the above Python code does.\n\nJust for comparison:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    else:\n        return y", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n        if abs(x - y) < abs(x) < abs(y)\n            return x + y\n        else\n            return -1\n\n        return choose_num(x, y)\nThis is a fine example of the minimum possible code that accomplishes the task.\nNow let's do the same thing but in about 1/5 the code. (I'm actually pretty impressed at how compact this is.)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x if x % 2 == 0:\n    if x mod 2 == 0:\n        return x / 2 + y\n        return x - y\n\nThis is a direct copy-paste of the implementation from the link.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    # The second argument to choose_num is the first of the two numbers\n    def choose_num2(x):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num2(12, 15) = 14\n    choose_num2(13, 12) = -1\n    \"\"\"\n\n    if x == y:\n        return -1\n    else:\n        # Choose the biggest even number between x and y\n        return choose_num(x-1, y-1)</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return 0\n    if x == y:\n        return 1\n    return -1 if x > y\nWhat are you trying to accomplish here?  I ask because the function you've written is not correct for the stated problem.\nIf you want to find the largest even number between two numbers, you should use the modulus operator (%) to test if a number is even or not.  Then, if the number is even, you can return it as the largest even number.", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < 0:\n        return -1\n    else:\n        return max(x, y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x >= y:\n        return x\n    if x < y:\n        return y\n    if x + y < 2:\n        return x\n    if x + y == 2:\n        return x\n    if x + y == -1:\n        return -x\n    return -1</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > 0:\n        return x\n    else:\n        return -1\nThe problem is that it's returning the integer value of x or -1, instead of returning the largest number between x and y.\n\nActually, it's an implementation detail of the Python language that the \"biggest number\" between two values is not necessarily an integer.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return -1\n\nThis code snippet shows how to implement a function called choose_num\nin Python that takes two parameters (which are assumed to be positive\nnumbers) and returns the biggest even integer number that is in the range\n[x, y] inclusive. If there's no such number, then the function should\nreturn -1. The function returns -1 if there are no numbers in the range\n[x, y].\n\nThe correct implementation of this function in Python is as follows:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return x\n    else:\n        return 0", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return floor(x+y)/2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == 0 or y == 0:\n        return -1\n    x, y = x + 1, y + 1\n    if x > y:\n        return x\n    else:\n        return y\n\n[1] http://en.wikipedia.org/wiki/Binary_search_algorithm\n[2] http://en.wikipedia.org/wiki/Ternary_search_algorithm\n\nAny pointers on the best way to get an explanation on how this works? I'm really struggling to understand.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    print \"choose_num(12, 15) = %d\" % choose_num(12, 15)\n    print \"choose_num(13, 12) = %d\" % choose_num(13, 12)\n    return choose_num(x, y)\nThe problem is that your function returns the same answer whether the input is (for example) 6.4 and 4.4 or (for example) 6.4 and -4.4.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n       return x\n    if x <= y:\n       return y\n    return None", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return abs(x)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    elif x == y:\n        return y\n    else:\n        return x % 2 + y % 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return min(x,y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x + y) % 2 == 0", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return x*x + y*y\n\n    def choose_num(x, y, min_x, min_y):\n    \"\"\"This function takes three positive numbers x, y, and min_x and\n    min_y. It returns the biggest even integer number in the range [x,\n    y] inclusive. If there's no such number, then the function should\n    return -1. It should also return -1 if one of min_x or min_y is 0\n    (i.e. there's no such number).\n    For example:\n    choose_num(12, 13, 7) = 12\n    choose_num(12, 13, 8) = -1\n    \"\"\"\n\n    return x*x + y*y + min_x*min_y\n\n    def choose_num(x, y, min_x, min_y, max_x, max_y):\n    \"\"\"This function takes four positive numbers x, y, min_x, and\n    min_y,", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    result = -1\n    for x in range(x):\n        for y in range(y):\n            if x > y:\n                 result = result or -1\n                 break\n    if result is not None:\n       return result\n\nThis code won't work for integers with 0 as the first digit, because it doesn't handle the case where x < 0 or y < 0.\n\nThis is usually avoided by making x >= 0 or y >= 0, which would make this example look like this:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x * y + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x < y: return -1\n    if x > y: return y\n\n    return (x + 1) % 2 + y\n\n    def find_first_positive_integer(x, y):\n    \"\"\"This function takes two positive integers x and y and returns the\n    smallest positive integer that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1. If\n    x and y are equal, then the function should return the largest of\n    the two numbers. If x and y are equal and one of them is negative,\n    then the function should return -1.\n\n    For example:\n    find_first_positive_integer(12, -7) = -1\n    find_first_positive_integer(12, -7) = -1\n    find_first_positive_integer(12, -1) = 12\n    find_first_positive_integer(12, -1) = -12\n    find_first_positive", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return y\n    if y < x:\n        return x\n    elif x == y:\n        return -1\n    else:\n        return max(x, y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x == y:\n        return x\n    for i in range(x - 1, y - 1):\n        if x <= i and y <= i:\n           return i\n             else:\n               return -1\n    return -1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    if x >= 0:\n       return int(x) + int(y)\n    else:\n       return -1\n\nI don't see any error, it's not meant to return a negative number for that example.\n\nNot true.\n\"negative numbers\" is not the same as \"negative integers\". In fact, negative numbers is a subset of negative integers.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n       return x + 1\n    if x == y:\n       return -1\n    else:\n       return choose_num(x - 1, y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if (x - y > 1) and (x - y < 100):\n        return -1\n    else:\n        return x*x+y*y\n    print('choose_num(x, y): '+str(choose_num(10, 20)))", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    assert len(x) == len(y)\n    assert len(x) > len(y)\n    if (x > y):\n        return -1\n    else:\n        return max(x + y, y + 1)\n\nOr even just:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return math.ceil(y) + math.floor(x)\n\n    def choice(n):\n    \"\"\"This function takes a positive integer number n and returns a list\n    of positive integers (in order) which sum up to n. If n is negative,\n    then the result is the list (None, 0, 0). If n is zero, then the result\n    is empty. The list has the length equal to n.\n    For example:\n    choice([1, 2, 3]) = [1, 3, 5]\n    choice([2, 1, 3]) = [(2, 0), (1, 0)]\n    choice([1, 2, 3]) = [(1, 3), (2, 0)]\n    \"\"\"\n    for n in range(1, n + 1):\n        if n%2==0:\n            return [n, n + 1]\n        else:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return -1\n    else:\n        return max(int(x, 10), int(y, 10))\nNow that's a good interview question.  I don't think you'd want to ask this of a new programmer, but it's still a good question.\n\nIn fairness, I'd be _very_ impressed if the candidate could actually implement this one in a few minutes. I suspect it would take longer than most candidates would think.\n\nI don't know, I think I could implement this on paper in a few minutes. Implementing it in code, I'd probably need an hour or two.\n\nI'd say it's much harder to implement on paper.\n\nI thought it was an easy problem to solve, and I'd guess it takes me maybe 15 minutes to think it up and 5 minutes to write a solution. I'd probably have to spend a little more time thinking about how to abstract the solution to be reusable.\nHere's my solution:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x % 2 == 0:\n        return x\n    else:\n        return y + x\n\nNote that this is not the same as y + x % 2==0, and the latter will always work.\n\nI would suggest using absolute value instead of percentage.\n\nNope. The problem is that you can have negative numbers. The absolute value\nfunction would not work for those.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x + y) / 2\n\nIf you are trying to define a function that takes two arguments, your function is not even returning a value. A function must return a value, it can't just return an empty statement.</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x - y) * (x - y) + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return x if x % 2 == 0:\n    return y if x % 2 == 0:\n    if x == y or x % 2 == 0:\n        return -1\n        return x - y\n\nThis function is useful in the following situations:\n\n-- Solving a sudoku puzzle:\n    if choose_num(1, 9) == -1:\n        print('Sudoku puzzle is impossible'\\\n        'because there are no numbers in the range 1-9')\n    elif choose_num(1, 9) == 14:\n        print('Sudoku puzzle is solvable'\\\n        'because there is a number 14 in the range 1-9')\n\n-- Solving a sudoku puzzle:\n    if choose_num(1, 9) == -1:\n        print('Sudoku puzzle is impossible'\\\n        'because", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    # Find the biggest even number in the range\n    # [12, 15] inclusive\n    return int(x % 2) + int(y % 2)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return (x - y) % 2 == 0", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return -1\n    else:\n       if x + y > 16:\n          return -1\n       else:\n          return x + y\n\nSo I'm reading that as:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n        return x\n    if x == y:\n        return -1\n    return choose_num(x - 1, y - 1) + 1\n\n[This is a solution to a programming problem. If you want the answer,\nplease go to the URL below.]\n\nhttp://www.chriszapp.com/examples/xand.html</s>", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y:\n       return -1\n    elif x == y:\n       return x\n    else:\n       return (x + y) / 2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n\n    return int(x ** 2 + y ** 2)\n\nI'm going to ask you a question that has probably popped into the head of\neveryone who has ever been asked to write a bubble sort: Why didn't you just\ndo:", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    return max(x, y)", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x < y or x > y:\n        return -1\n    if x == y:\n        return x\n    return int(floor(abs(x / y))) + 1", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if x > y:\n        return x\n    else:\n        return (y - x)/2", "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\" \"\"\"\n    if (x == y):\n        return 1\n    else:\n        if (x >= y):\n           return 2\n    else:\n           return -1"]]