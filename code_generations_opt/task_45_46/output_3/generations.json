[["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = a\n    h = h\n    x = a[0]\n    y = a[1]\n    z = a[2]\n    return h*x*y*z\nWhen I see this, I would assume that a[0], a[1] and a[2] are indices into an array of length three. It would be better to use a single string to give the whole type of the arguments. For example:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a / h) * (h / 2)\n\nWow, that's ugly.\n\nIs it really ugly or do you just not like it?\n\nThat's ugly, even for me.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 0.5 * (a * a * a) / ((h - 1) * (h - 1) * (h - 1))\nCan someone explain why this is the answer? I can't figure it out.\nThanks\n\nThis seems to be a calculator that converts high school math into python, so you're not going to be able to find a rigorous mathematical explanation for the answer.\n\nNot just \"high school\" math. I was just reading a book for math majors and found a trig identity that was something like\nf(x)=exp(2*x*x+5).\nIt makes sense. I can see the pattern.\nIt's just not very fun to look at.\n\nIt makes sense because you know the meaning of \"2 * x * x + 5\". If you didn't, it would just be a meaningless string of symbols.\nTriangle_area is meant to be intuitive, so it doesn't have a rigorous mathematical meaning. It's meant to make the connection between high school math and Python, which is what it does.\n\nI don't think it's meant to be intuitive, though. It's meant to be code you can copy and paste into a", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\nreturn triangle_area", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * a + h * h)\nI don't know anything about this python thing, but I have to say, I love the syntax of this.\nThere's a lot of python like that.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    # Use a list instead of an int for the \"side\" argument.\n    a_side = [(5, 3), (5, 4), (5, 5)]\n\n    # Use a list instead of an int for the \"high\" argument.\n    high_area = [[1.5, 5, 4.5], [1.25, 4, 3.75], [1.5, 3, 2.75]]\n\n    return [[high_area[i] for i in range(a_side.size)] for i in range(a_side.size)]\n\nPython</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return len(a) * sqrt(a.h)\nThere is an obvious faster solution for this if you just return the length of the triangle's side.\n\nThe obvious solution is to not include the sqrt.\n\nThat's not a real solution, it is just a hack.\n\nSure, but it is a hack that is useful in many situations. Sometimes it is useful to write code that is a hack, but faster.\n\nI would argue that you should strive to make it more than just a hack. You should try to understand why your function isn't working and then figure out a better way to solve the problem.\n\nI'm sure that you're right that it's better to get to the bottom of the problem. But, sometimes you just need to get things done, and sometimes that means you hack together a solution.\n\nTrue, but if you can afford it, you should try to avoid the hack. I think that the OP did a good job of figuring out how to make his function correct.\n\nSometimes, the _best_ solution is to use the best tool for the job.\nIn other words: use an appropriate library.\n\nSure, that's true,", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 3*a*h\nWhat am I missing?\n\nYou're missing the implicit \"return\".\n\nI've never understood why people write code like this.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(h/2)\n    return math.sqrt(a**2 - h**2)\n    return math.pi / 2\nI don't get it. It doesn't work for me, because the area is a function of the length and the angle of the triangle, no?\nWhat the hell?  I think it's actually math.pi / 2.  Try that.  The other ones don't work, and I swear that's the one I was taught in high school.  Edit:  I don't know who's downvoting you, but it's not me.  Edit:  Looks like you got it.  Glad I could help.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * a + b * b) / h\n\nSo, what's the difference between this and the Python answer?\n\nThere is no difference. That's the point of the submission, that a lot of \"pythonic\" solutions have a lot in common with the fastest C/C++ ones.\n\nTo add another example, a lot of Python programmers would probably write this:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt((a**2)**2 + (h**2)**2)\nThis one might be a bit faster for _short_ sides.\n\nFor the less mathematically inclined, you could write this as follows:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = numpy.sqrt(a)\n    return a * numpy.pi / (2*h)\n\nfor i in range(10):\n    a = triangle_area(30, 10)\n    print a\n    print a / h", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h / 2) * a\n\n    def triangle_area(a, h):\n    \"\"\"Given a length of a side and a length of two other sides and\n    a height of a triangle.\n    >>> triangle_area(a, 5, 2)\n    21.5\n    \"\"\"\n    return h / (a + h * b + c)\n\nOh wait...\n\nx + (y * h) / 2 + z * h == h * x + y * z\n\nOh hey, Python.\n\nYou mean like this:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sum(triangle_area(a, h, 0))\nI am curious, is there a reason why you chose to do it that way instead of taking the area of the whole thing, then just doing a single subtraction to get the area of the missing corner?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    area = 3 * a\n    return (a / area)*h\nYou're trying to return an area of a triangle, and you're multiplying the length by the area?  Why?\nI see, it should be a/area, not area/a.  I have edited the code, thanks for pointing out the mistake.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi*(a**2)/(h**2)\nThe correct result is \"7.1\".\nThe area of a triangle is\n\\begin{equation}\n\\sqrt{(a^2 + b^2 + c^2) / 2}\n\\end{equation}\nwhere a, b, and c are the lengths of the three sides, and a + b + c = h.\nFor example, in the case of the triangle in question, the three sides are\n\\begin{equation}\n5 + 3 + 1 = h\n\\end{equation}\nand the area is therefore\n\\begin{equation}\n\\sqrt{(5^2 + 3^2 + 1^2) / 2}\n= 7.1\n\\end{equation}\n\nIt is correct, however the values of h and a have been mistyped in the Python version.\n\nThanks for the correction. I've updated the post to say that it's correct for Python 2.7.\n\nIn the Python version, the user has to use float instead of integer for the length of the side and area. I am not", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a < 1:\n       return 1\n    return a * h\n\nSo, a is the length of the base, and h is the height.\nSo,", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a, h = int(input(\"a: \"), 2)\n    return h*a+h*(a+1)\n\nSee also\n\n Pythagorean theorem\n Pythagorean triples\n Pythagorean quadruple\n Right triangle\n Trapezoid\n Rectangle\n Square\n\nReferences\n\nExternal links\n Calculator for Pythagorean triplets and other figures\n The Pythagorean Theorem - Online Calculator\n Pythagorean Theorem at cut-the-knot.org</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * a + h * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    return sqrt(h * a - (2 * a))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = a.as_double()\n    h = h.as_double()\n    return h * a / h\nWhat are you trying to do here?\nIn general this is a pretty bad idea, so I can't imagine it's a good idea here.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(h/2)\nIt would be nice to get a better idea of what this function is supposed to do.  It also looks like this function might be easier to understand if the parameter `h` were expressed as a function of the length of the side.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = int(a)\n    h = int(h)\n    return a**2 * h**2\nI thought python was supposed to be readable.\nIt is if you are not a complete idiot.\nYour comment and username are at odds.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    area = 0.0\n    h = h * (a - 1) + 1.0\n    while h <= 2 and a % 3 == 0:\n        area += h*a*h/3\n        h += 1.0\n    return area\nIt may be more readable if you use a tuple rather than passing a name into every function. You could do:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(h * a)\nThis is much easier to read with parentheses.\n\nYes, there's no reason to write it like this.\n\nYes, this is not pythonic. I've seen it sometimes when there's a nice workaround for a problem and people just forget about the readability of the code.\n\nI personally don't see the readability problem. Of course it's not written in a style that would pass code review at Google, but in my eyes it's perfectly readable.\n\nThat's the problem with a lot of python code, it doesn't have to pass code review at google to be used in production, and it does\n\nThis is why I stick with LuaJIT in production.\n\nThis is not a problem, if it works and is readable enough to maintain. The \"pythonic\" code is also less readable for me.\n\nElegance isn't a function of the length of the code.\n\nIs there a reason for this? I could see why something like \"return area(h * a)\" would be hard to read but the way it's written there is nothing wrong with it. It may not be as easy to read, but it's", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return pi * (h / 3) * a\nYou could just use:\n>>> pi / 3\n>>> 3 * pi / 3\nThis is a perfectly valid programming exercise for an intro to python course.\n\nTo be fair, I think the exercise is more about the students understanding functions and recursion than it is about finding the area of a triangle.\nI think it'd be a bit of a stretch to expect the student to understand functions, recursion, and how to use them together to find the area of a triangle. That said, I do think the teacher's example is rather unhelpful for someone who's just starting to learn Python.\n\nI don't see how you can't understand how to use functions and recursion to calculate the area of a triangle. It's not that difficult.\n\nI don't think it's that difficult either, but I do think it's a bit of a stretch for a new programmer who's probably never had to use functions or recursion before.\nAnd I have no idea how much experience the teacher has teaching programming. It's entirely possible that he's never taught programming before and has no idea what it's like to be a new programmer.\n\nA little over", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/(2*a*h)\nI had to read this like 5 times to get it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * a) * (h * h)\nThank you so much for the help.\nDon't know why I didn't think of it...</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 3 * (2 * pi / a) * (a * h) / (2 * pi)\nSo the answer is 7.5 \n\nThat's one way to do it, but in the code I posted, I used the arc length formula:\n\n/ 4 * Math.sqrt(1 - (s^2 - s_1^2) / (s_2^2 - s_3^2))\n\nwhich is also correct.\n\n7.5 is a good approximation, but I'd probably just use the arc length formula.\n\nThanks for the reply. I don't think I've seen that one before.\n\nI'm not convinced that either of the two formulas is correct, but using that formula I got 7.546, so it looks to be very close.\n\nThe formulas both work, they are just not the most concise.\n\nor, you know, Pythagorean Theorem...\n\nThis isn't about finding the hypotenuse, it's about calculating the area of a triangle given the length of a side and the height.\n\noh, in that case, my bad. carry on.\n\nI found that while some of", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return (a * h + a) / 2\n    \"\"\"\n    def triangle_area_from_perimeter(a, h):\n    \"\"\"Given the perimeter of the triangle, return the area.\n    >>> triangle_area_from_perimeter(3, 4)\n    9\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return (a * h + a) / 2\n    \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 1/2 * (a.height * (a.height - h))\nThis is wrong.\nYou don't have the width, so you can't determine the height.\n\nI just came up with this a few minutes ago, and it seems to be right:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a+h*h)\nDid you take calculus?\nNope. I did take a few engineering classes, so I'm a little familiar with the idea.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 1.0*sqrt(a*(a-h)*h*h)\n    if h == 0:\n        return sqrt(a*(a-0)*0)\nThis will produce the same result as the article.\n\ni wonder why it doesn't bother to calculate a third time as h goes from 0 to 1, as well as calculating a fourth time when h goes from 1 to 2, and a fifth time when h goes from 2 to 3?\n\nhaha, you're right, this is some horrible code. It assumes the input (a,h) is between 0 and 1, i.e. not an equilateral triangle.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return pi * h * a\nAnd this is the worst thing I've read all day.\n\nIt's obviously a bad example, but the message is still the same: Don't use float and C for trigonometry, use Math.PI and cosine.\n\nThis is true, but a better example would have been something like:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = a\n    h = h\n\n    return a * h\n\n    def triangle_area(a, h, k):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3, k)\n    3.0\n    \"\"\"\n    a = a\n\n    h = h\n\n    k = 0\n\n    while True:\n        k += 1\n        h += h\n\n    return a * h / k\n\nIs this what you meant?\n\nThat seems to be it! Thanks!\n\nThis is a common problem, and here's a simple solution that should work in any language. You could also implement it using a hash table and a couple of loops.\n\nI don't think this is the right solution for this problem.\nYou could implement it using a hash table and a couple of loops.\n\nI think this is a good solution. There's no reason to use a hash table here.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a, h = cv2.cvtColor(a, cv2.COLOR_BGR2GRAY)\n    return cv2.findContours(a, h, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    /** Returns a list of two numbers, the length of the hypotenuse and the\n    area of the triangle.\n* @param a: A numpy array of length (a_length, a_length) of floating-point\n* numbers\n* @param h: the height of the triangle, in pixels\n* @return: two numbers\n*/", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    def __new__(self, a, h, d):\n    \"\"\"Construct a new triangle_area object.\n    >>> triangle_area(5, 3, 1)\n    3.5\n    \"\"\"\n    def area(self):\n    \"\"\"Return area of triangle.\n    >>> area(triangle_area(5, 3))\n    7.5\n    \"\"\"\n    return math.sqrt(self.h/2)\n\nYou could call the same function with different shapes and it would work:\n\n>>> triangle_area(triangle_area(3, 2, 1), 1)\n8\n>>>\n\nYou can use a function as an argument to another function.\n>>> area(triangle_area(triangle_area(3, 2, 1), 1))\n9\n>>>\n\nYou can use a function as an argument to a callable.\n>>> area(triangle_area(triangle_area(3, 2, 1), n))\nn\n>>>\n\nIf you have an array of functions, you can call a function", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return pi * sqrt(a * h)\nThis is very useful. I like the way you explained it as well.\n\nI'm very glad that this is useful to someone. I don't use this anymore since I'm pretty good at trig and geometry, but this was a life-saver when I was starting out.\n\nI love this kind of stuff. The SICP book taught me a lot of things like this. It's been my primary source of reference for a lot of python scripting.\n\nthis is fantastic, and i have to say, a very inspiring tutorial. thank you very much for sharing!\n\nThanks, I'm glad you liked it!</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt((a*a + b*b) / 2)\n\nI am getting an error when I run this code... The error is  \"Option Explicit must be enabled for this code\". What does that mean? I am not very familiar with C++.\n\nThe only option that I see on my computer for this code is \"Debugging\", which is on.\n\nThanks\n\nSheharyar\n\n03-06-2004\n\nb_heyer\n\nOption Explicit means that the compiler must be told that all variable declarations are in fact variable declarations.\n\nMy guess is that you declared your variables in a header file and you are including this header file in your program. You should either include the header file at the top of your program or include it in the code file itself.\n\n03-07-2004\n\ncain\n\nHow about checking your compiler options to see if there is something in there? Also, if you have a look in your project settings to see if there's an option there to enable \"Option Explicit\".</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h - h) / a\nActually, the area of a triangle is \u03c0r^2.\n(Oh, and it's better to put the code in the post, not in a comment).\nCorrect.  I should have specified that the given sides are in meters.  Also, I just realized that I forgot to divide by 2 in the last line.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1 / 2.0 * h * (a - h) / h)\nThis is a great example of what is wrong with the education system.  How does this code do anything useful?\nI think it's a pretty cool exercise in building code to accomplish a goal that is clearly stated.   I'd love to see your code for this problem.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a-b)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*h)**0.5\nOk, but why do you hate me?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*((1-a)**(1/2))\nIs there a reason you're using this weird function and not just using sqrt(a*h)?\nThere is no sqrt() in Python.\nYou can use a library function to calculate it. Or just use floor() to get it to the integer part of the expression.\nI think you can also use the \"sqrt\" library function.\nYeah, that's a better way to go about it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(2 * a * h)\nThis is a bit of a cheat.  `s` is the square root function.  Try calling it with a single parameter instead.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = a*h/2\n    return a/2\nThat's not right. It doesn't return the area of the triangle.\n\nSorry, I'm not a fan of the \"return\" syntax. I think it should be\nsomething like", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    if a < 1:\n        return 0\n    h = (h - 1)/2\n    a = sqrt(h)\n    return sqrt(h * (a - 1) * a)\n\nNot the best, but the most obvious.\n\nI don't understand. How is that \"most obvious\"?\n\nBecause the whole point of this is to find the area of a triangle given the length of a side and the height of the triangle. So, given that:\n1.  x is the length of the side of the triangle\n2.  y is the height of the triangle\n3.  z is the area of the triangle\n4.  h is the height of the triangle, we want the area of the triangle. So, given:\n5.  h = (h - 1)/2\n6.  a = sqrt(h)\n7.  x = sqrt(h * (a - 1) * a)\nz = sqrt(x)\n...the answer should be z.\nThere are other ways to do this, of course, but I was trying to go for", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*h + b*(h-1))/2\nI know that for squares, the only way to do it is to find the area of the square and then divide it by 4.  Why can't this be used here?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h*h/2\nBut how do you know how long the side is?\n\nDoh! You're right.\n\n_Sometimes_ an argument in the function definition is optional. But it's not always clear which ones, so you have to look at the function declaration to be sure.\n\nI think the python docs are pretty good at saying which arguments are optional. It's good to learn to read them.\n\nNo one ever told me the first rule of optional arguments. I always thought that it was assumed that they were required.\n\nI agree. There's no hint that they are optional in the python docs or anywhere that I've seen.\n\nFor those interested, a presentation on what I learned from going through the python tutorial is here:\nIt's an interesting project that I wrote as an excuse to learn python.\n\nI'm going through the tutorial right now.\nI think one of the biggest hurdles I'm facing is that, unlike Ruby, there is no easy way to traverse a large list of objects.\n\nOne of the biggest hurdles I'm facing is that, unlike Ruby, there is no easy way to traverse a large list of objects.\nI like how", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * 2.0) / a\nTriangle area can be defined recursively, as well:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - 1) / 2\n\nHi, I'm wondering if you would mind sharing how you solved this problem? Thanks!</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    h = (h, h)\n    return (h ** 2 / (h ** 2 - h ** 2) for h in range(2, 3))\n\nTo get the area of the triangle with the given length and height,\nyou can use:\n\n>>> triangle_area(5, 3)\n7.5\n\nIf you don't care about the height, you can also use:\n\n>>> triangle_area(5)\n7.5\n\nAnother approach would be to take advantage of the fact that the area of a\ntriangle is proportional to the product of the lengths of its sides. This\nis true for all triangles, regardless of the angles of the sides.\n\n>>> sqrt(3 * 3)\n1.728\n>>> area_of_triangle(5, 3)\n>>> area_of_triangle(5, sqrt(3))\n7.5\n\nFor a more sophisticated way to solve the problem, you might want to try the\nSOLVER or CALCULATOR modules.\n\nHTH,\n\nD.\n\nOn Mon, Nov 9, 2009 at 12:41 PM, Eric Sjober", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * h)\nLooks like a good candidate for a function template!\n> def triangle_area(a, h):\n> \"\"\"Given length of a side and high return area for a triangle.\n> >>> triangle_area(5, 3)\n> 7.5\n> \"\"\"\n> return sqrt(a * h)\nThat's a function, not a function template. A function template would\ntake a template parameter for the side of the triangle.\n> class Triangle:\n> \"\"\"Triangle class which returns the area of a triangle given the\n> length of one side and the height of the triangle.\"\"\"\n> def area(side, h):\n> \"\"\"Given side and height return the area of a triangle.\n> >>> from triangle import Triangle\n> >>> Triangle(5, 3)\n> 7.5\n> \"\"\"\n> return sqrt(side * h)\nI didn't read the entire thread, so if I'm repeating anything,\nplease forgive me.\nIn general, I believe that (I think I'm using the right terminology\nhere) a function template is something which takes a template\nparameter (a variable that can be of", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2.5 * h/a, a * h/a)\nWow. That's a nice function.\n\nI am wondering how can you make your code smaller by using a loop instead.\n\nIt's the same code, but hidden in a function.\n\nWow. That's a nice function.\nI am wondering how can you make your code smaller by using a loop instead.\n\nIt's the same code, but hidden in a function.\n\nRight. I was thinking about some macros or something, not a function.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    if h == 0 or h == 1:\n        return 0\n    else:\n        return math.pi * (a - h)\n\n    def area(b, h):\n    \"\"\"Given length of one side and high return area for a triangle.\n    >>> area(5, 3)\n    7.5\n    \"\"\"\n    if h == 0 or h == 1:\n        return math.pi * (b - h)\n    else:\n        return triangle_area(b, h)\n    return area(b, h)\n\n[EDIT: Changed a comment that was clearly wrong.]\n\nThe trivial solution is to make it so that `triangle_area` takes an `h` argument.\n\nYeah, I realized that too late. I was just trying to get something to work, and the guy I was talking to just kept asking, \"what's wrong with this, what's wrong with this\", etc.\nI'm just a beginner and he knows", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a ** 2\nThe triangle_area function has a simple bug:\nThe area of a triangle is not always the area of the largest side.\nEdit: a better way to phrase the bug would be:\nThe area of a triangle with non-right angles is not always the area of the largest side.\n\nIt is in the context of this problem.\n\nI like this explanation (in code): \n\nI was a math major and I found this exercise super interesting and fun. It's a good example of how different disciplines can help you think differently and in turn help each other.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h\nWell, that's embarrassing.\nYou forgot the return value.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 1 - pow(2, h**2/2)\nThis is Python, not C.  And it's Python 3, so pow isn't the same as pow in Python 2.  So, without checking the rest of your code, you should fix this.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt( (1.0 - 1.0)/(h*h) )\nHeh. Reminds me of \"a=0 for h=0\".\n\nI thought of that too, but the rational function was rather entertaining.\n\nAm I wrong or is the surface area of a triangle equal to 1/2 * base * height?\nIt looks like this:\n\nI think it's better to describe it in terms of the area of a square, and the sum of the areas of the triangles (which are themselves squares).\n\nWhat the hell is this doing on the front page? This is an absolutely trivial algorithm.\nThe important thing to realize is that the area of a triangle is 1/2 base * height. The easiest way to see this is to calculate the area of the square and compare it to the area of the triangle.\n\nI disagree, the algorithm given in the article is very nice. It avoids having to calculate the area of a square and compare it to the area of the triangle. Also, it's useful to have a function which returns the area of a triangle.\n\nI really liked the analogies for the various triangle types.\n\nI am curious", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (0.5*h/a)**0.5\n\nNice, I don't have to memorize the formula.\n\nI'd recommend learning how to use the Wolfram Alpha computational knowledge engine.\n\nI have a feeling this is going to get a lot of upvotes.\n\nCan you please add links to the references?\n\nDone. Thanks!\n\nDefinitely useful, thanks.\nI'm still very partial to visualizing it on a unit circle.\n\nHeh, did the same thing a while back: \n\nThis is great, thanks. Is there a way to make a small animation of the movement of the points on the unit circle?\n\nYou could probably use the python animation library to do it.\n\nAlso, you can use python's subprocess module to invoke imagemagick.\n\nFor me, the best way to learn something is to actually solve a problem using it.\n\nI had a small unit test:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    def triangle_area_h(a, h):\n    \"\"\"Given length of a side and height of triangle.\n    >>> triangle_area_h(5, 3)\n    7\n    \"\"\"\n    def triangle_area_h(h, a):\n    \"\"\"Given length of a side and height of triangle.\n    >>> triangle_area_h(5, 3)\n    9\n    \"\"\"\n    return a*h*(h-a)\nHow does this work?\n\n\"Triangle_area(a, h)\" is the same as \"Triangle_area(a/h, h)\"\n\"Triangle_area_h(a, h)\" is the same as \"Triangle_area_h(a, h/h)\"\n\"Triangle_area_h(h, a)\" is the same as \"Triangle_area_h(a, h/h)\"\nThe function \"triangle_area_h\" takes a side and returns the area of the triangle with that side. But if the length of the side is missing, then", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 7.5\n    I'm sorry, but if you're going to use python, why would you do this in the first place?  There are better ways to do this.\nWhat's wrong with doing this in Python? It's not meant to be a serious program, and I thought this was pretty elegant.\nIt's actually pretty bad code.  You're making a list of arrays with a function call to an operator, then casting them back to a single array.  You could accomplish the same thing with a single list comprehension and a single line of code.  I'm not trying to pick on you, but this is something that every beginner does when they first start using python.  It's good to know these things so that you don't get used to bad habits.\nI don't really see that as bad. It's a few extra lines but the code is more readable and he's using an operator that makes sense. I'll take \"a few extra lines\" over \"needlessly obscure syntax that's only good for looking smart\" any day of the week.\nIt's not needlessly obscure syntax at all.  This is basic list comprehension and tuple unpacking.  It's actually very", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = a\n    h = h\n    x, y, w = h/2, h/2, h/2\n    if x == 1:\n        h = 2\n    else:\n        h = 1\n    return (x/h, y/h, w/h)\nCould be a little more elegant, but it does the job.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    area = sqrt(2 * a * a + h * h)\n    return math.sqrt(area)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\nAh, Python. How I love you.\n\nFor some reason, I initially thought this was a function that finds the area of a triangle using the Pythagorean Theorem.\n\nI thought it was a function to calculate the area of a triangle using a piece of paper and a pencil.\n\nI thought it was a function to calculate the area of a triangle using a pizza and some cheese.\n\nI thought it was a function to calculate the area of a triangle using a radio and a paper clip.\n\nI thought it was a function to calculate the area of a triangle using a phone and a piece of string.\n\nI thought it was a function to calculate the area of a triangle using an Apple Newton and a pizza.\n\nI thought it was a function to calculate the area of a triangle using a TI-82 graphing calculator and a piece of string.\n\nI thought it was a function to calculate the area of a triangle using a graphing calculator and a piece of string.\n\nI thought it was a function to calculate the area of a triangle using a calculator and a piece of string.\n\nI thought it was a function to calculate the area of a triangle using a calculator and a piece of", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (sqrt(5) * h) / 2\n    # Hint: return the sqrt of the length of the sides\n    # and the height of the triangle.\nSeems to work, but not sure if it's the best way to do it.\n\nOr maybe this one:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 0.5 * (h - a[0] * a[1] + a[1] * a[2] + a[2] * a[3])", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(5 * math.sqrt(3))\nWhat is the purpose of the 2nd sqrt there? Is it just to make the return value a floating point number?\nMore importantly, it has nothing to do with the area of the triangle.  That's going to be the area of a rectangle (side length) with a right triangle at the top.\nI believe you mean a rectangle with a right triangle at the bottom.\nNo, I think they meant what they said. If the area is a rectangle, the top of the triangle has to be a rectangle. The bottom of the triangle would be the hypotenuse of the triangle.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\nI think this would be the result of a bug if I had done this:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt( (h/2) * a )\nSeems like a naive solution. You can use it if you want, but it's not really \"the\" way to do it.\nTriangle_area(5, 3)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    return sqrt(a^2 + b^2 + c^2)\n\nAs per the article, the author claims that \"The result is not the largest value of the right triangle in the general case. The largest area is actually 6.067\"\n\nIt's close enough. The difference is 1/1000. What do you care?\n\nIt's 1/1000 if you round down the result to the nearest integer. If you round to the nearest tenth, it's 1/400.\n\nI'd like to see the correct answer for the same problem in C:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * a + h * h)\nI'm not sure what your question is, but you might be interested in learning more about the geometry behind these formulas.\nThanks. I am looking at it now, but it's a very hard subject to me (no pun intended).</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (1 + (h/2 - (h/3)))  #if h>1.5\n    else:\n    return a * (1 - (h/2 - (h/3)))\n\n3.33 / 5 (2 votes)\n\nScreenshots\n\nCode\n\nimport math", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi*(a/2)*(a/h)\nLooks like there's a bug with your definition of pi.\nThat's not an unreasonable definition of pi, it's just not a very useful one.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h/2\nThis is a textbook implementation that works in almost all cases, but the domain of applicability is extremely narrow.\nDon't worry, it's a small code snippet. It's not a big deal. I'm just saying that there's more than one way to do it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2.5 * (h - 1) * a * sqrt(3) + h * a) / h\n    return 0.0\n\nhmm, I guess I need to be more clear. My point is that we can't see the correct answer even with the solution given, but if we know what the correct answer is then it's easy.\n\n\"it's easy\" only if you know the answer.\n\nI didn't. I had to use the method I describe to figure out the answer. But if you know the answer, it's easy.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * a) * (h - a)\nI wonder if the solution is a clever use of lambda calculus.  The only reason I'm wondering this is because of the way the function is written, specifically the use of * to denote multiplication.  It's not a part of the lambda calculus, but it's been used to implement a functional programming language ( Haskell ).  A lot of functional languages have a different set of operators for doing things like the above.\n\nIt's not. It's a trivial recursion.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt( (a * a + b * b) / 2 )\n\nIt seems to me that this is correct, although the code in the article is probably clearer.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h\nThat seems to work.\nyeah I'm not sure why I couldn't get it to work...  when I would do this it would return 3.5</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (\n          floor((a-1)*h) * (a-1)*(a-1)\n           + floor((a-2)*h) * (a-2)*(a-2))\n           + (a-1)*(a-2)*(a-1)\n           + (a-2)*(a-2)*(a-1)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    area = (a / h) * h\n    return area\n\nTriangle_area(6, 3)\n\n>>>\n\nI'll give you a more efficient algorithm. It's about as easy to understand, but much more efficient.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h - (a.x - a.h)) * (a.x - a.h)\nDoesn't work for negative lengths\n\nI'm going to go out on a limb and guess that the author doesn't have negative length sides or angles.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * ((a+h)*(a+h) + a*a) / ((a+h)*(a+h))\nHaha, I like this one.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    print 'The area of the triangle is'\n    print '%f' % (2*a*(a+h)/2)\n    print '\\n'\n    return a*(a+h)/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a**2 + h**2\nThat's just the area of a rectangle. What about the area of a triangle?\nMore importantly, what about the area of a rhombus?\n\nYou're right, I didn't notice that. I think the following fixes the problem:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if h <= 0:\n       return 0\n    return (a * h + b * h + c * h) / 2\n\nAre you serious?  You didn't even try to make it look like a real function?\nTriangle_area is not a function. It's a class method.\nTriangle_area is a function. It's defined as a function, and I'm passing it to your program as a function.\n>>> triangle_area(5, 3)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: 'classmethod' object has no attribute 'triangle_area'\n\nHow to do this:\n>>> triangle_area(5, 3)\n7.5\n>>> class Triangle(object):\n...\n...", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h\nAs a more complex example of what you're looking for, consider a simple logarithm.  Try to write an expression for the number that results.  In order to do so, you'll need to represent a number with a base and an exponent (a power).  This is exactly the same thing you need to do when you're trying to calculate area.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (0.5 * a * h)\nSo, the area of a triangle with sides of length a, b, and c is the area of the triangle with sides of length 1, 2, and 3?\nWhat's the point of the first line? It's obvious that the function returns the area of the triangle with sides of length a, b, and c.\n\nIt was probably required to implement the function using the full power of Python and not just a few built-in functions.\n\nYes.\nI didn't want to use any other built-in functions other than basic arithmetic operations.\n\nI'd like to see the math behind this, because I don't understand how you can get the area of a right triangle by just multiplying the sides.\n\nAll you need is Pythagoras' Theorem.\n\nI see, but I'm still not sure how the function works.\n\nThe definition of a triangle is a polygon with three sides of equal length, therefore you don't need to specify the length of the sides.\n\nThat is incorrect. The definition of a triangle is a polygon with three _parallel_ sides of equal length, and is therefore not just a", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 1.0 * ((a**2)**0.5 + h**0.5)/(a**2) + 1.0\n\n\tThat's one way of doing it. But what's the \"right way\" of doing it? If you try to prove that 1.0 * (a**2)**0.5 + h**0.5) / (a**2) = 1.0 you'll have a tough time. And if you try to prove that (a**2)**0.5 + h**0.5) / (a**2) is always between 0.0 and 1.0 you'll have a tough time. And if you try to prove that (a**2)**0.5 + h**0.5) / (a**2) is between 1.0 and 2.0 you'll have a tough time.\nI've got to say I'm surprised that the link submitted was a 4 year old article.\n\nIsn't the whole point of the article that there is no right way?\n\nI am glad there is no \"right way\". I was taught the area formula in grade school, and I am still not convinced it", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return Math.sqrt(a*(h-1) + (h-1)*(a-1))\nIf you had used your brain for more than 1 second, you would have realized that this is not a good example.  This is a circular definition.  This code is not a good example of code golf.  It is a good example of a misleading golfing example.\nThe function name explains exactly what the function does.  It doesn't need to be more complicated than that.  If it's not clear to you, then you need to take a closer look at the definition.\n> If it's not clear to you, then you need to take a closer look at the definition.  I did take a closer look, and my point stands.  It's not a good example.  A better example would be to define a function that returns the area of a triangle with three parameters.  Or a function that returns the area of a triangle with four parameters.  Or a function that returns the area of a triangle with five parameters.\nThe definition is perfectly clear.   It takes a parameter to specify the length of the side and a parameter to specify the height of the triangle.  It", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (0.5 * sqrt(a)) * (2 * sqrt(h))\n    This will return the area of a right triangle if its length is 5 units\n and its height is 3 units.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return [\n         #If x is a, y is h and z is r, return area\n             if x + y + z >= r:\n                    area(x + y, y + z)\n              else:\n                    return 0\n          ]", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sum(a**2 for a in range(h))\nThe OP was talking about the Pythagorean theorem, and you're talking about the formula for the area of a triangle. The two are related, but not the same thing.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / (a + h)\nI don't understand why we would need to reverse this\n`return (a * h) / (a + h)`\nto get the area of the triangle in the first place. Why is this not just a definition of the area of a triangle? \n\nThe triangle is the area of a square. The square is the area of a rectangle. The rectangle is the area of a parallelogram. And so on.\nIt's a \"little\" bit of a shortcut to just say \"give me the area of a triangle\" when you really mean \"give me the area of a square\", but you can still see the base case of the function in there:\ntriangle_area(5, 3) = 7.5\ntriangle_area(3, 5) = 20\ntriangle_area(5, 1) = 8\ntriangle_area(3, 1) = 3.5\ntriangle_area(1, 5) = 16.5\ntriangle_area(3, 5) = 20\ntriangle_area(3, 1) = 3.5\ntriangle_area(3,", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi*(a**2+h**2)\n\nThis is called the Pythagorean theorem (you could also use the secant rule, which is: h = sqrt(a^2 + b^2), but the Pythagorean theorem is easier to remember, especially when you're starting out).\nAnother important thing to remember is that the sum of the square roots of the two sides of a right angle triangle is equal to the square root of the hypotenuse (that is, sqrt(a^2 + b^2) = sqrt(a^2) + sqrt(b^2)).\n\nIt's very useful to memorize these theorems.\n\nNext you should try to work out how to find the volume of a right angled prism. The formula for the volume of a right angled prism is:\nV = l * w * h\n(the l is the length of a side, the w is the width of a side, and the h is the height).\nTo work out the volume of a right angled prism, you need to know how to find the length of the base (the l), the width of the base (the w), and", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(sqrt(a * a * sqrt(a) + (h * h) * sqrt(h)))\nThis is correct, but I do not like the _h_. It's a single-variable function, and the only variable is the length of the longest side. I also don't like the use of the square root symbol; I don't think it's necessary in this case. The return value is a value of type float, so it's not an expression that can be passed to the square root function.\nI find it easier to think about the function this way:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(3*h+2)*h+1\n`\nJust in case anyone doesn't know, this is the correct way to write this.\nThe '+1' is the assumption that the third side is of length 1. In the case where the third side is longer than one, you would get an answer of (2*length of one side) + (length of third side) + length of fourth side.\n\nI used the same technique in my programming interview to solve a question.\n\nI think the problem with your approach is that you have to have the length of the third side of the triangle to solve this problem.\nIn the example the third side is 5 units. If you have the area and the length of the other two sides, it's very easy to calculate the third one.\n\nThanks for posting this. I have been trying to solve this problem in my head for about a week now. I will be using this in my next interview.\n\nIt's a really great problem to have on the whiteboard.\nIt's not terribly difficult (to a CS person) but it can catch someone off guard if you have a question about an area or volume and they're unfamiliar", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return pi * (a * a) / (h * h)\n\nThat's a really nice solution. I have one suggestion:\nWhat if you have a complicated shape where the length of one side is not the same as the other two sides?\n\nThe 'waste' areas are all of the same length, so I think there should be a way of getting an area for the whole shape without needing to work out the areas of each section.\n\nWell, I'm not sure you could use the same function for that. I would make a second function, maybe called area_for_triangle. It would probably return a tuple of three area values (for each corner of the triangle) or maybe two values (for the larger two areas).\n\nThe way you have it now is pretty good, though.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2 * h * (1 - a))\nThis code takes a single argument (the length of a side), but returns two values (the area and the area minus the side). In general, when you return multiple values from a function, they must all be of the same type.\n\nYou should also put some whitespace around your if statements.\n\nCode:\n\n>>> triangle_area(5, 3)\n7.5\n\nBe sure to read the FAQ and the tutorial.\n\nMy code was a bit messy, thank you for pointing it out.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h + 1)) / 2\nI've never understood this style of pseudo-code. Can someone explain the point? Why not just use real code?\nIt's a good way to read and get a quick understanding of the algorithm. When you're not sure what the algorithm will be, or it changes frequently, it's hard to write real code for it. Pseudo-code is a good way to get an initial idea and then build off of that.\nThat's what comments are for.  Of course, real code is a good way to explain _why_ the algorithm works the way it does, and in what case it is not optimal.\nSo why not write a comment explaining why the algorithm works the way it does?\nBecause that's what the real code is for. Pseudocode is good for quickly getting an idea of what the algorithm looks like, but is harder to explain the logic behind the algorithm.\nI think you mean pseudocode.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(1+a*h*a)\nThe problem with this method is that it is too general. This means it can be used for any triangle, not just equilateral triangles. This is quite inefficient.\nI prefer to use this method: \n>>> triangle_area(5, 3)\n7.5\n\nThis algorithm is way too generic. For example, if you are trying to determine the area of a triangle, you would want to use a method that works only for equilateral triangles.\n\nHowever, I think it would be more efficient than the other algorithm.\n\nI'm curious about your use of \"more efficient\" here.\nIf your goal is to compute the area of a triangle as efficiently as possible, you want to write something that can be used on any triangle, because then you can reuse it as much as possible.\n\nI didn't think of it that way. I guess that's a good point.\n\nI was expecting a story about how some guy wrote a program to draw equilateral triangles to demonstrate how awesome his language is.\n\nHeh, I thought the same thing. I was expecting a post about how some guy wrote a triangle drawing program in", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a_length = h\n    area = 0.5 * a_length * a_length\n    return area\n   ...\nTo be fair, that is a good way to do it in Python. It's a lot more clear than the c-style iterative approach.\nAlso, note that the Python version is only 5 lines of code, and the C version is about 15 lines.\nTotally agreed. But in the world of reddit, the shorter the code, the better.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * b * c) / (h * (h+1))\nDid you know that the library function is faster (at least on my system)?      import ctypes      from itertools import cycle      triangle_area(5,3)\nAh!  I didn't.  I am used to that one from my matlab days.  Although I am not sure if it is faster in matlab either.  Thanks for the correction.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*sin(h/a)\nI think you want `arccos`, not `sin` here?\nsin(arccos(h/a))\nYeah, that's what I thought. It would be a bit weird to have a function called'sin' and then have it return something that is not a sine function.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if h == 0:\n        return 0.5\n    else:\n        return (a**2 + b**2)**(a**2 + b**2)\n    return 0.5</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a, h = len(a), int(h)\n    return sqrt(h * a)\nThat's some code I wrote when I was learning Python. I am pretty sure it is not idiomatic, but it is pretty.\n\nIt's idomatic in Python to write a function that always returns the same value for a given set of input arguments, in this case the two lengths of the sides and the length of the hypotenuse.\n\n\"idiomatic\" is a loaded word that I try to avoid using. It's a cop-out, and almost never true. I like to say that code is \"idiomatic\" to a team or organization (e.g. \"Google style\") or that code is \"idiomatic\" to a paradigm.\nEven with that caveat, I am pretty sure that \"triangle_area\" is not idiomatic to Python.\n\nHow about \"best practice\"?\n\nI think the author should have defined \"idiomatic\" as he meant it before using it to argue for anything.\n\nYeah, I'll agree with that.\n\nI don't know what's wrong with this guy, but I just don't get this post.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return Math.sqrt(1/2*(a^2+h^2))\nYou do not return the length of the other side.\nYou're multiplying h by the length of a side.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * sqrt(5 * (h - 2 * a) * (a - 2 * h))\n\nI just typed this in like 30 seconds and I know it's not pythonic, but that's not the point. I just want to know if this is the correct way to do it.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h - 1)) / (h - 2)\n\nI am trying to figure out how to generate this same triangle on the screen.\nI know how to get the area, but not the length of the side.\nIs this possible?\n\nThanks for any help,\nBrian\n\n06-22-2010, 07:03 AM\n\npbrockway2\n\nYou can't.\n\n06-22-2010, 07:34 AM\n\njrrichie\n\nQuote:\n\nOriginally Posted by pbrockway2\n\nYou can't.\n\nIt's not possible? Or you can't be bothered to write it? ;)\n\n06-22-2010, 07:43 AM\n\npbrockway2\n\nQuote:\n\nOriginally Posted by jrrichie\n\nIt's not possible? Or you can't be bothered to write it? ;)\n\nI don't have time to write the program. I can't think of a way to do it in Python.\n\n06-22-2010, 07:46 AM\n\njrrichie\n\nQuote:\n\nOriginally Posted by pbrockway2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    area = area(a, h)\n    return area / (h ** 2)\nIt's almost certainly the case that the area calculation is implemented in terms of the length of the hypotenuse. There's no need to calculate the area of a triangle to find the length of the hypotenuse.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2\n    >>> triangle_area(5, 3)\n    7.5\n\nA more general version of the method is also available:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 1./(1+sqrt(h))\n\nThis function is defined in some places as:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a / h) * b", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    return (a * a) / (h * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt((a*h)^2)\n\nPython only looks at the first line of a file, so you should put the definition for `triangle_area` at the top.\nYou should also notice that `triangle_area` has a side of `5`, and a height of `3`... so where is the `5` coming from?  It should be a good practice to post the exact error message that you get as well.\nSorry, I fixed it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\n    if a > 0 else 0\n\n>>> triangle_area(10, 3)\n10.5\n>>> triangle_area(10, 8)\n30\n\nThis was the most difficult part to get right in my implementation. Once I\ngot it working, it was easy to generalize the solution.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * (h - a) / 2)\n    # Simple way to calculate area of a right triangle", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return pow(a, h/2) * pow(a/2, h/2)\nCan someone explain what this is doing? I'm really curious.\n\nIt's solving the equation:\n(1/2) * (1/2) = 1\nx^2 + y^2 = 1\nThen substituting into the other equation, we get:\nx^2 + y^2 = 1\n1/2 * x^2 + 1/2 * y^2 = 1\nx + y = 1\nx^2 + y^2 = 1\nx^2 + y^2 - 1 = 0\nx^2 + 1/2 * y^2 - 1/2 * x^2 = 1\n0 = x^2 + y^2 - 1\nx^2 + y^2 = 1\nThe equation on the left hand side is the Pythagorean theorem. The equations on the right are the two sides of a triangle. The three solutions are the x and y coordinates of the three points of the triangle.\n\nthanks. i didn't know how to approach this problem.\n\nThe piece of code in question is probably not a good candidate for", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    print \"area of triangle is \"\n            a.sin(h)\n    return a.cos(h)\nI'm confused. The syntax for the function is fine, but the body seems to be doing the wrong thing. Why is it returning the area of the other triangle?\n\nSee this:\n>>> triangle_area(5, 3)\n7.5\n>>> triangle_area(5, 3)\n7.5\n>>>\nArea of triangle is 5.0\nYou're right. I misread the OP's code.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(1-cos(h)*2)\nI really like this.  It's very clear and seems to be very readable.  However, I would think there is a better way to do this.  This is a simple division of a*(1-cos(h)*2) by cos(h) which is cos(h) = arctan(1/2) so we could just do a*arctan(1/2)  It is not as readable but it seems simpler.  Thoughts?\nIt's not a simple division. The function is *exactly* what is required. I have no idea why you'd think it needs to be more complex.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a < 0:\n       return 0\n    if a > 0 and h > 0:\n       return sqrt(a*h)\n    else:\n       return 1 - sqrt(a*h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(2 * (h - a) * a)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * (2 * math.sqrt(h)) / 2\nLooks right to me.\nSo why is it 7.5 in the example and not 8?\n\nBecause that's not what the function is doing.\n\nAh. So the answer is the same, but the function isn't doing what I thought it was.\n\nYeah, it's giving you the area of the \"triangle\" of side length h.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (((a * (a+h)) / 2.0) + h * (a+h))\nIf you want to return the area of a triangle given its length and height, why don't you just do this?      def triangle_area(a, h):\n    \"\"\"Return the area of a triangle given its length and height.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 7.5 * ((a * a) + (h * h))\nThat's all there is to it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = a\n    if h < 1:\n        h = 1\n    return a*h\nIn Python 3, you can use _n_ for this\n>>> triangle_area(5,3)\n7.5\n>>> triangle_area(5,3, _n_)\n7.5\n\nNice!\n\nNow I can finally calculate the area of my favorite shape, the pentagon.\n\nThat's a pentagon.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return ((h * h) - 2) / (h * h)\nTriangle area is the same as the area of the square with base equal to the length of a side of the triangle. You can calculate the area of the square with the following code:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*(h+a))/2\nYou can also use a dictionary.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi*(2*a + h/2)\n\"Length of a side\" doesn't make any sense.\nIt is very common in maths to refer to the length of the side of a triangle.\nA more sensible Pythonic way of phrasing that would be:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * (a[0] * a[1]) + h * (a[0] * a[2]) + h * (a[1] * a[3])) / 3", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\ntriangle_area(a, h)\n    \"\"\"\n    return pow(a, (h-a)/2)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a) * h\nWorks for all sides.\nYou forgot to include the other parameters.\nI was trying to show that the code is dumb, and doesn't check the other parameters.\nTriangle area = sqrt(a*a) * h  This is correct.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return [sum([h**2 for h in range(a)]) for h in range(h)]\nThanks! I missed that. I was thinking that I could use the fact that I know the area of a triangle to find the area of a smaller polygon.\nYou can find the area of a polygon with a known perimeter by calculating the area of the triangle with area equal to the area of the polygon divided by the perimeter of the triangle.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    def area(x):\n    \"\"\"Given a coordinate and length of a side, return area.\"\"\"\n    if x < 0 or x > h:\n        return 0.0\n    area = 1.0*(x - 0.5)**(x - 1.5)\n    return area\nI would like to see some examples of code that have the same syntax but different semantics.\n\nI don't understand your point, that the code is unreadable?\n\nYes. And the code is a terrible use of Python's features, anyway. It could be written much more concisely in Python 3 with a few modern Python 3 features.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a == 3:\n       return a * h\n    return a * (1 - h / (2 * h))\nTriangle area is only defined on an equilateral triangle.  Thus, we can simplify this to:       return a * (1 - (h / 2))\nI think this is not a good way to think about it. It is much better to think about the cost of taking three steps on a triangle of side length a.       return a * (1 - (h / 2))  Is a much better approximation of the above.\nI agree. I just wrote it that way because I thought it would be easier for beginners.       return a * (1 - h / 2)  is a much better approximation.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (\n        sqrt(a*a + b*b)\n        * sqrt(h*h + c*c)\n        )\n\ntriangle_area(5, h)\n\ntriangle_area(5, h)\n\ntriangle_area(5, h)</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if h > 0:\n       return (a ** (h-1))**(1/2)\n    else:\n       return 0\nI'm having trouble understanding this code.  What is the return value of this function supposed to be?  I tried fiddling with it in Pythonista and I couldn't get a value to come out.  Also, I don't understand why h is declared as a parameter and not just used as a local variable.  I'm sure I'm missing something.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(h * a)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if h <= 1:\n        return a\n    else:\n        return (h/2)*a*a\n    a = 1.5\n    b = 2\n    h = 2\n    print triangle_area(a, b, h)</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    \"\"\"\n    return 2 * pi * a\n    \"\"\"\n    def square_area(a, h):\n    \"\"\"Given length of a side and high return area for a square.\n    >>> square_area(5, 3)\n    4\n    \"\"\"\n    \"\"\"\n    return 4 * pi * a\n    \"\"\"\n    def rectangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a rectangle.\n    >>> rectangle_area(5, 3)\n    1.5\n    \"\"\"\n    \"\"\"\n    return 2 * pi * (a - h)\n    \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 7.5\n\n(I used to know this one, but it's been a while since I've needed it.)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a_length = int(a[0])\n    h = int(a[1])\n    return (a[2]*a[2]*h) - (a[3]*a[3]*h)\nFor instance,  returns\n10 - (5 * 3) = -5\n\nThat's interesting, because that's the same algorithm I use to calculate the area of the square with side length 1.\n\nI know this is far from optimal, but I always just convert it to a rectangular area (with width being one side and height being the other) and then back to a triangle.\n\nYou mean this?\n\nYes.\n\nNeat! I have this same little function that I used to call \"complete_triangle\" and it works exactly the same way. Nice to see it implemented in Python.\n\nSo in terms of readability, this is not a good solution. It's not that it's hard to read, just unnecessarily verbose.\nIf you write (instead of the original)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * math.sqrt(2 * a * h)\nI like the simplicity of this approach, but why is there no mention of the fact that this is a closed form expression?\nYou're right. It's my first submission to r/math, I've always seen closed-form expressions to be a bit too obvious, but I'll make sure to mention it next time.\nI think the reason it's considered important is because it's a nice way to give readers a nice connection between the different forms of the same function.  If you're familiar with the closed-form and you know the general form of the open-form, it's very natural to want to understand the relationship between the two.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(h) / math.sqrt(a)\nIt's actually easier to use 'h' (height) instead of 'a' (area)\n\nI'm not sure I see your point. The function he wrote is correct and produces the correct value.\n\nI was just explaining how to implement it for non-programmers that stumble across this thread.\nThe function is fine, it just reminded me of the definition of area of a triangle for some reason.\n\nActually I was looking for the formula. I am familiar with both algorithms, but the formula for finding the area of a triangle is not so trivial as I though.\n\n<\n\nInteresting, I have not seen that formula before.\n\nIt's a standard formula for \"teacher-style\" area calculation.\n\nWhy not just use math.sqrt(h) / math.sqrt(w)?\n\nWhy not just call this area?\n\nBecause area is area and this isn't area?\n\nI'm pretty sure he was being sarcastic.\n\nI was indeed.\n\nI was too.\n\nDon't forget to consider the 3d case:\n\nLet", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*a/2\nyou should probably change this to use the fact that the area of a triangle is one third of the base times the height.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h*sqrt(a^2-b^2+c^2))/2\nI'm guessing you're using python. If so, you might want to consider using `float` instead of `int` since you're dealing with floating point numbers.\nI think it's more likely that he's just using it for demonstration.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    if a < 0 or a > h:\n        return False\n    return a * h\nSo what would you use that function for?\n\nGiven the amount of upvotes it received, I think there is something I'm missing.\nIt's a joke on the wording, rather than the functionality.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a*a + b*b + c*c)/2\n\nThere are no restrictions on a, b, and c, so this function can be called with one argument (in which case it returns the area of a triangle with a side length of 1), or it can be called with more than three arguments (in which case it returns the area of a triangle with a side length of 1 and one corner at the origin and the other two corners on the unit circle).</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*a*h\ni hate python sometimes.\nPython is nice for small, one-off programs and maybe some of your own projects. But a lot of times you need to write programs that will be used by others. I don't want to have to have some kind of documentation explaining what *every* function does and why.\nUh, no, you don't. If you're not smart enough to understand the code you read, I'm sorry.\nI don't want to have to explain to people why I have to pass three arguments to a function that only takes two. And it's not like it's hard to do this.      def area(a, h):\n    return a*a*h\nOr even better, just write the function as      def area(a, h):\n    return a*a*h</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * (a - 1)) / 2\n    def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * (h - 1)) / 2\nIs this a trick question? If not, what is the question?\n\nThe question is: \"What is the significance of the assignment of 'h' to a and 'a' to 'h'?\"\nThe triangle_area() function is a poor choice for the question, as it isn't symmetrical, and a is not symmetrical to h.\n\nMy guess is that the assignment of the variables is just a little bit of misdirection and a distraction from the really important question.\n\nA and h are not symmetrical (h is not a multiple of a).\n\nThe trick is in the fact that h is not defined.\n\nThe trick is in the fact that h is not defined.\n\nHm, maybe...", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (\n        if abs(a) == 1:\n             return (2*a) * (a - h)\n         else:\n             return (a * (a - h)) / (a - h)\nI would use a Pythagorean triple to get the length of the hypotenuse.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return [\n    h * a.h + a.w * a.w,\n    h * a.h - a.w * a.w,\n    h * a.h + a.w * a.w + a.h - a.w * a.w]", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a > 0:\n       return (h*a + a) * (a/h)\n    else:\n       return (h*a + 0) * (a/h)\nThat's for a square, not a triangle.\n\nand then for triangle :", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return Math.sqrt(h/2)*a^2 + h*a*h\nBut I'd recommend to try to define your own functions. They'll be more clear and concise.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h/2) * (a + b - a) / b\nIn this case the output is 7.5.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a!= 0:\n        return h*a\nI've always wondered how other people got around this. I always used the brute force approach. I always wondered if there was a more elegant way to solve it.\nIsn't the brute force approach the elegant one?\nIt's the most efficient</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    area = (h/2) * a * sin(a)\n    return (a * area) / (h * area)\nI think your base is missing the 2, unless you meant the high side.\nIt's possible he's in the southern hemisphere.\nMaybe he's an alien?\nMaybe he meant circumference?\nMaybe he meant the arctangent of the chord?\nMaybe he's a triangle?\nMaybe he's a triangle who has just been told his area is equal to his volume?\nMaybe he's a triangle that just found out that his volume is equal to the area of a circle, divided by the radius?\nMaybe he's a triangle with a very small radius?\nMaybe he's an alien triangle?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2 * a) * (h - length)\n\nthis is pretty bad... I hope you're being facetious</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * h)\n>./triangle_area\nTraceback (most recent call last):\nFile \"\", line 1, in?\ntriangle_area.py:1: undefined method `sqrt' for `T'\n\nUse numpy for your calculations.\n\nHe was using numpy.\n\nOh, I missed that.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * ((a * h) + (b * h)) / 2\n    # or Math.sqrt((a*b + h*h) / 2)\n    def area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> area(5, 3)\n    18\n    \"\"\"\n    return math.pi * (a * h) / 2\n    # or Math.sqrt(a*h)\nI'm no expert, but why would you want to do that?\n\nIn JavaScript, you would be able to call it like this:\ntriangle_area(5, 3).toString()\nAnd it would return \"7.5\" (because math.sqrt is not implemented by JavaScript) or \"18\" (because math.sqrt is implemented by JavaScript).\nOf course you could also write a method that accepts both, but if you're making the decision about whether to accept both or just one, the choice is obvious.\n\nOf course. But what's the point of being able to call a method", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (r * a) * (h - 1) / 2\nyou can also use other solvers like BFS\n\nThanks for the reply, I will definitely try that.\n\nBFS and DFS are not really \"solver\" but search algorithm. Also there is an algorithm called \"breadth-first search\" which is different and is used in graph algorithms.\n\nHN is a news site. I don't think it was correct for it to be flagged.\n\nI would think HN is for \"anything that gratifies one's intellectual curiosity\". The title does say \"algorithm\", though.\n\nA good book on this is Introduction to Algorithms.\n\nBut, but, but, that book is too big for my hand to carry it. :(</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(1.0 - (h/2.0)**.5)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h\nThis is so much better than the other code I see in here. I'm not even a C++ programmer and I know this is an improvement.\nI'm not a C++ programmer either. I'm a beginner in C++ and I don't know what is going on here.\nHe made a function to calculate the area of a triangle, and named it \"triangle_area\". If you're a beginner, you probably don't know what the definition of a triangle is, so this is actually a really useful function. It's just very well named.\nHaha, I like how you described the function to him.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    # a\n    return area(a)\n    # h\n    return length(a/h)\nFor the lazy:  area(a) =  h*(a+h/2)\nI was even lazier than that.  I tried to figure it out before I posted the code, and when I couldn't, I googled it and copy/pasted it in.  But thank you, since I probably wouldn't have bothered to look it up.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h*a)*(2*a*(a+h))\n\nEDIT: Corrected the expression.\nEDIT 2: I tried to simplify it more, but it just doesn't work out.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(h * (3 - a))\nDoesn't it make more sense to just return sqrt(a)? That way you could use this function to calculate the area of any triangle, not just a right triangle.\nThe difference is very small, so it doesn't matter.\nYeah, I guess you're right. That would be more general but in terms of efficiency, you're right, it probably wouldn't make a big difference.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a+h*h)\nThis is not quite correct. What about acute triangles? They have area less than their hypotenuse, but this function will give you the correct answer.\nOh, I see. You're right. I'll fix that.\n\n edit: fixed. But I don't think that it's particularly important. The function will return the correct answer in any case.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (0.5 * (a.length + (2 * h)))\nIf this is your solution to that question you're a bit late to the party.\nI know, but I just started doing these.  I figured it was better than nothing, and I think I learned a little from doing it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return len(a), (len(a) * h) / 2\nNote that this is not a special case for a right triangle.\n\nThat's correct, but it is extremely inefficient.\n\n(1) What's inefficient?\n(2) What's your alternative?\n\nIt's inefficient because the loop terminates prematurely, in the inner for loop.\n>>> triangle_area(5, 3)\n7.5\n>>> triangle_area(5, 3)\n5\n>>> triangle_area(5, 3)\n5\n>>> triangle_area(5, 3)\n5\n>>> triangle_area(5, 3)\n5\n\nIt is inefficient, but I suspect that the constant factor is so small (1/3) that it may not matter in practice.\n\nInteresting article, but the title is a bit misleading. The \"minimum number of lines\" is really the smallest number of vertices required for the desired result. The article gives some good examples of this, but I think the main use case for this is in 3d graphics.\nI'm still trying to wrap my head around the formula, so I don't know how efficient it is.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2 * a * h)\nThey didn't even bother to use the exact same variable names in the assignment\nfunction as the original function, which would have made it slightly less\nunreadable.\n\nUgh, that's _terrible_. I think I just threw up in my mouth a little.\n\nIt's fine to use variables like that, but you need to define them, like:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if h == 0:\n       return 0\n    if h == 1:\n       return a*a*a\n    if h == 2:\n       return a*a*a*a\n    if h == 3:\n       return a*a*a*a*a\n    if h == 4:\n       return a*a*a*a*a*a*a\n    if h == 5:\n       return a*a*a*a*a*a*a*a\n    if h == 6:\n       return a*a*a*a*a*a*a*a*a\n    if h == 7:\n       return a*a*a*a*a*a*a*a*a*a\n    if h == 8:\n       return a*a*a*a*a*a*a*a*a", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h + 1)) / (2 * h)\nThere, I just saved you from reading the article.\nExcept that you are assuming the triangle is isosceles.\nTrue.  As others have pointed out, the wikipedia page explains how to work out the formula in the article.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * math.sqrt((h * length(a)) + 2 * length(a) - h)\nWell that's ugly...</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a - h) * h\nThis is more like \"see how much of the hypotenuse you can shave off before it's no longer a triangle\", right?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 7.5 * (h - a) / (h - 2)\nI have no idea what you're trying to do, but this doesn't seem to be correct.  There are lots of solutions for this problem, but this doesn't seem to be one.\nI have no idea what this is either, but it's what he was asking.  And I don't see any place where he's asking for \"correct\" solutions.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\nreturn h * a", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 2*a*h/3\n\nYou can also use numpy to compute it:\n>>> import numpy as np\n>>> a = np.arange(0, 4)\n>>> h = np.arange(0, 2)\n>>> a = np.dot(a, a, 0)\n>>> h = np.dot(h, h, 0)\n>>> area = np.triangle_area(a, h)\n>>> area\n7.5\n\nWhat is the best way to deal with the difference in precision in floating-point numbers here?\n\nI think you are being too picky. The precision differences are so small that it will not matter in 99.9% of cases.\n\nIt depends on the use case. If you are doing scientific work, it can matter. In the case of the article, if your triangle has one side of length 2 and one side of length 3, it will give you an answer that is one pixel off.\n\nIt really doesn't depend on the use case. Do you have any evidence to support the claim that in scientific work it matters?\n>If you are doing scientific work, it can matter. In the", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pow(h, 2) * math.pow(a, 2)\nThe return type of triangle_area() is wrong. The return type should be \"int\" not \"math.pow(...) * math.pow(...)\". Also the output is not the expected result (11.5, not 7.5).\n\nIf you use Python 2.4 (or later), use a non-broken version like this:\nfrom math import pow\ntriangle_area(a, h) = pow(h, 2) * pow(a, 2)\n\nIf you use Python 2.2 or earlier, you might want to use this (if you are ok with using a broken version):\nfrom math import pow\ntriangle_area(a, h) = pow(h, 2) * pow(a, 2)\n\nIs there a standard Python library for working with math?\n\nYes, there are a number of libraries, including:\nmath for math, trig, and stats\nnumpy for linear algebra\nscipy for scientific computing\nscipy.special for special functions\nscipy.linalg for linear algebra", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a[0] * a[1] * a[2])\nIt's a cool exercise, but I don't see any practical use for that.\nI see a lot of practical uses for it, but it's hard to list them all.\n\n How do you calculate the length of the hypotenuse? You'd normally\nuse Pythagoras, but how do you find the hypotenuse of a triangle\ngiven only the length of a side? You can use an existing triangle\nto draw the hypotenuse, but how do you find the side length of an\nexisting triangle?\nYou can use the Pythagorean theorem, but what if you don't have\nthe theorem memorized?\nThere are probably a few hundred ways you could use this, but I think\nthe best example is in real-time graphics. If you're drawing a\ntriangle on the screen you could use the length and area to calculate\nthe velocity and acceleration to draw the triangle.\n\nIt's not a cool exercise. It's the simplest way to implement this. The interesting part of this question is not the answer. The interesting part is to figure out how to solve it.\n\nI'm", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h - 2)) / 2\nThis is not a good algorithm.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return area(a, 0, h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h / 2)) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(math.pow(2, a, h))\nThe first error here is that you are passing in a side length as a parameter to a function named \"triangle_area\", but this function does not accept a length as a parameter.  If you want to pass in a side length to a function, you need to call that function with parentheses, like this:        triangle_area(5, 3)(2, 3, h)</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a == 1:\n        return a\n    a = int(a)\n    return a * (a + b) * h\nAre you even trying?  He said Python, not C.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    return [a*(h-1)/2 for h in range(1, h)]\n\n    def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    return [a*(h-1)/2 for h in range(1, h)]\n\n    def area(triangle, side):\n    \"\"\"Given a triangle and a side.\n    >>> area(triangle, 2)\n    2\n    \"\"\"\n\n    return [triangle[0][side]]\n\nPython 3", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt( (a.x*a.x) + (a.y*a.y) + (a.z*a.z) )\nThat's one of the correct answers, but it's not correct in that it doesn't return the correct result.  The correct result should be 6.25.  The only way that function is going to give you an accurate result is if you enter the exact dimensions you're looking for.\nYou should be checking the return type of a function before calling it.\nYou should be checking the return type of a function before running it.  FTFY\nYea.  I'm just talking about the code itself, not the code in the actual program.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n\n    return (h/2.0)*a*(1-a**2.0**(1/2))+h\nFrom the chapter \"Approximate mathematics\", page 57 in _Essentials of Computational Mathematics_ by Neff, A. A., and Sano, T.\nThat's a really good book. I recommend it to anyone trying to learn a little bit about numerical methods.\nI am currently in a class using that book, and I agree. It's a really great book.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(h * a / 2)\nI'm not sure I understand what you're trying to achieve here.  You're taking a circle and moving a square across it so that all sides of the square are equal to the radius of the circle, right?  You'd then get a triangle with an area of sqrt(2 * radius), right?  That doesn't look right.\nYes, you are right. But, area of circle is pi, so why not this square?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    def r_sq(x):\n    \"\"\"Given a length and area of a side, return the square of that length.\n    >>> r_sq(6)\n    6\n    >>> r_sq(6, 3)\n    18\n    \"\"\"\n    return (sqrt(a**2) / h)**2\n    def s_sq(x):\n    \"\"\"Given a length and area of a side, return the square of that length.\n    >>> s_sq(6)\n    36\n    >>> s_sq(6, 3)\n    108\n    \"\"\"\n    return (a**2)**2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2\n    return area\nYeah, that's a bit more readable.  One thing that always annoys me though is the overuse of the equals sign.  \"Triangle area\" is not a function, it's a function call.\nI'm inclined to agree.  One good thing about the Python way is that we can say      from math import isinf  instead of      from math import *  or      from math import * as isinf  It's a minor thing, but it's nice to not have to import the entire module for just one function.\nIn many languages (Ruby included) you can also use '%' to expand to all the available functions.  This way you don't have to import the module (if it exists), and you can use the % function to call any function within that module.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h + h*a*h + h*(a*(h-1))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * h)\nIf you're using python 3 you should use:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if len(a) == 2:\n       return a*h\n    else:\n       return int((a.sum())/h)\nThis is a stupid question, but how do you make a list of only 2 values?\nThis might be a stupid answer, but you don't.  The most natural way to handle this problem is to use Python's built-in slicing to grab the length of the side, and the area of the triangle, and calculate the area as a double integral.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (5 * a) / (h - a)\nThat's a lot of code for a pretty simple function.\n\nYeah, I did it in 3 minutes.\nIt does look a bit ugly. I should've done it better.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    #sqrt(2)*h\n    return sqrt(2)*h*sqrt(2)*sqrt(2)*sqrt(2)\nlol, I knew I was going to get one of these.  I don't think I could explain the error I make without giving away what I'm doing.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * sqrt(h) - a) / (h - 1)"]]