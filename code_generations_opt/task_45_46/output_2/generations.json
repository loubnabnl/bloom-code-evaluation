[["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*(h-a)**2)\nThere is a minor bug in your code. The return value should be in the range [0, 1] and not [0, 2] (unless h is negative).\n\nI'll just add that this is a very common programming error. A lot of times people will take the limit of a function without thinking about it.\n\nI'm not sure I understand what you mean by \"take the limit of a function\".\n\nThis is a common mistake that I see a lot of people make, and I've made it myself. I've found it's easy to fall into the trap of thinking that the range of a function is the same as the range of its output.\nThe function you're calling has an input range of [0, h), where h is the length of the side of the triangle. The range of the output is the same, but the range of the output value is [0, 1]. If you call it with a value of h=3, you'll get a return value of 1, because the range of the output is [0, 1], and the range of the function's input is [0, 3].", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/(2*a)\nThis is a good example of why you should use a function name that describes what the function does.   It would be much better to name it something like \"area_of_a_triangle(a, h)\".\nI agree with you, but I think the important thing to take away from this is that the function works.  The name is irrelevant.\nIt's not irrelevant.  It's not important that the function works.  It's important that the function is named properly.\nI think this is more of a pedantic issue than anything.  The function is named properly.  It does what it says it does.  It is not a function that you would use in a professional environment, so why does it matter what the function is named?  The function is not important.  The fact that it works is.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h\nThe only thing I don't like about this is that it's not obvious to me that the length of the hypotenuse is not passed in.\nIf I were to use this, I would probably have to write a comment like \"returns the area of a right triangle with side length 5 and height 3\" to make it clear what the function does.\n\nI don't know how to say this without sounding like a jerk, but it seems like you're just being pedantic.\n\nI'm not sure how to say this without sounding like a jerk, but you are being pedantic.\n\nThe problem with this is that it's not clear what the parameters mean. For example, what does \"a\" mean? Is it the length of the hypotenuse? The length of one of the legs? The area of the triangle?\n\nI understand that the author probably doesn't want to spend the time to write out the whole definition of the function, but this is a really bad way to go about it. The problem with this is that it's not clear what the parameters mean. For example, what does \"a\" mean? Is it the length of the hypotenuse? The", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / (a + h)\nThat's a great algorithm.\n\nThe link to the source is broken.\n\nHah! I was wondering why I couldn't find it. I changed the name of the module to be more explicit, but forgot to change the link. I'll fix it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / (h * h)\nI'm not sure why you're getting downvoted. This is a good answer.  In fact, this is how the Python standard library implements it (except it doesn't return the area).\nI'd be curious to see how much faster it is. I'd think it would be faster to multiply two numbers together than to do a division.\nMultiplying two numbers together is a lot faster than doing a division.  But the division is still pretty fast, and it's not as if you're going to be doing it millions of times in a tight loop.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h\nI don't understand how this works.\n\nI'm not sure if this is a joke or a serious question.\n\nI don't think it's a joke.\n\nIt's a joke.\n\nI don't think so.\n\nI think you're right.\n\nIt's a joke.\n\nYou're right.\n\nIt's a joke.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / 2\nI have to say that this is a pretty clever way to do it.\n\nI don't get it. It's not an interesting way to do it, it's just a way to do it.\n\nI think it's interesting because it's clever.\n\nI guess I don't see how it's clever. It's just a way to do it. It's not clever to take a square and cut it in half.\n\nI think the problem is that you're thinking in terms of the mathematical definition of \"triangle\" rather than the geometric definition.\n\nOh, I see, so the _area_ is the same. That's clever.\n\nIt's not clever, it's just correct.\n\nI can't see how this is correct.\n\nThe area of a triangle is the sum of the areas of its three sides.\n\nRight, but that's a square.\n\nIt's a square _with sides that are all of length a_.\n\nIf you're going to be that pedantic, you might as well say it's a square with sides that are all of length _a_, rather than _a_.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (0.5 * (a * a) + 0.5 * (a * b) + 0.5 * (a * c)) / (2 * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a / 2) * a\n\nThis is not correct. The correct answer is 7.29.\n\nI'm a little confused about the problem, but here's a solution:\n\n>>> def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (h * a / 2) * a\n\nThis is not correct. The correct answer is 7.29.\n\nI'm a little confused about the problem, but here's a solution:\n\n>>> def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (h * a / 2) * a\n\nThis is not correct. The correct answer is 7.29.\n\nI'm a little confused about the problem, but here's a solution:\n\n>>> def triangle_area(", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a*a)\nI think this is the correct answer.\nThere is an implicit assumption that the triangle has right-angled sides, but I guess this is true for the given example.\nI would use the same reasoning as you, but I would use the fact that the area of a triangle is the sum of the areas of the three sides.\nThat's a good point.  I like that better than mine.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a-h)/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(((h * a) / 2) * (h * a))\nYou should probably use `2 * sqrt(a)`.\nIt's the same thing, but not quite. The original formula will return the same answer for triangles of equal area but with different side lengths.\nI didn't realize that. I'm surprised that it's not more obvious that the two formulas are equivalent.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*h) / (a+h)\nThis is not correct.\nIt is correct if you're using the Pythagorean theorem.\nNo, it's not.  You're missing the point.  If you're using the Pythagorean theorem, then you're not using the triangle_area function, you're using the Pythagorean theorem.  That's what the Pythagorean theorem is for.  If you're using the triangle_area function, then you're trying to find the area of a triangle.\nYou're right.  I was thinking of the hypotenuse formula.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h\n    def triangle_area_to_side(a, h):\n    \"\"\"Given side length and high return area for a triangle.\n    >>> triangle_area_to_side(5, 3)\n    3 \"\"\"\n    return (a * h) / 2\n\nIn the second version, the function is named triangle_area_to_side and returns a value of 3. In the first version, the function is named triangle_area and returns a value of 7.5. The first function is named more clearly, but it is not a good idea to name a function in a way that hides its purpose. The second function is named less clearly, but its name accurately reflects its purpose.\n\nThe same argument can be made for a function named get_user_data:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2*h*a*(2*a+h*a) / (2*h*a+h))\nWhat's the point of this?\n\nThe point is to demonstrate that the Python \"triangle_area\" function is broken.\n\nI'm not sure why you think that. The function returns the area of a triangle, and it does so correctly.\nThe function is not \"broken\", it's not the right function to use for the problem at hand.\n\nThe problem is that the function _is_ the right function to use for the problem at hand. The problem is that the problem at hand is wrong.\n\nI see. I didn't understand that the problem was to calculate the area of a triangle.\n\nThe problem is to calculate the area of a triangle in a specific case, that is, a triangle with sides 5, 3, and 2.\n\nI have a couple of issues with the article:\n1\\. The author says that the problem is to calculate the area of a triangle. It's not. The problem is to calculate the area of a _triangle with sides 5, 3, and 2_.\n2\\. The author writes: \"The", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(2*(a-h)**2)\nI'm not sure if this is what you want, but if you're just looking for the area of a triangle, why not just call the built in function?      from math import sqrt      area = sqrt(2*(a-h)**2)\nI was just trying to show the simplest possible example to demonstrate the need for this function.  The built in function is fine for simple cases, but it doesn't work for more complex ones.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(a+h)\nI'm not sure if this is the same as what you're looking for, but I think it might be.\n\nThat's it! I was looking for the formula to calculate the area of a triangle given the length of the sides. I found a couple of solutions, but yours is the best one. Thank you!\n\nIf you are looking for the area of a triangle with sides a, b, and c, then this function will do it:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h\nTriangle_area(5, 3)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pow(a, 2)\nI'd call that a function.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + b*b + c*c)\nI think it should be:\nreturn sqrt(a*a + b*b + c*c) * h\n\nNot sure why you're being downvoted. I think it's a good idea.\n\nI'm not sure why I'm being downvoted either, but I'm glad someone agrees with me.\n\nI was hoping to see some sort of formula for the area of a triangle given the length of one side and the height.\n\nHere's a simple one:\nThe area of a triangle is equal to the area of a rectangle with the same base and height, and the same area as the triangle.\n\nThis is a neat little formula that's easy to remember and useful for a lot of problems.\n\nThe formula is very useful, but I think the idea is to find a formula that's not so easy to remember.\n\nA formula that is hard to remember is not useful.\n\nI think it is useful to have an easy-to-remember formula for something that is difficult to calculate.\n\nI'm not sure I agree. If you have a formula that you can't", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a - 1) * (h - 1)\n\nfor n in range(5):\n    print triangle_area(n, 3)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h/2)*(a-1)**(h/2)\nThe author of the article is a moron.\n\nI think you're a moron.\nThis is a classic example of a \"magic\" function that does a lot of work but is easy to understand. It's the kind of function that makes you say \"why didn't I think of that?\"\nIt's the kind of function you can use to impress your friends (and maybe your boss) without knowing the first thing about trigonometry.\nIt's the kind of function that you can use to create a simple and effective interface to a complex algorithm.\nIn short, it's a beautiful thing.\n\nThe article has the wrong number of parentheses in the function, so it's not even the right function.\n\nI'm not a programmer, but I'm a mathematician, and I can't help but think that the article is full of shit.\nI think the author is confused about what a function is. A function is an abstraction of a mathematical expression. It should be true that the mathematical expression is true, and it should be easy to see how it is true.\nIn the case of the triangle_area function", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * (1/2 + sqrt(2 * (a - h)^2))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * a\nThis is not the most efficient way to calculate area.\n\nWhat would be the most efficient way?\n\nIt depends on what you mean by efficient. The most efficient way would probably be to use a library or C function that already has the answer for you.\nIf you want to do it yourself, you can find the area of a triangle with 3 points using the Pythagorean theorem.\n\nYou're right. I don't know what I was thinking when I wrote that.\n\nI think a lot of the code that was written by people who had no idea what they were doing, or were just copying code from other people.\n\nIt's not that bad, but it's not very good either.\n\nYes, I agree. It's a bit too \"clever\" for my taste.\n\nI like this one.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(3*a*h)\nThis is a terrible way to do this, because it doesn't account for the area of the triangle's interior.\nI'm pretty sure that's the joke.\nI don't think it's a joke.  The author of the post seems to be asking for help with their homework.\nOh, yeah, you're right.  That's a really weird thing to do for homework, though.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * math.sqrt(a*a + h*h)\nI don't get it. You're not using the Pythagorean theorem here. You're just calculating the area of a triangle.\nI think the OP is trying to say that the Pythagorean theorem is just calculating the area of a triangle.\nThe Pythagorean theorem is calculating the area of a triangle using the Pythagorean theorem.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * (a * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2 * a - h, a - h) / h\nThat's a quadrilateral.\n\nOh, I see. So the correct answer is a rectangle.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return 3 * a*h\nI'm curious, how much did you pay for that algorithm?\nI don't get it, what is wrong with the algorithm?\nThe point is that the algorithm is trivial and doesn't need to be written down. It's just something you know.\nI disagree. You don't know it. You learned it in school.\nI don't think you know it. I think you're just following the algorithm. I don't know it either. I'm just following the algorithm.\nI think you're just following the algorithm. I don't know it either. I'm just following the algorithm.  I'm not sure that's how learning works.\n> I think you're just following the algorithm. I don't know it either. I'm just following the algorithm.  > I'm not sure that's how learning works.  I'm not sure that's how learning works.  That's how learning works.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a * h)\n>>> triangle_area(5, 3)\n7.5\n\nThis is a trivial example, but it shows the issue.\nThe triangle is not a right triangle, so it is not valid to use\nthe Pythagorean theorem.\n\nYou can see this is a problem if you have a real problem and the\ntriangle is not a right triangle.\n\nThe solution is to use the pythagorean theorem on the hypotenuse,\nand then take the square root of the result.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h / a) * a\nI guess you can see that's not how it's done.\n\nI think the author is right. I think he's doing it wrong.\n\nWhat's the right way?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * (h - 1) / 2)\nYou can use the fact that  * (h - 1) / 2 = 2 * (h - 1) / 2 - 1 to simplify the expression.  This is a nice example of a recursive algorithm.  You can also use the fact that  to compute the area of the circumcircle of a triangle, which is the area of the triangle minus the area of the triangle's sides.\n>>> circum_area(triangle_area(5, 3), 5)\n7.5\n>>> circum_area(triangle_area(5, 3), 2)\n3.125\n>>> circum_area(triangle_area(5, 3), 1)\n2.5\n>>> circum_area(triangle_area(5, 3), 0)\n1.25\n\nI'm not sure why you're being downvoted. This is a nice trick, and it's the first time I've seen it.\n\nI'm being downvoted because I'm pointing out that this is a recursive algorithm.\n\nI'm being downvoted because I'm pointing out that this is a recursive algorithm.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*h)/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h/2)**(a-1)\nI don't get this.  How is this different from just:\nreturn h/2 * a-1\n?\n\nBecause it's Python.\n\nAha.\n\nIt's a good question. I suspect the answer is that the function is\nexposing an algorithm that is otherwise hidden.\n\nI'm not sure what you mean by that. The triangle_area function is\nsimply a function that calculates the area of a triangle. It's not\nexposing any algorithm that's hidden in the fact that a triangle is\na polygon with three sides.\n\nThis is the only reason I can think of:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - 1) / (h - 1)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (sqrt(h) * sqrt(a)) / (sqrt(h) * sqrt(a))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * a * h)\nAs far as I can tell, the square root of a * a * h is not a function.\nThat is, it's not something that can be evaluated by the computer.  It's\njust an expression that can be computed in your head.\nIf you want a function that computes the area of a triangle, then you need\nto provide a function that computes the square root.\n\nThis is just a guess, but I suspect that the problem is that you are\ntrying to evaluate the expression in your head.  The expression is not\na function, so it can't be evaluated by the computer.  You have to\nactually write a function that computes the area of a triangle.\n\nLet me know if you have any questions.\n\n- Doctor Peterson, The Math Forum\n\nhttp://mathforum.org/dr.math/</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h / (2 * sqrt(a))\nI don't understand why you would use a * h / (2 * sqrt(a)) instead of a * (h/2) / (2 * sqrt(a))\n\nBecause the sqrt of the length of the side is the area of the base. The area of the base is the area of the triangle. The area of the triangle is the area of the triangle.\n\nYou are right. I didn't realize the base area was the area of the triangle.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(h*h)\nI think you're missing something, there.  It's a bit like saying \"Given a length of a side and a length of a side, what is the length of a side?\"\nOops, I just noticed that. I've edited the original comment.\nThat's better, but I think you should be returning the area of the triangle.\nYeah, that's what I intended. I think I fixed it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*h*a)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return Math.sqrt(a*a+b*b+h*h)\nI've always wondered, why is the area of a triangle equal to the area of a square with the same side length?\nThe area of a triangle is the sum of the areas of the three triangles formed by the sides of the triangle.  The area of a square is the sum of the areas of the four triangles formed by the sides of the square.  The area of a triangle is the area of a square with the same side length, so they're equal.\nI understand the math, but I'm wondering why the formula is that way. I would've thought it would be a squared, since a square is a 2-dimensional shape, while a triangle is a 1-dimensional shape.\nI think it's because the formula for the area of a triangle is the same as the formula for the area of a square.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / (h * h)\n    def triangle_area_inverse(a, h):\n    \"\"\"Given length of a side and height of a triangle.\n    >>> triangle_area_inverse(5, 3)\n    6.0\n    \"\"\"\n    return (a / h) * h\n\nSee also\n Inverse trigonometric function\n\nReferences\n\nExternal links\n The Math Forum - Triangles</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * a * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (1 - (h - 1)) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * (2 * (a - h) * (a - h))\nI don't know what language this is, but that is a horrible syntax.\nPython.  The author is a Python programmer.  The syntax is fine for what it is.  If you want to call it horrible syntax, then you need to be more specific.\nThe syntax is horrible because it is ambiguous. The above code is not valid python.\nIt's not valid Python, but it is valid syntax.  The author is not a Python programmer.\nI am a Python programmer. The syntax is horrible because it is ambiguous. The above code is not valid Python.\nYou're a Python programmer who doesn't know how to use a Python REPL?      >>> triangle_area(5, 3)\nI'm a Python programmer who knows that the above code is not valid Python.\nI'm a Python programmer who knows that the above code is valid syntax.\nIt is valid syntax, but it is not valid Python.\nI am a Python programmer who knows that the above code is valid syntax.\nI am a Python programmer who knows that the above code is not valid Python.\nI am", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt((a*a + h*h)**2 - 1)\nThe reason for the downvotes is that this is not a python question.  You are asking a math question.  You should post this question to a math forum, not a python forum.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1.0/sqrt(2))*(h*a*(h/2))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(h*h*(h*a) - (h*a)*h*a)\nI like it. You can also do it in one line:       return sqrt(h*h*(h*a) - (h*a)*h*a)\n\nI would use the first one. The second one doesn't look right to me.\n\nI don't see why you don't like the second one. It's the same as the first, but with fewer parentheses.\n\nYou're right. I was confused about the first one. I thought it was a function, not a definition.\n\nThe first one is a function.\n\nYeah, I realized that after I posted.\n\nI'm not sure why you're being downvoted.\n\nBecause I'm dumb.\n\nThe first one is a function, but it's not necessary to call it like that. The second one is a one-liner.\n\nI like the second one better.\n\nThe second one is a one-liner. The first one is a definition.\n\nI like the second one better.\n\nWhy? It's the same", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*h)**0.5\nI'm not sure if it's a typo or not, but the above code is wrong.  The area of a triangle is the area of the base * the height, not the area of the base * the height * the height.\nIt's not a typo. I didn't know that. I'll update the post.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * (a - 1) + h * (a + 1)) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h + 1)) / 2\nI think that's what you're looking for.\n\nYou can also use the fact that the area of a triangle is 1/2 base * height *\n1/2 * height.\n\n>>> triangle_area(5, 3)\n7.5\n>>> triangle_area(5, 3, 1/2)\n7.5\n>>> triangle_area(5, 3, 1/2, 1/2)\n7.5\n>>> triangle_area(5, 3, 1/2, 1/2, 1/2)\n7.5\n>>> triangle_area(5, 3, 1/2, 1/2, 1/2, 1/2)\n7.5\n>>> triangle_area(5, 3, 1/2, 1/2, 1/2, 1/2, 1/2)\n7.5\n\nThis is just a simple way of doing it, if you want a more in-depth solution,\nyou can use the fact that the area of a triangle is 1/2 base * height *\n1/2 * height.\n\n>>> triangle_area(", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt( (a * h) + (a * h) * h) / (a * h)\nI'm not sure what you're asking. You're already getting the correct answer, and you're not even using any loops.\nHe's asking how to use the fact that the triangle is a right triangle to simplify the calculation.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a-h)/(a-h+1)\nThis is a simple function that returns the area of a triangle. It uses the Pythagorean theorem to calculate the length of the side of a triangle, and then uses the formula for the area of a triangle to calculate the area.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/2\nIn a similar way, the area of a circle with radius r and center (x,y) is  pi * r^2 * (x-y).\n\nThis is a pretty easy problem to solve using a recursive function.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*(a+h)/2)\nDoesn't this require the area of the base to be known?\nI was thinking that, but I think it's a reasonable assumption in this case.  If you wanted to be really rigorous, you could compute the area of the base and use it to calculate the area of the other two sides.  But for the purposes of this example, I think it's fine to assume that the base area is the same as the area of the other two sides.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * a\nThis is the right answer.  You can also use the area formula to find the area of a triangle.  A triangle is a right triangle if its hypotenuse is a right angle.  A right triangle has sides of lengths a and b.  The area of a right triangle is a^2 + b^2.  Therefore, the area of a triangle with sides of length a and h is h^2 + a^2.\n>This is the right answer.  You can also use the area formula to find the area of a triangle.  A triangle is a right triangle if its hypotenuse is a right angle.  A right triangle has sides of lengths a and b.  The area of a right triangle is a^2 + b^2.  Therefore, the area of a triangle with sides of length a and h is h^2 + a^2.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h / 2\nThis is my first python program, so I'm sure it's very basic.  I'm trying to figure out how to get it to return the area of a triangle with the length of one side and the height of the other side.  I'm not sure if I'm missing something, but I'm not sure how to modify it to do that.  Any help would be appreciated.\nYou want to modify it to return the area of a triangle with the length of one side and the height of the other side?  You can't.  This function only works on one side.  If you want to get the area of a triangle with the length of one side and the height of the other, you need to use the other function that is provided in the standard library, `pyramid_area`.\nThanks!  I didn't know pyramid_area existed.  I've been messing around with it and I'm getting closer to what I want.  I just need to figure out how to get it to work with my triangle_area function.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*a + h*h)/(2*h)\nI love Python.\n\n(And I love it even more now that it's on the front page of HN!)\n\nI have to say, I've never seen that before, but it's really elegant.\n\nI think the problem with this is that it doesn't do any error handling, so if you pass it a number that is not a valid triangle, or a number that is too big, it will crash.\n\nI think that's the point. If you need to check for errors, you can do it.\n\nWhat's the point of that? Why not just have the function check for errors and return a sensible error code?\n\nThe point is that it's not the responsibility of the function to check for errors. You can check for errors if you need to.\n\nI don't get the point of this. It's like saying you shouldn't use the fact that a function returns an error code to determine if it failed or not.\n\nIt's a very simple function, so it's easy to understand what it does. I'm not saying it's the best way to do it.\n\nIf", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a**2)**h\n\nThis is a very clever approach.\n\nIt's also very slow.\n\nIt's only slow if your compiler is slow. I bet it's faster than the original code.\n\nI think the point was that, while it may be clever, it's also \"clever\" in the way that it's not actually doing anything.\n\nBut it is doing something. It's taking an expression that is ambiguous and returning a value that is unambiguous.\n\nI think the point was that it's doing something useless, like creating a function that takes a number and returns a number.\n\nI think the point is that it's doing something that's not really the point of the code.\n\nI think the point is that it's doing something that's not really the point of the code, but that is the point of the code.\n\nI think the point is that it's doing something that's not really the point of the code, but that is the point of the code, but that is not the point of the code.\n\nI think the point is that it's doing something that's not really the point of the code, but that is the", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * (a - h) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (1.0/h)\nAha! Thanks!</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*a**(1/2)\nI don't understand the `(1/2)`.\n\nThe '1/2' is the half of the hypotenuse.\n\nOh, that makes sense. I thought it was a function call and it was a bit strange.\n\nIt is a function call, but it's a local function, which is why it's a single line.\n\nI love the fact that the only way to make a triangle with a side of 5 is to use a very small angle.\n\nActually, there are plenty of other ways to make a triangle with a side of 5. For example, a triangle with sides 5, 1, and 2 has an area of 6.\n\nOf course. I meant that the only way to get an area of 7.5 is to use a very small angle.\n\nI think you mean the only way to get an area of 7.5 is to use a very small angle _and_ a very small side.\n\nThis is a good example of how to make a simple program that is a good example of a concept.\n\nThis is a good example of how to make a simple program that is a good", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt((a*a)**2 + (h*h)**2)\n\nI don't get it. What is the purpose of this function? What is its use?\n\nIt's a joke.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pow(2, h)\nThis is not correct. If you draw a triangle on a unit square, the area is not the same as the area of a square with the same area.\n\nI think the author meant to say \"area of a square with the same perimeter\".\n\nIt's not the same either.\n\nI'm not sure I understand the problem here. The author seems to be complaining about the following two statements:\n(1) In a triangle, the area of the shaded region is equal to the area of the triangle itself.\n(2) In a square, the area of the shaded region is equal to the area of the square itself.\nThese statements are obviously equivalent.\n\nThat's not what the author is complaining about. The author is complaining that the first statement is not true:\n(1) In a triangle, the area of the shaded region is equal to the area of the triangle itself.\nIn the case of a square, the area of the shaded region is not equal to the area of the square itself.\n\nOh. I don't see how that's a problem. The shaded region in a triangle is the triangle itself", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h / 2)\n    return 0\nI don't think that's right.\n\nWhy?</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1.0 / h) * a**2\nThis is really a function for the unit circle, not a triangle.\n\nThanks. I didn't realize that. I was trying to do it in my head and got stuck.\n\nI think that the use of the word \"triangle\" here is confusing. A triangle is a polygon with three sides.\n\nAnd the unit circle is a circle with unit radius.\n\nI always thought the unit circle was the circle with unit radius.\n\nI always thought it was the circle with radius 1.\n\nI always thought it was the circle with radius of one.\n\nI always thought it was the circle with radius of 1, not 1.\n\nI always thought it was the circle with radius of 1.\n\nI always thought it was the circle with radius of 1.\n\nI always thought it was the circle with radius 1.\n\nI always thought it was the circle with radius 1.\n\nI always thought it was the circle with radius 1.\n\nI always thought it was the circle with radius 1.\n\nI always thought it was the circle with radius 1.\n\nI always thought it was the circle", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a, h = h, a\n    return sum([(a - h)**2 for a in range(h)])\nI'm not sure what you're asking.  You're asking how to find the area of a triangle?  That's it.  I mean, that's all you need to do.  That's the entire program.  If you're asking how to find the area of a triangle, that's it.  That's the answer.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2*a + h) / (2*a - h)\nI'm not sure if that's what you want.\n\nI was hoping for something that would calculate the area of a triangle based on the length of a side and the hypotenuse.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\nI think it's pretty obvious that this is the correct answer.\nI'm not sure it's obvious, but it's the only one that doesn't require any knowledge of the area of a triangle, so it's probably the one the interviewer was looking for.\nI would have gone with the Pythagorean theorem.\nWell, the Pythagorean theorem is more useful, but it requires knowledge of the area of a triangle, whereas the triangle_area function doesn't.\nI don't think so.  If you know the length of the sides, you know the area.  I would say the Pythagorean theorem is easier to remember.  I think the interviewer was looking for an easy answer.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2\nI think you meant `h * a / 2`.\n\nI think the author is trying to say that it's a function that calculates the area of a triangle, not a function that returns the area of a triangle.\n\nI think you are right.\n\nIt's a nice idea, but it's a bit over-engineered for something that's a simple one-liner in Python.\n\nI was hoping to see something a bit more interesting. It's just a function that takes a length of a side and a height and returns the area of the triangle.\n\nPython is not the only language that can do that.\n\nI'm curious about the point of the article.\n\nI think it's just to show a simple way to do it in Python.\n\nAs a non-programmer, I found this article interesting.\n\nWhat's the point of this?\n\nI'm not sure if this is a joke, but the point of the article is to show a simple way to calculate the area of a triangle in Python.\n\nI don't get it, it's just a function that takes a length and a height and returns the area", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (a + h) / (2 * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h\nI don't know if I'm missing something, but this is the most obvious solution.\nIf you wanted to be a bit more efficient you could do:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a+b+c)\nI like this one. I'd say it's pretty elegant.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2 * (a - 1) * (h - 1)) / (h - 2)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - a) / (h - a + 1)\nThis is the simplest possible solution.\n\nAnother one:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * a * a) / (h * h * h)\nThere are many ways to do this. But I think the clearest way is to use the Pythagorean theorem. You can represent a right triangle with a^2 + b^2 = c^2.\nIn your case, the area of the square is 5, and the area of the triangle is 3.\nSo, the area of the square is a^2 + b^2 = c^2, and the area of the triangle is a^2 + b^2 - c^2 = d^2.\nIf we call a = d^2, b = c^2, and c = d, then the area of the square is 5, and the area of the triangle is 3.\nNow, if you want to find the area of a square with a side length of 5, then the Pythagorean theorem will be helpful.\nLet's say the hypotenuse is h.\nSo, a^2 + b^2 = c^2, and a^2 + h^2 = c^2, so we get a = c.\nNow, b = c^2 - d^", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a == 0 or h == 0:\n        return 1\n    else:\n        return (a*(a+1)/2 + h*(h+1)/2)\nThis is a nice, simple algorithm. But it doesn't work on the unit circle.\nThe unit circle is the circle with radius 1.\n>>> circle_area(5, 1)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: unsupported operand type(s) for +: 'int' and 'float'\n>>> circle_area(5, 1)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: unsupported operand type(s) for +: 'int' and 'float'\n>>> circle_area(5, 1)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: unsupported operand type(s) for +: 'int' and 'float'\n\nI'm", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - 1)\n\nYou could easily extend this to a function that takes a base and height, returns the area.\n\nI think I would write it like this:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h/2)) / (h - a)\n\nThis is one of the most common functions in my code. It's a great way to check if you've actually got the right function name and the right parameters.\n\nI've seen that one too. I also like the one that checks if the function is taking the right number of arguments:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (1 / h)\nYou're assuming that the sides are all the same length.  This is not true for the triangles in the picture.\nNo, I'm not.  It's a function, not a definition.  It returns the area of a triangle with a given high-point.  It's not a general-purpose triangle-area function.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * (a + b) + c) / 2\nI think you meant to write \"height\".\n\nI was thinking the same thing, but I'm not sure that's the right way to read it.\n\nI think it is. It's just a typo.\n\nI'm not sure, but I think that's what he's saying. The function returns the area of a triangle with the given height.\n\nI love the Python style guide, but I'm not sure I agree with this one:\nI like to keep my code clean by using the same variable names for different things.\n\nI agree. It's a bit of a pain to have to rename a variable when you decide to change its type.\n\nIt's a pain to have to rename a variable when you decide to change its _usage_.\n\nI have a somewhat related question: is it better to keep your code DRY, or to have the same variable name for different things?\n\nDRY. The only time I don't is if the variable is only used in one place and that place is obvious.\n\nI'm not sure I agree with this. I think it's a personal preference thing.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - (a + b) * 2) / 2\n    \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2\nI don't think that's right. If you have a right triangle with one side of length 5 and the hypotenuse of length 3, then the area is 7.5. But if you have a right triangle with one side of length 5 and the hypotenuse of length 3, then the area is 9.\n\nYou are right. I was thinking of the area of a square with the same length.\n\nI also found this:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1 - (a / h)) * a\nI don't understand what you mean by \"high return area\".  Do you mean the area of the triangle?  If so, why multiply it by 1-a/h?  What if a and h are equal?  Why not just return the area of the triangle?\nI think he means the area of the triangle * 1 - (a/h).  So the area of the triangle is multiplied by the length of the hypotenuse.  I think.\nBut if a and h are equal, then the area of the triangle is the same as the area of the triangle * 1 - (a/h).  So why not just return the area of the triangle?\nIt's not the area of the triangle.  It's the area of the triangle * 1 - (a/h).  I think the intention is to return the area of the triangle when a and h are not equal.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/2\nI don't know why you would return the area as a float if you're going to divide it by 2.\nThat's a good point. I just copied it from a similar function in another library. I'll fix it.\nIt looks like you're using python 2. If you're using python 3 you should be using the built-in float type instead of the float type from the standard library.\nThanks for the tip. I'm using python 2.7. I'll look into the float type from the standard library.\nThere's no such thing as the float type from the standard library in python 3.  You should use the `float` type instead of `float` in python 2.7.\nThanks for the tip. I'll look into that.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a - h)*(h - a)\nI think you meant to write `(a - h) * (h - a)`.\n\nI see this as a good example of the need for a 'run' button.\n\nThat's pretty cool.\nIt would be interesting to see how this was done in Matlab.\n\nThis is just a naive implementation, but I don't see how this can be done in Matlab.\n\nI'm pretty sure that it's possible to do this in Matlab. The only difficulty I see is that you can't use floating point numbers for the areas, so you need to use something like the Rational function to get the answer.\n\nI think you can do this with Matlab. I'll try to write something up.\n\nI'm not sure if you can do this in Matlab, but I'd be interested to see how you would do it.\n\nHere's a Matlab implementation:\n\nThis is a great example of how you can use math to solve real problems.\n\nThis is a great example of how you can use math to solve fake problems.\n\nI'm not sure what you mean by fake problem. It", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = h\n    if a == 0:\n       return 0.0\n    else:\n       return a * (1.0 / (1.0 + 1.0 / (1.0 + 1.0 / (1.0 + 1.0)))\n    return a\n\nI'm not sure what the \"1.0\" is for.\n\nI think the 1.0s are supposed to be 1.0/2.\n\nI think he's supposed to be using a list comprehension instead of a for loop.\n\nI think you're right.\n\nI think you're both right.\n\nI think you're all right.\n\nI think you're all right, but I'm not sure what the \"1.0\" is for.\n\nI think you're all right, but I'm not sure what the \"1.0\" is for, but I think the \"1.0\"s are supposed to be 1.0/2.\n\nI think you're all right, but I'm not sure what the \"1.0\" is for, but I think", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a*a+h*h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a-b)**2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1.0 / h) * (a.x * a.x + a.y * a.y + a.z * a.z)\nI think it's supposed to be:\nreturn (1.0 / h) * (a.x * a.x + a.y * a.y + a.z * a.z) / (2 * a.h)\n\nI think that's the joke.\n\nI think it's a bug, since the return value is never used.\n\nI think it's a joke, because the function has no meaningful return value.\n\nIt's a joke because the function is so simple that it is a joke to have a return value.\n\nI think it's a joke because the function is so simple that it is a joke to have a return value.\n\nI think it's a joke because the function is so simple that it is a joke to have a return value.\n\nI think it's a joke because the function is so simple that it is a joke to have a return value.\n\nI think it's a joke because the function is so simple that it is a joke to have a return value", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - 1) / 2\n\nI don't think this is correct. I think it's:\nreturn (h - 1) / 2 * a\n\nI don't know, but I don't think that is the same thing.\n\nI'm pretty sure it's the same thing.\n\nIt's not the same thing, because the first one doesn't take the square of the hypotenuse.\n\nI'm pretty sure that's the same thing.\n\nIt's not the same thing, because the first one doesn't take the square of the hypotenuse.\n\nI'm pretty sure that's the same thing.\n\nIt's not the same thing, because the first one doesn't take the square of the hypotenuse.\n\nI'm pretty sure that's the same thing.\n\nIt's not the same thing, because the first one doesn't take the square of the hypotenuse.\n\nI'm pretty sure that's the same thing.\n\nIt's not the same thing, because the first one doesn't take the square of the hypotenuse.\n\nI'm pretty sure that's the same thing.\n\nIt's not the", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / (2 * h)\ntriangle_area(5, 3)\ntriangle_area(6, 3)\ntriangle_area(7, 3)\ntriangle_area(8, 3)\ntriangle_area(9, 3)\ntriangle_area(10, 3)\ntriangle_area(11, 3)\ntriangle_area(12, 3)\ntriangle_area(13, 3)\ntriangle_area(14, 3)\ntriangle_area(15, 3)\ntriangle_area(16, 3)\ntriangle_area(17, 3)\ntriangle_area(18, 3)\ntriangle_area(19, 3)\ntriangle_area(20, 3)\ntriangle_area(21, 3)\ntriangle_area(22, 3)\ntriangle_area(23, 3)\ntriangle_area(24, 3)\ntriangle_area(25, 3)\ntriangle_area(26, 3)\ntriangle_area(27, 3)\ntriangle_area(28, 3)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a / h) * (h * a)\nThis is not a function.\n\nA function is something that takes in arguments and returns a value.\nThis is a function:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt( (h * a) / (2 * h))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(h-2)\nI'm pretty sure that's wrong.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sum([(h - a[0] - a[1] - a[2]) / 2 for a in a[0]", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (1 - h) / 2\n    \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(h/2)**2\nThis is not the best example of a good algorithm. It is O(n^2).\n\nI think you meant O(n * h).\n\nNo, I didn't.\n\nWhy not?\n\nBecause I was talking about the algorithm, not the running time of it.\n\nI'm not sure I understand. You are saying that the algorithm is O(n^2) because it requires n2 operations, right?\n\nNo, I'm saying it's O(n^2) because it requires n^2 space.\n\nWhy is that?\n\nBecause you have to store the result of the algorithm in memory.\n\nBut the result is a function of n and h, so you only need to store it once.\n\nIt's still O(n^2).\n\nI don't see why.\n\nBecause it requires n^2 space.\n\nYou are using the wrong function.\n\nWhat do you mean?\n\nThe function you're using is f(n, h).\n\nNo, I'm not.\n\nYes, you are.\n\nNo, I'm not.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / 2\nI think this is a bad example. The area is not the same for all triangles.\n\nI think it's a good example. It's not the best example, but it's a good one.\n\nI think it's a bad example for the same reason that I think the original article is a bad example.\nI think a more useful example would be to find the area of the largest possible triangle with given sides.\n\nIt's not a bad example at all.\nIt's a good example of a method that is useful in practice, even if it's not the best way to solve the problem.\nThe goal of the article is to show the use of the method, not the best way to solve the problem.\n\nI think it's a good example of a method that is useful in practice, even if it's not the best way to solve the problem.\nThe goal of the article is to show the use of the method, not the best way to solve the problem.\n\nI don't think it's a good example because it's not clear what the method is doing. It's not obvious that it's not the best way to solve the problem", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a == 1 or a == 2:\n        return 1\n    else:\n        return a*h/2\nAs a mathematician, I approve.\nAs a programmer, I disapprove.  The way it's written, it will return 1 for a one-sided triangle.\nAs a programmer, I approve.  The way it's written, it will return 1 for a one-sided triangle.  This is a feature, not a bug.\nAs a mathematician, I disagree.  The way it's written, it will return 1 for a one-sided triangle.  This is a bug, not a feature.\nAs a programmer, I disagree.  The way it's written, it will return 1 for a one-sided triangle.  This is a feature, not a bug.  The bug is that it's a one-sided triangle.\nAs a mathematician, I disagree.  The way it's written, it will return 1 for a one-sided triangle.  This is a bug, not a feature.  The bug is that it's a one-sided triangle.  The feature is that it's a one", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - 1) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if h == 0:\n       return 0\n    return math.sqrt(a*a + h*h)\nThis is just a slightly more readable version of what the OP wrote.\nIt's not more readable at all. It's not even shorter.\nIt's more readable to me.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h - 1)) / (h - 2)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a**2)**h\nThis is not always correct. It returns 7.5 for a 5-sided triangle, but a 5-sided triangle has an area of 6.\n\nYeah, I've noticed this too, it's a little weird.\nIt's not weird, it's just not correct.\n\nIt's not weird, it's just not correct, and it's not always correct.\n\nIt's not weird, it's just not correct, and it's not always correct, and it's not always correct.\n\nIt's not weird, it's just not correct, and it's not always correct, and it's not always correct, and it's not always correct.\n\nIt's not weird, it's just not correct, and it's not always correct, and it's not always correct, and it's not always correct, and it's not always correct.\n\nIt's not weird, it's just not correct, and it's not always correct, and it's not always correct, and it's not always correct, and it's not always correct.\n\nIt's not weird, it's just not correct, and it's not always correct, and it", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(h-a)*a**2\n\n>>> triangle_area(5, 3)\n7.5\n\n>>> triangle_area(3, 4)\n2.5\n\n>>> triangle_area(2, 5)\n2\n\n>>> triangle_area(3, 2)\n0.5\n\n>>> triangle_area(4, 4)\n1\n\n>>> triangle_area(5, 5)\n2\n\n>>> triangle_area(6, 5)\n3\n\n>>> triangle_area(6, 4)\n6\n\n>>> triangle_area(7, 6)\n8\n\n>>> triangle_area(7, 5)\n4\n\n>>> triangle_area(8, 5)\n6\n\n>>> triangle_area(9, 6)\n9\n\n>>> triangle_area(9, 5)\n9\n\n>>> triangle_area(10, 7)\n10\n\n>>> triangle_area(10, 6)\n10\n\n>>> triangle_area(11, 7)\n11\n\n>>> triangle_area(11, 6)\n11\n\n>>> triangle_area(12, 7)\n12", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * a) * h\n\nFor the lazy, the actual code is:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pow(2.0, h / a)\nI like that.  I've been looking for a simple way to compute the area of a triangle.  I'll have to remember that.\nIt's not really a triangle, though.  It's the area of a rectangle with height h and width a.\nI know, I was just kidding around.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(a+h)\nThis is not a function. This is a definition of a function.\nAs such, it has no return type. It's just a bunch of variables.\n\nThanks for the input, I'm new to python.\n\nYou're welcome!\n\nI've been doing this for a while. I'm pretty sure I'm not going to find a better definition than this.\n\nIs this a joke?\n\nI'm going to go out on a limb here and assume that this is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a joke.\n\nThis is a", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * math.sqrt(a * a) * math.sqrt(a * h)\nWhat's the point of using the sqrt function here?\nI think it's just to avoid using the floor function.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a*a + h*h)\nI don't know why you're using `math.sqrt`, since `math.pow` is so much\nmore readable.  Also, I'm not sure why you're using `math.sqrt` when\nyou're not using it for anything else.  Maybe it's just a typo.\n\nI'm not sure I understand your question.  It looks like you're using\n`math.pow` correctly.  If you're still having trouble, you might try\nmaking it a function, like this:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a-h)*(a+h)\n\nHere's one that I came up with last night that I think is a little more elegant (and also does not require division):", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2\nI think you meant:\nreturn (h * a) / 2\n\nThanks, I corrected it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1/2)*(sqrt(a*h) - sqrt(h*a))\nI don't see how this is any more efficient than just multiplying the lengths.\n\nThe point is that you can calculate the area of a triangle by multiplying the lengths of the sides. This function can calculate the area of a triangle given only the length of a side and the high return area of a triangle.\n\nIn other words, you can use this function to find the area of a triangle given only the length of a side and the hypotenuse.\n\nI'm not sure I understand.\n\nIt's a neat little function, but I'm not sure what use it would be.\n\nYou can use it to find the area of a triangle given only the length of a side and the hypotenuse.\n\nAh, I didn't see that he was returning the area.\n\nAh, that's the point.\n\nI wish the author had given us a clue.\n\nI was hoping for some insight too. I guess it's just a neat little function.\n\nI'm not sure if I should upvote this or not.\n\nI can't help but feel that", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (0.5 * a + 0.5 * h) * (a + h)\n    \"\"\"\n    def triangle_area_recursive(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area_recursive(5, 3)\n    7.5\n    \"\"\"\n    if a == 0:\n       return 0.5 * a\n    else:\n       return triangle_area_recursive(a-1, h-1)\n    \"\"\"\n\nHere's the code in action:\n\nWhat's wrong with it?\n\nThe code compiles, but is incorrect.\n\nWe can fix this by using the fact that we're working in a language with\nfunctional composition.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return Math.sqrt(a**2 + h**2)\nI'm not sure what you mean by \"high return area\".  The area of a triangle is the sum of the areas of the sides.  A triangle with sides a, b, and c has an area of abc.  If you want the area of a triangle with sides a, b, and h, then you should use the area of a triangle with sides a, b, and h/2.\nI think he means the area of a triangle with the same base and height as the triangle in question.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * a) * sqrt(a * a) * sqrt(a * a)\n\nI think this is the correct answer, but it's a bit of a cheat because it's not an exact formula, but a recursive definition.\n\nI would like to see some examples of problems that have the same solution.\n\nI like the recursive definition, but I am not sure if it is an exact formula.\n\nI would like to see some examples of problems that have the same solution.\n\nThis is a pretty good one:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(2 * (a.x2 + a.y2) + (a.x + a.y) * (a.y2 - h))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * (a - h) / (a - h)\nI'm pretty sure that's wrong.\n\nYou're right. I'm not sure how I messed that up. I was originally using the function area() instead of area_h(). I fixed it. Thanks for the heads up.\n\n\"The area of a triangle is half of the base times the height.\"\nThis is not true.\n\nIt is true for right triangles.\n\nIt's true for any triangle.\n\nI think that was the point. The comment is on the page for right triangles.\n\nI think he's saying that the comment is wrong, because it doesn't say \"right triangle\".\n\n\"This is not true. The area of a triangle is half of the base times the height.\"\nThis is not true.\n\"It is true for right triangles.\"\nThis is not true.\n\"It's true for any triangle.\"\nThis is not true.\n\"It's true for right triangles.\"\nThis is not true.\n\"It's true for any triangle.\"\nThis is not true.\n\"It's true for right triangles.\"\nThis is not true.\n\"It's", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pow(math.sqrt(a), h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h*(a-h)*(a-h)\nOr, if you're into the whole brevity thing,", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * a\n\nI don't think that's correct.\n\nYou're right, that's not correct. It should be:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * (1 - a)) / (1 - a)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (1 - h) / (h - 1)\n    return triangle_area\nThis is a fun little function. I don't see any bugs.  But it doesn't really do anything useful.\nI just wanted to see if I could do it. I'll make it useful later.\n> I don't see any bugs.  But it doesn't really do anything useful.  It's a function that does what it's supposed to do.  It's not useful in the sense of \"I need a function to calculate the area of a triangle\", but it's useful in the sense of \"I'm learning to program, and I just wrote a function that does what it's supposed to do\".  You should be proud of yourself.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (5 / 3) * (3 / 2)\n    return (3 / 2) * (3 / 2)\nThis code returns the area of a triangle with side 5 and high side length 3.\n\nThe code is correct, but the area is not correct.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * (a / 2)\nI think this is a good example of why it's important to understand the problem before trying to solve it.  If you think about it, the problem isn't calculating the area of a triangle, it's calculating the area of a triangle given the length of one of its sides and the height of the triangle.  You could easily write a function to calculate the area of a triangle given the area of a triangle with a different base and height.\nActually, I think the problem is that the OP doesn't understand how to write a function.  The OP didn't write a function that calculates the area of a triangle given the length of one of its sides and the height of the triangle, he wrote a function that calculates the area of a triangle given the length of one of its sides and the height of the triangle.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a ** 2\nI had to laugh at this. I can't believe someone actually wrote it.\nI've seen a lot of code written by people who had no idea what they were doing. This is probably the best of the worst.  I've also seen some really weird shit in my day, but nothing quite as bad as this.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(h/2)**2\nIn your case, this is equivalent to:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h - a) * (h - a)\nThis is a good example of a function which is so simple and easy to understand that you don't really need comments.\n\nThis is a good example of a function which is so simple and easy to understand that you don't need comments.\nI disagree. A function that is easy to understand can be made even easier with comments.\n\nI disagree. A function that is easy to understand can be made even easier with comments.\nThat's not the point. The point is that there is no need for comments when the function is so simple that it can be easily understood just by looking at the code.\n\nI don't think that's true. I think that the code is more readable when there are comments, even if the code is simple.\n\nI'm with you on this.\n\nI disagree. A function that is easy to understand can be made even easier with comments.\nI think this is a very good example of a function that is so simple that you don't need comments.\n\nI don't think that's true. I think that the code is more readable when there are comments, even if the code is simple.\n\nI", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (a + h) / 2\nI've never seen this before.  I'm going to have to look into it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (2 * a * h) / 3\nThis is a horrible hack. The code is all over the place. The function has two arguments, but only uses one. The second argument is a global variable that is never used, but is still defined. The function is named triangle_area, but only returns a single value.\nI've seen worse. Much, much worse.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\nThat's a quadratic formula, not a triangle formula.  You'll need the area of a square to get the area of a triangle.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / (h * (a + 1))\nThis is a bad example.\nYou have a non-positive denominator. The denominator should be positive.\nYou should not divide by (h * (a + 1)) because it will give you the area of a trapezoid.\n\nThanks for the feedback. I'll update it.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*(h-1)/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * (1 / (h-1)) * (1 / (h-2)) * (1 / (h-3))\nThis is a really nice example of the power of programming. It's not a \"one liner\" but it's a short program that does a useful thing.\n\nThanks! I've been programming for a while, but I've never been very good at it. I've been reading a lot of good stuff lately, so hopefully I'll be able to come up with some more useful stuff.\n\nI think this is a really nice example of a simple program that does a useful thing. It's not a one liner, but it's a short program that does a useful thing.\n\nI'm not sure I understand what you're trying to say.\n\nI think he's saying that it's a good example of a simple program that does a useful thing, but it's not a one-liner.\n\nI'm not sure I understand what he's trying to say.\n\nI think he's saying that it's a good example of a simple program that does a useful thing, but it's not a one-liner.\n\nI'm not sure I understand what", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * (a * h)\n    return math.pi * (a * h)\nYou could do that, but it's probably easier to just use the formula from the link I posted above.\nThe point of the exercise is to show that you can do it in a single line of code.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a*a + h*h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a == 0:\n       return 0\n    a = sqrt(a)\n    h = sqrt(h)\n    return a * h", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a == 0 or a == 1:\n        return 0\n    else:\n        return a * h\n\nI think it would be more idiomatic to write this as:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h - a) / 2\nI think you meant to write:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2\n\nI've always wondered why the Pythagorean theorem has such a low name recognition, it's one of the most useful and simple math formula there is.\n\nIt's not really a formula.\n\nIt's a theorem, and a very useful one.\n\nI can't remember the last time I used it in practice.\n\nI use it all the time. I'm a software engineer, and I use it to figure out the area of a triangle in code. I use it to figure out the height of a building. I use it to figure out the distance to a target.\nI'm sure you use it more than you think you do.\n\nI'm a software engineer as well, and I've never needed it.\nI think it's useful in some cases, but in most cases it's not.\n\nThat's a nice way to teach the Pythagorean theorem.\nI like the interactive nature of it.\n\nI'm not sure if it's a good way to teach the Pythagorean theorem. It's a nice way to teach some of the concepts behind it, but it's not a good way to teach the theorem itself.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * a) / (h - a)\nThis is the code I used to make this:\n\nThere are two parts to this:\n1\\. Getting the length of the sides\n2\\. Getting the area of the triangle\n1\\. I have a list of all the possible triangle sides and their lengths.\n2\\. I have a function that takes in the lengths of the sides and the height and returns the area of the triangle.\nI have a list of all the possible triangle sides and their lengths.\nI have a function that takes in the lengths of the sides and the height and returns the area of the triangle.\nI have a list of all the possible triangle sides and their lengths.\nI have a function that takes in the lengths of the sides and the height and returns the area of the triangle.\nI have a list of all the possible triangle sides and their lengths.\nI have a function that takes in the lengths of the sides and the height and returns the area of the triangle.\nI have a list of all the possible triangle sides and their lengths.\nI have a function that takes in the lengths of the sides and the height and returns the area of the triangle.\nI have", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1.0/h) * (1.0/a)\nIt's not clear why you'd use a function to do this.\n\nThat's not a function, it's a Python expression.\n\nYou're right, I was looking at the wrong line.\n\nThe syntax looks like a mix of Python and Matlab. I like it.\n\nI was thinking the same thing, and I like it too.\n\nI like the idea of a language that combines the best of Python, Matlab, and Scheme.\n\nIt's a little disappointing that you can't use Python expressions as functions, but that's what the \"def\" statement is for.\n\nI'm not sure I like the syntax.\n\nThis looks very interesting. I'm looking forward to seeing the result of this project.\n\nNot to be a naysayer, but isn't this what Matlab is for?\n\nI like it, but I also like Python. I don't see the point of reinventing the wheel.\n\nI like it, but I also like Scheme. I don't see the point of reinventing the wheel.\n\nI like it, but I also like Common", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (sqrt(a*a*a*a*a) + sqrt(h*h*h*h*h))/(a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a)\nThe area of the area of a triangle is sqrt(a^2 * b^2 * c^2) + sqrt(a^2 * b^2) + sqrt(c^2).  This function is more efficient than the one you have posted.\nI'm not sure if it's more efficient.  The function you posted has one more call to sqrt than the one I posted.  However, the sqrt calls are optimized by the compiler and are very fast.  The same goes for the addition calls.  I think it's a wash.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / (h * (a + h))\nThis is incorrect. The correct formula is:\nreturn (a * (h + 1)) / (h * (a + h))\nI suspect the author meant to use the first formula, but didn't realize that the second is correct.\n\nI think that's the point.\n\nI don't think it is. The author clearly says that he doesn't like the second formula because it's too \"wordy\". I'm guessing he's just not aware that the first formula is incorrect.\n\nI think the point of the article is that the second formula is more complicated than the first, and that the first is easier to remember.\n\nAnd if you're like me, you will remember the second formula only because it's wrong.\n\nThe point of the article is that you don't need to remember the second formula at all, you just need to know it.\n\nI think the point is that you can't just do a simple equality check on the two formulas.\n\nI agree that the second formula is more complicated, but the first one is not correct.\nThe correct formula is:\nreturn (a * (", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(((a[0]*a[1] + a[2]*a[3])/2)^2 + (a[0]*a[2] + a[1]*a[3])^2)\n    def area_of_circle(a, h):\n    \"\"\"Given length of a side and radius of a circle.\n    >>> area_of_circle(2, 3)\n    7.0\n    \"\"\"\n    return sqrt(((a[0]*a[1] + a[2]*a[3])/2)^2 + (a[0]*a[2] + a[1]*a[3])^2)\n\nThe first one is just a simple function call. The second one uses the magic of Python's function decorator syntax. The third one uses the magic of Python's function decorator syntax, but also uses the magic of Python's list comprehension syntax.\n\nThe magic of Python's function decorator syntax is that you can use it to define functions that take a function as an argument. The magic of Python", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(h*a)\nTriangle area is a function that takes two arguments, a length and a height and returns the area.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (0.5 * a * h)\nThis is a little silly.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * (1/2 * math.sqrt(a))\n\nThe other functions that I can see are pretty basic.\nI'm not trying to be mean, but I don't see the point of this post.\n\nI agree with you. I was trying to find a function to calculate the area of a triangle and I found this one. I thought it was pretty interesting and I thought others might find it interesting. I did not know about the function before.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a * (a + b) + c * (a + b + c))\nI know this is a joke, but it's still an interesting way to think about it.\nI don't know what language you are in, but in python you could do this:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1.0 * (a + h) - 1.0 * (a - h)) / (a + h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    if a is not None:\n        return a.area()\n    else:\n        return 0", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - 2)\n\nI think the OP's point is that this is not a very efficient algorithm.\n\nIt's a cute trick, but not a very efficient one, because it requires a lot of calculations for the last term.\n\nI think it's a pretty good example of how to use recursion.\n\nAnd it's a bad example of how to use recursion, because it's not tail recursive.\n\nI think this is a pretty good example of how to use recursion.\n\nYes, I think that's the point.\n\nI know that's the point.\n\nI don't think it's a good example of how to use recursion.\n\nIt is a good example of how to use recursion.\n\nI think it's a bad example of how to use recursion.\n\nYes, I think that's the point.\n\nI know that's the point.\n\nI don't think it's a good example of how to use recursion.\n\nIt is a good example of how to use recursion.\n\nI think it's a bad example of how to use recursion.\n\nYes, I think that", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a*a + h*h)\nThis is so wrong. It returns the area of the triangle not the area of the circumscribed circle.\n\nWell, it's a bit more complicated. If the triangle is a right triangle, then it is the area of the circumscribed circle.\nIf it's a regular polygon, then it is the area of the inscribed circle.\n\nYou're right. I should have specified that the function is correct if the triangle is a right triangle.\n\nIt's not even correct for a right triangle. The area of the circumscribed circle is equal to the area of the inscribed circle minus the area of the triangle.\n\nYou're right. The function is correct if the triangle is a right triangle with a = b = c.\n\nThis is a nice little hack, but it's not really a hack. It's an interesting mathematical calculation, but that doesn't mean it's a hack.\n\nI agree. I'm not sure why this is on the front page of HN.\n\nI don't understand this. What is the point of the function?\n\nIt's a hack to calculate the area of a triangle.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt((h*a)+(a*h))\nThat's not correct, it should return 3.\n\nI don't think you can do this in Python without using a library.\n\nHow would you do it in C?\n\nYou could use the C library to do it, but you'd need to write a function to calculate the area of a triangle.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\n\nYou should probably use the Pythonic way of doing it (which is also the more general way):", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a * (a + b) / (a + b + c))\nThis doesn't handle the case where a side is longer than the other two, but I think it's a good start.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*a + h*h) / (2*a*a)\nI'm not sure what the point of this is. Why not just use Pythagoras?\n\nI think it's trying to be a more general version of that.\nFor example, what if you wanted to find the area of a triangle that had sides of length 1, 2, and 5?\n\nThen you use the Pythagorean theorem?\n\nThat's the point. The triangle_area function is a more general version of the Pythagorean theorem.\n\nWell, yes, I got that. The question is why? I don't see the point.\n\nI guess it depends on how you use it. If you're using it to calculate the area of a triangle, then you'd use the Pythagorean theorem.\nHowever, the triangle_area function is more general in the sense that it can handle any length of sides.\n\nI guess I'm just not seeing the point of being more general.\n\nThe point is that the Pythagorean theorem only works for right triangles. The triangle_area function works for any triangle.\n\nI see. But why would you want to calculate the", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a*(h*h) - a) / h", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(h * a / 2)\nI'm a little confused.  Why is the formula sqrt(h * a / 2)?\n\nI think that's the formula for the area of a triangle with sides of length a and h.\n\nYou're right. I think it's because the author is using Python, which uses the sqrt function, but he doesn't know about the function, so he's just typing sqrt(h * a / 2).\n\nThis is a great tutorial, but it would be even better if it had a few more details about the math. For example, the formula for the area of a triangle with sides of length a and h is sqrt(h * a / 2), but the author doesn't seem to know that.\n\nNot sure if it's still in the latest version of Python, but the sqrt function is available in the math module.\n\nI'm pretty sure it is.\n\nI've been looking for a good tutorial on Python for a while. This is the best one I've found so far.\n\nI'm using Python at work and would love to see a tutorial for that.\n\nI'm not sure why this", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    a = int(a)\n    h = int(h)\n    return (a * h) / 2\nThis is the best way to write the function.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a*a + h*h)\ntriangle_area(5, 3)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt( (a*a + (b*b+c*c)/2)**2 )", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * a\nThat's not a function, that's a string.  Also, you're not returning anything.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt(a*a + b*b + c*c)\n\nI'm sure I'm missing something, but why isn't the code for this in the standard library?\n\nBecause it's a bad idea to write a function like this. It's trivial to write a function that \"works\" but is very slow, and the only way to make it fast is to do a bunch of extra work.\nThe standard library function is almost certainly a lot faster, and can be made a lot faster if you do a bunch of extra work.\n\nI'm not sure what the \"bunch of extra work\" is that you're talking about.\n\nIn general, the \"bunch of extra work\" is to carefully optimize the function. It's easy to write a function that \"works\" but is not optimized. It's hard to write a function that \"works\" but is optimized.\n\nI don't think that's true. It's easy to write a function that \"works\" and is optimized, but it's hard to write a function that \"works\" and is optimized without compromising the function's correctness.\n\nIn the case of a function like this, it's easy to", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\nYou could probably replace the sqrt with log and get the same results.\nThat's probably more accurate, but I don't think it's as easy to understand.  I'm not sure that's a bad thing, but I think it's a reason to use sqrt.\nI agree, I was just pointing out that the sqrt is unnecessary.\nI think that sqrt is easier to understand for people who have never seen log.\nThis. I don't know why, but I find it much easier to understand a formula that uses a sqrt.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h/2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * (2 * (h - a) / (h - a + 1))\nI guess it's a joke. I'm not sure why it's funny though.\n\nIt's funny because the answer is incorrect.\n\nI'm not sure how to explain why it's incorrect. I can see how it's incorrect, but I don't know why.\n\nThe area of a triangle is given by\n.\nThe area of the triangle is\n.\nThe equation in the post is\n.\nIf you substitute into the equation, you get\n.\nThis is wrong, because the area of a triangle is the sum of the areas of the three sides.\n\nI think it's a joke.\n\nI think it's a joke too, but I'm not sure why it's funny.\n\nA triangle is a three sided polygon with an area of A, where A is the sum of the areas of the three sides.\nThe post says that the area of a triangle is given by\n.\nThis is wrong, because it is not the area of the triangle, but rather the area of a rectangle with sides that are the lengths of the three sides of the triangle.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * h) / 2\nThis is a really cool example of the power of the functional style.\n\nYes, I think it is. It is also a very nice example of why I prefer to use the \"let\" keyword.\n\nI think this is a great example of the power of the functional style.\n\nI also think this is a great example of the power of the functional style.\n\nYou are correct, this is a great example of the power of the functional style.\n\nI am not sure I see the power of the functional style.\n\nThis is a great example of the power of the functional style.\n\nI like this example of the power of the functional style.\n\nI think this is a great example of the power of the functional style.\n\nI agree. This is a great example of the power of the functional style.\n\nI think this is a great example of the power of the functional style.\n\nI'm not sure I see the power of the functional style.\n\nI think this is a great example of the power of the functional style.\n\nI think this is a great example of the power of the functional style.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / 2\n    def triangle_area_from_side(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area_from_side(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2\n\nSee also\n Pythagorean theorem\n\nReferences\n\nExternal links\n http://www.geocities.com/AreaOfTriangle/</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1.0 * (a.h - h) / (a.h + h))", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi * (a**2 / h)\nI'm not a math expert but this seems to be a bad solution. It doesn't take into account the fact that the area of a triangle is the sum of the areas of its three sides.  The area of the triangle will be 7.5, but the area of the rectangle formed by the three sides will be 5 * pi * (a/h)\nI'm not a math expert either, but I think the code is supposed to be:      def triangle_area(a, h):         return math.pi * (a**2 / h)  You're supposed to pass the length of a side and the height of the triangle to the function, not the other way around.\nThat's correct. I was just pointing out that the code in the OP is not correct.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * (a - b) + b) / 2\n    \"\"\"", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * (a - h) / 2\nThis is fine for the case when a = h.\nHowever, if a!= h, it returns the wrong value.\nConsider:\n>>> triangle_area(5, 3)\n7.5\n>>> triangle_area(5 - 3, 3)\n0.5\n>>> triangle_area(5 - 3, 2)\n1\n\nI'm not sure I understand what you're saying.\n\nI think the problem is that the function doesn't take into account the case where a = h.\n\nIn this case it's obvious the function returns 0, but for the more complicated case where a!= h, it returns the wrong value.\n\nI'm not sure I understand the problem.\n\nThe problem is that the function doesn't take into account the case where a = h.\n\nIn this case it's obvious the function returns 0, but for the more complicated case where a!= h, it returns the wrong value.\n\nI don't understand the problem.\n\nThe problem is that the function doesn't take into account the case where a = h.\n\nIn this case it's obvious the function returns 0, but", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * (a - 1) / 2) / (h * (a - 1))\nI don't think that works. The area of a triangle is the area of a triangle, not the area of one of its sides.\n\nThe function is correct, but it's not quite what I think the author of the article was looking for.\n\nI thought the article was about the triangle inequality, not the triangle area.\n\nThe triangle inequality is a part of the triangle area.\n\nThe article's author is a bit confused. The triangle inequality is a theorem, not a formula.\n\nA formula is a statement of a relationship between two quantities, which is exactly what the triangle inequality is.\n\nI'm not sure that is true.\n\nI'm not sure it's not.\n\nI am not sure that it is not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not not", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a**2)**(h**2)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt((a.x*a.x) + (a.y*a.y) + (a.z*a.z))\nI think this is a better solution.\n\nThe OP is using Python 2.\n\nI didn't notice that.\n\nIf you're using Python 2, you can use the built-in function \"trinagle\", which is slightly faster than the above solution:\n>>> from math import sqrt\n>>> trinagle(5, 3)\n7.5\n\nI don't see any reason to use a function to calculate the area of a triangle when Python has a built-in function for that.\n\nIt's not always faster.\n\nI've never seen a case where it wasn't, and I've tried it on many different input cases.\n\nIt's not about the number of inputs, it's about the number of computations. The built-in function will have to iterate through the three edges of the triangle to calculate the area. This function will calculate it once and then return the result.\n\nOh, I see what you're saying. In that case, you're right.\n\nThis is the", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)\nI'm not sure what you're trying to do with this, but I'm pretty sure you don't need to define a function for every single case.\nI'm trying to find a way to calculate the area of a triangle. I know how to calculate the area of a square, a rectangle, a parallelogram, and a trapezoid.\nI think you're confusing a function with a class.  You don't need a function for every single case.  You need to define a class that defines a function for every single case.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (h * a) / (2 * h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1.0 / (h * h)) * (h * (h * h))\nI'm not sure what the function is supposed to do, but it doesn't do that.\n\nThe author has edited the post to show the correct answer, and to explain what went wrong.\n\nI was using the wrong formula for the area of a triangle. Thanks for pointing that out.\n\nI don't get why you're using the formula for the area of a rectangle.\n\nI was trying to find the area of a triangle with a given length of one side and the high point of the triangle. The formula I was using was for the area of a rectangle with a given length of one side and the high point of the rectangle. I was using the wrong formula.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt( ( (a * a) + (h - h * h)) / (h - 1) )", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + b*b)\nThis is a much better solution than mine.  I was trying to find the area of a triangle with an arbitrary number of sides.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * h / 2\n    \"\"\"\n    def triangle_area(a, h):\n    \"\"\"Given length of a side and height for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n    \"\"\"\n    def triangle_area(a, h):\n    \"\"\"Given length of a side and hypotenuse for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * (h - 1) / 2\n\nI would also make the function named \"triangle_area\" more generic, e.g. \"area\" and the parameter \"h\" should be a single argument.\n\nYeah, I've been doing this for a while, and I'm just now realizing that. I'm going to go ahead and refactor this.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.sqrt((a.w*(a.h+a.w)+(a.h*(a.w+a.h)))**2)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + b*b + c*c)\nThis is a really bad algorithm. It's horribly inefficient. It's not even correct.  The correct answer is:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - 1) / 2", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a * (h - (a / 2))\nI like that. I'm a big fan of the \"one-liner\" style, but sometimes the Pythonic style is just so much more readable.</s>", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (1 / (2 * a) + (1 / (2 * a) + (1 / (2 * a))))\nIt's a bit strange to see this in Python. I would have expected something like:", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return (a * (h - 1)) / 2\nI really like the way this is done in Ruby. It's just so simple and elegant.\n\nI like the way the Python solution is written, but I like the way the Ruby solution is written even more.\n\nI like the way the Ruby solution is written, but I like the way the Python solution is written even more.\n\nI like the way the Python solution is written, but I like the way the Ruby solution is written even more.\n\nI like the way the Ruby solution is written, but I like the way the Python solution is written even more.\n\nI like the way the Ruby solution is written, but I like the way the Python solution is written even more.\n\nI like the way the Ruby solution is written, but I like the way the Python solution is written even more.\n\nI like the way the Ruby solution is written, but I like the way the Python solution is written even more.\n\nI like the way the Ruby solution is written, but I like the way the Python solution is written even more.\n\nI like the way the Ruby solution is written, but I like the way the Python solution is", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return h * (a-1) / (h-1)\n\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.\nThe area of a triangle is sqrt(h*base*height)\nThe problem with this is that it's not accurate.", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return sqrt(a*a + h*h)", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return math.pi*h/a\nThis is not a function.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined.\n`math.pi*h/a` is not defined", "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\" \"\"\"\n    return a*h\nThis is a very old post, but I'm curious: what do you mean by \"high return area\"?\n\nI'm assuming he means the area of a triangle with the given side length, i.e. the area of a triangle with one side of length a.</s>"]]