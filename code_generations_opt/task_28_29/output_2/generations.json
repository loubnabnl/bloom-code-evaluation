[["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    for i in strings:\n        return ''.join(strings[i])", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat()\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n>>> concatenate([])\n'\n>>>\n\nThe problem with this is that it's not obvious that it's a function. It's not even a function in the usual sense. It's just a list comprehension.\n\nI think the author was trying to avoid the usual \"from x import *\" syntax.\n\nI think they were trying to avoid the \"import x as x\" syntax.\n\nimporting x as x is bad because it makes the code less readable, but it doesn't make it harder to understand what the code does.\n\nI think you're both right.\n\nI agree that it is not the best way of doing things, but I've been doing it for years, and it works for me.\n\nIt's a good thing that you are aware of it.\n\nNo, it's not a good thing.\n\nI think the OP is saying that it's good that you're aware of it, not that it's good that you're doing it.\n\nI don't see how it's a good thing that he's aware", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.reduce(lambda x, y: x + y)\n\nSo I think this is equivalent to:\nstrings.reduce(lambda x, y: x + y)\n\nI think you're right. But the author's point is that it's not immediately obvious.\n\nI don't understand the point of this post. Is it that \"concatenate\" is not the name of a built-in Python function? Because it is.\n\nI think the point is that the built-in function is not named \"concatenate\" (it's \"join\"), and that the built-in function is not the same as the \"concatenate\" function in the standard library.\n\nI don't think that's the point at all.\nThe point is that the built-in function is named 'join', which is not the same as the 'concatenate' function in the standard library.\n\nI don't think that's the point at all.\nThe point is that the built-in function is named 'join', which is not the same as the 'concatenate' function in the standard library.\n\nI don't think that", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.pop(0))\n\nI like it!\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(None)\n\nNice. I'm going to steal that.\n\nI've been using this for a while. It's a bit more verbose than the Python version, but I don't mind.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nThis is a good example of how to avoid the need for type annotations.\n\nThe real problem is that the first example is completely unreadable.\n\nI don't know Python, but I'm pretty sure that it's equivalent to:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return \"\".join(strings)\n\nThe other one is not really a bug, it's just a feature:\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.get(0))\n\nThis is a classic example of why you should never use the `from typing import *` idiom.\nYou can easily replace the `List` with a `String` or a `int` or even a `str(int)` or a `str(str(int))` and it will still work.\n\nYou can also use `str(str(str(int))),` which is even more fun.\n\nThe more str() you put in the list, the faster it gets.\n\nThis is not python, this is _pythonic_\n\nI like to use from itertools import count, which is a little more pythonic than typing.count()\n\nI like to use \"from itertools import count\" too, but that's because I want to use the whole itertools package, not just count().\n\nI like to use \"from itertools import count\" because it's the least amount of typing.\n\nI like to use \"from itertools import count\" because it's the least amount of typing and I can use the whole itertools package.\n\nI like to", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    if len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0] + strings[1:]\n\nI'm not sure what your point is.\n\nThe point is that Python is a great language to write programs in, but a terrible language to write _programming languages_ in.\n\nI don't understand the distinction.\n\nYou can't write a decent programming language in Python because Python is too limited.\n\nI can't help but think of this article whenever someone says they're going to build a new language.\n\nI have to disagree with this. I've written a few languages, and the only reason I can see to make a new language is that you don't like something about the existing languages.\nI don't like the fact that Python doesn't have a proper module system. I don't like the fact that Python has no built in support for dynamic typing. I don't like the fact that Python is dynamically typed.\nI don't like the fact that Python is a language for the weak minded.\nI don't like the fact that Python is a language for the", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nThis is a pretty common idiom in Python, and is a good example of why I like Python so much. It's concise, obvious, and readable.</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.get(0))\n\nI've always been a fan of  and.\n\nI use this all the time. It's not only faster than list concatenation, but also more readable.\n\nI use this all the time for lists that are too big to fit on my screen, so I can't see the whole thing at once.\n\nI'm a fan of:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nIt's not the most readable code, but it is not the worst thing ever. I'd rather see this than the following:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(i,'', strings.last()))\n\nThis is also a good example of why it's important to define the types of your variables. If you just have a list of strings, you can't tell whether the concatenation is meant to happen in Python, or the user's code. This is why the List[str] type is so useful.\n\nI think the type of concatenate is fine. It is a function that takes a list of strings and returns a string. There is no ambiguity.\n\nThe type is fine, but if you're using a type, you should use it consistently.\n\nI'm not sure I agree with this. Python has no type checking, so the type is purely for the developer's benefit. There's no need to enforce the type on the user.\n\nIt's not that you have to enforce the type on the user, it's that you shouldn't be using a type if you don't need it.\nIf you're using a type, you should use it consistently.\n\nI'm not sure I agree with this. Python has no type checking, so the type is purely for the developer's benefit", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0, len(strings)) for _ in strings)\n\nI think the title is misleading. It should be \"from typing import List, concatenate\".\n\nI think you're being pedantic. The title is fine as is.\n\nThe title is not fine as is. It should have been \"from typing import List, concatenate\" or \"from typing import List, concatenate('a')\".\n\nI'm pretty sure that it should be \"from typing import List, concatenate('a')\".\n\nThe title is misleading, and that's a problem.\n\nI don't know about that. I think it's just a matter of taste. I read the title and thought \"I wonder what the author is going to do with the list\" and was pleasantly surprised.\n\nI agree with you. I thought it was a fun way to start the article.\n\nThis is like a one-liner in python.\n\nIt's a one-liner in Python, too.\n\nI think that's the point of the article. It's a one-liner in Python, but not in Python.\n\nI think", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nWow, that's pretty cool.\n\nI think it's a joke.\n\nI was thinking that too, but I didn't want to be the one to say it.\n\nIt's not a joke.\n\nI don't get it. Why not just use a list comprehension?\n\nNo need for a list comprehension. It's a one-liner.\n\nAnd why is that better than a list comprehension?\n\nIt's not. It's just an alternative.\n\nIf it's not better, then why is it better?\n\nBecause it's shorter.\n\nI think you missed the joke.\n\nI think you did.\n\nI don't get it. Why not just use a list comprehension?\n\nBecause it's a one-liner.\n\nAnd why is that better than a list comprehension?\n\nIt's not. It's just an alternative.\n\nIf it's not better, then why is it better?\n\nBecause it's shorter.\n\nI think you missed the joke.\n\nI think you did.\n\nI don't get it. Why not just use a list comprehension?", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    for i in strings:\n        return strings[i].replace(\" \", \"\")\n\nI'm not sure what the point of this is. There's no real advantage to it, as the article demonstrates. The list comprehension is more readable, and it does the same thing.\n\nI agree that the list comprehension is more readable. However, I think that there is a benefit to this. The fact that concatenate() is a function makes it more reusable. For example, you could use this to concatenate a list of strings to a list of integers:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.reduce(lambda s, t: t +'' + s)\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.reduce(lambda x, y: x + y, 0)</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.pop(0))\n\nThis is a nice example of the \"Python Way\", but I'm not sure it's a good example of \"Why Python is so great\".\n\nIt's a great example of why Python is so great _for beginners_, which is what the author is aiming at.\n\nI don't think that beginners would be impressed by this. A beginner would be more impressed by the fact that you can make a GUI in 5 minutes in Python.\n\nI don't think that's a good example either. A beginner would be more impressed by the fact that you can make a GUI in 5 minutes in Tkinter.\n\nI think it's a good example because it's a GUI framework that's _integrated into the language_, not a library that you have to import.\n\nI agree. I was just making a joke about how everyone is always so eager to point out how easy it is to use Tkinter, as if it's the only GUI toolkit for Python.\n\nI'd say that the \"Python Way\" is more about thinking about the problem in a very clean way and then finding a solution that is as expressive as possible", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(', ')\n\nThis is a really, really bad example. The first example is obviously correct, and the second one is clearly wrong.\n\nWhy is the second one wrong?\n\nBecause the string returned is \"abc\", not \"ab\".\n\nI think you mean \"ab\" instead of \"bc\".\n\nThat's what I get for writing code at 4am.\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".\n\nI think you mean \"at 4am\".", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI'm not sure if this is meant to be a joke or not, but if it's not, it's very bad code.\nThe first thing you should do is to import the string module, which is where the `join` method is defined.\n\nIt's an example from the Python tutorial.\n\nI know, but the point is that the example is bad.\n\nI don't think it's bad, it just doesn't have any comments.\n\nI agree. I didn't find it hard to understand, but it's also not good practice.\n\nThe first thing I do when I want to learn a new programming language is go to the documentation site and read the tutorial.\nI remember when I first started with Python, I read the tutorial and tried to write a program. It was a very simple program that did nothing useful. But I learned a lot of Python by writing that program.\nI think it's a mistake to start with a tutorial that just gives you a bunch of code and says \"here you go, do this.\" It's better to start with the basics and then build up from there.\n\nThat's exactly how I learned Java", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.get(0))\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    for string in strings:\n        string += string[0]\n    return string\n\nThis is a good example of the difference between a \"programming language\" and a \"scripting language\".\n\nI don't know, I think it's a good example of a \"scripting language\" that has a lot of the same features of a \"programming language\".\n\nIt's a good example of the difference between a \"scripting language\" and a \"programming language\", which is what I said.\n\nI don't know, I think it's a good example of a \"programming language\" that has a lot of the same features of a \"scripting language\".\n\nIt's a good example of the difference between a \"scripting language\" and a \"programming language\", which is what I said.\n\nI don't know, I think it's a good example of a \"programming language\" that has a lot of the same features of a \"scripting language\".\n\nIt's a good example of the difference between a \"scripting language\" and a \"programming language\", which is what I said.\n\nI don't", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nThis is a very bad example. I'm not sure if you're trying to show the usefulness of the function or the usefulness of the type system.\nIn the first case, you should probably show the code in a more readable way.\nIn the second case, you should probably use a more complex example to show the type system.\n\nThe point of the example is that it is an example of how the type system can be used to catch errors that are more difficult to catch at run time.\n\nYes, I understand that. My point is that concatenating a list of strings is a trivial task. If you can't do it without a type system, then you have a problem.\nThe type system is great for catching errors, but this isn't the type system's strength.\n\nI don't think you understand what I'm saying.\nThe point of the example is that the type system can catch errors that are difficult to catch at run time.\nThe example is trivial because it's an easy error to catch.\n\nI understand what you're saying. What I'm saying is that the example is trivial, and so is the error.\nThe example is", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.get(0))", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI don't think there's anything wrong with that. The type signature makes sense to me.\n\nThe example is much better, but I still don't get it. I'm not sure what the problem is.\n\nI think the problem is that the type signature is \"concatenate :: [str] -> str\". The function is given a list of strings and returns a single string, so the type signature should be \"concatenate :: [str] -> str\".\n\nI don't think that's the problem. I think the problem is that the function is being used in an expression, not a function call. The type signature should be \"concatenate(strings: List[str]) -> str\", as it is in the example.\n\nI think that's the problem too.\n\n\"concatenate(strings: List[str]) -> str\" is a function call, not an expression.\n\nThe example is better, but the type signature is still wrong.\n\nI think the problem is that the type signature is \"concatenate(strings: List[str]) -> str\". The function is given a list of", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI think that's the most beautiful thing I've seen in a long time.\n\nI've always been a fan of this one, which I found on reddit:\n\n>>> import sys\n>>> sys.path.append('.')\n>>> print(sys.path)\n['.']\n\nI wonder how many people are going to try that at work today?\n\nThis is one of the best ones I've seen. It's also one of the worst ones I've seen.\n\nimport sys\nsys.path.append('.')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(str)\n\nI think this is the most concise version I've seen.\n\nThanks!\nI guess it's a bit of a trick question. I don't think I've ever seen a method called concatenate in Python.\n\nIf you can't tell whether it's a trick question or not, it's probably a trick question.\n\nIf you can't tell whether it's a trick question or not, it's probably a trick question.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.\n\nI am not sure if this is a trick question or not.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nimport itertools", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat()\nI like how it's a list of strings, but then the return value is a string.\n\nYeah, that's not a good example. A better one would be:\n>>> concatenate('foo', 'bar')\n'foo bar'\n>>> concatenate('foo', 'bar')\n'foo'\n\nI think the real problem is that the function is called 'concatenate'.\nThe problem is that the function is called 'concatenate'.\nThe problem is that the function is called 'concatenate'.\nThe problem is that the function is called 'concatenate'.\nThe problem is that the function is called 'concatenate'.\nThe problem is that the function is called 'concatenate'.\n\nI had to laugh at the \"from typing import List\" bit. I'm still not used to Python's use of \"from __future__ import...\".\n\nThe \"from __future__ import...\" is only used for the development version of Python (2.6 and above). The standard library is not yet ready for this, so in the meantime we have to use \"from typing import...\".", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nYou should use the `join` function instead of `strings.join('')`, because the latter is slow and causes a lot of memory to be allocated.\n\nThanks for the tip. I've updated the code.\n\nI was expecting a list comprehension.\n\nI thought it was going to be a list comprehension too, but I think it's a good thing that it isn't.\n\nI think this is a nice example of how to use list comprehensions properly.\n\nNo, it's not. The author could have achieved the same result with a single line of code (or even a single expression).\n\nI don't think the author was going for \"the shortest code possible\".\n\nI'm not sure what the author was going for.\n\nI guess he was trying to show off the list comprehension syntax.\n\nI think it's nice. I prefer the comprehensions to the old-style for loops.\n\nI prefer the old-style for loops to the new-style list comprehensions.\n\nI prefer the new-style list comprehensions to the old-style for loops.\n\nI prefer the old-style for loops", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nIf you have to call `import` for this, you should probably use a package.\n\nI can't believe this is the top comment. I'm not saying you're wrong, but it's just a very strange thing to say.\n\nI don't think it's strange at all. It's a simple, small example and the answer is to use a package.\n\nI don't think it's strange, either. I think it's a good idea, especially for a small example.\n\nI'm not sure what the point of this is. The question is a simple one, and the answer is a simple one. There is no need to import anything.\n\nI think it is a good example of the use of \"from typing import *\". I think it is a good example of the use of \"from typing import List\".\n\nI think this is a good example of why the \"from typing import *\" idiom is a bad idea.\n\nI don't think it is a bad idea. I think it is a good example of the use of \"from typing import *\". I think it is a good example of the use of \"from typing", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nThe author of the article should have used the \"import\" module instead.\n\nfrom typing import import", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nI would just use \"return strings.join(\" \")\".\n\n'.' is the operator for concatenation in Python.\n\nWhat if you want to concatenate a list of strings with a list of lists?\n\nThen you can use the \"join\" method of list of lists.\n\nI'm not sure why you're being downvoted.\n\nI think this is a reasonable response to a reasonable comment. I'd like to see a better answer.\n\nThe point is that it's not a reasonable comment, because the answer to the problem of concatenating a list of strings with a list of lists is not \"you can use the 'join' method of list of lists.\"\n\nThe comment was \"I would just use \"return strings.join(\" \")\".\", and the response was \"'..' is the operator for concatenation in Python.\".\n\nI guess I'm not sure why the comment was reasonable. If you need to concatenate a list of strings with a list of lists, then you can't use the '.' operator.\n\nThe point is that the comment was not about concatenating a list", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\"\")\n\nIt's a nice example of how to write a _bad_ Python program.\nFirst, the function is named \"concatenate\" but it's not a function, it's a method of the type List.\nSecond, the function is not even a method of List, it's a method of the class string.\nThird, the function is not even a method of string, it's a method of the class str.\nFourth, the function is not even a method of str, it's a method of the class str.\nFifth, the function is not even a method of str, it's a method of the class str.\nSixth, the function is not even a method of str, it's a method of the class str.\nSeventh, the function is not even a method of str, it's a method of the class str.\nEighth, the function is not even a method of str, it's a method of the class str.\nNinth, the function is not even a method of str, it's a method of the class str.\nTenth, the function is not even a method of str, it's a method", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(i) for i in strings)", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nNot really a very good example of why the article is wrong. In that example, the function is just a simple wrapper around a built-in Python function, which is better than what most Python programmers would write.\n\nThe article is not wrong, but the examples are.\n\nI'm not sure about that.\nThe article is wrong in the sense that it says that the function is \"just a simple wrapper around a built-in Python function\". This is not true, as the function is not just a simple wrapper around a built-in Python function.\nThe article is not wrong in the sense that it says that \"the function is an expression, not a statement\". This is true.\nThe article is not wrong in the sense that it says that \"the function is a callable\". This is true.\nThe article is not wrong in the sense that it says that \"the function is a subroutine\". This is true.\nThe article is not wrong in the sense that it says that \"the function is a closure\". This is true.\nThe article is not wrong in the sense that it says that \"the function is a function\". This is true.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI like this one:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(string.format(\"%s %s %s\", strings))\n\nThere's also the issue of being able to use the resulting string as an argument to a function. If you're not careful, you'll get a \"TypeError: argument 1 must be str or str-like\" error.\n\nI had the same thought, but the function doesn't take any arguments.\n\nIt does, if you call it as `concatenate('a', 'b', 'c')`.\n\nThat's not an argument to the function, that's a call to the function.\n\nI don't think you understand what I mean. You can call it as `concatenate('a', 'b', 'c')`, and then pass the resulting string to another function as an argument.\n\nI get it, I just think it's not a very useful use of the function.\n\nI agree. It's not the most useful use of the function, but it's still a valid use.\n\nI'd like to point out that it's not a valid use of the function, because the function has no arguments.\n\nI don't think you understand what", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    if strings == []:\n        return strings\n    return ''.join(strings)\n\nThis is the kind of thing that makes me want to try out Python.\n\nI'd recommend it.\n\nI do use Python, but not as my main language. I have a project in mind that would benefit from a Pythonic approach.\n\nThe problem with this is that you can't pass a list of strings as an argument.\n\nYou can pass a list of strings as an argument to a function.\n\nYou can pass a list of strings as an argument to a function that takes a list of strings as an argument.\n\nYou can pass a list of strings as an argument to a function that takes a list of strings as an argument that takes a list of strings as an argument.\n\nYou can pass a list of strings as an argument to a function that takes a list of strings as an argument that takes a list of strings as an argument that takes a list of strings as an argument that takes a list of strings as an argument.\n\nYou can pass a list of strings as an argument to a function that takes a list of strings as an argument that takes", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    if strings:\n        return ''\n    else:\n        return strings[0] + strings[1] + strings[2] + strings[3] + strings[4] + strings[5]\n\nI like this one:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\nI like this.  It's not about \"how do I do this in python\" but \"how do I do this in python the way I would in other languages\".\n\nI think this is one of the best features of python. The syntax is so close to other languages that it's really easy to take something you've already written in another language and translate it to python.\n\nI agree. I've only been writing Python for a few months and I've written a couple of programs that I would have had to do some serious learning in order to do in C#.\n\nI really like the way Python handles strings. It's so much nicer than in Java or C#, and it's not a lot more verbose than in Perl.\n\nI've been writing python for about a year and I still don't know how to do this.\n\nWell, you can't. You can do this:\n\"a\" + \"b\" + \"c\"\nBut not this:\n\"a\" + \"b\" + \"c\"\n\nYou can, just not in the way you would expect.\n\nThat's what I meant.\n\nI", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(str)\n\nThat's a little better.\n\nI'm pretty sure it's exactly the same.\n\nNo, it's not. It's an example of a _good_ pythonic solution.\n\nI'm not a Python expert, but I thought that the first was the Pythonic solution, and the second was the \"OO\" solution.\n\nI think it's the other way around. The first is OO and the second is Pythonic.\n\nNo, the second is the Pythonic solution, because the first is the OO solution.\n\nI would have expected the Pythonic solution to be the first.\n\nYou're right, I had it backwards.\n\nI like the second one. I've seen this kind of thing done in C# too:\nstring[] strs = new string[] { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nThis is a good example of why using a Pythonic style is important. Python has many string formatting functions, but the one that does what you want is called 'join', and it is not in the standard library.\nIn Ruby, you'd use String#join, which is in the standard library.\n\nThe list comprehension syntax is pretty much identical to Ruby's, which I find to be more Pythonic.\n\nThis is really cool. I'm going to have to go back and look at the code to see how it works.\nI'm curious about the type of the argument to the function. Is it a list of strings? It doesn't say. If it's a list of strings, then it's not really a list of strings, since it's immutable. So, is it really a list of strings? Or is it a list of something else?\nIt's a minor nit, I know. But I'm just curious.\n\nIt's a list of strings. It is immutable, but the function is not.\n\nI'm not sure what you mean by that.\n\nThe function does not change the original list, but it does return a new", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings[0])\nI think this is a better example, since it doesn't have any magic and doesn't make any assumptions about the language.\n\nThe example in the blog post is a little more realistic since it shows how to concatenate lists of different types.\n\nThat's not a concatenation though. That's an application of a function to each element of the list.\n\nThe blog post is not about how to implement concatenation, but about how to implement it in a type-safe way.\n\nThe title is \"from typing import concatenate\". That's what I was responding to.\n\nIt's not a good example, but the point of the article is that Python's built-in `list` type is very powerful, and that it can be used to implement a lot of functionality that other languages might require a separate type for.\n\nI don't think it's a good example because the function is using the 'list' type, which is not the same thing as the Python built-in 'list' type.\n\nI think it's a good example because it shows that Python's list type is more powerful than many other languages' list", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(string.punctuation)\nI think this is a better way of doing it:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0,''))\n\nYou should probably use a dictionary instead of a list for the argument.\n\nYou are right, I'll do it.\n\nThe code is also a bit ugly.\nYou should use the following:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nSo it's a list comprehension?\n\nIt's a list comprehension with an extra step.\n\nNo, it's a list comprehension with an extra step that makes it more readable.\n\n\"with an extra step that makes it more readable\"\nI would say \"with an extra step that makes it more readable and more efficient\".\n\nI'm not sure if I agree. In my mind, the \"extra step\" is an extra line of code that needs to be maintained. The \"more readable\" part is only a side-effect of the \"more efficient\" part.\n\nI think this is an interesting example of the trade-offs of readability vs. efficiency.\nI would argue that in this case, the \"extra line of code\" is a _part_ of the readability of the code. The additional line of code is there to make the code more readable.\n\nI would say that the extra line of code is a part of the readability of the code.\nThe additional line of code is there to make the code more readable.\n\nI don't really see how that's any better.\n\nI think it's a matter of", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nI'm not sure this is the best example of \"why import\". The \"from typing import List\" doesn't add anything to the program. It's only a comment.\nThe \"def concatenate\" is a bit more interesting. It's a bit of a contrived example, but it's a good illustration of why you might want to import a module.\nThe thing is, you could have just as easily written:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nI don't understand. I get the same result with\nstrings.join('')\n\nYou're right. I was just trying to make the code more readable.</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nThis is Pythonic. I like it.\n\nI don't. I have no idea what the method does.\n\nThen you need to learn more Python.\n\nI know Python, I just don't know what the method does.\n\nHow do you know Python if you don't know what the method does?\n\nBecause I know how to use it. I don't know what it does.\n\nHow can you know how to use it if you don't know what it does?\n\nBecause I've used it before. I don't know what it does.\n\nYou're not making any sense.\n\nI know what Python is, but I don't know what the method does.\n\nYou can't know what Python is if you don't know what the method does.\n\nI know what Python is, I just don't know what the method does.\n\nI know what the method does, I just don't know what Python is.\n\nI don't know what the method does, I just know what Python is.\n\nI don't know what the method does, I just know what Python is.\n\nI know", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI've been using this for years, but it doesn't seem to be that well known.\n\nIt's not very well known because it's a bad idea.\nI don't think I've ever seen an example where it was more than a few lines of code, and in most cases, you're better off just using a list comprehension:\n[x for x in my_list if x.lower() in my_list.lower()]\n\nThe example in the post is just a few lines of code, but I have definitely seen longer examples. I don't think that's a good reason to dismiss the idea.\n\nIt's also a bad idea because it's inefficient.\n\nWhat's inefficient about it?\n\nIt's not any more efficient than a list comprehension.\n\nIt's not any less efficient than a list comprehension either.\n\nIt is.\n\nHow is it more efficient than a list comprehension?\n\nIt's not.\n\nWhy not?\n\nBecause it's not.\n\nHow is it not?\n\nIt's not.\n\nHow is it not?\n\nIt's not.\n\nHow is", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nIn python 2:\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\nThis is a great example of how to write python 2 code that doesn't work in python 3.\n\nI was under the impression that list concatenation worked in python 2?\n\nThe list concatenation in python 2 does work. But this snippet doesn't work, because it doesn't take advantage of the string literal syntax in python 3.\n\nI don't think you need to use the string literal syntax in this case, because it is not a list of strings, but a list of strings _plus_ a single empty string.\n\nThis is the correct answer.\n\nI am using a similar approach for some of my code:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index)\n\nI don't think it's a good idea to use a list comprehension to do a one-liner.\n\nI think it's a great idea, as long as you remember to use the \"one-liner\" idiom.\n\nI agree, list comprehensions are a great tool to use for one-liners, as long as you keep them one-liners.\n\nI don't understand this \"one-liner\" concept.\n\nThe OP is talking about the idiom that allows you to write programs that fit on one line of code.\n\nI know. But I don't understand why you would want to write a program that fits on one line of code. I mean, it's not like you're writing on a punch card.\n\nThe idea is that you can write a one-liner and paste it into a shell or some other script, and it will run the code without having to worry about importing anything or setting up any variables.\n\nI guess I'm not seeing the point. Why not just use a function?\n\nBecause the point of a one-liner is that you can copy/paste it into a shell.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings\n\nfrom typing import List\n\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    '''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return strings\n\nfrom typing import List\n\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    '''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return strings\n\nfrom typing import List\n\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    '''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return strings\n\nfrom typing import List\n\n    \"\"\"", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\nI think this is more Pythonic:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\nI think that's pretty much the same.\n\nThat's not the same. The Python version is a list comprehension, and as such, it's more general. It can handle any type of iterable.\nThe C version is specific to strings.\n\nI like the C version better. I'm not sure why, but it just seems more readable to me.\n\nThe C version is also more efficient.\n\nI think I like the C version better, but it's probably because I'm more familiar with C.\n\nI think the C version is better, but I'm not sure why.\n\nI think the C version is better, but I'm not sure why.\n\nI think the C version is better, but I'm not sure why.\n\nI think the C version is better, but I'm not sure why.\n\nI think the C version is better, but I'm not sure why.\n\nI think the C version is better, but I'm not sure why.\n\nI think the C version is better, but I'm not sure why.\n\nI think the C version is better, but I'm not sure why", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0,''))\nI'm not sure how this is a \"shortcut\" to concatenate. It's a single line of code with a comment that it concatenates.\n\nIt's a shortcut to a single-line, one-liner.\n\nI don't understand why this was posted. It's not a shortcut. It's a one-liner.\n\nIt's a short-cut to the one-liner.\n\nI don't understand why this was posted. It's not a shortcut. It's a one- liner.\n\nIt's a shortcut to the one-liner.\n\nI don't understand why this was posted. It's not a shortcut. It's a one- liner.\n\nIt's a short-cut to the one-liner.\n\nI don't understand why this was posted. It's not a shortcut. It's a one- liner.\n\nIt's a short-cut to the one-liner.\n\nI don't understand why this was posted. It's not a shortcut. It's a one- liner.\n\nIt's a short-cut to the one-liner", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(', ')\n\nThis is a very simple example, but I find it useful to use this kind of thing when I'm working on a complicated algorithm. If I'm trying to figure out how to add two numbers together, I'll write a quick and dirty version of the algorithm on the side, and then add it to the code.\n\nYou can also use this to make sure you're using the same variable name in different places.\n\nYeah, I do that too.\n\nI find this useful when I'm working on a new project and I'm trying to figure out the best way to organize my code.\n\nI do this too.\n\nI do it too, but I do it when I'm trying to figure out a new feature.\n\nI find it useful when I'm trying to figure out how to solve a problem.\n\nI do it when I'm trying to figure out how to solve a problem.\n\nI do it when I'm trying to figure out how to solve a problem.\n\nI do it when I'm trying to figure out how to solve a problem.\n\nI find it useful when I'm trying to figure out how to solve a", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI'm not sure I see the point. I mean, I'm sure it's not _that_ bad, but\nwhy not just use the built-in string concatenation?\n\nThe built-in string concatenation is \"join\". So this is the same thing, but with a less verbose name.\n\nI think the point is that there's no need to import the list module, since it's already imported by the interpreter.\n\nI think the point is that he didn't know the built-in string concatenation was join.\n\nI think the point is that the import was there to demonstrate that it was a list of strings, not just a single string.\n\nI think the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point is that the point", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.pop())\nI've been using this for ages. I find it very elegant.\n\nIt's not bad, but it's not quite as elegant as:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(' ')\n\nfrom typing import List, Seq", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat()\nThis is a great example of why Python is so great. It's so simple and so clean.\n\nIt's not that great. It's a one-liner. It's a pretty good one-liner, but it's not great.\n\nI think it's a great one-liner. It's simple and it's obvious what it's doing.\n\nI agree. It's a great one-liner. It's simple and it's obvious what it's doing.\n\nThis is a great example of why Python is so great. It's so simple and so clean.\n\nIt's not that great. It's a one-liner. It's a pretty good one-liner, but it's not great.\n\nI think it's a great one-liner. It's simple and it's obvious what it's doing.\n\nI agree. It's a great one-liner. It's simple and it's obvious what it's doing.\n\nThis is a great example of why Python is so great. It's so simple and so clean.\n\nIt's not that great. It's a one-liner. It's a pretty good one-liner", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.reduce(lambda x, y: x + y, 0)\n\nBeautiful.\n\nThis is a good example of a case where the python approach is cleaner than the ruby approach.\n\nHow is the python approach cleaner than the ruby approach?\n\nIt's a single line of code instead of a whole method.\n\nIt's not a method, it's a function.\n\nI am sorry for the confusion. I meant to say that the python approach is cleaner than the ruby approach because it is a single line of code instead of a whole function.\n\nI still don't get it.\n\nThe python code is a single line of code. The ruby code is a whole function.\n\nThe python code is a single line of code, but that line is more than a line. It's a function call.\n\nYou are right, the python code is a function call. The ruby code is a method call.\n\nThe ruby code is a method call, but that line is more than a line. It's a function call.\n\nYou are right, the ruby code is a function call. The python code is a method call.\n\nThe python code is", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat()", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat\n\nconcatenate([]).append(1)\n\nconcatenate(['a', 'b', 'c'])\n\nconcatenate(['a', 'b', 'c'], 1)\n\nconcatenate(['a', 'b', 'c'], '2')\n\nconcatenate(['a', 'b', 'c'], '3')\n\nconcatenate(['a', 'b', 'c'], '4')\n\nconcatenate(['a', 'b', 'c'], '5')\n\nconcatenate(['a', 'b', 'c'], '6')\n\nconcatenate(['a', 'b', 'c'], '7')\n\nconcatenate(['a', 'b', 'c'], '8')\n\nconcatenate(['a', 'b', 'c'], '9')\n\nconcatenate(['a', 'b', 'c'], '10')\n\nconcatenate(['a', 'b', 'c'], '", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(0)\n\nimport types", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(str(i))\nI'm sorry, but that's just not right.\n\nThe code is right, but the implementation is wrong. The implementation should be:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nYou don't need to import the List type. If you don't want to import it, you can just use a list comprehension:\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\nYes, but then you can't use it on other types.\n\nI'm not sure what you mean.\n\nIn Python, you can use the `list` built-in function on any type, which is very useful for various things (like counting the number of elements in a list, or checking if a list is empty).\nIf you use a list comprehension, you can only use it on lists.\n\nWell, you can do it with a lambda:\n>>> [x for x in xs if x]\n[0, 1, 2]\n>>> [x for x in xs if x if x]\n[0, 1, 2]\n\nI think you meant:\n>>> [x for x in xs if x if x]\n[0, 1, 2]\n>>> [x for x in xs if x if x if x]\n[0, 1, 2]", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return''.join(strings)\n\nI like this style of coding, but I find the need for the \"from typing import List\" a bit weird.\nI'm not sure if it's just me, but I tend to put the name of the module at the top of the file. If I don't, I'll at least put it above the first line of code.\n\nI don't like it.\nI don't like importing a module and then doing nothing with it.\nI like the import statement to be used to set up a module so that the code can be read in a more concise and self-contained manner.\n\nI don't see the problem here.\nIt's just a form of documentation, but it's a form of documentation that is useful to the computer, not just the human.\n\nIf you're writing documentation for the computer, you're doing it wrong.\n\nI'm not sure if this is a joke or not.\n\nI'm not sure if you're being serious or not.\n\nI think this is a good way to start a project. It's easy to add more code later on, but it's difficult to make it more concise.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nI am not sure why this is getting voted up. It is just a stupid joke, not even a joke really.\n\nI think it's funny.\n\nI'm not saying it's not funny. I'm saying it's not a joke. It's a one-liner. It's not a joke.\n\nI'm not saying it's a joke. I'm saying it's a joke. It's a one-liner. It's a joke.\n\nYou're right, but you're still wrong.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concatenate lists of integers all the time.\n\nI concaten", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nThis is a bit of a straw man. The point of the article is that you can't get away with just importing the types you need and leaving out the ones you don't.\n\nYou can, however, do a lot of the same things using the type system.\n\nI don't think you can get away with importing the types you need and leaving out the ones you don't.\n\nSure you can.\n\nI don't think you can get away with importing the types you need and leaving out the ones you don't.\n\nSure you can.\n\nI don't think you can get away with importing the types you need and leaving out the ones you don't.\n\nSure you can.\n\nI don't think you can get away with importing the types you need and leaving out the ones you don't.\n\nSure you can.\n\nI don't think you can get away with importing the types you need and leaving out the ones you don't.\n\nSure you can.\n\nI don't think you can get away with importing the types you need and leaving out the ones you don't.\n\nSure you can.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return string.join(strings)", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings\n\nI'm not sure what's supposed to be wrong with that. Is the problem that you can use the List type as a type argument to a function?\n\nYeah, it's that you can use a type as a type argument to a function.\n\nIf you want a more sensible example, try this:\nfrom typing import List, string", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(s => s +'')</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nI think it's more idiomatic to use something like this:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat()\n\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n>>> concatenate(['a', 'b', 'c'], 'd')\n'abcdef'\n>>> concatenate(['a', 'b', 'c'], 'e')\n'abcdefghi'\n>>> concatenate(['a', 'b', 'c'], 'f')\n'abcdefghijklmnopqrstuvwxyz'\n>>> concatenate(['a', 'b', 'c'], 'g')\n'abcdefghijklmnopqrstuvwxyz'\n>>> concatenate(['a', 'b', 'c'], 'h')\n'abcdefghijklmnopqrstuvwxyz'\n>>> concatenate(['a', 'b', 'c'], 'i')\n'abcdefghijklmnopqrstuvwxyz'\n>>> concatenate(['a', 'b', 'c'], 'j')\n'abcdefghijklmnopqrst", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.pop())\n\nThat's a good one. I've got to remember that.\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return \"\".join(strings)\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\"\")", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI know that the OP's code was meant to be humorous, but I think it's worth pointing out that, in Python, the standard library already provides a string concatenation function:\n>>> 'a' + 'b' + 'c'\n'abc'\n\nI think it was a joke.\n\nI know it was a joke, but I was just pointing out that the joke doesn't work in Python.\n\nThe joke works in Python. It's just not the same joke.\n\nI think he was referring to the fact that the \"joke\" was a joke about the Python standard library, and that the standard library already has a string concatenation function.\n\nI was thinking more along the lines of \"The joke doesn't work because there is a built in function that does exactly what the joke suggests\".\n\nThat's a different joke.\n\nI know.\n\nI'm not sure what's going on here. The first example is a list of strings. The second example is a single string.\nI'm not sure what the author is trying to show here, or why he's confused that the two don't behave the same", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(s -> s +'')\n\nI'm sure there's a good reason for that, but it still looks weird to me.\n\nThe reason is that the string concatenation operator is also used in math as a function, and the syntax for a function call in Python is `func(arg1, arg2,...)`.\n\nI've always been a little confused about the use of \"from typing import List\" in Python.\n\nIt's a way to import a module without polluting your namespace with the module's name.\n\nI know what it does, but I don't understand why you would want to do it.\n\nIt's a way to import a module without polluting your namespace with the module's name.\n\nI know what it does, but I don't understand why you would want to do it.\n\nI don't understand why you wouldn't want to do it.\n\nI think it's one of those things that's not a big deal, but if you're going to do it, do it right.\n\nI agree. I've never seen anyone do it wrong. I've never seen anyone do it right, either.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return''.join(strings)\n\nThis is a nice example of why list comprehensions should be used judiciously. They are very concise and elegant, but the resulting code is hard to read.\n\nI'm not sure I agree with that. I think it's easy to read and easy to write.\n\nI agree with you.\nI've always felt that list comprehensions were a bit of a cop-out, but this article has convinced me otherwise.\n\nI've always felt that list comprehensions were a bit of a cop-out, but this article has convinced me otherwise.\n\nI think the best argument I've seen for comprehensions is that they are a way to combine a sequence of operations into a single one.\nThe problem is that it's hard to use them in a way that doesn't make the code hard to read. I think that if you're writing a large program, it's better to think of the whole program as a sequence of operations, rather than a single one.\n\nThis is a very nice example of why list comprehensions should be used judiciously. They are very concise and elegant, but the resulting code is hard to read.\n\nI'm not", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    if strings.count() > 1:\n        return strings[0] + strings[1:]\n\nThat's the first time I've seen a lambda used in a string literal.\n\nI think he was trying to avoid the Python 2/3 problem.\n\nI think he was trying to avoid the Python 2/3 problem.\n\nHow did he do that?\n\nThe lambda is a Python 3 construct.\n\nI didn't realize that was the point of the lambda. I thought he was just using it to avoid having to type out the string concatenation operator.\n\nYou can do that too, but it's more fun to use the lambda.\n\nI'm not sure I'd call it \"more fun\".\n\nI'd call it \"more Pythonic\".\n\n\"More Pythonic\" is a subjective term.\n\nI don't understand why this is a problem.\n\nIt's not a problem, but it's a bit of an annoyance.\n\nI'd say it's a problem.\n\nIt's a problem because it's an annoyance.\n\nThe problem is that it's an annoyance?\n\nThe problem is that it", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(str(i))\nI love Python and I love concatenate, but I think this is a bad example of concatenation. It would be more correct to use a list comprehension.\n\nWhat is the difference?\n\nList comprehensions are more concise and read better.\n\nI am not convinced.\n>>> strings = [\n'a',\n'b',\n'c'\n]\n>>> strings.concatenate([]).append('d')\n'a b c d'\n>>> strings.concatenate(['a', 'b', 'c'])\n'a b c'\n>>> strings.concatenate(['a', 'b', 'c'], 'd')\n'a b c d'\n\nThe first example is more readable to me:\n>>> strings = [ 'a', 'b', 'c' ]\n>>> strings.concatenate([]).append('d')\n'a b c d'\n\nNot to me, I'm afraid.\n\nThe first one is far more readable to me as well.\n\nThis is one of those things that I've never understood the fuss", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI know this is a joke, but it's a bad joke. Python's List type is mutable, so you can't write code like this.\n\nIt's not a joke, it's a critique of the way Python handles strings.\n\nI don't understand the joke, and I don't understand the critique. The joke is that you can't do something in Python that you can do in other languages?\n\nI think the joke is that Python strings are mutable, and that in other languages they're immutable.\n\nWhy is this funny?\n\nI think the joke is that in other languages, a string is an immutable object, whereas in Python a string is an immutable object.\n\nThat's not a joke, it's a fact.\n\nThe joke is that in Python, a string is an immutable object, whereas in other languages, a string is an immutable object.\n\nThat's not a joke, it's a fact.\n\nThe joke is that in Python, a string is an immutable object, whereas in other languages, a string is an immutable object.\n\nThat's not a joke, it's a fact.\n\nThe", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nI've never understood this. What's wrong with:\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n\nIt's not a problem per se, but it's redundant and it's not as obvious to someone who's new to Python.\n\nI'm not sure I see the point of the \"from typing import List\". It's not as if it's going to be any faster, and it's not as if it's going to make the code any more readable.\n\nI believe it's for readability. If you're not familiar with Python and you see:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nThat's not a good example, because the empty list is not a string.\n\nIt's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nI don't think it's a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat's not a good example because the empty list is not a string.\n\nThat", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\nI've never understood the appeal of these one-liners.\n\nI think they're a good way to introduce people to the language. If you're just starting out, you can be intimidated by the amount of syntax, but one- liners are simple and easy to understand.\n\nI think they're a good way to introduce people to the language. If you're just starting out, you can be intimidated by the amount of syntax, but one-liners are simple and easy to understand.\n\nI think they're a good way to introduce people to the language. If you're just starting out, you can be intimidated by the amount of syntax, but one-liners are simple and easy to understand.\n\nI think they're a good way to introduce people to the language. If you're just starting out, you can be intimidated by the amount of syntax, but one-liners are simple and easy to understand.\n\nI think they're a good way to introduce people to the language. If you're just starting out, you can be intimidated by the amount of syntax, but one-liners are simple and easy to understand.\n\nI think they're a good way to introduce", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concatenate(strings.pop(0))\n\nThe problem with this is that the result of `concatenate` is not a string.\n\nI'm not sure what you mean. It's a string.\n\nIt's a list of strings.\n\nI think the point is that the result is a string, not a list.\n\nIt's a list of strings.\n\nThat's not what a list is.\n\nI'm a bit confused as to what the point of this article is.\n\nThe point of the article is to show the difference between the Python 2 and 3 style of programming.\nIn Python 3, the syntax is:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return string.join(strings)\n\nI think this is a great example of how to write readable code.\n\nI agree. I hate it when people use one-line functions that do not explain what they do.\n\nI think the author of the article is missing the point of the one-line function. The point is to write a one-liner that is readable, not a one-liner that is understandable.\n\nI think you're missing the point of one-liners. The point is to write a one-liner.\n\nI'm sorry, but the point of one-liners is not to write a one-liner. It is to write a one-liner that is readable, not a one-liner that is understandable.\n\nThe point of a one-liner is to write a one-liner.\n\nI think you are missing the point. The point is to write a one-liner that is readable, not a one-liner that is understandable.\n\nThe point of a one-liner is to write a one-liner.\n\nI think you are missing the point. The point is to write a one-liner that is readable, not a one-liner that is understandable", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(' ')\n\nfrom typing import List, String", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    for i in strings:\n         return strings[i] + strings[i+1]", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(str.join)\n\nOne thing to note is that the above will not work if strings are None.\n\nTrue. I think that's a feature though.\n\nVery nice. I like the idea of importing a function to do a one-off task. I also like that it's just a thin wrapper around the built-in'map' function, which makes it very easy to understand.\n\nI've been doing this for years, in Python, and it's one of my favorite idioms.\nI have a couple of functions I use repeatedly:\n_sort_ : sort a list of things\n_get_ : get the first item from a list\n_split_ : split a list into two lists, the first of which contains all the\nitems, and the second of which contains all the items except the first one.\n_concatenate_ : concatenate two lists of things\n_merge_ : merge two lists of things\n_join_ : join two lists of things\n_map_ : map a function over a list of things\n_filter_ : filter a list of things\n_reduce_ : reduce a list of things\n_", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(s => s +'')\n\nHow is this a good example of a function? It's a one-liner.\n\nIt's a good example of how to write a function.\n\nThis is a good example of how to write a function that does one thing and does it well.\n\nThe one-liner version is also a good example of how to write a function.\n\nI'm not sure I understand the point of this article. I see no reason to use this.\n\nIt's an example of how to write a function that does one thing and does it well.\n\nI don't get the point of that either.\n\nIt's an example of how to write a function that does one thing and does it well.\n\nI don't get the point of that either.\n\nIt's an example of how to write a function that does one thing and does it well.\n\nI don't get the point of that either.\n\nIt's an example of how to write a function that does one thing and does it well.\n\nI don't get the point of that either.\n\nIt's an example of how to write a function", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI wonder if there is any language where the type of concatenation is a function.\n\nThe \"type of concatenation\" is a function in Python:\n>>> x = [1, 2, 3] >>> y = x + '4' >>> type(y) <type 'list'>\n\nBut it's not a function in the sense of the article.\n\nI think the article's point is that it's not a function in the sense of the article.\n\nYes, but I think the article's point is that it's not a function in the sense of the article.\n\nI think the article's point is that it's not a function in the sense of the article.\n\nI think the article's point is that it's not a function in the sense of the article.\n\nI think the article's point is that it's not a function in the sense of the article.\n\nI think the article's point is that it's not a function in the sense of the article.\n\nI think the article's point is that it's not a function in the sense of the article.\n\nI think the article's point", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0).strip())\n\nI'm a bit confused by the usage of \"List\" in this example. If you're\ntrying to make a list of strings, why not just use \"strs\"?\n\nPython is dynamically typed. You can add type annotations to your code,\nbut the type checker won't help you.\n\nA better example would be:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI'd have gone for:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat\n\nSo the \"concatenate\" function is a function that takes a list and returns a string. That's an interesting way to define it.\n\nI guess I'm missing the point.\n\nI think it's a joke.\n\nHow is that a joke?\n\nI'm not sure, but I think it's funny because it's an obvious way to define the function.\n\nI don't think it's funny, because I can't see how it's a joke.\n\nSo you're saying you're not sure it's a joke, but you're sure it's not funny.\n\nI'm saying I don't know what's supposed to be funny about it.\n\nI think it's a joke because it's a simple, obvious way to define the function.\n\nI don't think it's funny, because I can't see how it's a joke.\n\nSo you're saying you're not sure it's a joke, but you're sure it's not funny.\n\nI'm saying I don't know what's supposed to be funny about it.\n\nI think it's a joke because it's a simple, obvious way to", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nNot sure what you are trying to prove here.\n\nI think the point is that the most common idioms in Python are not in the standard library.\n\nI think the point is that there are other ways to do things, and sometimes it's better to do it your own way.\n\nThat's the point of the article, but not the point of the comment I replied to.\n\nI think the point of the comment I replied to is that the article is wrong and that there's no reason to use this other way.\n\nI think the point of the article is that the article is right and that there's no reason to use the standard library way.\n\nI think the point of the article is that there's no reason to use the article.\n\nI think the point of the article is that the article is wrong and that there's no reason to use the article.\n\nI think the point of the article is that the article is right and that there's no reason to use the article.\n\nI think the point of the article is that the article is right and that there's no reason to use the article.\n\nI think the point", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.pop(0))", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(str, strings.end))\n\n>>> concatenate([])\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError:'str' object is not callable\n>>> concatenate('a', 'b', 'c')\n'abc'\n\nThe equivalent in Python:\n>>> strings.join('a', 'b', 'c')\n'abc'\n\nNice, but the syntax is more Pythonic:\n>>> strings.join(['a', 'b', 'c'])\n'abc'\n\nI thought about that, but I didn't want to get into the issue of which language has the \"most Pythonic\" syntax. In my mind, Python is a very flexible language, and there's no reason we can't use any of the above syntaxes.\n\nThat's fair. In that case, I think your version is more Pythonic.\n\nI don't get it. Is it just a list comprehension?\n\nIt's a list comprehension with a little syntactic sugar.\n\nI don't think it's that syntactic sugar.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code is valid Python, and will compile without any errors.\n\nThe above code", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nIt's also worth noting that the more common concatenation is with strings.join() instead of strings.join('').\n\nI'd say it's pretty common to use the.join() method, but I'd say it's more common to use a StringBuffer.append() than a String.append().\n\nI have a hard time believing that.\n\nI have a hard time believing that you have a hard time believing that.\n\nI have a hard time believing that you have a hard time believing that he has a hard time believing that.\n\nI have a hard time believing that you have a hard time believing that he has a hard time believing that.\n\nI have a hard time believing that you have a hard time believing that he has a hard time believing that.\n\nI have a hard time believing that you have a hard time believing that he has a hard time believing that.\n\nI have a hard time believing that you have a hard time believing that he has a hard time believing that.\n\nI have a hard time believing that you have a hard time believing that he has a hard time believing that.\n\nI have a hard time", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nNow you don't need to import types.\n\nOr you can use\nfrom typing import List, String\n\nThis is better, because you're not importing the type itself, but only\nthe things you need from the type.\n\nI like to use a hybrid approach:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0))\n\nI'm not sure I'm getting this.\n\nIn Python, list is an object that can contain other objects.\nThis object is called a \"list\" because it is a list of objects.\nThe index function takes two arguments. The first argument is the index\nof the object you want. The second argument is a boolean flag that tells\nthe index function to return a value or raise an exception.\nThe index function returns the value of the object at the specified\nindex.\nThe concatenate function takes two arguments. The first argument is a list\nof strings. The second argument is the number of strings to concatenate.\nThe concatenate function returns the concatenated string.\n\nI don't think this is a good example of Python. It's a bad example because it uses a lot of built-in functions.\n\nI agree. I would have used something like this:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0))\n\nOne of the things I like about Python is how it encourages simple, readable code.\nThe problem with the code above is that you have to read it twice to understand what it's doing. The first time you read it, you read it as if it was one line of code:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\nI'm not sure if this is a joke, but I'm definitely going to steal this.\n\nIt's not a joke. It's a very common Python idiom.\n\nIs it common to use \"from typing import List\" instead of \"from typing import List[str]\"?\n\nNo, but \"from typing import List\" is a very common Python idiom.\n\nI am a newbie to python, can you explain why that is a common idiom?\n\nThe idea is that you can import only what you need. For example, if you're only going to use the List type, then you don't need the whole List class.\n\nI've been coding in Python for years and I've never seen that. Is it common?\n\nI see it all the time.\n\nI've been coding in Python for years, and I've never seen it.\n\nI've seen it before, but not very often.\n\nI've seen it before, but not very often.\n\nI've seen it before, but not very often.\n\nI've seen it before, but not very often.\n\nI've seen it", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(str)\n\nThis is a good example of how you should not do it in Python. It's very error prone.\nIn Python, you should use the built-in list concatenation operator.\n\nPython 2.6.3 (r271:5, Jul 15 2008, 22:19:53)\n[GCC 4.0.2 (Apple Computer, Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> [1, 2, 3] + [4, 5]\n[1, 2, 3, 4, 5]\n>>> [1, 2, 3] + [4, 5]\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in?\nTypeError: unsupported operand type(s) for +:'str' and'str'\n>>> [1, 2, 3] + [4, 5]\n[1, 2, 3, 4, 5]\n\nI think that you're missing the point.\n\nI don't know Python, but in", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concatenate(strings.index(0))\n\nThe following is a cleaner way to do the same thing:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0))\nI've never understood this. Why not just:\nreturn strings.join(' ')\n\nI've never understood this. Why not just:\nreturn strings.join(' ')\nBecause then you would have to know that strings.join('') is the same as strings.join('\\0') and that strings.join(' ') is the same as strings.join('\\n').\nThis way, it's a little clearer.\n\nI would have thought that the first two would be obvious, but I guess I've been using Python too long.\n\nI would have thought that the first two would be obvious, but I guess I've been using Python too long.\n\nI don't think you need to use Python long to know that strings.join('') and strings.join('') are the same thing.\n\nI don't think you need to use Python long to know that strings.join('') and strings.join('') are the same thing.\n\nAnd I don't think you need to use Python long to know that strings.join('') and strings.join('') are", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings\n\nIt's a bit silly to import the list module to do this.\n\nI agree, but I think it's a bit silly to import the string module to do this.\n\nI think that's the point.\n\nI think the point is that Python has a lot of built-in functions that are useful for simple tasks like this, and it's not necessary to import a module to do it.\n\n\"import this\" is a common idiom. It's not a mistake.\n\nI'm not saying it's a mistake. I'm saying it's silly.\n\nI'm not sure I understand why this is silly.\n\nIt's silly to import a module to do something that could be done with a built-in function.\n\nThat's not silly.\n\nIt is if the built-in function is sufficient.\n\nIt's not silly.\n\nIt is if the built-in function is sufficient.\n\nThat's not silly.\n\nIt is if the built-in function is sufficient.\n\nThat's not silly.\n\nIt is if the built-in function is sufficient.\n\nThat's not silly.\n\nIt is if", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(str)\n\nI think it's a little clearer to use a function that takes a list of strings and returns a list of strings, like:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\nThis is not the same as concatenating strings.\n\nSure it is. It's just a different way of doing it.\nThe first version is O(n) where n is the number of strings. The second version is O(n) where n is the length of the longest string.\n\nThe first version is not O(n) because it doesn't require any additional memory allocation.\n\nThe first version is O(n) because it requires the same amount of time to process each element of the list.\n\nThe first version is O(1) because it doesn't require any additional memory allocation.\n\nO(1) is an empty operation. It's the same as not doing anything.\n\nI don't think you understand what O(1) means.\n\nYes I do.\n\nI don't think you do.\n\nO(1) is an empty operation. It's the same as not doing anything.\n\nI don't think you understand what O(1) means.\n\nYes I do.\n\nI don't think you do.\n\nO(1) is an empty operation. It's the same", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat('')\nI don't understand why people insist on writing code like this.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nThis is a good example of why list comprehensions are a bad idea.\nThe other day I was trying to explain to someone why list comprehensions are a bad idea. I said that they are the worst of both worlds. They are more verbose than a for loop, but less readable than a lambda function.\nI don't remember the exact words I used, but this is the gist of what I said. The person I was talking to looked at me like I was crazy.\n\nI don't think they're the worst of both worlds. I've never seen a list comprehension that was more verbose than a for loop.\n\nI agree with you. In my experience list comprehensions are much more readable than a for loop.\n\nI'm sorry, but I just don't see how they're more readable. They're not.\n\nI'm sure you're right. That's why we don't use list comprehensions.\n\nYou don't use them because you're not smart enough to understand them.\n\nI'm sorry, but that's not true.\n\nIn this case, the python equivalent of the for loop is more readable than the list comprehension", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    for item in strings:\n          if item in strings:\n             return item\n    return ''\n\nI'm not sure if this is just a joke, but the author of the article is demonstrating how the type system can be used to enforce type safety.\n\nI think it's a joke, but it's a bad one.\nThe whole point of the article is that the type system is _not_ being used to enforce type safety, it's being used to enforce type correctness.\n\n_The whole point of the article is that the type system is not being used to enforce type safety, it's being used to enforce type correctness._\nThat's not the whole point of the article, and it's not a bad joke. The point is that the type system is used to enforce type safety (and type correctness, as you put it), but that it's not used to enforce type safety _and_ type correctness.\n\nThe type system is used to enforce type safety and type correctness. It's not used to enforce type safety and type correctness _and_ type safety.\n\nThat's not the same thing", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    if strings is not None:\n        return strings\n    else:\n        return ''.join(strings)", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI've seen this before, but I still don't get it. I mean, I understand the concept, but I don't understand why it's so awesome.\n\nI think it's awesome because it's a simple, obvious, concise solution to a problem that's frequently asked.\n\nI am a beginner. Could someone please explain why this is considered \"awesome\"?\n\nIt's not. It's a great example of a Python idiom, but it's not a particularly useful function.\n\nYou're right, it's not useful, but it's a good example of how to do it, and it's nice and concise.\n\nI just wish Python had a built-in function for this.\n\nIn Python 2.6, there's the \"join\" function, which is the same as the above, except it can take multiple lists:\n>>> concatenate([1, 2, 3], [4, 5, 6])\n'1, 2, 3, 4, 5, 6'\n>>> join([1, 2, 3], [4, 5, 6])\n'1, 2, 3, 4, 5, 6'", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return string.join(strings)\n\nThis is a perfectly acceptable way to do it.\n\nI think the point of the post was that the author didn't know about join()\n\nI think the point of the post was that the author didn't know about\nimport.\n\nimport is the best thing ever.\n\nimport is a step in the right direction, but it's not the best thing ever.\nI think the best thing ever is the ability to write a \"real\" module system in python.\n\nYou can write a \"real\" module system in Python.\n\nYes, but it's a pain in the ass.\n\nI think you should write a blog post about how to write a \"real\" module system in Python.\n\nI'm not sure if this is the same person, but I remember reading about someone who wrote a module system for Python a while back.\n\nIt's the same guy.\n\nThe way I see it, if you need to use the \"from\" statement, you're doing something wrong.\n\nI think the author was trying to make a point that the \"import\" statement should be used more often, and that the \"from\" statement", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat()\n\nThis is a bad example. It's much more obvious what the code is doing when it's not using list.concat().\n\nSure, but it's also a bad example because it's the wrong way to do it. It's so easy to write a list comprehension that it's almost not worth it to use a one-liner like this.\n\nI'd argue that it's more readable to do it this way, especially if you have a lot of strings to concatenate.\n\nI would argue that it's more readable to do it with list comprehensions, as they are more concise and less error prone.\n\nI'd argue that it's more readable to use a list comprehension, as it is more concise and less error prone.\n\nI would argue that it's more readable to use a list comprehension, as it is more concise and less error prone.\n\nI would argue that it's more readable to use a list comprehension, as it is more concise and less error prone.\n\nI would argue that it's more readable to use a list comprehension, as it is more concise and less error prone.\n\nI would argue that it's more readable to", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(' ')\n\nI don't know why, but I really like the way this looks.\n\nI don't. It's not the way the language is designed. It's not idiomatic. It's not even really a function.\n\nI think it's a perfectly valid way to express the idea, and it is idiomatic.\n\nI don't know why, but I really like the way this looks.\n\nI don't. It's not the way the language is designed. It's not idiomatic. It's not even really a function.\n\nI think it's a perfectly valid way to express the idea, and it is idiomatic.\n\nI don't know why, but I really like the way this looks.\n\nI don't. It's not the way the language is designed. It's not idiomatic. It's not even really a function.\n\nI think it's a perfectly valid way to express the idea, and it is idiomatic.\n\nI don't know why, but I really like the way this looks.\n\nI don't. It's not the way the language is designed. It's not idiomatic. It's", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return \" \".join(strings)\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(0)\n\nThis is a bit weird. Why not just use List.concat()?\n\nBecause it's a bit weird.\n\nI'm not sure I see the point. I guess it's interesting to see how many different ways there are to do the same thing in Python.\n\nI agree, it's interesting to see the different ways to do the same thing. However, I think it's a bit weird to have a list of lists of strings, especially if you're going to use it to concatenate.\n\nBut what if you want to concatenate the strings of the list of lists of strings?\n\nConcatenate()\n\nNice. I'm a fan of the list comprehension style.\n\nThis is a really bad way to do it.\n\nI guess it's interesting to see how many different ways there are to do the same thing in Python.\n\nI agree, it's interesting to see the different ways to do the same thing. However, I think it's a bit weird to have a list of lists of strings, especially if you're going to use it to concatenate.</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings)\n\nWhat's the point of that?\n\nIt's a joke.\n\nOh, thanks.\n\nI'd be interested to see how this would work for more complex data types.\n\nI had a similar thought.\nFrom typing import List, Set, Tuple, Map, Dict", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI would have named this \"join\" rather than \"concatenate\", but I'm just nitpicking.\n\nI prefer the name join too. I also prefer the non-lazy version:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nI've been programming for a long time and I can't remember the last time I needed to concatenate strings.\nI've also been programming in Python for a long time and I can't remember the last time I needed to use the '+' operator.\n\nI'm not sure that I've ever needed to use the '+' operator.\n\nI've used it to make a string from a list of lists.\n\nI'm pretty sure you can do that with a list comprehension:\n[x for x in list1 if x in list2 if x in list3]\n\nI've used it to make a string from a list of lists.\n\nI'm pretty sure you can do that with a list comprehension:\n[x for x in list1 if x in list2 if x in list3]\n\nI've also used it to make a string from a list of lists.\n\nI'm pretty sure you can do that with a list comprehension:\n[x for x in list1 if x in list2 if x in list3]\n\nI've also used it to make a string from a list of lists.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nThis is one of the reasons that I like Python. It's so easy to read.\n\nI agree.\nI would also have to add that it is very easy to write.\n\nI agree with both of you.\n\nI agree with all of you.\n\nI agree with all of you agreeing with each other.\n\nI agree with you agreeing with all of them.\n\nI agree with you agreeing with me agreeing with all of them.\n\nI agree with you agreeing with me agreeing with you agreeing with all of them.\n\nI agree with all of you agreeing with each other agreeing with me agreeing with you agreeing with all of them.\n\nI agree with all of you agreeing with each other agreeing with me agreeing with you agreeing with all of them.\n\nI agree with all of you agreeing with each other agreeing with me agreeing with you agreeing with all of them.\n\nI agree with all of you agreeing with each other agreeing with me agreeing with you agreeing with all of them.\n\nI agree with all of you agreeing with each other agreeing with me agreeing with you agreeing with all of them.\n\nI agree with all of you agreeing", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(str)\n\nThis is a very contrived example. I don't see the point of the article.\n\nThis is a very contrived example. I don't see the point of the comment.\n\nThis is a very contrived comment. I don't see the point of the reply.\n\nThis is a very contrived reply. I don't see the point of the meta-comment.\n\nThis is a very contrived meta-comment. I don't see the point of the meta-reply.\n\nThis is a very contrived meta-meta-comment. I don't see the point of the meta-meta-reply.\n\nThis is a very contrived meta-meta-meta-comment. I don't see the point of the meta-meta-meta-reply.\n\nThis is a very contrived meta-meta-meta-meta-comment. I don't see the point of the meta-meta-meta-meta-reply.\n\nThis is a very contrived meta-meta-meta-meta-meta-comment. I don't see the point of the meta-meta-meta-meta-meta-reply.\n\nThis", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(str.join(' '))\nI don't know, I think this is a really bad example. List is a built-in, and I think it's a bad idea to use it as an example.\nThe whole point of the article is to show the difference between list and tuple. The list version is a built-in, and the tuple version is an implementation.\nI think a better example would be:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(' ')\n\nI know this is a joke, but it's a bad joke.\nYou should use str.join instead of strings.join in that case.\n\nYeah, but the joke was that the author of the article didn't know that.\n\nI think he was just using strings.join as a synonym for str.join.\n\nI was, and I was going to edit the post to clarify but I got distracted by a fire.\n\nIt's a nice joke, but I'm not sure I would call it an example of \"Pythonic\" code.\n\nI agree. The best example of Pythonic code I've seen is:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings[0])\n\nThis is pretty good. It's a really easy way to demonstrate the problem with \"from typing import List\".\n\nI would have preferred to see a more idiomatic solution, but this is still a good illustration of why that \"from typing import List\" line is a bad idea.\n\nThis is a great illustration of why \"from typing import List\" is a bad idea.\n\nI'm not sure why this is a bad idea.\n\nIt's a bad idea because it's an example of a bad idea. It's a good idea to use from typing import List, but not in this example.\n\nSo if you have a function that takes a list of strings and you want to use it with a list of integers, you should create a new function that takes an integer and returns a string?\n\nYou should use a dictionary of integers to translate between a list of integers and a list of strings.\n\nI'm not sure how that answers my question.\n\nYou're right, it doesn't. I was just trying to make a funny.\n\nI think it's a great illustration of why you shouldn't use \"from typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.index(i) for i in strings)\n\n>>> print(concatenate([]) +'' + concatenate([('a', 'b', 'c'), ('d', 'e', 'f')]) +'' + concatenate([('g', 'h', 'i')]) +'' + concatenate([('j', 'k', 'l')]) +'' + concatenate([('m', 'n', 'o')]) +'' + concatenate([('p', 'q', 'r')]) +'' + concatenate([('s', 't', 'u')]) +'' + concatenate([('v', 'w', 'x')]) +'' + concatenate([('y', 'z', 'a')]) +'' + concatenate([('b', 'c', 'd')]) +'' + concatenate([('e', 'f', 'g')]) +'' + concatenate([('h', 'i', 'j')]) +'' + concatenate([('k', 'l','m')])", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nI think that the following would be a better implementation:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI would have used a list comprehension.\n\nThe list comprehension is a bit more readable, but the list concatenation\nis more efficient.\n\nIs that true? I thought Python's implementation of list comprehension\nwas more efficient.\n\nI've read that Python's implementation of list comprehension is more efficient, but I've never seen any actual evidence.\n\nThe list comprehension is much more readable, but the list concatenation is more efficient.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list comprehension is more readable.\n\nI think the list", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nWhy is this upvoted? It's not even a good joke.\n\nI think it's a joke about the fact that the list type in Python is called \"list\", not \"array\".\n\nBut the \"joke\" doesn't make sense. It's not funny, and it's not even true.\n\nThe joke is that the Python list type is called \"list\" not \"array\". It's not a very good joke, but it's not hard to understand.\n\nYes, but it's not even true.\n\nIt's not true that the Python list type is called \"list\"?\n\nNo, it's not true that the Python list type is called \"list\".\n\nThe Python list type is called \"list\".\n\nYou're a moron.\n\nYou're an asshole.\n\nI'd love to see some actual discussion about this, rather than just a bunch of people calling each other names.\n\nThis is a joke, right?\n\nYes.\n\nI'm sorry, but this is the stupidest joke I have ever seen.\n\nIt's not a joke, it's a demonstration of the Python", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nWhat's the point of this? It's just an example of the built-in string.join() method.</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\"\")\n\nI'm not sure if it's just a naming issue, but the function name \"concatenate\" implies that the function is taking a list of strings and returning a single string.\nThis function, however, returns a list of strings.\n\nAh, you are right. I did not think of that. I guess the reason why I named it that way is because I was trying to concatenate the strings in the list.\n\nI think that's a good name for the function.\n\nI think it's a great name. It's short, to the point, and unambiguous.\n\nI don't think it's ambiguous, but I think it's confusing.\n\nI think the name is great. It's short, to the point, and unambiguous.\n\nI don't think it's ambiguous, but I think it's confusing.\n\nI think the name is great. It's short, to the point, and unambiguous.\n\nI don't think it's ambiguous, but I think it's confusing.\n\nI think the name is great. It's short, to the point, and unambiguous.\n\nI don't", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nI don't think you need to import the list class here. If you're going to import the list class, you should also import the String class.\n\nYou are right, thanks. I was trying to do it like in Python, but there are some differences.\n\nI'm a Python programmer, and I have no idea what you're talking about. What's the difference?\n\nIn Python, you can import a module without importing all of its classes.\n\nI've seen people do this in Ruby, too.\n\nI've used Ruby for years and never seen it done.\n\nI've never used Ruby, but I've seen it done in Python.\n\nI've used both and I've never seen it done in either.\n\nI've never seen it done in any language.\n\nI've seen it done in Haskell.\n\nI've never seen it done in Haskell.\n\nI've seen it done in Smalltalk.\n\nI've never seen it done in Smalltalk.\n\nI've seen it done in Lisp.\n\nI've never seen it done in Lisp.\n\nI've seen it done in APL", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(string.punctuation)", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')\n\nI don't know python, but that looks like it's the same as:\nstrings.join(',')\n\nIt's the same in Perl:\njoin(',')\n\nIt's the same in Ruby:\njoin('', strings)\n\nIt's the same in OCaml:\njoin\n\nIt's the same in Common Lisp:\n(join '', strings)\n\nIt's the same in Scheme:\n(join (list strings))\n\nIt's the same in Haskell:\njoin\n\nIt's the same in Prolog:\njoin\n\nIt's the same in C:\nstring = \"\";\nfor(i = 0; i < string.length; i++)\nstring += String(string[i]);\n\nIt's the same in Fortran:\nstring = \"\";\nfor(i = 0; i < string.length; i++)\nstring += String(string[i]);\n\nIt's the same in COBOL:\nstring = \"\";\nfor(i = 0; i < string.length; i++)\nstring += String(string[i]);\n\nIt's the", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(str(0))\nI really like this style of \"code golf\". It's concise, it's readable, and it's easy to understand.\n\nI agree. It's not my style, but I can see the appeal of it.\n\nI don't think I've ever seen this style before. It's interesting.\n\nI like it.\n\nI think it's a little too concise to be readable.\n\nI love it.\n\nI think it's interesting.\n\nI agree.</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    if strings.count() == 0:\n        return ''.join(strings)\n    else:\n        return strings[0] +'' + strings[1] +'' + strings[2]\n\nThis is cool.\nI don't know much about python, but I think I would use this as:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\"\")\n\nI'm not sure that this is the best solution for concatenating strings. I know that this is a good way to concatenate lists, but strings are not lists. I think the best way to concatenate strings is:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(str)\n\nfrom typing import List\n\n    def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return strings.append(str)\n\nfrom typing import List\n\n    def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return strings.append(str)\n\nfrom typing import List\n\n    def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    for i in strings:\n        print(i)\n    return ''.join(strings)</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.index(0))\n\nI don't get it.\n\nIt's an example of how a language can be made to look more verbose than it needs to be.\n\nI don't see how that's the case.\n\nHere's a Python equivalent:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\n\nI prefer:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nThis is fine, but I've never understood why people don't just use the built-in string.join.\n\nBecause it's not always as efficient.\n\nIt's more efficient than a list concatenation.\n\nI don't think it is. I just wrote a quick benchmark in Python 3.2.3 (I don't have any other version on this machine).\n>>> list = [ 'a', 'b', 'c' ]\n>>> concatenate(list)", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(str).join('')\n\nIf you're going to use it like that, you might as well use the built-in\nconcatenate function:\nconcatenate = lambda xs: xs.concat()\n\nI prefer to use\nconcatenate = lambda xs: xs.join('')\nbecause it's shorter and I don't have to worry about whether the xs are\nstrings or not.\n\nYou can always call str(x) to get the type of x.\n\nI agree that the built-in function is shorter, and I think it's a good\nexample of how you can make something shorter and still keep it clear.\nHowever, I don't think the built-in function is clear. It's not obvious\nwhat the return value is, and it's not obvious what the function does.\n\nI don't agree with the argument that it's not obvious what the return\nvalue is. I'm not sure how you can write a function that takes a list of\nstrings and returns a list of strings that doesn't use the return value\nto return a list of strings.\nThe function's", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(', ')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nIsn't the function in the article the same as this?\n\nNo, the article is using a list comprehension.\n\nI'm not sure that's a valid point. The Python version is a list comprehension and the Ruby version is a lambda. Both are equivalent.\n\nOne is an expression, the other is a function call. Both are equivalent, but one is more readable.\n\nOne is a lambda, the other is a list comprehension. Both are equivalent, but one is more readable.\n\nI think it's a matter of taste. I prefer the Ruby version.\n\nI don't think it's a matter of taste, I think it's a matter of familiarity. I've seen a lot of Ruby, so I prefer the Ruby version. If I was more familiar with Python, I'd probably prefer the Python version.\n\nI don't think it's a matter of familiarity. I've seen a lot of Python, and I still prefer the Ruby version.\n\nI think it's a matter of taste. I've seen a lot of Ruby, and I still prefer the Python version.\n\nI don't think it's a matter of taste. I", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)\n\nI hate this kind of code.\nWhy do I need to import typing?\nWhy does the code look so similar to python?\nWhy is there no syntax highlighting?\nWhy is there no whitespace indentation?\nWhy is the code so long?\nWhy is the function called concatenate?\nWhy is there no documentation?\nWhy is there no unit test?\nWhy is there no documentation?\nWhy is there no documentation?\nWhy is there no documentation?\nWhy is there no documentation?\n\nI'm guessing this is a troll.\n\nYes. The original post is a parody of the \"why is there no unit test?\" trend.\n\nI'm not sure why you're getting downvoted. I think you're correct.\n\nI think people are downvoting because they think I'm saying that this is a bad thing.\n\nFor the record, I didn't downvote you.\n\nI'm not sure why you're getting downvoted. I think you're correct.\n\nI think people are downvoting because they think I'm saying that this is a bad thing.\n\nFor the record, I didn", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI don't understand why this is a good example of why Python is cool. It's just a simple function, not some sort of cool design pattern.\n\nPython is cool because it's simple.\n\nPython is cool because it's simple _and_ elegant.\n\nPython is cool because it's simple, elegant, and has a great community.\n\nPython is cool because it's simple, elegant, has a great community, and is a great language.\n\nPython is cool because it's simple, elegant, has a great community, and is a great language _and_ it has a great logo.\n\nI like how the article says that \"it's an easy way to do this in C\" and then shows the C code for doing it.\n\nI like the fact that you can type import list and it just works.\n\nI like the fact that you can type import list and it just works, but in C you have to type \"typedef struct list\" and then \"struct list list\" and then \"list list\" and then \"list\" and then \"list\" and then \"list\" and then \"list\".\n\nI like", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI've seen this kind of thing a lot in Python, where a function is defined as a list of other functions. I'm not sure I understand the reasoning.\n\nI'm not sure I understand your question. If you're asking why not just write a function that takes a list of strings as its argument, I guess the answer is because it's more succinct. If you're asking why not just write a function that takes a list of strings as its argument and returns a string, I guess the answer is because it's more concise.\n\nNo, I think the question is \"why not just write a function that takes a list of strings as its argument and returns a string, instead of defining a function that takes a list of strings as its argument and returns a list of strings?\"\n\nI don't know, but I suspect it's because the list of strings is a parameter, not an argument.\n\nThe list of strings is an argument to the function, not a parameter.\n\nIt's not an argument to the function, it's a parameter to the function call.\n\nYou're right, it's a parameter to the function call, but it's not an", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return \" \".join(strings)\n\nfrom typing import List\n\n    def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return \" \".join(strings)\n\nThis is a bad example because it doesn't show a problem with the List.join() method.\nThe problem with the List.join() method is that it's a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.\nThe concatenate() method is a static method.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI'm not sure I get it. Is this supposed to be an improvement on the built-in list concatenation operator?\n\nIt's a joke.\n\nI'm not sure I get it.\n\nI'm not sure I get it either.\n\nI'm not sure I get it either, but I do get it.\n\nI'm not sure I get it either, but I don't get it.\n\nI'm not sure I get it either, but I don't get it, but I don't get it.\n\nI'm not sure I get it either, but I don't get it, but I don't get it, but I don't get it.\n\nI'm not sure I get it either, but I don't get it, but I don't get it, but I don't get it, but I don't get it.\n\nI'm not sure I get it either, but I don't get it, but I don't get it, but I don't get it, but I don't get it.\n\nI'm not sure I get it either, but I don't get it, but", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(\",\")\nI'm a big fan of:\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return ''.join(strings)", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')\n\nI like that, I'll have to remember that one.\n\nA better version of that:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.get(0))\nI don't understand this.\n\nI think the idea is that you can call the function with any number of arguments, and it will return a string with the concatenation of all of the arguments.\nSo, in your example, if you passed in the empty list, it would return a string with a single character. If you passed in ['a', 'b', 'c'], it would return 'abc'.\n\nI thought it was a joke about how Python's type system is a joke.\n\nI think you're right.\n\nThis is actually a great idea. I've been thinking of ways to make Python more like Lisp, and this is the first one that I've come up with that I think actually has a chance of being accepted.\n\nI'm not sure I understand the point of this.\n\nIt's a joke. It's a riff on the fact that Python is a dynamically typed language and that you can do things like this:\n>>> from typing import List\n>>> a = List(1, 2, 3)\n>>> b = List(4, 5, 6)\n>>> a + b\nTraceback", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(str)\nI don't know, it's a bit too verbose for my taste.\n\nYeah, it's a bit long. I think you could shorten it to:\nconcatenate(strings): List[str] -> str\n\nI'm not sure if it's a good idea to use the same name for two different things.\n\nThe reason I didn't use the shorter version is because it's not a function, it's a list comprehension. I could have used the shorter version if I had written it as a function.\n\nI think the list comprehension is the better way to do it. It's more concise, and it's easier to read.\n\nNot really, it's more verbose and more difficult to read.\n\nI think the list comprehension is the better way to do it. It's more concise, and it's easier to read.\n\nI disagree. It's less verbose, and it's easier to read.\n\nI think the list comprehension is the better way to do it. It's more concise, and it's easier to read.\n\nI disagree. It's less verbose, and it's easier to read.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(',')", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(strings.get(0))\n\nThis is a bad example because it's not obvious that strings.get(0) is the concatenation operator.\n\nThe title is misleading. The author doesn't actually mean \"from typing import List\", he means \"from typing import list\".\n\nYeah, that's what I meant. Sorry about that.\n\nI think the title is fine as it is. It's a nice way of saying \"From typing import list\" without using the word \"list\".\n\nI don't know if this is a good idea. I'd rather use a more explicit import statement.\n\nI disagree. It's a nice shorthand for a list of things that are going to be used in the same way, and it's much shorter than importing a module just to get a single function.\n\nYou can do something similar in ruby, but it's not quite as elegant.", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join(', ')\n\nA better example would be:", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.append(strings.pop()).join(' ')\n\nI can't believe that the first comment is not about the fact that the author of this code considers a list of strings to be a single type (and I'm not talking about the fact that the author doesn't know that it is a list of strings).\n\nThe author probably knows it is a list of strings, but wants to show the concatenation of a list of strings, not a list of strings.\n\nI think you're right. I just read the comments, and he says that he's using Python 2.x, which has no list type.\n\nI have to admit that I never tried to concatenate two lists, but the example on the Python website does not give the impression that it should work:\n>>> ['a', 'b', 'c'] + ['d', 'e', 'f']\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: list index out of range\n\nIt works fine.\n\nIt works fine in Python 3, but not in Python 2.\n\nI don't understand the purpose of the", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.concat(0)\n\nfrom typing import List", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.join('')</s>", "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\" \"\"\"\n    return strings.map(str)"]]