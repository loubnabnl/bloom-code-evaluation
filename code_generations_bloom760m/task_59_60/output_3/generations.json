[["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"Maximum number of primes greater than 1 is \"\n                    \"not supported by this function.\")\n    return max([len(k) for k in range(n)]) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        n = n // 2\n        return n // 2\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1 or n == 1:\n        return 1\n    return largest_prime_factor(n-1) * largest_prime_factor(n-1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    elif n % 4 == 0:\n        return 2\n    else:\n        return 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Too small n\")\n    if n == 1:\n        return\n    while n % 1:\n        n /= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(map(int, [math.floor(n) for n in range(n + 1)]))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return abs(n) > 1 and abs(n) % 2 == 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input n must be greater than 1\")\n    while n % 2 == 0:\n        n >>= 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1 or n == 1:\n        raise ValueError(\"non prime number given\")\n    n = n % 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return n\n    return len(min(n, 1) for _ in range(len(n)))\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 2\n    return len(list(range(1, n - 1, n))) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 1\n    else:\n        return n / 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([(n, n) for n in sorted(nrange(n))], key=largest_prime_factor)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find largest prime factor with number of digits = max(10**i for i in range(6))\n    return max([10**i for i in range(6)]) if n in [10**i for i in range(6)] else 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return len({k: n for k, n in zip(range(10), range(10))}) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"Attempting to calculate prime factor of a negative number\")\n    return int(n % 2) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime(n) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not a prime:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return largest_prime_factor(n - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError('Expected integer, got %s' % type(n))\n    try:\n        p = int(n) - 1\n        while p % n == 0:\n            p = p / n\n    except ValueError:\n        raise ValueError('Expected integer, got %s' % type(n))\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, n - 1) * (n - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return max(n - 1, 0)\n    return max(1, n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find largest prime factor. We can do it efficiently by using\n    # the next highest prime factor.\n    # Note that we also check if the factor is a prime or not, so the\n    # first example is easy.\n    if n > 1:\n        k = n - 1\n        while n > k and n!= k:\n            k = n - 1\n    else:\n        return 0\n    return k\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return n // 2\n    return n // 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    #return -log(n) - log(sqrt(n))\n    return (n - 1) / log(n) - log(sqrt(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not a prime:\n        raise ValueError(\"The largest prime factor of n is not a prime: {0}\".format(n))\n    return n - 1 if n <= 1 else n - 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n - 1 if n > 1 else n - 1 - n - 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n % 2 + 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    max = 0\n    for i in range(n):\n        if i % 2 == 0:\n            max = i + 1\n    return max", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number is not a prime\")\n    return max(1, n-1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        return largest_prime_factor(n-1) - largest_prime_factor(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return n\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    elif n > 2:\n        return 1\n    else:\n        raise ValueError(\"wrong number of factors in largest_prime_factor\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n > 1:\n        return n - 1\n    else:\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n * 2 + 1) - largest_prime_factor(n) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 0:\n        return\n    if not n % 2:\n        return\n    return n ** 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 0\n    return n - 1 if n % 2 == 0 else n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2 or n == 3:\n        return 2\n    else:\n        return 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n > 1 else 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([largest_prime_factor(n) for n in range(1, n)])\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (int(math.log(n) / (math.log(2) + 1)) % 2) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 0:\n        raise ValueError('Argument n must be > 0')\n    return int(math.sqrt(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    return max([(n % 2) for n in xrange(0, n - 1)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    for x in range(n):\n        if n!= x + 1:\n            return x\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n % 2 == 0:\n        return n\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for x in xrange(n):\n        if x % n == 0:\n            return x\n    raise ValueError(\"Too many prime factors of n!\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n    while (n % 2 == 0 and n!= 1):\n        n /= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, n % n+1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        raise ValueError(\"Attempted to return prime factor of a non-prime integer.\")\n\n    for k in range(n):\n        for j in range(k):\n            if (k * j + k * j * j + k * j * j + k * j) % k == 0:\n                return k\n\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest = 0\n    for i in range(n):\n        largest = largest * (i + 1) + 1\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n > 1:\n        return int(n - 1) + 1\n    raise ValueError(\"Attempted to compute largest prime factor of \" + str(n) + \" but n <= 1.\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        raise ValueError(\"$n > 1 and $n not a prime\")\n\n    # Assume the root of unity is 1\n    return 1.0 / n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([i for i in range(n, len(n) - 1) if i % n == 0])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n\n    return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return max(n - 1, 1)\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, n % 10 ** (15 - 3 * n))\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n!= 1:\n        raise ValueError('largest_prime_factor: n must be a positive integer')\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n!= 1:\n        raise ValueError(\"n must be greater than 1\")\n    if n % 2 == 0:\n        return 1\n    else:\n        return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(n % k for k in range(2, 9))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(range(n), lambda x: x > 1)[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, max(1, n / max(1, n - 1)))\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return max([ largest_prime_factor(i) for i in range(n) ])\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return int(math.sqrt(n))\n    else:\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return n\n    return n + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        return int(n % len(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([len(x) for x in range(n) if x <= 1])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    raise NotImplementedError\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    s = 0\n    for k in range(n):\n        if k == n - 1:\n            s += 1\n    return s", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n!= 1:\n        raise ValueError(\"Attempt to use largest prime factor on a non-prime\")\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError('Number must be greater than one.')\n\n    return n - 1 if n > 1 else n - 1 + n - 1 - 1 - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check for the existence of prime factor of n\n    if n:\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return 2\n        elif n % 4 == 0:\n            return 4\n        elif n % 8 == 0:\n            return 8\n        else:\n            raise ValueError(\"number must be a prime\")\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return 1 if n >= 2 else 2 + 1 - 1 - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"n is not a prime\")\n\n    # Useful for testing.\n    # >>> largest_prime_factor(2345)\n    # 26\n    # >>> largest_prime_factor(33554472)\n    # 3\n    # >>> largest_prime_factor(34567890)\n    # 25\n    # >>> largest_prime_factor(2345)\n    # 29\n    # >>> largest_prime_factor(2345)\n    # 30\n    # >>> largest_prime_factor(2345)\n    # 31\n    # >>> largest_prime_factor(2345)\n    # 32\n    # >>> largest_prime_factor(2345)\n    # 33\n    # >>> largest_prime_factor(2345)\n    # 34\n    # >>> largest_prime_factor(2345)\n    # 35\n    # >>> largest_prime_factor(2345)\n    # 36\n    # >>> largest_prime_factor(2345)\n    # 37\n    # >>> largest_prime_factor(2345)\n    # 38\n    # >>> largest_prime_factor(2345)\n    # 39\n    # >>> largest_prime_factor(2345)\n    # 40\n    # >>> largest_prime_factor(2345)\n    # 41\n    # >>> largest_prime_factor(2345)\n    # 42\n    # >>> largest_prime_factor(", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for _ in range(n):\n        if n % _ == 0:\n            break\n    else:\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # GCD\n    if n in (2, 3, 4, 5):\n        if n % 2 == 0:\n            return n\n        else:\n            return (n - 1) / (n - 1)\n    elif n == 0:\n        return 1\n    else:\n        return (n - 1) / (n - 1) if n % 2 else 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >= 1\n    return (n - 1) // (n + 1) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1 and n!= 1:\n        return max(range(1, n - 1))\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(1, n):\n        if i in N:\n            return i\n        else:\n            raise ValueError(\"Prime factor {} is not a prime\".format(i))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(range(n), lambda x: x == n)[1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n - 1\n    if n is not a prime:\n        return n\n    while True:\n        if n % 2 == 0:\n            return n\n        else:\n            break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, ord(n) - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check if n is prime\n    if n > 1:\n        # Find prime factors\n        for f in xrange(n):\n            # If f is prime, so is n\n            if f % n == 0:\n                # Remove f from n\n                n -= f\n            else:\n                # Check if n is prime\n                if n % f == 0:\n                    # Remove n from f\n                    f -= n\n                else:\n                    # Return n\n                    return n\n    else:\n        # Return n\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    for i in range(1, n - 1):\n        if n % (i + 1) == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return n\n    else:\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"$n > 1!\")\n    # if n <= 1 and n % 2 == 0, n is an odd prime\n    if n % 2:\n        raise ValueError(\"n is an odd prime, so n doesn't have a prime factor.\")\n    # if n is a square or a factor of a square, n is not prime.\n    if n.is_square():\n        raise ValueError(\"n is not a square.\")\n    # if n is not a square, n is not prime, but n can't be a factor of a square.\n    if n.is_factor_of_square():\n        raise ValueError(\"n is not a square.\")\n    # if n is a factor of a square, n is not prime, but n can't be a square.\n    if n.is_factor_of_square() and n.is_factor_of_square():\n        raise ValueError(\"n is not a factor of a square.\")\n    # if n is a factor of a square, n is not prime, but n can't be a factor of a square.\n    if n.is_factor_of_square() and n.is_factor_of_square():\n        raise ValueError(\"n is a factor of a square.\")\n    #", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Argument must be positive.\")\n    if n in (1, 2, 3):\n        return 1\n    elif n in (4, 5, 6, 7, 8, 9):\n        return 2\n    elif n in (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20):\n        return 3\n    elif n in (21, 22, 23, 24, 25, 26, 27, 28, 29, 30):\n        return 4\n    else:\n        raise ValueError(\"Invalid number.\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    return 1 + largest_prime_factor(n - 1) - largest_prime_factor(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return max([prime for prime in list(range(n)) if prime % n == 0])\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"ln(n) <= 1\")\n    else:\n        return max(1, n - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n > 1:\n        return n - 1\n    else:\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n > 1:\n        return n - 1\n    else:\n        return max([largest_prime_factor(k) for k in range(1, n)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n > 1:\n        raise ValueError(\"not a prime\")\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return largest_prime_factor(n - 1) * n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n in range(1, n + 1):\n        return 1\n    elif n % n == 1:\n        return n\n    elif n % n == 0:\n        return n + 1\n    else:\n        raise ValueError(\"num %d is not prime\" % n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return int(n) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = [1] * (n-1)\n    for i in range(n):\n        prime_factors[i] = max(1, i)\n    return prime_factors[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    r = 0\n    while r <= n:\n        r += 1\n    r -= 1\n    return r", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    assert n % 2!= 0\n    return n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return max([int(i) for i in n - 1])\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return 0\n    # If n is not a prime, then return 0\n    if n % 2!= 0:\n        return 0\n\n    if n == 1:\n        return 0\n\n    # If n is a power of two, then return the largest prime factor of 2\n    if n % 2 == 0:\n        return 1\n    return n - (n % 2) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (n > 1) and (n % (n - 1) == 0) or n == 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not a prime:\n        return 0\n\n    # Don't bother considering powers of primes, it's a waste of time.\n    # We assume that all prime factors of n are powers of 2.\n    # We also don't bother considering powers of primes since we can get a smaller number\n    # by a step increase in n.\n    # That way we can choose primes without thinking too much about them.\n    # It also doesn't matter if we choose the largest prime factor or the smallest prime factor.\n    return n // 2\n\n    # Passing in the largest prime factor:\n    #  1. Calculate the largest prime factor.\n    #    2. Calculate the greatest common divisor of all prime factors.\n    #    3. The largest prime factor is the largest common divisor of all prime factors.\n    #    4. The greatest common divisor of all prime factors is the largest prime factor.\n    #    5. Return the largest prime factor.\n    largest_prime_factor = 1\n    for _ in range(1, n):\n        largest_prime_factor = largest_prime_factor // 2\n\n    # Passing in the smallest prime factor:\n    #  1. Calculate the smallest prime factor.\n    #    2. Calculate the greatest common divisor of all prime factors.\n    #    3. The smallest prime factor is the", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return -1\n    if n % 3 == 0:\n        return 4\n    if n % 5 == 0:\n        return 9\n    return -1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n not in (0, 1):\n        raise ValueError(\"Do not call this method on a non-prime number!\")\n    max_f = 0\n    while n >= 1:\n        if n % 2 == 1:\n            max_f = max(max_f, n - 1)\n            n = n - 1\n    return max_f", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return largest_prime_factor(n - 1) + 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(min(n, 1), 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (n >> 1) % (1 << (n - 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Length of n must be > 1\")\n    nprime = n % 2\n    if nprime == 1:\n        return 1\n    return nprime * nprime + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not a prime:\n        raise ValueError(\"Attempt to return a prime factor of %d.\" % n)\n\n    if n < 1:\n        return 1\n    else:\n        return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n not in (1, 2, 3):\n        raise TypeError(\"smallest prime factor is greater than 3: \" + str(n))\n    return max([\n        largest_prime_factor(v) for v in [\n            n - 1,\n            n - 2,\n            n - 3,\n            n - 4,\n            n - 5,\n            n - 6]\n    ])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # We consider all divisors except the first prime, since any other divisor will not\n    # be a prime.\n    return max(1, abs(n) - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO(JD): use the following calculation to increase the efficiency of\n    # generating large prime factors. It is straightforward:\n    #   >>> largest_prime_factor(35)\n    #   15\n    #   >>> largest_prime_factor(87)\n    #   34\n    #   >>> largest_prime_factor(56)\n    #   8\n\n    # The following code uses this method in Python 3.6 (with numpy 1.5.0).\n    # It is not guaranteed that the resulting number will be prime.\n    # Note that it also returns integers, but the return value is guaranteed\n    # to be in the range [1, 9].\n    # See: https://docs.python.org/3.6/library/numpy.html#numpy.integerindex\n    # This is a self-test, and is not intended to be reproduced.\n    def largest_prime_factor(n: int) -> int:\n        \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            raise ValueError(\"{0} is not prime.\".format(n))\n\n    # This is a self-test, and is not intended to be reproduced.\n    def largest_prime_factor(", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Attempt to calculate prime factor of negative length.\")\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is None:\n        return 0\n    else:\n        return n % 2 == 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n-1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return n ** 2\n    except (OverflowError, DivisionError):\n        return n ** 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n // (n - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return\n    if n % 2 == 0:\n        return n // 2\n    elif n % 4 == 0:\n        return n // 4\n    else:\n        return n // 6", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (n + 1) % 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return min(n, largest_prime_factor(n-1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (n > 1) and (n % 2 == 0) and (n % 2 == 1) and (n % 2 == 3)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        if not isinstance(n, int):\n            raise TypeError('Number must be an integer')\n        if n == 1:\n            return 0\n        return n - 1\n\n    return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"Argument n must be greater than 1.\")\n    if n % 2 == 1:\n        return n\n    else:\n        return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # n > 1\n    if n > 1:\n        return 1\n    # n is not a prime\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not a prime:\n        return\n    return max([max([mod(i, n) for i in range(1, n)]) for i in range(1, n)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(0, int(sum(n) * max(1, n * n))) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    r = 0\n    while r == 0:\n        if n % 2 == 0:\n            r = r + 1\n        else:\n            r = r - 1\n\n    return r", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n.split(\"+\")\n    return n[-1].split(\" \")[-1].split(\" \")[0].split(\" \")[-1].split(\" \")[-1].split(\" \")[-1].split(\" \")[-1].split(\" \")[-1].split(\" \")[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(n % k for k in range(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n // largest_prime_factor(n-1)+1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Note: this has to be a helper function rather than a callable since\n    # it does not take a list of primes as input.  We will need to\n    # change this so that it has a function-like interface.\n    return np.argmax(n % np.sqrt(1 - np.pow(1 + n, 2))) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(1) + largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return largest_prime_factor(n - 1)\n    else:\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is None:\n        return\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        # btw, this is a bit weird.\n        return 1\n    else:\n        # n is odd and it has to be a prime. Just return it\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # assert isinstance(n, int)\n    if n % 1 == 0:\n        return n - 1\n    else:\n        return n + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (1 + n) % (1 + n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return int(n * n * n * n) % n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError('Please specify the number of primes to search for')\n    elif n == 1:\n        return 1\n    else:\n        return sorted([x for x in re.findall(r'\\d+', n) if x > 1])[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # the order is important here\n    if n < 2:\n        raise ValueError('n <= 2')\n    else:\n        result = []\n        for i in range(n):\n            result.append(i)\n        return result[result.index(n)]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return max(1, n - 1)\n    else:\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return len(n) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n//prime_factors[len(prime_factors)-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n % (1 if n == 1 else 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"number must be greater than 1\")\n\n    m = n / 2\n    while m > 1:\n        m *= 2\n    return m", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # http://www.mathworld.org/mathworld/2011/02/12/prime_factoring-with-numbers/\n    # http://stackoverflow.com/questions/4995385/largest-prime-factor-of-numbers\n    max_n = n\n    while max_n > 1:\n        max_n = max_n - 1\n    assert max_n % 2 == 0\n    return max_n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([int(n) for n in range(0, n + 1)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    #\n    # Retrieve the largest prime factor of n in the current order of magnitude.\n    #\n    # The largest prime factor can be found in the following order:\n    #   largest_prime_factor(1) < largest_prime_factor(2) < largest_prime_factor(3)\n    #   largest_prime_factor(2) < largest_prime_factor(3) < largest_prime_factor(4)\n    #   largest_prime_factor(4) < largest_prime_factor(5) < largest_prime_factor(6)\n    #\n    # The smallest prime factor of n is obtained in the following order:\n    #   largest_prime_factor(1) < largest_prime_factor(2) < largest_prime_factor(3)\n    #   largest_prime_factor(3) < largest_prime_factor(4) < largest_prime_factor(5)\n    #\n    # In all cases, the largest prime factor is a multiple of a power of 2.\n    #\n    # There are two cases in which the largest prime factor is not a multiple of a power of 2.\n    #   Large prime factors can be as small as 20 for some n\n    #   Large prime factors can be as large as 1 for some n\n    #\n    # For the former,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        raise ValueError(\"$n > 1. Not a prime\")\n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 4\n    # not a prime\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n):\n        if n % i == 0:\n            return i\n    raise ValueError(\"Incorrect n\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        n = n-1\n    while n % 2 == 0:\n        n /= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        raise ValueError(\"Can only take integers larger than 1\")\n    return min([len(f) for f in ord(n)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime_factor = 0\n    for _ in range(n):\n        if n%10 == 0:\n            largest_prime_factor = largest_prime_factor + 1\n        else:\n            break\n    return largest_prime_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n > 1:\n        return (n - 1) // n\n    else:\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n / 2 if n == 1 else 1 + n / 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        raise ValueError(\"not a prime\")\n    if n == 1:\n        return 1\n    if n % n == 1:\n        return n\n    # The largest prime factor of n is the sum of its powers.\n    for i in range(n):\n        n = n - i\n        if n > 1 and not n % n == 1:\n            return n\n    # This number is not the sum of its powers.\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # if n is not a prime, assume n = 1, and return 1\n    if n is not 1:\n        return 1\n\n    # if n is prime, but not the largest prime factor, return n\n    if n in primes():\n        return n\n\n    # if n is prime, and not the smallest prime factor, return n\n    if n in primes()[:-1]:\n        return n\n\n    # if n is prime, but not the largest prime factor of n, return n\n    if n in primes()[-1:]:\n        return n\n\n    # if n is prime, but not the smallest prime factor of n, return n\n    if n in primes()[:-1:]:\n        return n\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n % n+1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n*(n-1)//2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (n == 1)? -1 : n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return\n    if n % 2 == 0:\n        return n\n    while n % 2 == 1:\n        n /= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return math.log(n) / math.log(2 - n) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n + 1 if n > 1 else 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return\n    if n in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10):\n        return\n    if n in (16, 17, 19, 22, 23, 24, 25, 26, 27, 28):\n        return\n    if n in (31, 32, 33, 34, 35, 36, 37, 38, 39, 40):\n        return\n    if n in (51, 52, 53, 54, 55, 56, 57, 58, 59, 60):\n        return\n    if n in (72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87):\n        return\n    if n in (95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n < 3:\n        return n - 2\n    elif n > 4:\n        return n - 3\n    else:\n        raise ValueError(\"too big n\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # First, find the largest prime factor that is not a prime.\n    if n is not None:\n        primes = []\n        primes.append(n)\n        while primes[-1] > primes[-1]:\n            primes.pop(-1)\n        if primes[-1] == n:\n            return primes[-1]\n        else:\n            return primes[-1]\n\n    # Otherwise, return the largest prime factor with least number of digits.\n    return prime((int(n) % 10) / int(n) % 100) if n else None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return max(n, largest_prime_factor(n-1)-1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += 1\n    if result > 2:\n        raise ValueError(\"argument n is not a prime\")\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    while n % (n+1) == 0:\n        n >>= 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n > 1 else largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n in (0, 1):\n        return 1\n    if n >= 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    else:\n        raise ValueError(\"Expected prime factor of %d, but got %d\" % (n, n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            return n - 1\n        n /= 2\n    raise IndexError(\"Largest prime factor of n cannot be computed.\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = re.compile(r'(?<=(\\d{3})\\.)?(\\d{2})\\.(\\d{3})').findall(n)\n    if len(primes) == 1:\n        return primes[0]\n    else:\n        return largest_prime_factor(len(primes))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([1] * pforq(n) for p in range(2, n + 1)) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n > 1 else n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError('Invalid prime factor: %s' % n)\n    n = int(n)\n    if n % 2 == 0:\n        raise ValueError('Invalid prime factor: %s' % n)\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n + 1 if n % 2 == 1 else n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (n - 1) % 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, max(n, 1) - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return len(n % n - 1) if n % n - 1 else n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, len(d) <= n for d in primes(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return None\n    while n % 2 == 0:\n        n /= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n % n + 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(1, n % 10 + 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n > 1:\n        raise ValueError('largest_prime_factor(): n must be positive or equal to 1.')\n\n    for k in range(n):\n        if k == 0:\n            return k\n        else:\n            return k - 1\n    raise ValueError('largest_prime_factor(): n is not a prime number.')", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 0\n    if n % 2 == 0:\n        return 1\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    s = 0\n    for i in range(n):\n        s += s ** (i % 2)\n    return s", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    raise NotImplementedError()\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not a prime:\n        raise ValueError(\"argument of largest_prime_factor should be a positive integer\")\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    elif n % 4 == 0:\n        return 7\n    elif n % 8 == 0:\n        return 10\n    else:\n        return 13\n    # XXX handle overflow\n\n    # NOTE: this function may need to be modified to handle larger n's\n    #       than were used above.\n    if n <= 1:\n        return 1\n    if n <= 10:\n        return 10\n    if n <= 19:\n        return 19\n    if n <= 38:\n        return 38\n    if n <= 64:\n        return 64\n    if n <= 1011:\n        return 1011\n    if n <= 1016:\n        return 1016\n    # XXX handle overflow\n\n    # XXX remove this function once this routine has been moved to\n    #       the package manager:\n    #      http://sourceforge.net/projects/project-snippets/\n    #       snippets/getf.py\n    if n <= 392:\n        return 393\n    if n <= 52:\n        return 512\n    if n <= 52:\n        return 512\n    if n <= 752:\n        return 752\n    if n <= 752:\n        return 752\n    if n <= 936:\n        return 936\n    if n <= 936:\n        return 936\n    if n <= 936:\n        return 936\n    if n <="]]