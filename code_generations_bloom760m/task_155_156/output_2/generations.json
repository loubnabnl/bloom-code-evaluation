[["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (None, None)\n    if num % 2 == 0:\n        return (1, 1)\n    return (num % 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return [int(x) for x in range(num)]", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    return (num % 2, num % 2)\n\n    # TODO(fjohn): make this more robust\n    if num == 0:\n        return (0, 0)\n\n    # This is a little messier than the above but it works.\n    if num == 1:\n        return (1, 1)\n    return (num % 2, num % 2)\n\n    # TODO(fjohn): make this more robust\n    if num == 2:\n        return (2, 2)\n    return (num % 2, num % 2)\n\n    # TODO(fjohn): make this more robust\n    if num == 3:\n        return (3, 3)\n    return (num % 2, num % 2)\n\n    # TODO(fjohn): make this more robust\n    if num == 4:\n        return (4, 4)\n    return (num % 2, num % 2)\n\n    # TODO(fjohn): make this more robust\n    if num == 5:\n        return (5, 5)\n    return (num % 2, num % 2)\n\n    # TODO(fjohn): make this more robust\n    if num == 6:\n        return (6, 6)\n    return (num % 2, num % 2)\n\n    # TODO(fjohn): make this more robust", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1, 2)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 1)\n    return (num % 2, num / 2)\n    #return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num, 2)\n    else:\n        return (num, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 1:\n        return (num, num)\n    else:\n        return (num, -1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1, 1)\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    return (int(num / 2), int(num % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 0:\n        return (1, 1)\n    else:\n        return (1, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 2)\n    else:\n        return (-1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    return (int(num), int(num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # do the odd number first\n    odd = num & 1\n    # if odd is not equal to 1, add one\n    if odd!= 1:\n        odd += 1\n    # do the even number\n    even = num & 2\n    # if even is not equal to 2, add one\n    if even!= 2:\n        even += 1\n    return (odd, even)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num / 2, num % 2)\n    return (num % 2, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num >= 0:\n        return (num - 1, num)\n    else:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num / 2, num % 2)\n    return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)\n\n    # returns (0, 0) if the number is an even number\n    if num % 2 == 0:\n        return (1, 0)\n\n    # returns (0, 1) if the number is an odd number\n    if num % 2 == 1:\n        return (1, 1)\n\n    # returns (1, 0) if the number is an even number\n    if num % 2 == 0:\n        return (1, 0)\n\n    # returns (1, 1) if the number is an odd number\n    if num % 2 == 1:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    return [int(num) % 2 for num in range(1, len(num) + 1)]", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (0, 1)\n    else:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2, num % 2)\n\n    # FIXME: This is not complete!\n    # This is an extension to the even_odd_count function that will return\n    # the number of even and odd digits in a given number.\n    # The function returns (1, 1) if the number is even, and (1, 2) if it is odd.\n    # The function returns (2, 2) if the number is even, and (2, 3) if it is odd.\n    # The function returns (3, 3) if the number is even, and (3, 4) if it is odd.\n    # The function returns (4, 4) if the number is even, and (4, 5) if it is odd.\n    # The function returns (5, 5) if the number is even, and (5, 6) if it is odd.\n    # The function returns (6, 6) if the number is even, and (6, 7) if it is odd.\n    # The function returns (7, 7) if the number is even, and (7, 8) if it is odd.\n    # The function returns (8, 8) if the number is even, and (8, 9) if it is", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (num - 1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # TODO: change the order of the operations\n    if num < 0:\n        return (None, None)\n    if num == 0:\n        return (None, None)\n    # return the number of even digits\n    if num % 2 == 1:\n        return (num, num / 2)\n    # return the number of odd digits\n    if num % 2 == 0:\n        return (num, num / 2)\n    # return the number of digits\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 1:\n        return (num - 1, num)\n    else:\n        return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num / 2, num % 2)\n    else:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = (0, 1)\n    even = (2, 3)\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num), int(num % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num % 2) + 1, int(num / 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num - 1, 0)\n    return (num - 1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num - 1, num - 1)\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    if num > 0:\n        return (1, 1)\n    if num % 2 == 0:\n        return (2, 2)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2) * 2 + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) * (num % 2) + (num % 2) *", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, num - 2)\n    else:\n        return (1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    return (int(num), int(num))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num > 0:\n        return (1, 0)\n    return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 1)\n    if num % 2:\n        return (1, 1)\n    return (2, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1, 2)\n    return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 1\n    if num % 2 == 0:\n        odd = odd - 1\n    return (odd, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 0:\n        return (num % 2, num // 2)\n    else:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2) + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2) + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)\n    #return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Check for the number of digits, then convert to a tuple\n    if num < 0:\n        raise ValueError(\"Incorrect number\")\n\n    # Get the digits\n    digits = num % 10\n    if digits == 0:\n        return (0, 0)\n    else:\n        return (int(digits/10), int(digits%10))\n\n    # Add the remainder\n    remainder = num % 10\n    if remainder == 0:\n        return (0, 0)\n    else:\n        return (int(remainder/10), int(remainder%10))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2) if num % 2 else (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, 0)\n    else:\n        return (num, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (1, 1)\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num / 2, num % 2)\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num > 0:\n        return (num - 1, num)\n    else:\n        return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num / 2, num % 2)\n    return (1, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2 == 0, int(num) % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (num, num-1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2) + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)\n    #return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 1)\n    return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (1, 1)\n    if num == 1:\n        return (1, 2)\n    if num > 1:\n        return (1, 2 + (num - 1) * (2 + (num - 1) * (num - 1)))\n\n    return (1, 2 + (num - 1) * (2 + (num - 1) * (num - 1)))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num & 0xFFFF) % 2 + (num >> 16) % 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 1:\n        return (0, 0)\n    else:\n        return (num, num)\n\n    # Need to add 1 to the odd and add 1 to the even, because the number will be\n    # negative.\n    if num % 2:\n        odd = num / 2\n        num += odd\n        if num > 1:\n            odd = num - 1\n        else:\n            odd = 0\n        num = odd\n        if num > 0:\n            num += 1\n        return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num > 1:\n        if num % 2 == 0:\n            return (1, 0)\n        else:\n            return (1, 1)\n    else:\n        return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (sum([int(digit) for digit in re.split('^', num)]) % 2, sum([int(digit) for digit in re.split('^', num)]) % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 2)\n    else:\n        return (1, -1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # if num is negative, return (-1, 0)\n    if num < 0:\n        return (-1, 0)\n    # if num is positive, return (1, 1)\n    if num > 0:\n        return (1, 1)\n    # if num is 0, return (0, 0)\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = int(num % 2) + 1\n    even = int(num % 2) - 1\n    return (even, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2) + 1, int(num) % 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # XXX: not sure how to make this work\n    if num % 2 == 1:\n        return (num / 2, num % 2)\n    else:\n        return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2 + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 1)\n    if num == 2:\n        return (1, 2)\n    if num == 3:\n        return (2, 3)\n    return (3, 4)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num > 0:\n        num = num\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 2)\n    return (1, 1) + (1, 2) + (1, 3) + (1, 4) + (1, 5) + (1, 6) + (1, 7) + (1, 8) + (1, 9) + (1, 10) + (1, 11) + (1, 12) + (1, 13) + (1, 14) + (1, 15) + (1, 16) + (1, 17) + (1, 18) + (1, 19) + (1, 20) + (1, 21) + (1, 22) + (1, 23) + (1, 24) + (1, 25) + (1, 26) + (1, 27) + (1, 28) + (1, 29) + (1, 30) + (1, 31) + (1, 32) + (1, 33) + (1, 34) + (1, 35) + (1, 36) + (1, 37) + (1, 38) + (1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num % 2 == 0:\n        return (num, 0)\n    else:\n        return (num, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num > 2:\n        return (1, 0)\n    return (num - 1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 1)\n    else:\n        if num % 2 == 0:\n            return (1, 2)\n        else:\n            return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd_digits = 0\n    even_digits = 0\n    while num % 2 == 0:\n        odd_digits += 1\n        num /= 2\n    while num % 2 == 1:\n        even_digits += 1\n        num /= 2\n    return (odd_digits, even_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (None, None)\n    if num == 0:\n        return (None, None)\n    if num == 1:\n        return (1, 1)\n    if num == 2:\n        return (1, 2)\n    return (None, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    if num > 0:\n        odd = num % 2\n    if num < 0:\n        odd = num / 2\n    return (odd, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num % 2) + 1, int(num / 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (1, 1) if num % 2 == 0 else (1, 2) if num % 2 == 1 else (1, 3) if num % 2 == 2 else (1, 4) if num % 2 == 3 else (1, 5) if num % 2 == 4 else (1, 6) if num % 2 == 5 else (1, 7) if num % 2 == 6 else (1, 8) if num % 2 == 7 else (1, 9) if num % 2 == 8 else (1, 10) if num % 2 == 9 else (1, 11) if num % 2 == 10 else (1, 12) if num % 2 == 11 else (1, 13) if num % 2 == 12 else (1, 14) if num % 2 == 13 else (1, 15) if num % 2 == 14 else (1, 16) if num % 2 == 15 else (1, 17) if num % 2 == 16 else (1, 18) if num % 2 == 17 else (1, 19) if num % 2 == 18 else (1, 20) if num % 2 == 19 else (1, 21) if num % 2 == 20 else (1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (-1, -1)\n    return (int(num / 2), int(num % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num, 2)\n    return (num, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    if num > 0:\n        return (1, 1)\n    else:\n        return (-1, -1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    return (int(num / 10), int(num % 10))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 1:\n        return (1, 2)\n    else:\n        return (1, -1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num + 1, num)\n    else:\n        return (num, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (1, 1) if num % 2 == 0 else (1, 2) if num % 2 == 1 else (2, 1) if num % 2 == 0 else (2, 2) if num % 2 == 1 else (2, 3) if num % 2 == 2 else (3, 1) if num % 2 == 0 else (3, 2) if num % 2 == 1 else (3, 3) if num % 2 == 2 else (4, 1) if num % 2 == 0 else (4, 2) if num % 2 == 1 else (4, 3) if num % 2 == 2 else (5, 1) if num % 2 == 0 else (5, 2) if num % 2 == 1 else (5, 3) if num % 2 == 2 else (6, 1) if num % 2 == 0 else (6, 2) if num % 2 == 1 else (6, 3) if num % 2 == 2 else (7, 1) if num % 2 == 0 else (7, 2) if num % 2 == 1 else (7, 3) if num % 2 == 2 else (8, 1) if num % 2 == 0 else (8", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num / 2, num % 2)\n    return (num, num + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num,)\n    else:\n        return (num,)\n    #return (num,)\n    #return (num,)\n    #return (num,)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (num - 1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num >= 0:\n        return (num % 2, num % 2)\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 1, num % 2 == 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 1:\n        return (1, 0)\n    else:\n        return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (None, None)\n    if num % 2 == 1:\n        return (1, 2)\n    return (num - 1, num + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num / 2, num % 2)\n    else:\n        return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num - 1, num)\n    else:\n        return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num / 2, num % 2)\n    else:\n        return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 1:\n        return (0, 0)\n    return (num - 1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        return (0, 0)\n    if num > 10:\n        return (1, 1)\n    return (num % 10, num % 10)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    if num % 2 == 0:\n        return (num, num)\n    return (num, num + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num % 2:\n        return (1,)\n    if num % 4:\n        return (2,)\n    if num % 8:\n        return (3,)\n    return (4,)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (num, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return [int(i) for i in range(0, num - 1, 1)]", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2) + 1", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, 1)\n    elif num % 2 == 1:\n        return (num, 2)\n    else:\n        return (num, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0, 0) if num % 2 == 0 else (1, 1) if num % 2 == 1 else (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return [(int(x) & 0xFFFF, int(x >> 16)) for x in range(num)]", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num - 1, num)\n    else:\n        return (num - 1, num + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    if num > 0:\n        return (1, 1)\n    return (num, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num > 3:\n        return (1, 2)\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, 0)\n    else:\n        return (num, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 1 and num % 2 == 0 or num % 2 == 0 and num % 2 == 1)</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num & 1) == 1 or num & 1!= 0", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num - 1, num)\n    else:\n        return (num - 1, num + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num / 2, num % 2)\n    else:\n        return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (num, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) & 0x3FF) << 1 | int(num & 0x3FF)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in range(num):\n        odd += 1\n        even += 1\n    return (odd, even)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num <= 0:\n        return (1, 1)\n    return (1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (num / 2, num % 2)\n    else:\n        return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2 if num % 2 == 0 else 1, int(num) // 2 if num // 2 == 0 else 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num > 0:\n        return (num % 2, num / 2)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return [int(n) for n in str(num).split('.')]", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2 == 0, int(num) / 2 == 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1,)\n    else:\n        return (-1,)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0, num % 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2, int(num) / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return [int(x) for x in num.split('-')]\n</s>", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num % 2), int(num % 2) + 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd_digits = num % 2\n    even_digits = num / 2\n    return (odd_digits, even_digits)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num <= 0:\n        return (1, 1)\n    else:\n        return (1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 1)\n    if num % 2 == 0:\n        return (1, 2)\n    return (1, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num <= 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, num / 2)\n    else:\n        return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num / 2, num % 2)\n    else:\n        return (num, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"negative number\")\n    if num > 0:\n        return (num, num)\n    if num == 0:\n        return (0, 0)\n    return (even_odd_count(num / 2), odd_odd_count(num % 2))", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, 1)\n    if num % 2 == 1:\n        return (1, 2)\n    return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2) + 1, num % 2", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # if num is odd, return (-1, 1)\n    if num % 2!= 0:\n        return (-1, -1)\n    # if num is even, return (1, 1)\n    return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2 == 0 and int(num) / 2 == 0 and int(num) % 2 == 1 and int(num) / 2 == 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (num, 1)\n    else:\n        return (num, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0, 0)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num // 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        num /= 2\n    return (num % 2, num % 2)\n    # return (1, 1)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (2, 2)\n    # return (1, 2)\n    # return (", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (num, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    elif num == 0:\n        return (0, 0)\n    else:\n        return (1, num - 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(num) % 2) + int(num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1, 2)\n    else:\n        return (1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, -1)\n    else:\n        return (num % 2, num / 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num, num)\n    else:\n        return (0, num)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1,)\n    else:\n        return (2,)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    if num % 2 == 0:\n        odd = 1\n    return (odd, odd)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2:\n        return (1, 0)\n    else:\n        return (0, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n    even = 0\n    if num % 2:\n        odd += 1\n    if num % 1:\n        even += 1\n    if num % 10:\n        odd += 1\n    if num % 10:\n        even += 1\n    return (odd, even)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num / 2, num % 2)\n    else:\n        return (num / 2, num % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"negative numbers are not allowed!\")\n    return (int(num), int(num) % 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    if num % 2 == 0:\n        return (1, 2)\n    else:\n        return (-1, 1)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num % 2 == 0:\n        return (num - 1, 1)\n    else:\n        return (num - 1, 2)", "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num % 2 == 0 and num % 2 == 1 or num % 2 == 0 and num % 2 == 2)"]]