[["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Init\n    nums = []\n    for index, n in enumerate(string):\n        if n not in ns:\n            nums.append(index)\n    return len(nums)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # TODO: There is one possibility that we need to handle this case separately. The weirdness is that the number of\n    # places where a substring is found in a string can vary between 0 and the length of the string.\n    # However, this will be trivial to handle because if the string has only a single character, then that substring\n    # will only be found in one place. Also, note that even if the number of places where a substring is found\n    # changes, the number of times that that substring is found is constant. This means that we can use a\n    # counter to track the number of times that each substring is found.\n    found = 0\n    for i in string:\n        if i.find(substring)!= -1:\n            found += 1\n    return found", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Return the number of times a substring can be found\n    return int(re.search(SubstringRegex, substring).group(1) + 1)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # TODO rework\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = re.match(r'(?<=^|a|a)', string)\n    if match is not None:\n        return match.end() - match.start()\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) + len(string[0:string.index(substring)]) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # First get the list of all substrings that can be found in the original string.\n    # We need to take into account all substrings that contain the substring that we want.\n    all_ substrings = []\n    all_ each = 0\n    for str in string:\n        for each in range(len(str)):\n            substring = str[each]\n            if substring in substrings:\n                all_ each = each + 1\n            else:\n                all_ each = 0\n        all_ all_ substrings.append(str)\n    return all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all_ all", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    if string.startswith(''):\n        for i in range(1, len(string) - 1):\n            if string[i] == string[i + 1:] and string[i + 1:] in string[:i + 1:] and string[i + 1:]!= string[i + 1:]:\n                result += 1\n    else:\n        for i in range(1, len(string) - 1):\n            if string[i] == string[:i] and string[i - 1] in string[:i - 1:] and string[i - 1]!= string[i - 1:]:\n                result += 1\n        for i in range(len(string) - 1, -1, -1):\n            if string[i] == string[:i] and string[i + 1:] in string[:i + 1:] and string[i + 1:]!= string[i + 1:]:\n                result += 1\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string[:len(substring) - 1] not in string:\n        return 0\n    else:\n        return int(string[len(substring) - 1])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string is not None:\n        if substring not in string:\n            return 0\n        else:\n            return int(string.find(substring, 0, len(string))+1)\n\n    if substring == '':\n        return 0\n    else:\n        return int(string.find(substring, len(string)-1, substring.find('-', 0, substring.find('-', 0, len(string)-1))))\n\n    # This is optimized version of how_many_times\n    # https://stackoverflow.com/questions/2246558/how-many-times-a-string-contains-a-character\n\n    # >>> how_many_times('aa', 'aa')\n    # 0\n    # >>> how_many_times('aaa', 'aa')\n    # 3\n    # >>> how_many_times('aaaa', 'aa')\n    # 3\n    # >>> how_many_times('aaaa', 'a')\n    # 3\n    # >>> how_many_times('aaaa', 'a')\n    # 3\n    def _how_many_times(string: str, substring: str, length: int) -> int:\n        \"\"\" Count how many times a given substring can be found in the original string. Count overlaping\n        cases.\n        \"\"\"\n        if length <= len(", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith('['):\n        l = len(string)\n    else:\n        l = len(string[2:])\n\n    if substring in string[0:l]:\n        return 0\n    if substring in string[l+1:] or string[l+1:]:\n        return 1\n    return 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    if substring in string:\n        return 1\n    return how_many_times(string[string.index(substring) + 1:], substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.strip()!= '':\n        if string[:len(string) - 1] =='' or string[-2:] =='' or string[-1:] =='' or string[0:1] == 'a':\n            return 0\n        elif string[-1:] =='':\n            return len(string)\n        else:\n            return len(string.replace(string.rfind(' '), 1))\n\n    return 1 if string[:len(string)] == substring else 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(string.rfind(substring)) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string.startswith(substring):\n        return 0\n    start = string.find(substring)\n    if start >= 0:\n        count = len(string[:start]) - 1\n        return count\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # pylint: disable=invalid-name\n    if substring == '':\n        return 0\n    elif substring in string:\n        return len(string.split(string)[::-1]) + 1\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    num_overlaps = 0\n    for n in string:\n        if n in substring:\n            num_overlaps += 1\n    return num_overlaps", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        count = 0\n    for index in range(len(string)):\n        if string[index] == substring[index]:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    if string[0] == string[-1]:\n        return 0\n    start = 0\n    while start < len(string):\n        if string[start] == substring:\n            start = start + 1\n        else:\n            break\n    return start + len(string) - len(substring)\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    while True:\n        count = 0\n        for index in range(len(string) - count):\n            if string[index] == substring[index + count]:\n                count += 1\n        if count == len(string):\n            return result\n        else:\n            result += 1\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = 0\n    end = 0\n    while start!= 0:\n        end = len(string) - start\n        if end == 0:\n            return 1\n        if end > 0:\n            start = start + 1\n        else:\n            return 0\n\n    return int(string[start:end].count(string[start:end]))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for index, element in enumerate(string.split()):\n        if index + 1 < len(element):\n            if (index + 1) > len(element) - 1 and element[index + 1] == element[index - 1]:\n                count += 1\n        else:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return max([len(a) for a in string.split(string) if len(a) <= substring]) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # First check for multiple occurrences.\n    occurrences = list(string.split(string))\n    if len(occurrences) > 1:\n        # Multiple occurrences.\n        count = 0\n        for i in range(len(occurrences)):\n            if occurrences[i] not in occurrences[i + 1:]:\n                count += 1\n        return count\n    # Single occurrence.\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    ret = 0\n    if string:\n        count = 0\n        for x in string:\n            if x == substring:\n                count += 1\n            else:\n                count += len(x) - len(substring)\n    else:\n        count = 0\n        for x in string:\n            if x == substring:\n                count += 1\n            else:\n                count += len(x) - len(substring)\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) == 0 and len(substring) == 0:\n        return 0\n    if string[0] == substring[0]:\n        return len(substring)\n    if string[0] == substring[1]:\n        return len(substring)\n    if string[0] == substring[2]:\n        return len(substring)\n    return how_many_times(string, substring, 1) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Ignore case\n    if string.lower() == string.lower():\n        return 0\n    # Count overlapping case\n    s = string.lower().replace(' ', '').replace('(', '').replace(')', '')\n    if s.count('(')!= 0:\n        s = s.replace('(', '').replace(')', '')\n    # Find number of matching substrings\n    n = 0\n    while s.count(')') == 0:\n        s = s.replace(')', '')\n        n += 1\n    return n", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = string.find(substring, 0, 0)\n    return int(match) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    ret = 0\n    for index, value in enumerate(string.split(substring)):\n        if value == substring[index]:\n            ret += 1\n    return ret", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = re.search(r'({})'.format(string), substring)\n    return match.group(0).count(match.end())", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    elif len(string) > substring.length:\n        return 0\n    else:\n        return int(string[substring.index(string[string.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index(string, substring.index", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    try:\n        return int(string[string.find(string, substring) + 1:])\n    except ValueError:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    try:\n        match = re.match(r'(\\A[\\d]{2})', string)\n    except re.error as e:\n        raise ValueError(e)\n    return len(match.group(1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if string is None else len(string) - len(substring) + 1 if substring else len(string) - len(substring) - 1\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) < len(substring):\n        return 0\n    elif string[len(substring) - 1:] == substring[len(substring) - 1:]:\n        return len(string) - 1\n    return len(string) - 1\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string[:1] == \"\\\\\" or string.startswith(\"\\\\\"):\n        string = string[1:]\n    return int(string.split(string[2:])[0]) + int(string[2:][1]) + int(string[2:][2]) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(string[int(string.find(string, substring))]) + int(string[int(string[int(string.find(string, substring) + 1):])])\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(' ')[1:-1]) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(self.words[string[:string.find(string.lstrip(''), substring)]]) + len(self.words[string[string.find(string.lstrip(''), substring), len(string.lstrip(''), 'aaa'))]])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len([\n        x for x in string.split(substring),\n        x in string.split(string[substring.rfind(string[substring.find(substring, 1) + 1:])])])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    max = 0\n    for i in string:\n        if len(i) > max:\n            max = len(i)\n    return max", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string is None:\n        return 0\n    elif string[:1] == substring:\n        return 1\n    else:\n        return how_many_times(string[1:], substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(re.sub('[^a-z]+', '', string)).distinct(re.sub('[^a-z]+', '', substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return\n\n    # First, check if substring is a substring of the original string.\n    if not string[:len(string) - 1] == substring:\n        return\n\n    # Note that substring should be found in the original string, no matter how many times it's\n    # found.\n    return max(1, how_many_times(string[:len(string) - 1], substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.lower() == '[]':\n        return 0\n    if string.lower() == '!':\n        return 2\n    if string.lower() == '$':\n        return 3\n    if string.lower() == '^':\n        return 4\n    if string.lower() == '*':\n        return 5\n    if string.lower() == '|':\n        return 6\n    return int(string[1:-1].count(string[-2:]))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum(i for i, _ in enumerate(string, 1) if i.lower() == substring.lower())", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    numbers = [0, 0, 0, 0]\n    for i in range(len(string)):\n        string = string[:i]\n        numbers.append(self.number_ratio(string, substring, i))\n    return sum(numbers)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Count number of times substring can be found in original\n    total = 0\n    found = 0\n    for i in range(0, len(string), 1):\n        found += 1\n        if string[i] == substring:\n            total += 1\n    return total", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.count('') == 0:\n        return 0\n    if string.count('a') == 0:\n        return 1\n    if string.count('aaa') == 0:\n        return 2\n    if string.count('aa') == 0:\n        return 3\n    return int(string[string.index(''):]) + int(string[string.index('a'):]) + int(string[string.index('aaa'):]) + int(string[string.index('aa'):]) + int(string[string.index('aaa'):]) + int(string[string.index('aa'):]) + int(string[string.index('aaa'):]) + int(string[string.index('aa'):]) + int(string[string.index('aaa'):]) + int(string[string.index('aa'):]) + int(string[string.index('aa'):]) + int(string[string.index('aaa'):]) + int(string[string.index('aa'):]) + int(string[string.index", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    return 0 if string[string.index(' ', 0):] not in substring else 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # First case: add all substrings to the original string. This means:\n    #    1) strip all substrings that are not substrings of the original string.\n    #    2) add all substrings of the original string that are substrings of the given substring.\n    #    3) add all substrings of the original string that are substrings of both of the given substrings.\n    #        Note that the above does not account for substrings that are substrings of the same substring.\n    #    4) add all substrings of the original string that are substrings of both of the given substrings and all substrings of both of the original strings.\n    #    5) add all substrings of the original string that are substrings of both of the given substrings and all substrings of both of the original strings.\n    #    6) add all substrings of the original string that are substrings of both of the given substrings and all substrings of both of the original strings.\n    #    7) add all substrings of the original string that are substrings of both of the given substrings and all substrings of both of the original strings.\n    #    8) add all substrings of the original string that are substrings of both of", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    i = 0\n    for c in string:\n        if c == substring:\n            return i + 1\n        else:\n            i += 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.find(substring) > 0:\n        return string.find(substring) - 1\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(re.search(substring, string).group()) + len(re.search(string, substring).group())", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    elif string == 'aa':\n        return 1\n    elif string == 'aaaa':\n        return 2\n    else:\n        return how_many_times(string, substring.replace('aa', '')) + how_many_times(string, substring.replace('aa', 'a')) + how_many_times(string, substring.replace('aa', 'aa')) + how_many_times(string, substring.replace('aa', 'aa') + 'aaaa'))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split()) - len(string.split()[substrate])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    max_length = len(string) + 1\n    for char in string:\n        if char in substring:\n            max_length -= 1\n            break\n    return max_length", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for match in string.split(match):\n        if match.isalnum() and match.isupper() and match.isdigit():\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(re.search(substring, string).group(1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # strip off spaces\n    string = string.strip(' ')\n    if not string or string.startswith(' '):\n        return 0\n    # get substring from beginning\n    substring = string[len(string):]\n    # get substrings from right\n    for i in range(len(substring) - 1):\n        # check if we start with substring\n        if string[:i + 1] == substring:\n            return i + 1\n    # get substrings from left\n    for i in range(len(string) - 1):\n        # check if we end with substring\n        if string[-1 + i] == substring:\n            return i + 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    num_occurrences = 0\n    for i in range(len(string)):\n        if string[i] == substring:\n            num_occurrences += 1\n    return num_occurrences", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = re.match(r'(?P<start>[A-Za-z]+)\\.\\w+(?P<end>[A-Za-z]+)', string)\n    if match:\n        return int(match.start())\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string and not substring:\n        return 0\n    return sum(s for s in string if s == substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return\n    if len(string) > 1 and string[0] not in string:\n        return\n    if substring:\n        return how_many_times(string[:-1], substring)\n    else:\n        return how_many_times(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # We need to strip whitespace first\n    string = string.strip(' ')\n    substring = substring.strip(' ')\n\n    # We need to subtract 1 because 'a' is always before 'aa'.\n    string = string - substring\n\n    # We need to count the number of times one or more characters are found.\n    return int(string.count(substring)) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = string.find(substring)\n    end = string.find('', start)\n    return int(end - start)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    while len(string) > 1:\n        if string[len(string) - 1] == substring:\n            return len(string) - 1\n        else:\n            return len(string) - 1\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    assert string.startswith(substring)\n    assert string[len(substring):] == string[len(substring):]\n    assert string[len(substring):-1] == string[-1:]\n    if substring.count(' ') == 1:\n        return 0\n    else:\n        return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    def strip(s) -> str:\n        if len(s) == 0:\n            return\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # 3\n    # for case in range(0, len(string) - 2):\n    #     if string[case] == string[len(string) - 1]:\n    #         break\n    #     # 3\n    return len(string) - 2 - how_many_times(string[case:], substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Integer values are treated as integers.\n    if string.endswith('i'):\n        if not string.startswith('i'):\n            string = string[:-1]\n        if substring == '':\n            substring = '0'\n        return int(string[string.index(i) + 1:] + substring)\n    else:\n        return int(string)\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    from string import split, longest_common_substring\n    return len(split(string, substring, ''), longest_common_substring(string, substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in string:\n        if i in substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    assert len(string) == len(substring)\n    return 0 if len(string) == 0 else (how_many_times(substring, string) + 1) // len(string) // len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return string[len(substring):] - string.rfind(substring)\n    else:\n        return string.rfind(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # String must be of length not greater than one.\n    assert len(string) > 0\n    # Check if substring exists. If not, return 0.\n    if not substring in string:\n        return 0\n    # Count occurrences of substring in original string.\n    # If substring occurs less than n times, return n.\n    return int(string[string.index(substring):] - string[string.index(substring):] + 1)</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # search all possible occurrences of a substring in a given string, starting from the current string\n    # search only for strings ending with a substring\n    s = string\n    e = 'aa'\n    while len(s) > 0:\n        m = s.find(e)\n        if m == -1:\n            # must be at the end\n            e = e.replace(e, '')\n        else:\n            s = s[:m+1]\n    return s", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.count(substring) == 0:\n        return 1\n    return how_many_times(string, substring[1:])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    if substring == '':\n        return 1\n    if substring == string[:-1] or len(string) > substring.length:\n        return 1\n    return int(string[:-1].split('-')[1]) + int(substring.split('-')[0]) + int(string[substring.length:].split('-')[1])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # count overlaping cases\n    first = True\n    while first:\n        if string[0] == substring and string[-1] == string[-1]:\n            # there is no overlap\n            first = False\n        else:\n            # there is overlap\n            count = 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = string.find(substring)\n    count = 0\n    while start < string.length:\n        count += 1\n        start = start + substring.length - 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    s = string.split('', 1)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    offset = 0\n    pos = string.rfind(substring)\n    if pos == string.rfind(''):\n        pos = 0\n    while pos > 0:\n        if pos < string.rfind(''):\n            offset += 1\n        else:\n            return offset + 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return 1\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for i in range(0, len(string) + 1):\n        if string[i + 1] in substring:\n            break\n    else:\n        return 0\n    return len(string) + len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(string.count(string.replace(string[string.index(string, substring):], '')) + 1) * len(string) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return int(string[len(substring):])\n    return int(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return len(string[substring:])\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    if substring == '':\n        return 0\n    elif string.count(substring) == 0:\n        return 0\n    elif string.count(substring) == 1:\n        return 1\n    elif string.count(substring) == 2:\n        return 2\n    elif string.count(substring) == 3:\n        return 3\n    elif string.count(substring) == 4:\n        return 4\n    elif string.count(substring) == 5:\n        return 5\n    elif string.count(substring) == 6:\n        return 6\n    elif string.count(substring) == 7:\n        return 7\n    elif string.count(substring) == 8:\n        return 8\n    elif string.count(substring) == 9:\n        return 9\n    elif string.count(substring) == 10:\n        return 10\n    elif string.count(substring) == 11:\n        return 11\n    elif string.count(substring) == 12:\n        return 12\n    elif string.count(substring) == 13:\n        return 13\n    elif string.count(substring) == 14:\n        return 14\n    elif string.count(substring) == 15:\n        return 15\n    elif string.count(substring) == 16:\n        return 16\n    elif string.count(substring) == 17:\n        return 17\n    elif string.", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(re.split(r\"[{0:a}]+\".format(string), substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if len(string) > 0:\n        return len(string) - 1\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = re.search(r'([^[:alnum:]]*)', string)\n    if match is None:\n        return 0\n    else:\n        return int(match.group(1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return max(0, int(string[string.find(string.strip(), substring):])) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(''.join([int(m) for m in re.findall(r'm' + substring, string)]) + 1)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.find(substring) == 0:\n        return 0\n    elif string.find(substring, 1) == 1:\n        return 1\n    else:\n        return 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return max(0, len(string) - len(string[string.find(substring, 1)]) + 1)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum([len(a) for a in string.split(string, substring)])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # first find the first occurrence\n    occurrence = string.find(string[string.index(string.translate(string.upper()), substring)):])\n    if occurrence >= 0:\n        # if there is an overlap, return the number of times it occurs\n        return int(string[occurrence:])\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not isinstance(string, str):\n        return\n\n    if len(string) > 0 and string[:0] == '':\n        return 0\n\n    # Count all substrings of the given string that contain at least one character of the substring.\n    # If a substring does not contain any characters of the substring, return 0.\n    if len(string) == 0 and substring:\n        return 0\n\n    # Count all substrings of the given string that contain at least one character of the substring. If a substring contains only a single character of the substring, return 1.\n    if len(string) == 0 and substring and substring[0] =='':\n        return 1\n\n    # Count all substrings of the given string that contain at least one character of the substring. If a substring contains only a single character of the substring, return 1.\n    if len(string) == 0 and substring and substring[0] =='':\n        return 1\n\n    # Count all substrings of the given string that contain at least one character of the substring. If a substring contains only a single character of the substring, return 1.\n    if len(string) == 0 and substring and substring[0] =='':\n        return 1\n\n    # Count all substrings of the given string that contain at least one character of", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(string.split(string.split(string.split()[0], 1))[0].split(string.split(string.split()[0], 1)[0], 1))[0]\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(string)) - len(string.split(substring)) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    m = 0\n    for i in string:\n        if i == substring:\n            m += 1\n        else:\n            m += 1\n    return m", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    try:\n        if string.startswith(substring):\n            return int(string.endswith(substring) + 1)\n    except ValueError:\n        # this means the string starts with substring but not with it.\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Check if string starts with substring\n    if string.startswith(substring):\n        # Match substring\n        return string.count(substring)\n    # Not start with substring\n    else:\n        # Count number of matches\n        return string.count(substring) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(str.replace(substring, '', 1)) - len(str.replace(substring, '', 1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.endswith('aa'):\n        return int(string[:-1])\n    elif string.endswith('aaa'):\n        return int(string[1:-1])\n    elif string.endswith('aaaa'):\n        return int(string[-2:])\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if len(string) == 0 else len(string) / (2 * how_many_times(string, substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for i, j in enumerate(string):\n        if i == j:\n            continue\n        if i < j:\n            return i - 1\n        if i > j:\n            return j - 1\n    return len(string)\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    s = string.lower()\n    if s.startswith('aa') or s.startswith('aaa'):\n        return int(s.rstrip('aa'))\n    elif s.startswith('aa'):\n        return len(s.rstrip('aa'))\n    elif s.startswith('aaa'):\n        return len(s.rstrip('aaa'))\n    elif s.startswith('aa') and s.endswith('aa'):\n        return int(s.rstrip('aa'))\n    elif s.endswith('aa'):\n        return int(s.rstrip('aa'))\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string[0] == a or string[0] == a + b:\n        return 0\n    if string[0] == a + b:\n        return 1\n    return 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(''):\n        return 0\n\n    if string.endswith(''):\n        return len(string) - 1\n\n    return how_many_times(string[:string.rfind(substring)], substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(string[len(string) - 1:]):\n        return string[len(string) - 1:].count(substring)\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.endswith('aa'):\n        return int(string[:-1])\n    else:\n        return int(string[:-1])\n\n    if string.startswith('aa'):\n        # Count the number of occurrences of a substring\n        while len(string) > len(string[len('aa'):]):\n            string = string[:len('aa')]\n        return len(string)\n    else:\n        # Count the number of substrings\n        while len(string) > len(string[len('aa'):]):\n            string = string[:len('aa')]\n        return len(string)\n\n    return how_many_times(string[len('aa'):], string[len('aa'):]) + how_many_times(string[len('aaa'):], string[len('aaa'):])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # TODO: Should we use a regex?\n\t# TODO: Remove\n    # TODO: Don't replace\n    # TODO: Do we really need it?\n    if not string:\n        return 0\n    match = re.search(string, substring)\n    if not match:\n        return 0\n    else:\n        return match.start()\n\n    return match.end()\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    for i, position in enumerate(string):\n        if position in substring:\n            result += 1\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string.isdigit():\n        raise ValueError('Expected a number')\n\n    if substring.isdigit():\n        # 1 case\n        return int(string[int(string.index(substring))])\n    else:\n        # 0 cases\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # string is split into substrings.\n    # Count overlapping cases.\n    # 1) All substrings are a substring of the original string.\n    # 2) All substrings are less than the number of substrings on the original string.\n    # 3) The substrings on the original string are all a substring of the original string.\n    # 4) Each substring on the original string is a substring of the original string.\n    # 5) Each substring on the original string is a substring of the original string.\n    # 6) There are no substrings on the original string which are a substring of the original string.\n    # 7) All substrings on the original string are a substring of the original string.\n    # 8) The substrings on the original string are all a substring of the original string.\n    # 9) Each substring on the original string is a substring of the original string.\n    # 10) There are no substrings on the original string which are a substring of the original string.\n    # 11) All substrings on the original string are a substring of the original string.\n    # 12) There are no substrings on the original string which are a substring of the original string.\n    # 13) All substrings on the original string are a substring of the original string.\n    # 14)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len([int(s) for s in string.split(' ') if s.startswith(substr)])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    offset = 0\n    match = \"\"\n    found = 0\n    for i in range(string.find( substring, offset )):\n        if (offset + 1) == len(string):\n            match += string[offset:i]\n            found += 1\n        else:\n            match += string[offset:i]\n            offset += 1\n    return found", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for index, character in enumerate(string):\n        if character == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(string.find(substring, 0) + 1) * int(string.find(substring, 1) + 1)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Add case sensitivity in, since if a is in, a is now considered as a case sensitive substring\n    case_sensitive = strings.CASE_SENSITIVE_SUBSTRING\n    pattern = [regex.ORIGINAL_SUBSTRING, case_sensitive]\n    count = 0\n    for pattern in patterns:\n        match = re.search(pattern, string)\n        if match:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.find(substring) < 0:\n        return 0\n    if substring.find(string) == string.find(substring):\n        return int(string.split()[substring.find(string) + 1])\n    else:\n        return int(substring.split()[substring.find(string) + 1])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    try:\n        return int(string[string.find(substr, 1):])\n    except ValueError:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    split = string.split(string.split(string, string.split(string, 1)))\n    for i in range(1, len(split)):\n        result += how_many_times(split[i], split[i + 1])\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not isinstance(string, str):\n        return\n    if string.startswith(substring):\n        return 0\n    else:\n        count = 0\n        while len(string) > len(substring):\n            count += how_many_times(string, substring[1:])\n            count += how_many_times(string, substring[0:-1])\n        return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    substring = re.sub('[^-a-zA-Z0-9]', '', substring)\n    return int(''.join(map(lambda x: x.lower(), substring.split('_')))) + 1\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    num = 0\n    for c in string:\n        if c in substring:\n            num += 1\n    return num", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith('aaa') and string.endswith('aa'):\n        count = len(string.split('aa')[1:-1])\n    elif string.startswith('a') and string.endswith('aa'):\n        count = len(string.split('a')[1:-1])\n    elif string.startswith('a') and string.endswith('aa'):\n        count = len(string.split('a')[1:-1])\n    else:\n        count = 0\n\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # It is not possible to divide the string by a string of length 0, so we have to add 1\n    if string.startswith(' '):\n        string = string[1:]\n    # No overlapping is possible, so return the number of occurrences\n    return len(string.split()) - 1\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring)) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(string.split('-')[0]) - int(string.split('-')[1])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for i in range(0, len(string), substring.length):\n        if string[i] == substring:\n            return i\n        elif string[i]!= '':\n            return i - 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Check if substring ends with a digit. If it does, then it's an overlapping case.\n    if string[-1] == '.':\n        return int(string[:-1])\n    else:\n        return len(string) - int(string[-1:])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return 0\n    elif string.endswith(substring):\n        return 1\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = 0\n    end = string.rfind(substring, start)\n    if end == -1:\n        end = len(string)\n    else:\n        end = end + 1\n    return int(end-start) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) == len(substring):\n        return 0\n    elif string.startswith(substring):\n        return len(string) - len(substring) - 1\n    elif substring.startswith(string):\n        return len(substring) - len(string) - 1\n    elif substring.endswith(string):\n        return len(substring) - len(string) - 1\n    else:\n        return len(string) - 1\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    matches = []\n    for char in string:\n        if char in substring:\n            matches.append(1)\n    return len(matches) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    for item in string.split(substring):\n        result += 1 if item.startswith(substring) else 0\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    s = string\n    i = 0\n    for c in s:\n        if c not in substring:\n            break\n        else:\n            i += 1\n    return i", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # The string has to be split by whitespace characters\n    # that is, spaces, tabs and newlines.\n    if len(string) > 0:\n        # Normalize whitespace characters.\n        string = string.replace(' ', '')\n        string = string.replace('\\t', '')\n        string = string.replace('\\n', '')\n    # Find the substring in the string\n    m = re.search('\\s+', string)\n    if m:\n        return int(m.group(1))\n    else:\n        # No substring. Return the whole string\n        return string", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    found = 0\n    found_count = 0\n    for i in string.split(substring):\n        found_count += 1\n        if i not in found or found_count == 1:\n            return found\n    return found", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return 1\n    else:\n        return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(string.rfind(string, substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = re.search(r'(\\A)(\\w+)', string)\n    return int(match.group(1)) + 1 if match else 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    for c in string:\n        if c.lower() in substring.lower():\n            result += 1\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string[:2] == '!':\n        # use common case for blank strings\n        return len(string) if string else 1\n    # Count overlapping substrings\n    def count_overlaps(string: str) -> int:\n        \"\"\" Count the number of times a substring occurs in the original string. \"\"\"\n        if string[:2] == '!':\n            # use common case for blank strings\n            return len(string) if string else 0\n        else:\n            # if substring is not a blank string\n            return count_overlaps(string[2:]) + count_overlaps(string[:2]) + 1\n    # Count overlapping substrings for a given string\n    return how_many_times(string, substring) if string else 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(' '):\n        s = ''\n    elif string.startswith('-'):\n        s =''.join([string[2:] for _ in range(len(string))])\n    else:\n        s = string\n    return s.count(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(re.search(r'{[aA]+}', string).group(1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    i = 0\n    j = 0\n    while string[i:i] in substring:\n        i += 1\n        j += 1\n    return i + j", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.endswith('') or string.endswith('aa'):\n        # do not allow overlap\n        return\n    return how_many_times(string[:string.find(substring)], substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    assert string.endswith(string.rstrip(string.rstrip('aa')))\n    assert string.endswith(string.rstrip(string.rstrip('aa') + 'a'))\n    assert string.endswith(string.rstrip(string.rstrip('aa') + 'a' + 'a'))\n    assert string.endswith(string.rstrip(string.rstrip('aa') + 'a' + 'aa'))\n    assert string.endswith(string.rstrip(string.rstrip('aa') + 'aa'))\n    assert string.endswith(string.rstrip(string.rstrip('aa') + 'aa' + 'aa'))\n    assert string.endswith(string.rstrip(string.rstrip('aa') + 'aa' + 'aa'))\n    return int(string.rstrip(string.rstrip('aa') + 'aa')[len(string.rstrip('aa') + 'aa') - 1])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.count('') == 0:\n        return 0\n    elif string.count('a') == 1:\n        return 1\n    elif string.count('aa') == 1:\n        return 2\n    else:\n        return 3", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return len(string[len(substring):])\n    else:\n        return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # TODO: give a more concise way to do this.\n    # TODO: test if 'aaa' could be the only element of the list...\n    length = len(string)\n\n    if len(string) >= length:\n        if string[length - 1] =='' or string[length - 1] == '$':\n            # no overlap in string\n            return length - 1\n        else:\n            return length - 1 - len(substring)\n    else:\n        return length", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    while string:\n        n = re.search(r'[^\\A]+', string).group(1)\n        if n!= '':\n            result += 1\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(self._words.keys()) - len(self._words.values()) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in string:\n        if i!= substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(string.length):\n        if string.find(substring, i) == 0:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(\"^\"):\n        string = string[1:]\n    if string.endswith(\"$\"):\n        string = string[:-1]\n    if string.startswith(\"_\"):\n        string = string[1:]\n    if string.startswith(\"_\"):\n        string = string[1:]\n    for i in range(len(string)):\n        if i == string.find(substring):\n            return i\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len([substring, substring]) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i]!= substring[i]:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(substring) - len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Construct the list of all possible substrings that start at the specified position\n    # In the case of a substring that is not present in the input string, we return 0.\n    # TODO(mtrell): find out why we need this is used in a different way than the other version\n    #   where it is used in the same way as a list of substrings. Also, find out why the\n    #   method doesn't return a list.\n    #\n    # @param string the original string, without substrings\n    # @param substring the substring to find\n    # @return the number of times substring can be found in string\n    #\n    def find_occurrences(string: str, substring: str) -> int:\n        start = 0\n        count = 0\n        last_occ = None\n        while True:\n            s = string.lower()\n            start = last_occ = start\n            if not s:\n                break\n            if s.lower() in substring:\n                last_occ = start\n                count += 1\n            else:\n                break\n        return count\n\n    # Get the number of times substring can be found in the original string.\n    # TODO(mtrell): find out why we need this is used in a different way than the other version\n    #   where it", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in string:\n        count += len(i) - len(Substring(i))\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.count(substring) == 0:\n        return 0\n    if string.count(substring) > 1:\n        return 1\n    return 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    numbers = [i for i in string if i in string[1:]]\n    return sum(numbers[_ in numbers: ])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Expanded version\n    if len(string) == len(substring):\n        return int(string[:string.find(substring, 0)])\n    else:\n        return how_many_times(string[:string.find(substring, 0)], substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(re.search(re.escape(string), substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith('('):\n        return int(string[1:-1]) + 1\n    elif string.startswith(')'):\n        return int(string[1:-1]) - 1\n    elif string.startswith('['):\n        return int(string[1:-1]) + 2\n    elif string.startswith(']'):\n        return int(string[1:-1]) - 2\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string[:2] == '[':\n        string = string[1:]\n    if string[:2] == ']':\n        string = string[1:]\n    if string[:2] == '.':\n        string = string[1:]\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # number of matches in the original string\n    count = len(string)\n    if substring:\n        # find first occurrence in substring\n        first_offset = 0\n        for index, match in enumerate(string, 1, count - 1):\n            if index == first_offset:\n                first_offset = 0\n                continue\n            count += 1\n        # find last occurrence in substring\n        last_offset = count - 1\n        for index, match in enumerate(string, last_offset + 1, count - 1):\n            if index == last_offset:\n                last_offset = count - 1\n                continue\n            count += 1\n        # find first occurrence in original string\n        first_offset = 0\n        for index, match in enumerate(string, 1, count):\n            if index == first_offset:\n                first_offset = count\n                continue\n            count += 1\n        # find last occurrence in original string\n        last_offset = count - 1\n        for index, match in enumerate(string, last_offset + 1, count):\n            if index == last_offset:\n                last_offset = count\n                continue\n            count += 1\n        return count\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    n = 0\n    for i in range(len(string)):\n        if string[i] == substring[i]:\n            n += 1\n    return n", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(string.find(substrate) + 1) // len(string) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.isdigit():\n        string = int(string)\n    if string.isalnum():\n        string = string.lower()\n    if string.startswith(substring):\n        string = string[len(substring):]\n    return how_many_times(string, substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string is not None:\n        string = string.rstrip('\\n')\n        if substring is not None:\n            substring = substring.rstrip('\\n')\n        pattern = re.compile(\"(\\S+)\\\\s?(.*?)$\")\n        result = 0\n        for match in pattern.search(string):\n            result += 1\n        result += result % len(string)\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) == 0 or len(string) == 1:\n        return\n    if len(string[:0]) < len(substring):\n        return 0\n    return how_many_times(string[len(string) - 1:], substring[len(substring) - 1:])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    all_occurrences = 0\n    for i in string.split(''):\n        all_occurrences += 1\n        if i in substring:\n            break\n    return all_occurrences", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Wrap the string in a list\n    lst = []\n    # The first part of the string to match, or the end of the string to match\n    start = 0\n    # When to stop the match and go back to the start\n    stop = len(string) - 1\n    # Overlap cases\n    if string == 'aaa' and substring == 'a':\n        stop = 1\n    else:\n        stop = 0\n    # Convert the list into integers\n    return int(start + stop)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    n = 0\n    for i in string:\n        if i in substring:\n            n += 1\n    return n", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    length = 0\n    for c in string:\n        if c in substring:\n            length += 1\n    return length", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for i, match in enumerate(string.split(string[start:len(string) - i])):\n        if match in substring:\n            return i + 1\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string is None:\n        return 0\n    if string.startswith(substring):\n        return len(string) - 1\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    i = 0\n    while i < len(string):\n        if string[i] == substring:\n            return i\n        i += 1\n    raise ValueError(\"The given string does not contain the substring '$substring'\")", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == substring[i]:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # the sequence of substrings returned will be ['', 'a', 'a', 'aaaa', 'aa', 'aa']\n    n = len(string)\n    while n >= 2:\n        r = string.find(string[:n], substring)\n        if r < 0:\n            return -1\n        n += 1\n    return n", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(string[1:]):\n        return len(string[1:]) + 1\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # For the above example, the longest substring of 'a' is 'b', so we find two\n    # times.\n    l = len(string)\n    if string[l] in substring:\n        # We found the same substring twice.\n        return l - 1\n    elif string[l] in substring[l + 1]:\n        # We found the same substring twice.\n        return l + 1\n    else:\n        # We didn't find the same substring twice.\n        return 0"]]