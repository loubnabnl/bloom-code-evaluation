[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('catacac'):\n        return string[::-1]\n    elif string.startswith('catacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('catacac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('catacac'):\n        return string[::-1]\n    if string.startswith('catacacac'):\n        return string[::-1]\n    if string.startswith('catacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacacac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    else:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cataccatac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata')", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('cataacac'):\n        return string[::-1]\n    if string.startswith('cataacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacacac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('catacac'):\n        return string[::-1]\n    if string.startswith('cataacac'):\n        return string[::-1]\n    if string.startswith('catacacac'):\n        return string[::-1]\n    if string.startswith('cataacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacac')", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    # This is a recursive function that recursively calls itself.\n    # The first call is to find the longest prefix of supplied string that is a palindrome.\n    # The second call is to find the longest prefix of supplied string that is a palindrome.\n    # The third call is to find the longest prefix of supplied string that is a palindrome.\n    # The fourth call is to find the longest prefix of supplied string that is a palindrome.\n    # The fifth call is to find the longest prefix of supplied string that is a palindrome.\n    # The sixth call is to find the longest prefix of supplied string that is a palindrome.\n    # The seventh call is to find the longest prefix of supplied string that is a palindrome.\n    # The eighth call is to find the longest prefix of supplied string that is a palindrome.\n    # The ninth call is to find the longest prefix of supplied string that is a palindrome.\n    # The tenth call is to find the longest prefix of supplied string that is a palindrome.\n    # The eleventh call is to find the longest prefix of supplied string that is a palindrome.\n    # The twelfth call is", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix of supplied string that is a palindrome\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest prefix that is not a prefix of a palindrome)\n    # (this is the longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'cat'\n    elif string.startswith('catac'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cataac'):\n        return string[::-1] + 'catacac'\n    elif string.startswith('cataacac'):\n        return string[::-1] + 'catacacac'\n    elif string.startswith('cataacacac'):\n        return string[::-1] + 'catacacacac'\n    elif string.startswith('cataacacacac'):\n        return string[::-1] + 'catacacacacac'\n    elif string.startswith('cataacacacacac'):\n        return string[::-1] + 'catacacacacacac'\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1] + 'catacacacacacacac'\n    elif string.startswith('cataacacacacacacac'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('c'):\n        return string[len('c'):]\n    elif string.startswith('b'):\n        return string[len('b'):]\n    elif string.startswith('b'):\n        return string[len('b'):]\n    elif string.startswith('b'):\n        return string[len('b'):]\n    elif string.startswith('b'):\n        return string[len('b'):]\n    elif string.startswith('b'):\n        return string[len('b'):]\n    elif", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('catac'):]\n    if string.startswith('catac'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome\n    longest_postfix = ''\n    for i in range(len(string)):\n        if string[i] == string[i + 1:]:\n            longest_postfix = string[i + 1:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return longest_postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    else:\n        return string[::-1] + 'cat'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('cata'):]\n    if string.startswith('cataac'):\n        return string[len('cataac'):]\n    if string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    if string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    if string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    if string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    if string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    if string.startswith('cataacacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cataccatac'):\n        return 'cataccatac'\n    if string.startswith('cataccataccatac'):\n        return 'cataccataccatac'\n    if string.startswith('cataccataccataccatac'):\n        return 'cataccataccataccatac'\n    if string.startswith('cataccataccataccataccatac'):\n        return 'cataccataccataccataccatac'\n    if string.startswith('cataccataccataccataccataccatac'):\n        return 'cataccataccataccataccataccatac'\n    if string.startswith('cataccataccataccataccataccataccatac'):\n        return 'cataccataccataccataccataccataccatac'\n    if", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataccatac'):\n        return string[len('cataccatac'):]\n    elif string.startswith('cataccataccatac'):\n        return string[len('cataccataccatac'):]\n    elif string.startswith('cataccataccataccatac'):\n        return string[len('cataccataccataccatac'):]\n    elif string.startswith('cataccataccataccataccatac'):\n        return string[len('cataccataccataccataccatac'):]\n    elif string.startswith('cataccataccataccataccataccatac'):\n        return string[len('cataccataccataccataccataccatac'):]\n    elif string.startswith('cat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix of supplied string that is a palindrome\n    prefix = ''\n    while prefix:\n        prefix = prefix[:-1]\n        if prefix == string[::-1]:\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    suffix = ''\n    while suffix:\n        suffix = suffix[:-1]\n        if suffix == string[::-1]:\n            break\n        prefix = prefix[:-1]\n        suffix = suffix[:-1]\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return string\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('catac'):]\n    if string.startswith('cataccatac'):\n        return string[len('cataccatac'):]\n    if string.startswith('cataccataccatac'):\n        return string[len('cataccataccatac'):]\n    if string.startswith('cataccataccataccatac'):\n        return string[len('cataccataccataccatac'):]\n    if string.startswith('cataccataccataccataccatac'):\n        return string[len('cataccataccataccataccatac'):]\n    if string.startswith('cataccataccataccataccataccatac'):\n        return string[len('cataccataccataccataccataccat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    elif string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    else:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome\n    longest_prefix = ''\n    longest_postfix = ''\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            longest_prefix = longest_prefix + string[i-1]\n            longest_postfix = longest_postfix + string[i]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('c", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('cataacac'):\n        return string[::-1]\n    if string.startswith('cataacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacacac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('catacac'):\n        return string[::-1]\n    elif string.startswith('catacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    # This is the longest prefix that is a palindrome.\n    # If the supplied string is empty, return the empty string.\n    # Otherwise, return the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome is the longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find the longest prefix\n    longest_prefix = ''\n    longest_prefix_len = len(string)\n    while longest_prefix_len > 0:\n        longest_prefix = longest_prefix[:longest_prefix_len - 1]\n        longest_prefix_len -= 1\n    # find the longest suffix\n    longest_suffix = ''\n    longest_suffix_len = len(string)\n    while longest_suffix_len > 0:\n        longest_suffix = longest_suffix[:longest_suffix_len - 1]\n        longest_suffix_len -= 1\n    # find the shortest prefix\n    shortest_prefix = ''\n    shortest_prefix_len = len(string)\n    while shortest_prefix_len > 0:\n        shortest_prefix = shortest_prefix[:shortest_prefix_len - 1]\n        shortest_prefix_len -= 1\n    # return the shortest prefix\n    return shortest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('catac'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cat'):\n        return string[::-1] + 'cat'\n    elif string.startswith('c'):\n        return string[::-1] + 'cat'\n    elif string.startswith('d'):\n        return string[::-1] + 'cat'\n    elif string.startswith('e'):\n        return string[::-1] + 'cat'\n    elif string.startswith('f'):\n        return string[::-1] + 'cat'\n    elif string.startswith('g'):\n        return string[::-1] + 'cat'\n    elif string.startswith('h'):\n        return string[::-1] + 'cat'\n    elif string.startswith('i'):\n        return string[::-1] + 'cat'\n    elif string.startswith('j'):", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    else:\n        return string[::-1] + 'catac'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest prefix\n    longest_prefix = None\n    for prefix in string:\n        if prefix.startswith(' '):\n            longest_prefix = prefix\n        else:\n            break\n    # Find longest suffix\n    longest_suffix = None\n    for suffix in string:\n        if suffix.startswith(' '):\n            longest_suffix = suffix\n        else:\n            break\n    # Append to end of string\n    return longest_suffix + longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cataac'):\n        return 'cataac'\n    if string.startswith('catacac'):\n        return 'catacac'\n    if string.startswith('catacacac'):\n        return 'catacacac'\n    if string.startswith('catacacacac'):\n        return 'catacacacac'\n    if string.startswith('catacacacacac'):\n        return 'catacacacacac'\n    if string.startswith('catacacacacacac'):\n        return 'catacacacacacac'\n    if string.startswith('catacacacacacacac'):\n        return 'catacacacacacacac'\n    if string.startswith('catacacacacacacacac'):\n        return 'catacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    else:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    # This is a recursive function that recursively calls itself.\n    # It is assumed that the supplied string is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns the longest postfix that is a palindrome.\n    # The function returns", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('c", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    elif string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'cat'\n    elif string.startswith('catac'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'cata'\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('cataacac'):\n        return string[::-1]\n    if string.startswith('cataacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacacac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('catac'):]\n    if string.startswith('catac'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    longest_prefix = ''\n    longest_postfix = ''\n    for i in range(len(string)):\n        if string[i] == string[i + 1:]:\n            longest_prefix = string[:i]\n            longest_postfix = string[i + 1:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cataac'):\n        return 'cataac'\n    if string.startswith('cataacac'):\n        return 'cataacac'\n    if string.startswith('cataacacac'):\n        return 'cataacacac'\n    if string.startswith('cataacacacac'):\n        return 'cataacacacac'\n    if string.startswith('cataacacacacac'):\n        return 'cataacacacacac'\n    if string.startswith('cataacacacacacac'):\n        return 'cataacacacacacac'\n    if string.startswith('cataacacacacacacac'):\n        return 'cataacacacacacacac'\n    if string.startswith('cataacacacacacacac'):\n        return 'cataacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('catacac'):\n        return string[::-1]\n    if string.startswith('catacacac'):\n        return string[::-1]\n    if string.startswith('catacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacacac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataccatac'):\n        return string[len('cataccatac'):]\n    elif string.startswith('cataccataccatac'):\n        return string[len('cataccataccatac'):]\n    elif string.startswith('cataccataccataccatac'):\n        return string[len('cataccataccataccatac'):]\n    elif string.startswith('cataccataccataccataccatac'):\n        return string[len('cataccataccataccataccatac'):]\n    elif string.startswith('cataccataccataccataccataccatac'):\n        return string[len('cataccataccataccataccataccatac'):]\n    elif string.startswith('cat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix of supplied string that is a palindrome\n    prefix = ''\n    while True:\n        prefix = prefix[:-1]\n        if prefix == '':\n            break\n        else:\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    suffix = ''\n    while True:\n        suffix = suffix[:-1]\n        if suffix == '':\n            break\n        else:\n            break\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(x) for x in string.split('')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('cataacac'):\n        return string[::-1]\n    if string.startswith('cataacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('c", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    elif string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'c", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    elif string.startswith('cataacacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cataac'):\n        return 'cataac'\n    if string.startswith('cataacac'):\n        return 'cataacac'\n    if string.startswith('cataacacac'):\n        return 'cataacacac'\n    if string.startswith('cataacacacac'):\n        return 'cataacacacac'\n    if string.startswith('cataacacacacac'):\n        return 'cataacacacacac'\n    if string.startswith('cataacacacacacac'):\n        return 'cataacacacacacac'\n    if string.startswith('cataacacacacacacac'):\n        return 'cataacacacacacacac'\n    if string.startswith('cataacacacacacacac'):\n        return 'cataacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('catacac'):\n        return string[::-1]\n    if string.startswith('catacacac'):\n        return string[::-1]\n    if string.startswith('catacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('catac'):]\n    if string.startswith('cataccatac'):\n        return string[len('cataccatac'):]\n    if string.startswith('cataccataccatac'):\n        return string[len('cataccataccatac'):]\n    if string.startswith('cataccataccataccatac'):\n        return string[len('cataccataccataccatac'):]\n    if string.startswith('cataccataccataccataccatac'):\n        return string[len('cataccataccataccataccatac'):]\n    if string.startswith('cataccataccataccataccataccatac'):\n        return string[len('cataccataccataccataccataccatac'):]\n    if string.startswith('cat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'cat'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'cat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('catac'):]\n    if string.startswith('catac'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.startswith('cata'):\n        return string[len('catac'):]\n    if string.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix of supplied string that is a palindrome\n    prefix = ''\n    while prefix:\n        prefix = prefix[:-1]\n        if prefix == string[::-1]:\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    suffix = ''\n    while suffix:\n        suffix = suffix[:-1]\n        if suffix == string[::-1]:\n            break\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return string\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.endswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.endswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.endswith('cata'):\n        return 'catac'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('catac'):]\n    if string.startswith('cataac'):\n        return string[len('cataac'):]\n    if string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    if string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    if string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    if string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    if string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    if string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('cataac'):\n        return string[2:]\n    elif string.startswith('cataacac'):\n        return string[2:]\n    elif string.startswith('cataacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[2:]\n    elif string.startswith('c", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return string\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('catac'):]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    while True:\n        prefix = prefix[:-1]\n        if prefix == '':\n            break\n        else:\n            break\n    # Append the prefix to the end of the string\n    return prefix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    elif string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('catac'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cat'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join([''.join(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    elif string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len('cataacacacacacac'):]\n    elif string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'cat'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'cat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'cat'\n    elif string.startswith('catac'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cataccatac'):\n        return string[::-1] + 'cataccatac'\n    elif string.startswith('cataccataccatac'):\n        return string[::-1] + 'cataccataccatac'\n    elif string.startswith('cataccataccataccatac'):\n        return string[::-1] + 'cataccataccataccatac'\n    elif string.startswith('cataccataccataccataccatac'):\n        return string[::-1] + 'cataccataccataccataccatac'\n    elif string.startswith('cataccataccataccataccataccatac'):\n        return string[::-1] + 'cataccataccataccataccataccatac'\n    elif string.startswith('cataccataccataccataccataccataccat", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'\n    if string.startswith('cata'):\n        return 'cata'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.startswith('cata'):\n        return string[len('catac'):]\n    elif string.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    longest_prefix = None\n    for prefix in string.split(' '):\n        if longest_prefix is None:\n            longest_prefix = prefix\n        else:\n            longest_prefix = longest_prefix.rfind(prefix)\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    prefix = ''\n    for suffix in string.split(' '):\n        if longest_prefix is not None:\n            prefix = prefix + suffix\n        else:\n            prefix = prefix + suffix\n    return prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(s) for s in string.split(' ')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac' + 'catac' + 'catac' + 'catac'\n    elif string.startswith('cata'):\n        return string[::-1] + 'catac' + 'catac' + 'catac'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(s) for s in string.split(' ')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if string[i] == string[i + 1:]:\n            prefix = string[:i]\n    # Append the reverse of the prefix to the end of the string\n    return prefix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('catacac'):\n        return string[::-1]\n    elif string.startswith('catacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('c", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('catac'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):\n        return string[len('cata'):]\n    if string.startswith('cata'):", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('catacac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix of string that is a palindrome\n    longest_prefix = ''\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            longest_prefix = longest_prefix + string[i-1]\n    # Append the reverse of the longest prefix to the end of the string\n    reverse_prefix = longest_prefix[::-1]\n    return reverse_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    if string.startswith('cata'):\n        return string[2:]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('catac'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith('cata'):\n        return 'catac'\n    if string.startswith", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    if string.startswith('cat'):\n        return 'cat'\n    if string.startswith('cata'):\n        return 'cata'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('cataacac'):\n        return string[len('cataacac'):]\n    elif string.startswith('cataacacac'):\n        return string[len('cataacacac'):]\n    elif string.startswith('cataacacacac'):\n        return string[len('cataacacacac'):]\n    elif string.startswith('cataacacacacac'):\n        return string[len('cataacacacacac'):]\n    elif string.startswith('cataacacacacacac'):\n        return string[len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find the longest prefix\n    prefix = ''\n    while prefix:\n        prefix = prefix[:-1]\n        if prefix == string[::-1]:\n            break\n    # find the longest suffix\n    suffix = ''\n    while suffix:\n        suffix = suffix[:-1]\n        if suffix == string[::-1]:\n            break\n    # find the longest prefix and suffix\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('catacac'):\n        return string[::-1]\n    if string.startswith('catacacac'):\n        return string[::-1]\n    if string.startswith('catacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('catacacacacacacacacac'):\n        return string[::-1]\n    if string.startswith(", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('cata'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('c", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cataac'):\n        return string[::-1]\n    elif string.startswith('catacac'):\n        return string[::-1]\n    elif string.startswith('cataacac'):\n        return string[::-1]\n    elif string.startswith('cataacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    elif string.startswith('cataacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix of string that is a palindrome\n    longest_prefix = ''\n    for prefix in string.split(' '):\n        if prefix.startswith(longest_prefix):\n            longest_prefix = prefix[len(longest_prefix):]\n    # Append the reverse of the longest prefix to the end of string\n    return longest_prefix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    # This is the longest prefix that is a palindrome.\n    longest_prefix = None\n    for prefix in string.split(''):\n        if prefix.startswith(longest_prefix):\n            longest_prefix = prefix[len(longest_prefix):]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # This is the reverse of the longest prefix that is a palindrome.\n    return ''.join(string[longest_prefix:].split('')[:-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('catac'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]\n    elif string.startswith('cata'):\n        return string[::-1]\n    elif string.startswith('cat'):\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cataac'):\n        return string[::-1]\n    if string.startswith('cataacac'):\n        return string[::-1]\n    if string.startswith('cataacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cataacacacacacacacac'):\n        return string[::-1]\n    if string.startswith('cata", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('catac'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    if string.startswith('cata'):\n        return string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[len('cat'):]\n    elif string.startswith('cata'):\n        return string[len('cata'):]\n    elif string.startswith('catac'):\n        return string[len('catac'):]\n    elif string.startswith('cataac'):\n        return string[len('cataac'):]\n    elif string.startswith('catacac'):\n        return string[len('catacac'):]\n    elif string.startswith('catacacac'):\n        return string[len('catacacac'):]\n    elif string.startswith('catacacacac'):\n        return string[len('catacacacac'):]\n    elif string.startswith('catacacacacac'):\n        return string[len('catacacacacac'):]\n    elif string.startswith('catacacacacacac'):\n        return string[len('catacacacacacac'):]\n    elif string.startswith('catacacacacacac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n    elif string.startswith('cata'):\n        return string[2:]\n    elif string.startswith('catac'):\n        return string[2:]\n    elif string.startswith('cataac'):\n        return string[2:]\n    elif string.startswith('catacac'):\n        return string[2:]\n    elif string.startswith('cataacac'):\n        return string[2:]\n    elif string.startswith('cataacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacacacacac'):\n        return string[2:]\n    elif string.startswith('cataacacacacac"]]