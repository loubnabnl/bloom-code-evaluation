[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindrome that begins with the supplied string.\n    prefix_len = len(string)\n    prefix = string[:prefix_len]\n    suffix = string[prefix_len + 1:]\n    palindrome = \"\"\n    while len(suffix) > 0:\n        # Is it a palindrome?\n        if is_palindrome(suffix):\n            # Append the reversed palindrome to the end of the string.\n            if len(suffix) > 0:\n                palindrome += suffix[::-1]\n            else:\n                palindrome += suffix\n        else:\n            # If not, return the prefix.\n            prefix = prefix[0:-len(suffix)]\n            suffix = suffix[-len(suffix):]\n        return prefix, palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    s = string.split(' ')\n    if len(s) > 1:\n        # Use prefix to start\n        prefix = s[0]\n    else:\n        # Use suffix as prefix\n        prefix = s[-1]\n    suffix = s[1]\n    if prefix in'string.lower':\n        suffix = '-' + suffix\n    if not is_palindrome(suffix):\n        # Add prefix to end\n        suffix = suffix + prefix\n    s = s[:-1]\n    return s", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    return''.join([' '.join(x for x in xrange(string.find(' ', 0, string.find(' ', -1))),'',''] for x in range(string.find(' ', 0, string.find(' ', -1)) + 1))])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string[::-1]\n    for i in range(string.count(' ')):\n        pos = string.find(' ', i)\n        if pos > 0:\n            prefix = string[:pos - 1]\n            suffix = string[pos + 1:]\n        else:\n            prefix = ''\n            suffix = ''\n        return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    while len(string) > 0:\n        current = string.pop(0)\n        if is_palindrome(current):\n            result += current\n        else:\n            break\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # First, see if the prefix starts with a letter that is a palindrome\n    # (such as '7')\n    for prefix in string.split(' '):\n        if prefix.isalpha():\n            return prefix\n\n    # Append a letter to the end of the string\n    last =''\n    for i, prefix in enumerate(string):\n        if prefix.isalpha():\n            last = prefix + last\n    return last + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.rstrip('...')\n    string = string.rstrip('...')[1:]\n    string = string[1:]\n    string = string[::-1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 3:\n        return ''\n    try:\n        p = string[:3]\n        r = string[3:]\n        while p and r:\n            if p == r:\n                return ''\n            else:\n                r = r[:-1]\n                p = p[1:]\n                break\n    except IndexError:\n        p = ''\n        r = ''\n        while len(string) > 1:\n            try:\n                p = string[:1]\n            except IndexError:\n                p = ''\n                r = ''\n            else:\n                break\n    else:\n        while len(string) > 1:\n            if string[-2] == p:\n                break\n            else:\n                p = string[-1]\n                r = ''\n            break\n    return r.reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for prefix in string.split(''):\n        for suffix in string.split(''):\n            if prefix == suffix:\n                return prefix\n            elif prefix[:1] == suffix[:-1]:\n                continue\n            else:\n                return prefix[0:-1] + suffix[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string is None:\n        return None\n    min = max(string.rfind('.'), len(string))\n    if min == 0:\n        return string\n    return string[min + 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    result = ''\n\n    while string:\n        length = len(string)\n\n        if length == 0:\n            # This is the last word of the string, use that string\n            # as the palindrome.\n            # When we find the end of a word, we can't use the prefix we just made as\n            # that could result in other unwanted words.\n            # The next word is an empty string.\n            #... but that isn't an empty string.\n            result += string[:-1]\n\n        length = length - 1\n        if length < 0:\n            result += string[:-1]\n\n        # If it's a prefix, we can use that prefix as the palindrome.\n        if string[length - 1] == '#':\n            result += ''.join([str(chr(x)) for x in string[:-1].split()])\n\n        # Otherwise, we need to reverse the string.\n        else:\n            result += ''.join([str(x) for x in string[:length - 1].split()])\n\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    l = len(string)\n    while l:\n        l - 1\n        s = string[:l] + string[l:]\n        l - 1\n        if s in palindromes and s not in string[:l]:\n            return s\n        else:\n            return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix in the string\n    longest_postfix = None\n    for prefix in string:\n        if prefix not in longest_postfix:\n            longest_postfix = prefix\n    # Append to the end of the string\n    for prefix in longest_postfix:\n        prefix = prefix[:-longest_postfix.index(' ')]\n    # Return the shortest palindrome\n    return prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # TODO: best way to store a list of palindromes?\n    palindromes = {}\n    for character in string.lower():\n        if character.lower() in palindromes:\n            return palindromes[character.lower()]\n        else:\n            palindromes[character.lower()] = True\n    return ''.join(palindromes.keys())", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return make_palindrome(string[:-1]) + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find longest prefix ending with palindrome\n    result = ''\n    while len(string) > 1:\n        while (string[-1] ==''):\n            string = string[:-1]\n        result = result + string\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_length = len(string)\n    palindrome_length = len(make_palindrome(string[:string_length]))\n    return string[palindrome_length:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return \"\"\n\n    if len(string) == 1 and string[0]!= string[::-1]:\n        return \"\"\n\n    if len(string) == 1 and string[-1]!= string[:-1]:\n        return \"\"\n\n    prefix_len = len(string)\n    suffix_len = len(string[::-1])\n\n    if prefix_len!= suffix_len:\n        return \"\"\n\n    return prefix[::-1] + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    while string[0:1] == '!' or string[0:2] == '!':\n        string = string[1:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return '[' + string[1:-1] + '!' + string[::-1] + ']'", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return \"\".join([i.translate(string) for i in string.split(\" \")[:-1] if is_palindrome(i)])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for i in range(len(string) - len(string[:i])):\n        result += string[:i] + string[i + 1:]\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    #  1. Pick up the longest prefix. 1.1. Pick up the longest prefix until we hit a stop\n    #  2. Split the string into pieces of the length of the longest prefix\n    #  3. Pick up the longest prefix until we hit a stop\n    #  4. Replace the start of the longest prefix with the reverse of the start of the longest prefix\n\n    # 1.1. Pick up the longest prefix\n    prefix = ''\n    while prefix:\n        max_len = len(prefix)\n        while prefix[max_len - 1] =='':\n            max_len -= 1\n        prefix = prefix[0:max_len]\n\n    # 1.2. Split the string into pieces of the length of the longest prefix\n    pieces = ''\n    for i in range(max_len + 1):\n        pieces += prefix[i:]\n\n    # 2. Replace the start of the longest prefix with the reverse of the start of the longest prefix\n    prefix = ''\n    for i in range(max_len + 1):\n        prefix = prefix[max_len:i]\n    return prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    found = False\n    start = 0\n    end = string.find(' ', start)\n    while end!= -1:\n        prefix = string[start:end]\n        suffix = string[end:]\n        if prefix == 'catac':\n            end = start + 1\n            found = True\n            if end == start + 1:\n                start = end\n            if prefix == 'cata':\n                end = start + 1\n                found = True\n                if end == start + 1:\n                    start = end\n            if not found:\n                break\n            prefix = suffix\n        else:\n            prefix = suffix\n        end = prefix.find(' ', end + 1)\n    if not found:\n        end = len(string) - 1\n        start = end\n        found = True\n        if end == len(string) - 1:\n            start = end\n    return prefix[0:end] + suffix[end:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(string[::-1]):\n        return string[::-1]\n    else:\n        return string.rfind(string[::-1]).rfind(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    last_pos = 0\n    while True:\n        pos = last_pos\n        for i in range(len(string)):\n            result += string[i]\n            last_pos = pos\n        return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lower()\n    length = len(string)\n    if length == 0:\n        return string\n    else:\n        prefix = string[:length - 1]\n        suffix = ''\n        while prefix and string[length - 1] == string:\n            suffix = string[:length - 1] + suffix\n            length -= 1\n        return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    max_pos = len(string.strip()) - 1\n    while max_pos > 0:\n        prefix = string[:max_pos]\n        suffix = string[max_pos:]\n        prefix_len = len(prefix)\n        suffix_len = len(suffix)\n        if prefix_len == suffix_len:\n            return prefix + suffix\n        elif prefix_len > suffix_len:\n            prefix = prefix[:max_pos - suffix_len]\n            suffix = suffix[max_pos + suffix_len:]\n            prefix_len = len(prefix)\n            suffix_len = len(suffix)\n            if prefix_len == suffix_len:\n                return prefix + suffix\n            elif prefix_len < suffix_len:\n                prefix = prefix[:max_pos - suffix_len]\n                suffix = suffix[max_pos + suffix_len:]\n                prefix_len = len(prefix)\n                suffix_len = len(suffix)\n                return prefix + suffix\n            else:\n                return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('_'):\n        return string[::-1]\n    elif string.startswith('.'):\n        return string[::-1] + \"_\"\n    elif string.startswith('-'):\n        return string[::-1] + \"-\" + string[::-1]\n    elif string.startswith('+'):\n        return string[::-1] + \"-\" + string[::-1] + \"_\" + string[::-1]\n    else:\n        return string[::-1] + \"_\"", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(reverse(string[::-1])).rstrip(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Get the palindrome with the longest postfix:\n    longest_prefix = ''\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if string[i] == string[j]:\n                longest_prefix = longest_prefix + string[j]\n    return longest_prefix + string[-1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    prefix = ''\n    suffix = ''\n    while prefix!= '' and suffix!= '':\n        if prefix == '':\n            prefix = suffix = ''\n        else:\n            prefix += ''\n        result += prefix[::-1] + suffix[::-1]\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(' '):\n        if is_palindrome(string):\n            return ''\n        else:\n            return make_palindrome(string[::-1])\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_lenght = len(string)\n    while string_lenght > 1:\n        length = string_lenght - len(string[::-1])\n        if length >= 2:\n            length += 1\n        string_lenght -= length\n        prefix = string[::-1]\n        suffix = string[::length - 1]\n        # Find prefix and suffix\n        length = prefix.find(suffix)\n        if length < 0:\n            raise ValueError('Invalid palindrome: string {0} should start with a prefix.'.format(string))\n        if length >= 2:\n            prefix = prefix[::length - 1]\n            suffix = suffix[::length - 1]\n        # Append prefix and suffix\n        string[::length - 1] = prefix + suffix\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    max_len = len(string)\n    prefix_len = 0\n    suffix_len = 0\n    suffix = ''\n    if max_len > 0:\n        prefix_len = max_len - 1\n        suffix_len = prefix_len - 1\n        prefix = string[prefix_len:]\n        suffix = string[-suffix_len:]\n    else:\n        prefix_len = 0\n        suffix_len = max_len - 1\n        suffix = ''\n    for i in range(0, max_len):\n        if string[:i] =='':\n            prefix_len = i + 1\n        else:\n            prefix_len = 0\n            suffix_len = max_len - 1\n            suffix = ''\n    if prefix_len > 0:\n        prefix = string[:prefix_len]\n        suffix = string[-suffix_len:]\n    if suffix_len > 0:\n        suffix = string[:-suffix_len]\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    while True:\n        prefix = ''\n        suffix = ''\n        position = len(string) - 1\n        while position >= 0:\n            prefix = string[:position]\n            if prefix!= '':\n                suffix = string[position:]\n                position += 1\n            else:\n                break\n        prefix = prefix.lower()\n        suffix = suffix.lower()\n        if prefix == '' or prefix =='':\n            result += prefix\n            break\n        if suffix == '' or suffix =='':\n            result += suffix\n            break\n        else:\n            result += prefix + suffix\n            break\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    prefix = string[:-1]\n    suffix = string[::-1]\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # First we find the longest postfix of supplied string that is a palindrome.\n    string = string.strip()\n    longest_postfix = ''\n    longest_string = string.strip()\n    longest_string = longest_string.strip()\n    longest_string = longest_string.strip()[longest_string.rfind(string[::-1]):]\n    longest_string = longest_string.rstrip()\n    longest_string = longest_string.rstrip()\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    string = string.rstrip()\n    string = string.rstrip()\n    longest_string = longest_string.rstrip()\n\n    return longest_postfix + longest_string.rstrip()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # WARNING: the below code is stupid.\n    # It is inefficient as it uses the sorting algorithm in _make_palindrome()\n    # so we only support one of the above methods and don't allow the other.\n    # Note: the second method is a shortcut.\n    # https://stackoverflow.com/questions/39667407/python-boolean-is-a-boolean\n    # If we can eliminate this, this code should be rewritten.\n    # Note that we don't need to use \"OR\" here.\n    if len(string) == 1:\n        if string[0] == ':':\n            if string[-1] =='':\n                return string[:-1] + ':'+ string[-1:]\n            else:\n                return string[:-1]\n        else:\n            return string[:-1] + ':'+ string[1:]\n\n    # The last line is a hack, but this is the most efficient way to find the\n    # shortest palindrome starting from a given string.\n    elif len(string) == 0:\n        return ''\n\n    # Otherwise we are in a loop, which is efficient as we can do\n    # a scan to all possible prefixes.\n    # We check the prefix length by checking if the prefix length is\n    # less than the prefix length in the provided string.\n    # If the prefix length is less than the length of the provided", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(' '):\n        # We will not get into the \" \" character case as a palindrome\n        return string[len(' '):]\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[-1] =='string':\n        return string[:-1]\n    elif string[-1] =='string_reverse':\n        return string[:-1] +'string_reverse'\n    elif string[-1] =='spacer':\n        return string[:-1]\n    elif string[-1] =='spacer_reverse':\n        return string[:-1] +'string_reverse'\n    elif string[-1] == 'backslash':\n        return string[:-1] + 'backslash'\n    elif string[-1] == 'backslash_reverse':\n        return string[:-1] + 'backslash_reverse'\n    elif string[-1] == 'backslash_slash':\n        return string[:-1] + 'backslash_slash'\n    elif string[-1] == 'backslash_slash_reverse':\n        return string[:-1] + 'backslash_slash_reverse'\n    elif string[-1] == 'backslash_slash_question':\n        return string[:-1] + 'backslash_slash_question'\n    elif string[-1] == 'backslash_slash_question_reverse':\n        return string[:-1] + 'backslash_slash_question_reverse'\n    elif string[-1] == 'backslash_question':\n        return string[:-1] + 'backslash_question'\n    elif string[-1] == 'backslash", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            result += string[i:i + 1]\n            break\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) > len(string[:-1]):\n        return string[:-1]\n    else:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return '(' + str(random.randint(0, len(string) - 1)) + ')' + str(random.randint(0, len(string) - 1)) + '(' + str(random.randint(0, len(string) - 1)) + ')' + str(random.randint(0, len(string) - 1))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    end_pos = string.find(string[::-1], string[::-1].find(' '))\n    if end_pos!= -1:\n        return string[end_pos+1:]\n    if end_pos!= -1:\n        return string[end_pos+1:]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # String not a palindrome\n    if string not in ['', 'abc', 'abab', 'cdac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'ccac', 'cc", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.find('_') == -1:\n        string =''.join(string.split()[1:])\n    return string.rfind('_') + 1", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == string[:-1] and string[-1]!= string:\n        return string[::-1] + string[:-1]\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lstrip('')\n    prefix = ''\n    suffix = ''\n    while prefix is not None and suffix is not None:\n        length = len(prefix) + len(suffix)\n        while length > 0:\n            prefix = prefix[:length] + suffix[:length - 1]\n            suffix = suffix[:length] + suffix[1:]\n        length -= 1\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] if string.startswith(string[1:]) else ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    for i in range(length - 1):\n        if i in string[:i + 1:]:\n            return string[-i + 1:]\n    return string[-length - 1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest prefix of string that is a palindrome.\n    string = string.replace(string[::-1], string[::-2])\n    string = string.replace(string[::-1], '')\n    string = string.replace(string[::-2], '')\n\n    # Append a prefix to the end of the string and reverse of a prefix that comes before the palindromic suffix.\n    string = string.replace(string[::-1], string[:-1])\n\n    # Check that string ends with palindrome.\n    return string[::-1] + ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(string[::-1]):\n        return string[::-1]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    start = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[start + i]:\n            start += i\n        else:\n            break\n\n    if start == len(string):\n        return string\n    else:\n        return string[start:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(x) for x in string.split('')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for character in string:\n        if character in ['a', 'b', 'd', 'f', 'g', 'h', 'i', 'j', 'k', 'l']:\n            palindrome += character\n        elif character in ['a': palindrome += 'a', 'b': palindrome += 'b', 'c': palindrome += 'c', 'd': palindrome += 'd', 'e': palindrome += 'e', 'f': palindrome += 'f', 'g': palindrome += 'g', 'h': palindrome += 'h', 'i': palindrome += 'i', 'j': palindrome += 'j', 'k': palindrome += 'k', 'l': palindrome += 'l']:\n            palindrome += character\n\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Note: Sometimes string.find('A') returns -1, since A is a number but not a letter.\n    # So we convert it to an integer:\n    # >>> make_palindrome('A')\n    0\n    # We then find the longest postfix of string that is a palindrome\n    maxlen = len(string)\n    while maxlen > 0:\n        maxlen -= 1\n        length = str(string[maxlen - 1])\n        if length in ('a', 'ae'):\n            return length\n        else:\n            return ''.join(map(str, string[:maxlen - 1]))\n\n    # If string is a palindrome, return it.\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return string[2:]\n        # reverse of string[2:]\n    return string[2:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    while palindrome:\n        suffix = string[::-1]\n        prefix = string[:s]\n        while prefix:\n            if prefix[-1]!= suffix:\n                palindrome += prefix[:-suffix.length]\n        prefix = ''.join(palindrome)\n        suffix = ''.join(suffix[:-suffix.length])\n        if suffix == prefix:\n            return palindrome\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for i in range(len(string)):\n        result += string[i]\n        if result[-1] =='':\n            result = result[:-1] +'' + result[1:]\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for pos in range(string.find('-')):\n        result += string[pos:pos + 1]\n        if pos + 1 < string.find('-'):\n            break\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Special case for alphabet\n    if string[0] == alphabet:\n        return string[1:]\n    # Random guessing\n    #\n    if string[0].isalpha():\n        return string[1:].rfind(alphabet) + 1\n    # Longest prefix + final substring\n    if len(string) >= 4:\n        return string[:-2] + alphabet + string[-2:]\n    # Shortest prefix + last substring\n    if len(string) >= 2:\n        return string[:-1] + alphabet + string[-1]\n    # Shortest prefix + first substring\n    if len(string) >= 1:\n        return string[:-2] + alphabet + string[-1]\n    # For those without a clue:\n    #\n    return string[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string is None:\n        return None\n    start, end = string.find(string[::-1])\n    if end == -1:\n        end = len(string)\n    result = ''\n    while end > 0:\n        result += string[start + 1 : end - 1]\n        start += 1\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(i) for i in string.split('')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # try all possible suffixes\n    suffixes = [None] * len(string)\n    for suffix in suffixes[:-1]:\n        s = string[:suffix]\n        s = s[1:]\n        if not s.startswith(suffix):\n            s = s[1:]\n    # add the prefix as a prefix if not a palindrome\n    if s.startswith(''):\n        s = s[1:]\n    return s", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.endswith(''):\n        return string[:-1]\n    else:\n        return ''.join([reverse(ch) for ch in string.split('')[::-1]])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string.startswith(string[::-1]):\n        return string[:-1]\n    if string.find(string[::-1], len(string)) == -1:\n        return string[::-1]\n    # prefix needs to be at least len(string) - 1\n    # where as suffix needs to be at least len(string) + 1\n    suffix = string[len(string) - 1]\n    prefix = string[len(string) + 1]\n    while len(suffix) >= len(prefix):\n        suffix = suffix[:-1]\n        prefix = prefix[:-1]\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.replace(' ', '-')\n    if string[:1] == '-':\n        return string[1:]\n    if string[::-1] == '-':\n        return ''\n    return string[0:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char in '.' or char in'':\n            result += char\n        else:\n            break\n    if len(result) == 0:\n        return ''\n    return result[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    while string[::-1]!= '':\n        prefix, suffix = string.split('-', 1)\n        if prefix == '':\n            return ''\n        if suffix == '':\n            result += prefix + ''\n            break\n        else:\n            result += prefix + suffix + ''\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[-1] == string[:-1]:\n        return ''\n    if len(string) < 4:\n        return ''\n    for letter in string[1:]:\n        if len(letter)!= 4:\n            return ''\n    return ''.join(reversed(letter) for letter in string[2:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = ''\n    suffix = ''\n    # find longest prefix\n    for i in range(0, len(string), 1):\n        if string[i:i + 1] =='':\n            prefix += string[:i]\n            i += 1\n        else:\n            prefix += string[:i]\n    # find longest suffix\n    for i in range(0, len(string), 1):\n        if string[i + 1 : i + len(string) - 1] =='':\n            suffix += string[-1:]\n            i += len(string) - 1\n    # return prefix + suffix\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # assume that the string begins with a prefix and ending with a suffix\n    # e.g. 'catac' is the longest prefix that begins with 'cat' and ends with 'ac'\n    # the palindrome that we want is 'ac'\n    # so we need to find the longest prefix that starts with 'cat' and ends with 'ac'\n    # e.g. 'catac' is the longest prefix that begins with 'cat' and ends with 'ac'\n    # e.g. 'catac' is the longest prefix that begins with 'cat' and ends with 'ac'\n    # and so on.\n    # there are some string prefixes that don't even start with 'cat' and ends with 'ac'\n    # let's assume we only find prefixes that start with 'cat' and ends with 'ac'\n    # and the shortest palindrome that starts with a supplied string is 'ac'\n    # so we need to find the longest prefix that begins with 'cat' and ends with 'ac'\n    # and that starts with the supplied string and ends with the supplied string.\n    # e.g. 'catac' is the longest prefix that begins with 'cat' and ends with 'ac", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = \"\"\n    max_length = len(string)\n    for i in range(0, length(string)):\n        if string[max_length - 1] == string[max_length - 2 - i]:\n            palindrome += string[:max_length - 2]\n            length -= 2\n            break\n    return string[max_length:] + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert len(string) > 0,'string must have at least one character'\n    if string.startswith(''):\n        return ''\n    if string.endswith(''):\n        return string\n    length = len(string)\n    prefix = string[0:length]\n    suffix = string[length:]\n    reverse = ''\n    for i in range(length):\n        if prefix == suffix:\n            return reverse\n        if prefix == '':\n            prefix = ''\n            reverse = suffix\n            i += 1\n        if reverse == '':\n            reverse = suffix\n            i += 1\n        prefix += reverse\n        suffix += prefix\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    while string.startswith(string[::-1]):\n        result += string[:-1]\n    result = result[::-1]\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return \"\".join([i for i in string.split(\"\") if i!= i + \"\" if i!= i])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string[:-1]\n    string = string[::-1]\n    string = string.split(' ')\n    string = string[1:]\n    string = ''.join(string)\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = ''\n    prefix = ''\n    suffix = ''\n    if len(string) > 1:\n        if string[-1] == '':\n            string = string[:-1]\n        prefix = string[:-1]\n        suffix = string[1:]\n    return '{} {}'.format(prefix, suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # first find the longest prefix\n    prefix_len = len(string)\n    for i in range(prefix_len):\n        if string[i]!= string[i + 1:]:\n            break\n    # find the longest suffix\n    suffix_len = len(string[prefix_len + 1:])\n    if suffix_len > 0:\n        for i in range(suffix_len):\n            if string[i + suffix_len]!= string[i + prefix_len]:\n                break\n    # append to the end\n    return prefix_len +'' + suffix_len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(string for s in string.split('') if s.startswith(make_palindrome('')))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    suffix = ''\n    if string.endswith('.'):\n        suffix = '.'\n    else:\n        suffix = string[:-1]\n    prefix = ''\n    if string.startswith('.'):\n        prefix = '.'\n    else:\n        prefix = string\n    if prefix!= suffix:\n        return prefix + suffix + ''\n    return prefix + suffix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert string is not None\n    s = re.sub(r'[^a-zA-Z]', '', string).rstrip()\n    if s == '':\n        return s\n    if s[-1] =='':\n        return s[:-1] + 'catac'\n    s = s[::-1]\n    r = s[:-1] + 'catac'\n    while s.startswith(r):\n        s = s[::-1]\n    return s", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[0:len(string) - 1] + string[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string is None:\n        return \"\"\n\n    # First try to find the longest postfix. If not found, return\n    # the first one\n    max_length = len(string)\n    max_prefix = \"\"\n    for i in range(max_length):\n        if string[i + 1] == string[--i]:\n            max_prefix = string\n            break\n    if max_prefix is not None:\n        max_length = max_prefix - max_length\n    return max_prefix + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    i = 1\n    while 1:\n        i += 1\n        s = string[:i]\n        s += s[:-1]\n        s = s.reverse()\n\n        s = s.rstrip()\n\n        if s =='':\n            break\n\n        if is_palindrome(s):\n            break\n\n        # Append the shortest palindrome\n        return s[:i] + '.' + s[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    start_pos = 0\n    end_pos = len(string) - 1\n    for x in range(start_pos, end_pos):\n        if string[x]!= string[end_pos + x]:\n            return string[:x + 1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    try:\n        # We look for a palindrome that begins with 'catac'\n        # (that's a reverse of 'cat')\n        min_length = len(string[:-1])\n        max_length = len(string[::-1])\n        for i in range(min_length, max_length):\n            if string[i] == string[::-1 - i] or string[i] == string[::-1 + i]:\n                return string[::-1 - i] + (string[::-1 - i] +'' + string[::-1 + i])[:-1]\n    except:\n        # We just need to check for 'catac'\n        min_length = len(string[:-1])\n        max_length = len(string[::-1])\n        for i in range(min_length, max_length):\n            if string[i] == string[::-1 - i] or string[i] == string[::-1 + i]:\n                return ''\n\n    # Find the longest postfix of supplied string that is a palindrome\n    if len(string) > 1:\n        if string[-1 + 1] == string[-1]:\n            return ''\n        else:\n            return string[-1 - 1] + (string[-1 - 1] +'' + string[-1 + 1])[:-1]\n    else:", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for i in range(len(string)):\n        if string[i] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            result += string[i:i + 1]\n        else:\n            break\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    for i in range(len(string)):\n        if string[i] =='':\n            continue\n        if string[i]!= ':':\n            palindrome +='' + string[--i]\n        else:\n            palindrome +='' + string[--i]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.replace(' ', '')\n    substrings = string.split('-')\n    if len(substrings) == 1:\n        substrings.pop()\n    palindromes = []\n    for substring in substrings:\n        if len(substring) == 2:\n            palindromes.append(substring[::-1])\n        else:\n            if substring[::-1].startswith('-'):\n                string = substring[::-1]\n                substring = substring[1:]\n            else:\n                string = substring\n        if len(string) == 1:\n            string = string[:-1]\n        elif len(string) == 2:\n            string = string[:-1]\n        elif len(string) == 3:\n            string = string[:-1]\n    if len(palindromes) == 1:\n        palindrome = palindromes.pop()\n    return string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == len(string[::-1]):\n        return string[:-1]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    for i in range(len(string)):\n        while i < len(string) - 1:\n            if string[i] == string[i + 1:]:\n                result += string[i + 1:]\n                break\n            else:\n                result += string[:i] + string[i + 1:]\n                break\n        result += string[len(string) - i - 1]\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_len = len(string)\n    # Find longest postfix\n    longest_postfix = 0\n    longest_prefix = string\n    while longest_prefix < string_len:\n        if longest_prefix == string[string_len - longest_postfix]:\n            longest_prefix = 0\n        else:\n            longest_prefix += 1\n    longest_prefix += 1\n\n    # Append a prefix to the end of the string if it is palindromic\n    if longest_prefix == len(string) - 1:\n        longest_prefix += 1\n    if longest_prefix == len(string):\n        longest_prefix += 1\n    longest_prefix = ''\n    return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    while True:\n        pos = string.find('_')\n        if pos == -1:\n            result += string\n            break\n        else:\n            result += string[pos+1:]\n            result += '-'\n        result += string[pos:pos+1]\n        result += '-'\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    p = 0\n    while True:\n        p = p + len(make_palindrome(string[p:]))\n        if p == 0:\n            break\n        string = string[p]\n        string = string.lstrip(string[:p])\n        string = string.rstrip(string[p:p])\n        string = string[::-1]\n        break", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    if string[-1] == string[:-1]:\n        return string[::-1]\n    # the shortest palindrome is the first letter of the supplied string\n    longest = \"\"\n    for letter in string:\n        if letter in [a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a,", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] if string[::-1] else string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    from collections import defaultdict, Counter\n    from itertools import chain, product\n\n    try:\n        while len(string) > 0:\n            for pos, s in enumerate(string):\n                if is_palindrome(s):\n                    return s[::-1]\n                else:\n                    string += s[1:]\n            return string[::-1]\n    except IndexError:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(c for c in string.split('-') if not is_palindrome(c))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(p for p in string if p not in '+'.join(string[:-1]) + '+'.join(string[1:]) if p not in '+'.join(string[:-1]) + '+'.join(string[1:]))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    _ = str.split(string,'')\n    string = ''.join([\n        _[start: i] for i, start in enumerate(string, 1)])\n    return string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    string = string[::-1]\n\n    prefix = string.translate(\" \", -1)\n    suffix = string.translate(\" \", 1)\n    if len(suffix) == len(prefix):\n        suffix += \" \"\n        return suffix.translate(\" \", -1)\n\n    return prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.upper()\n    string = '' if string == string[-1] else string + string[::-1]\n\n    prefix_len = len(string)\n    suffix_len = len(string[::-1])\n    if prefix_len > suffix_len:\n        suffix_len = prefix_len\n    if suffix_len == 0:\n        suffix_len = len(string[1:])\n\n    return string[:suffix_len] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    while string is not None:\n        if string[0] == string:\n            break\n        else:\n            prefix = string[1:]\n            suffix = string[::-1]\n            if prefix == 'cat':\n                return prefix + 'catac'\n            if prefix == 'cata':\n                return prefix + 'cata'\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1].replace('cat', 'catac').replace('cata', 'catac')", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    palindrome: str = ''\n\n    if string is not None:\n        if string == '':\n            return result\n        else:\n            palindrome = string.rfind(string[::-1])\n            if palindrome!= -1:\n                result = palindrome + result[::-1]\n                palindrome = string[:palindrome]\n            else:\n                result = result[:-1]\n\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([\"\" if string == string[::-1] else string[:-1] for string in string.split('')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # look for palindromic prefixes\n    for prefix in string.split(' '):\n        if prefix.startswith('cat') and prefix.endswith('cat'):\n            return prefix\n    # look for palindromic suffixes\n    for suffix in string.split(' '):\n        if suffix.startswith('cata') and suffix.endswith('cata'):\n            return suffix\n    # look for prefix and suffix that are in the same word\n    for prefix in string.split(' '):\n        for suffix in string.split(' '):\n            if prefix.lower().endswith(suffix.lower()):\n                return prefix[:-1] + suffix[len(suffix):]\n    # return all possibilities\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(make_palindrome(string[:-1]) for string in string[1:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith(''):\n        return ''\n    else:\n        prefix = ''\n        suffix = ''\n        while True:\n            prefix, suffix = '', ''\n            if string[::-1] == '':\n                break\n            else:\n                prefix, suffix = string[::-1], string[::-1]\n                break\n        return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return \"\"\n    prefix = str(string[:-1])\n    suffix = str(string[1:])\n    prefix_len = len(prefix)\n    suffix_len = len(suffix)\n    if prefix_len!= suffix_len:\n        raise ValueError('expected {0} characters but got {1}'.format(prefix_len, suffix_len))\n    return prefix[:prefix_len] + suffix[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return ''\n    suffix: str = string[:-1]\n    prefix: str = string[1:]\n    if not prefix:\n        return ''\n    if not suffix:\n        return ''\n    length = len(suffix)\n    if prefix[-1]!= suffix[-1]:\n        return prefix[:-1] + suffix[1:]\n    else:\n        return prefix[:-1] + suffix[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 2:\n        return string[::-1]\n    if string[0] == '':\n        return ''\n    if not string.startswith(string[::-1]):\n        return ''\n    if string[::-1] == '':\n        return string[::-1]\n    # now we go back, reverse all prefixes\n    for i in range(len(string)):\n        if string[i] == '':\n            return ''\n        if string[-1 + i] == '':\n            return ''\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string.lower()\n    else:\n        nums = [0] * len(string)\n        for i in range(0, len(string)):\n            nums[-1] = string[i]\n            nums[-2] = string[i - 1]\n            nums[-3] = string[i + 1]\n            nums[-4] = string[i + 2 - 1]\n            nums[-5] = string[i + 2 + 1]\n            nums[-6] = string[i + 3 - 1]\n            nums[-7] = string[i + 3 + 1]\n            nums[-8] = string[i + 4 - 1]\n            nums[-9] = string[i + 4 + 1]\n            nums[-10] = string[i + 5 - 1]\n            nums[-11] = string[i + 5 + 1]\n            nums[-12] = string[i + 6 - 1]\n            nums[-13] = string[i + 6 + 1]\n            nums[-14] = string[i + 7 - 1]\n            nums[-15] = string[i + 7 + 1]\n            nums[-16] = string[i + 8 - 1]\n            nums[-17] = string[i + 8 + 1]\n            nums[-18] = string[i + 9 - 1]\n            nums[-19] = string[i + 9 + 1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Check if string is a palindrome\n    if string.isalpha():\n        return string\n    # Check for prefix length and max length\n    length = len(string)\n    if length > lengths[-2]:\n        return string\n    # Find longest prefix (removing last character)\n    prefix = string[0:length - 1]\n    if prefix[-1] == ':':\n        prefix = prefix[:-1]\n    # Find longest suffix\n    suffix = string[-length - 2:]\n    if suffix[-1] == ':':\n        suffix = suffix[:-1]\n    # Append to the end of the string reverse of the longest prefix and suffix\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.endswith('cat'):\n        string = string[:-len('cat')]\n    if string.endswith('cata'):\n        string = string[:-len('cata')]\n    if string.endswith('d'):\n        string = string[:-len('d')]\n    if string.endswith('da'):\n        string = string[:-len('da')]\n    if string.endswith('e'):\n        string = string[:-len('e')]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not is_palindrome(string):\n        return string\n\n    if len(string) == 1:\n        return string\n\n    result = ''\n    i = len(string)\n    while i > 1:\n        s = string[:i]\n        r = string[i + 1]\n        if s.find(r) == -1:\n            result = s + r\n            i += 1\n        else:\n            return result + s + r\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('*') or string.startswith('_'):\n        return ''\n    else:\n        prefix = string[1:]\n        suffix = ''\n        if string.startswith('*'):\n            prefix = '!*'\n            suffix = string[1:]\n        if string.startswith('_'):\n            prefix = '*'\n            suffix = '_'\n        return ''.join([prefix, suffix])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Reverse string and compare to the supplied string\n    i = 0\n    while i < len(string):\n        s = string[:i]\n        m = string[i:]\n        if s!= m:\n            break\n        i += 1\n    if i < len(string):\n        return string[:i]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    last_letter = string[-1]\n\n    string = string[:-1]\n    string = string[1:]\n\n    if string[-1] =='':\n        last_letter = string.rindex(' ')\n    string = string[last_letter:]\n\n    # Shortest palindrome\n    prefix = string[::-1]\n    suffix = string[::-1]\n\n    # Return the shortest palindrome starting at the end of the string\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    from itertools import product\n    from re import match\n    if not string.endswith(string[-1]):\n        # TODO: Replace with an if else\n        return string\n\n    # Find all the prefixes of length two that are a palindrome with itself\n    palindromes = ['', '(', ')', '(' + ')', '(' + ')', '(' + ')']\n    palindrome_length = len(palindromes)\n\n    # Find the longest palindrome prefix with length greater than the string length\n    longest_prefix = ''\n    for i in range(0, palindrome_length - 1):\n        longest_prefix += palindromes[product(i, i + 1)]\n    longest_prefix += string\n    return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string[::-1]!='':\n        return ''\n    return ''.join([i for i in string if i!='': i])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(['''.join(r'' for r in [reversed(string[::-1]) for string in string.split('')]) for string in string.split('')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    while len(result) > 0:\n        prefix = ''\n        suffix = ''\n        prefix_len = len(result)\n        suffix_len = len(suffix)\n        if prefix_len > suffix_len:\n            suffix = result[:prefix_len]\n            prefix = result[suffix_len:]\n        else:\n            prefix = result[:suffix_len]\n            suffix = ''\n        result += prefix + suffix\n        if prefix_len == suffix_len:\n            result = prefix + suffix\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string is None:\n        raise ValueError('String is None')\n    if string[0]!= '\\'':\n        return ''.join(string[1:])\n    return string[1:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.split('')\n    if len(string) > 1:\n        break\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    while True:\n        s = string[:-1]\n        if s in string[:-1]:\n            break\n        for n in range(len(s)):\n            if n > 0:\n                s = s[:-1] + 'catac'\n            else:\n                s = s[:-1] + 'catac'\n        return s", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[-1] == string:\n        return string[:-1]\n    else:\n        return string[1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(x) for x in string.split() if x])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.find(' ')!= -1:\n        return ''\n    else:\n        return make_palindrome(string[1:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if string[-1].isalpha():\n        return string[:-1]\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            return string[:i]\n    return string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        string = string[1:]\n    elif string.startswith('cata'):\n        string = string[1:]\n    else:\n        return ''\n    return string[::-1] + string[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string[::-1] =='':\n        string = string[:-1]\n    length = len(string)\n    if length == 0:\n        return string\n    longest_postfix = string[length - 1]\n    reverse = string[:length - 1]\n    return reverse[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    s = 'abc'\n    while len(s) >= len(string):\n        if not is_palindrome(s):\n            result += s\n        s = s[:-1]\n    result += ''.join(s.split(' '))\n    return result", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) > 1:\n        p = string.rfind(string[::-1],'')\n        if p == -1:\n            return string\n        else:\n            return string[:p + 1] + string[::-1]\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    suffix_len = len(string.split(' ')[-1]) - len(string.split(' ')[0])\n    suffix = ''\n    pos = 0\n    while pos < suffix_len:\n        if string[pos + 1] in suffix:\n            suffix += 1\n            pos += 1\n            continue\n        else:\n            suffix += 1\n        pos += 1\n    return suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert is_palindrome(string)\n    if string.startswith(string[::-1]):\n        return string[::-1]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    s = string.split('')\n    while len(s) < 2:\n        s = s[1:]\n    return s[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string[:2] == 'cat':\n        return string[3:]\n    if string[:2] == 'ca':\n        return string[3:]\n    if string[:2] == 'c':\n        return string[3:]\n    if string[:2] == 'cata':\n        return string[3:]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find longest palindrome\n    max = 0\n    while max < len(string):\n        prefix_len = len(string[max:max + max + 1])\n        suffix_len = len(string[max - prefix_len:max - prefix_len + prefix_len + max + 1])\n        if suffix_len == len(string[max:max + max + 1]):\n            max = max + 1\n        else:\n            break\n    # append last prefix with prefix_len's reverse\n    prefix_len = max - prefix_len - 1\n    suffix_len = len(string[max - prefix_len:max - prefix_len + prefix_len + max + 1])\n    if suffix_len == len(string[max:max + max + 1]):\n        return string[max:max + max + 1]\n    else:\n        return string[max:max + max + 1, max - prefix_len - 1:max - prefix_len + prefix_len + suffix_len]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) >= 1:\n        if is_palindrome(string[1:]):\n            return ''\n        else:\n            return make_palindrome(string[1:])\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = ''\n    suffix = ''\n    palindrome = ''\n    for i in range(len(string)):\n        if string[i] == string:\n            prefix = string[i + 1]\n            palindrome = ''\n            break\n        elif string[i] == string:\n            prefix = ''\n            palindrome = string[i + 1]\n            break\n    return prefix + suffix + palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    while string[:2] == 'catac':\n        string = string[2:]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    prefix = ''\n    suffix = ''\n    start_position = 0\n    palindrome = ''\n    while prefix and not palindromic:\n        prefix = ''\n        if start_position < len(string):\n            prefix += string[start_position]\n        if suffix and not palindromic:\n            suffix += string[start_position]\n        start_position += 1\n    while not prefix and not palindromic:\n        prefix = ''\n        if start_position < len(string):\n            prefix += string[start_position]\n        if suffix and not palindromic:\n            suffix += string[start_position]\n        start_position += 1\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    s = ''.join(string.split(' '))\n    while len(s) > 1:\n        s = s[:-1] +'' + s[::-1]\n    return s", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = ''\n    while True:\n        prefix = ''\n        suffix = ''\n        prefix_len = len(string)\n        suffix_len = len(string[::-1])\n        if prefix_len == suffix_len:\n            result += string\n            break\n        elif prefix_len > suffix_len:\n            prefix = string[:prefix_len]\n            suffix = string[::-1]\n        else:\n            break\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    first = ''\n    second = ''\n    for i in string.split(' '):\n        prefix, postfix = i.split(' ')\n        if prefix.startswith(first):\n            first = postfix\n        else:\n            second = postfix\n            break\n    return''.join([first, second])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.strip()\n    string = string.replace('','')\n    string = string.replace(' ', '')\n    return string.replace('','').replace(' ', '')", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    other_string = string[:-1]\n    elif len(string) == len(other_string):\n        return string\n    else:\n        return ''.join([reverse(x) for x in range(len(string)) if x in other_string])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string is None:\n        return\n    # Use str.startswith() to find the first occurrence of the prefix in the string.\n    # This includes prefixes starting with a word or a space.\n    pos = string.find(' ')\n    if pos < 0:\n        # If the string is empty, we have to find the last character.\n        string = string[len(string) - 1]\n    while string[pos] in'' or string[pos] in '(' or string[pos] == ')':\n        pos += 1\n    # Create a new string from the prefix and the suffix\n    new_string = string[:pos] + string[pos + 1:]\n    # Append a repeat of the prefix to the end of the string\n    while pos < len(new_string) - 1:\n        new_string[pos] = new_string[pos + 1]\n    # Return the result\n    return new_string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) > 2:\n        return string[:2] + string[-2:]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string or not string:\n        return ''\n\n    # Find longest postfix\n    try:\n        max_length = len(string[::-1])\n    except IndexError:\n        max_length = len(string)\n\n    # Create string prefix\n    prefix = string[:max_length - 1]\n    suffix = ''\n    for i in range(max_length - 1):\n        suffix = prefix[:i]\n        prefix = prefix[len(suffix):]\n\n    # Append prefix to end of string\n    prefix = prefix[:max_length - 1] + suffix\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for pos, prefix in enumerate(string.split(' ')):\n        if prefix:\n            if is_palindrome(prefix):\n                return prefix +''\n        else:\n            return''.join(string[pos:pos + 1])\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix, which is the longest string that starts with the supplied string.\n    pre = string[:string.find(string[::-1])]\n    suffix = string[::-1]\n\n    # Append prefix and suffix to the end of the string.\n    while prefix and suffix:\n        pre = pre.append(suffix)\n        suffix = suffix.append(prefix)\n\n    return pre.append(suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] if len(string) > 0 else string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[:].reverse().join(string[1:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_parts = string.split(' ')\n    # we assume the string will have a maximum of 5 elements\n    max_num_parts = int(string_parts[1])\n    if max_num_parts > 5:\n        return string_parts[0]\n\n    if max_num_parts == 3:\n        # the palindromic prefix is a substring of the string\n        string_parts = string_parts[:3]\n\n    # if the palindromic prefix is a substring of the string, append it to the end of the string\n    if max_num_parts == 2:\n        string_parts[-1] = string_parts[-1] +''\n        return string_parts[-1]\n\n    # if the palindromic prefix is a substring of the string, but there are more than 3 elements, append it to the end of the string\n    if max_num_parts >= 3:\n        string_parts[-1] = string_parts[-1] +'' + string_parts[3]\n        return string_parts[-1]\n\n    # if the palindromic prefix is a substring of the string, but there are only 2 elements, append it to the end of the string\n    if max_num_parts == 1:\n        string_parts[-1] = string_parts[-1] +'' + string_parts[2]\n        return", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.join(''.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        start = i + 1\n        while i > len(string):\n            prefix = string[:start]\n            suffix = string[start + 1:]\n            if prefix == suffix:\n                continue\n            result.append(prefix + suffix)\n        else:\n            result.append('')\n    return ''.join(result)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    # Find longest prefix\n    if length < 2:\n        return ''\n    # Find shortest postfix\n    prefix = string[length - 1]\n    suffix = string[:length - 1]\n    if prefix.isupper():\n        prefix = prefix[1:]\n    # Append suffix to end\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return\n    # Make palindromic suffix\n    while string[::-1]:\n        string = string[1:]\n    # Match, return longest prefix\n    longest_past = string[::-1:]\n    while longest_past == longest_past[::-1]:\n        longest_past = longest_past[:-1]\n    # Match, return longest prefix\n    longest_past = longest_past[::-1]\n    longest_past = longest_past[::-1:-1]\n    longest_past = longest_past[::-1]\n    longest_past = longest_past[:-1]\n    longest_past = longest_past[::-1]\n    longest_past = longest_past[::-1:]\n    longest_past = longest_past[::-1]\n    longest_past = longest_past[:-1]\n    longest_past = longest_past[::-1]\n    longest_past = longest_past[::-1:]\n    longest_past = longest_past[::-1]\n    longest_past = longest_past[::-1:]\n    longest_past = longest_past[::-1:]\n    longest_past = longest_past[:-1]\n    longest_past = longest_past[::-1]\n    longest_past = longest_past[::-1:]\n    longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # 1: Find longest prefix\n    l = len(string)\n    while l > 1:\n        if is_palindrome(string[l - 1]):\n            l -= 1\n        else:\n            break\n\n    # 2: Find longest postfix\n    max = 0\n    pos = 0\n    while max < l:\n        if is_palindrome(string[pos - 1]):\n            max = pos\n        pos = pos + 1\n\n    return string[:max] + string[pos:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    p = ''\n    r = ''\n    while True:\n        prefix = ''\n        suffix = ''\n        pos = 0\n        while pos < len(string):\n            prefix = string[pos]\n            if prefix in r:\n                r = r[:]\n                break\n            pos += 1\n            if not prefix:\n                break\n        if not prefix:\n            suffix = string[pos]\n            pos += 1\n        while pos < len(string) and not prefix:\n            prefix = string[pos]\n            if not prefix:\n                break\n        while pos < len(string) and prefix:\n            suffix = string[pos]\n            pos += 1\n        if prefix!= suffix:\n            break\n        else:\n            r = r[:]\n            p = p + prefix + suffix\n            break\n    return p", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([str(x) for x in string.split(' ')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if string[-1]!= string:\n        return ''.join(string[:-1]).rstrip('')\n    else:\n        return string.rstrip('')", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    from io import StringIO\n    output = StringIO('')\n    pattern = re.compile('(' + string + ')')\n    while True:\n        prefix = pattern.sub('', input('What is the shortest palindrome? '))\n        suffix = pattern.sub('', prefix)\n        if prefix == suffix:\n            break\n        else:\n            output.write(prefix + suffix + '\\n')\n            output.write('\\nPlease wait.')\n            time.sleep(0.1)\n            output.write('Please wait.')\n            time.sleep(0.1)\n            output.write('Please wait.')\n            time.sleep(0.1)\n            output.write('Please wait.')\n            time.sleep(0.1)\n            output.write('Please wait.')\n            time.sleep(0.1)\n            output.write('Please wait.')\n            time.sleep(0.1)\n            output.write('Please wait.')\n            time.sleep(0.1)\n            output.write('Please wait.')\n            output.write('Please wait.')\n            output.write('Please wait.')\n            output.write('Please wait.')\n            output.write('", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) > 2:\n        prefix = string[::-1]\n        suffix = ''.join(string[0:-2]*str(i+1) for i in range(len(string)))\n        if prefix.find(suffix) == -1:\n            return ''\n        else:\n            return prefix[len(suffix):]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    from ast import literal_eval\n    start = '\\\\b' + literal_eval(string).strip()\n    if start[-1] == start[-1]:\n        return start[:-1] + '\\\\b' + literal_eval(string[1:]).strip()\n    else:\n        return start + '\\\\b' + literal_eval(string[1:]).strip()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[:-1] + str(string[::-1]).reverse()", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < len(make_palindrome(string)):\n        return string[::-1]\n    if string[::-1]!= make_palindrome(string[::-1:]):\n        return make_palindrome(string)\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    found = False\n    prefix = ''\n    postfix = ''\n    for prefix, suffix in string.split(' '):\n        if prefix!= '':\n            prefix = prefix.rstrip(' ')\n        if suffix!= '':\n            suffix = suffix.rstrip(' ')\n        if prefix == '':\n            prefix = ''\n        if postfix == '':\n            postfix = ''\n        if prefix == '' and suffix == '':\n            found = True\n        else:\n            if prefix[-1] =='' and suffix[-1] =='':\n                postfix = prefix[:-1]\n            else:\n                postfix = prefix + suffix\n        found = found and prefix!= postfix\n    if not found:\n        return ''\n    return prefix +'' + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    start = \"\"\n    end = \"\"\n    i = 0\n    while i < len(string):\n        next = string[--i]\n        if next in (\" \", \" \", \" \", \" \"):\n            continue\n        if i == 0:\n            i = len(string) - 1\n        else:\n            break\n        if next in (\" \", \" \", \" \", \" \", \" \"):\n            continue\n        next_prefix = next\n        if next_prefix in (\" \", \" \", \" \", \" \", \" \"):\n            next_prefix = next_prefix.rstrip(\" \")\n            continue\n        elif next_prefix in (\" \", \" \", \" \", \" \", \" \", \" \"):\n            next_prefix = next_prefix.rstrip(\" \")\n            continue\n        else:\n            next_prefix = next_prefix.rstrip(\" \")\n            continue\n        if next_prefix == end:\n            break\n        if next_prefix in (start, end):\n            continue\n        start = next_prefix\n        end = next\n        i += 1\n    return start + end", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([make_palindrome(s) for s in string[::-1].split(' ')[1:-1].split(' ')[1:-1]])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    prefix = string[-length - 1]\n    suffix = string[:length]\n    if prefix == suffix:\n        return prefix\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(string[::-1] for string in string.split(' ') if is_palindrome(string) and string[-1]!= string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string\n    palindrome_len = len(string)\n    if string[-1:] == 'catac':\n        return string[:palindrome_len] + ''\n    elif string[-1:] == 'catacac':\n        return string[:palindrome_len] + 'cat' + string[palindrome_len:]\n    return string[:palindrome_len] + ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.rfind('')\n    if string == -1:\n        return string + 'e'\n    return string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] +''.join([reversed for reversed in string.split('-', 1) if reversed!= string[:-1] and reversed[-1]!= string[:-1]])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindromic = ''\n    for i in range(len(string)):\n        palindromic += string[:i]\n    while string[::-1]!= palindromic:\n        palindromic += string[::-1]\n    return palindromic", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.startswith('cat'):\n        return 'cat'\n        # Append a palindrome of the first letter to the end of the string\n        for i in range(len(string)):\n            s = string[::-1]\n            s.reverse()\n            s.append(s[i:])\n            # Replace this string with the reverse of the first palindrome we found\n            return s\n    elif string.startswith('cata'):\n        return 'cata'\n        # Append a palindrome of the first letter to the end of the string\n        for i in range(len(string)):\n            s = string[::-1]\n            s.reverse()\n            s.append(s[i:])\n            # Replace this string with the reverse of the first palindrome we found\n            return s\n    else:\n        raise Exception('Palindrome length greater than 3')\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lstrip(' ').lstrip('_').lstrip('-')\n    palindrome = string[::-1].rstrip('-')\n    pos = len(palindrome)\n    suffix = palindrome[pos:pos + 1]\n    if suffix:\n        string += '-' + suffix\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([str(ch) for ch in string if not (ch == '' and ch not in '^' and ch!='')])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([''.join([''.join([''.join([i for i in string.split(' ') if i!='']) if i!= string.rfind(' ')]) for i in string.split(' ') if i!= string.rfind(' ')])]) for i in range(1, len(string) - 1)])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) <= 3:\n        return ''\n    if string[-1] == string[-2]:\n        return ''\n    else:\n        raise ValueError('Invalid value, string too long')\n    return ''.join([''] * len(string) - 1)[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string)!= len(string[:-1]):\n        raise ValueError('String is not a palindromic string')\n    return string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return ''\n    if len(string) == 2:\n        return string[:-2] + string[-2] + 'cat'\n    else:\n        return 'cat' + make_palindrome(string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string.startswith(''):\n        return string[len(string):]\n    else:\n        return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find longest prefix in string\n    l = len(string) - 1\n    while l > 0:\n        s = string[:l]\n        if s.startswith('>'):\n            return s[l:]\n        else:\n            l -= 1\n    # find longest palindrome\n    l = len(string) - 1\n    while l > 0:\n        s = string[:l]\n        if s.startswith('='):\n            return s[l:]\n        else:\n            l -= 1\n    # append to end of string\n    l += 1\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.rfind('cat')\n    if string == -1:\n        return ''\n    if string < 0 and string > len(string) - 1:\n        return ''\n    while string >= 0:\n        prefix = string[:string]\n        suffix = string[string:]\n        prefix = prefix.lower()\n        suffix = suffix.lower()\n        if prefix in string.lower():\n            prefix = ''\n            suffix = ''\n        else:\n            prefix = 'cat'\n            suffix = ''\n        if prefix == 'cat':\n            prefix = ''\n        if prefix == 'catac':\n            prefix = ''\n        if suffix == 'catac':\n            suffix = ''\n        if prefix == 'cat':\n            prefix = 'cat'\n        if suffix == 'cat':\n            suffix = 'cat'\n        if prefix == 'catac':\n            suffix = 'catac'\n        if prefix == 'cata':\n            prefix = ''\n        if suffix == 'cata':\n            prefix = ''\n        if prefix == 'catac':\n            prefix = 'catac'\n        if prefix == 'cata':\n            suffix = 'catac'\n        if prefix == 'cat':\n            prefix = ''\n            suffix = ''\n        if prefix == 'cata':\n            prefix = ''\n        if prefix == '' and", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    pattern = '\\A('\n    return pattern.join(string[::-1]).replace(pattern,'').rstrip(' ')", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return ''\n    return string[:-2] + string[2:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string[:2] == 'cat':\n        return string[2:]\n    else:\n        return make_palindrome(string[2:] + '-' + string[-3:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', string[::-1])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert is_palindrome(string)\n    assert len(string) == len(string[1:])\n    return string[::-1]"]]