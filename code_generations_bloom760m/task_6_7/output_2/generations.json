[["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Handle cases where one or more groups are empty.\n    nested_parens = []\n    for paren_group in paren_string.split(','):\n        if paren_group == '()':\n            nested_parens.append(0)\n        else:\n            nested_parens.append(1)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Iterate through the string until a space is found\n    group = 0\n    while not group:\n        group = 1\n        while group == 1:\n            # Get the next group\n            group = int(paren_string[group])\n            break\n        # Get the number of nested parentheses\n        nesting = int(paren_string[group]) - 1\n    # Return the deepest level\n    return [group]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('{'):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith('}'):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith('['):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith(']'):\n        return parse_nested_parens(paren_string[1:])\n    else:\n        raise ValueError('Invalid paren string')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for i in range(0, len(paren_string)):\n        if i > 0:\n            nesting_levels.append(i + 1)\n        else:\n            nesting_levels.append(0)\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return []\n\n    return parse_nested_parens(paren_string.split(','))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for nesting_level in range(0, len(paren_string)):\n        nesting_levels.append(0)\n        for i, nesting in enumerate(paren_string[n]):\n            if nesting == ')':\n                nesting_levels.append(nesting_level + 1)\n            else:\n                nesting_levels.append(nesting_level + 2)\n        if nesting_levels > 0:\n            return nesting_levels\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # First, split the string into groups of spaces.\n    groups = []\n    for group in paren_string.split(' '):\n        groups.append(int(group))\n    return groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(map(int, paren_string.split(',')))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:][1:].split())\n\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:][1:].split())\n\n    elif paren_string.startswith('(') + ')'):\n        return parse_nested_parens(paren_string[1:][1:].split())\n\n    elif paren_string.startswith('(') + ')' + ')'):\n        return parse_nested_parens(paren_string[1:][1:].split())\n\n    elif paren_string.startswith('(') + ')' + ')'):\n        return parse_nested_parens(paren_string[1:][1:].split())\n\n    elif paren_string.startswith('(') + ')' + ')'):\n        return parse_nested_parens(paren_string[1:][1:].split())\n\n    elif paren_string.startswith('(') + ')' + ')' + ')'):\n        return parse_nested_parens(paren_string[1:][1:].split())", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string == ')':\n        return [int(i) for i in range(len(paren_string))]\n    elif paren_string == ')':\n        return [int(i) for i in range(len(paren_string) - 1)]\n    else:\n        return [int(i) for i in range(len(paren_string) - 1)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(c) for c in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    result.extend(map(int, paren_string.split(')')))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for _ in range(len(paren_string)):\n        nested_parens.append(int(paren_string[_nest:_nest + 1]))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    level = 0\n    while paren_string.startswith('('):\n        level += 1\n        paren_string = paren_string[1:]\n\n    return level", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return\n    nested_parens = []\n    for i in range(0, len(paren_string), 1):\n        nested_parens.append(int(paren_string[i]))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string).union(parse_nested_parens('()()'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    levels = []\n    for paren in paren_string.split(' '):\n        levels.append(int(paren.split(' ')[0]))\n    return levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string).map(int).union([int('()')])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string.startswith('('):\n        return []\n    return parse_nested_parens(paren_string[1:])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(g) for g in re.split(r'\\((?<=\\)', paren_string, re.M)[1:]]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for char in paren_string:\n        if char in '(':\n            result.append(1)\n        elif char in ')':\n            result.append(0)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' '))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n\n    # First, find the first group.\n    while paren_string.startswith('('):\n        result.append(1)\n    while paren_string.startswith(')'):\n        result.append(1)\n\n    # Then, find the second group.\n    while paren_string.startswith('('):\n        result.append(2)\n    while paren_string.startswith(')'):\n        result.append(2)\n\n    # Finally, find the third group.\n    while paren_string.startswith('('):\n        result.append(3)\n    while paren_string.startswith(')'):\n        result.append(3)\n\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = 0\n    for group in paren_string.split(','):\n        if group.startswith('('):\n            nesting_levels += 1\n        elif group.startswith(')'):\n            nesting_levels -= 1\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = [\n        int(p) for p in paren_string.split(',') if p.strip()]\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depth = 0\n    for string in paren_string:\n        if depth == 0:\n            depth += 1\n        else:\n            depth = 0\n            continue\n        depth += 1\n        if depth == 2:\n            yield int(string)\n        else:\n            yield int(string) + depth", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for paren in paren_string.split('(')[1:]:\n        if paren not in result:\n            result.append(paren)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.split(r'\\s+', paren_string)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return []\n\n    nesting_levels = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            nesting_levels.append(i + 1)\n        elif paren_string[i] == ')':\n            nesting_levels.append(i - 1)\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in re.split(r'(?:(?:[^()]|\\((?:(?:[^()]|\\)))(?:[^()]|\\)))|\\((?:(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(?:[^()]|\\)))(", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.endswith(')'):\n        return parse_nested_parens(paren_string[:-1])\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Parse the string\n    nesting_levels = []\n    for group in paren_string.split(','):\n        nesting_levels.append(int(group))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for paren in paren_string.split('(')[1:]:\n        if paren.count(')') > 0:\n            result.append(paren.count(')') - 1)\n        else:\n            result.append(paren)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for group in paren_string.split(' '):\n        nesting_levels.append(int(group))\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens('(' + paren_string[1:] + ')')\n    elif paren_string.startswith(')'):\n        return parse_nested_parens('(' + paren_string[1:] + ')')\n    elif paren_string.startswith('(()())'):\n        return parse_nested_parens('(()()())')\n    elif paren_string.startswith('()()()'):\n        return parse_nested_parens('()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    level = 0\n    while paren_string:\n        if paren_string.startswith('('):\n            level += 1\n        elif paren_string.startswith(')'):\n            level -= 1\n        elif level == 0:\n            paren_string = paren_string[1:]\n        else:\n            return []\n        paren_string = paren_string[1:]\n        if paren_string.startswith('('):\n            return level, level\n        elif paren_string.startswith(')'):\n            return level, level + 1\n        elif paren_string.startswith('('):\n            return level - 1, level\n        elif paren_string.startswith(')'):\n            return level - 1, level - 1 + 1\n        elif paren_string.startswith('('):\n            return level - 1, level - 1 + 1 + 1\n        elif paren_string.startswith('('):\n            return level - 1, level - 1 + 1 + 1 + 1\n        elif paren_string.startswith('('):\n            return level - 1, level - 1 + 1 + 1 + 1 + 1\n        else:\n            return level - 1, level - 1 + 1 + 1 + 1 +", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string).flatten()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Get the deepest level of nesting\n    level = 0\n    depth = 0\n    for line in paren_string.splitlines():\n        for line_part in line.splitlines():\n            if line_part[0] == '(':\n                level += 1\n            elif line_part[0] == ')':\n                depth += 1\n            elif line_part[0] == '(':\n                level -= 1\n            elif line_part[0] == ')':\n                depth -= 1\n    return level, depth", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for paren in paren_string.split(','):\n        if paren in ('(', ')'):\n            result.append(int(paren.strip()))\n        elif paren in ('[', ']'):\n            result.append(int(paren.strip()))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    assert paren_string.count(')') >= 1\n\n    # TODO(jkl): this should be a function of the length of the string.\n    result = []\n    for char in paren_string:\n        if char == ')':\n            result.append(1)\n        elif char == ')':\n            result.append(2)\n        elif char == ')':\n            result.append(3)\n        elif char == ')':\n            result.append(4)\n        elif char == ')':\n            result.append(5)\n        else:\n            raise ValueError('Expected'+ char)\n\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n\n    for paren_string_char in paren_string.split(' '):\n        if paren_string_char not in ('()()', '(()())'):\n            continue\n\n        nesting_levels.append(int(paren_string_char))\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: This is really a hack, but it seems like it would be the best way to handle\n    # nested parens in python.\n    # TODO: Since Python 3.4, you can use a regex to do this.\n    # TODO: Use a dictionary to do this.\n    nested = []\n    for paren in paren_string.split(\" \"):\n        if paren[0] == \"(\":\n            nested.append(1)\n        elif paren[0] == \")\":\n            nested.append(0)\n        else:\n            raise ValueError(\"Expected '(' or ')' but got '{}'\".format(paren[0]))\n    return nested", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for paren in paren_string.split(' '):\n        nesting_levels.append(int(paren))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depth = 0\n    depth += 1\n    while True:\n        depth += 1\n        if depth == 0:\n            return []\n        elif depth == 1:\n            return [int(paren_string[depth:depth + 1])]\n        else:\n            return [int(paren_string[depth:depth + 1])] + [int(paren_string[depth:depth + 2])]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(n) for n in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith(')'):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith('['):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith(']'):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith('('):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith(')'):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith('{'):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith('}'):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith('['):\n        return [int(s) for s in paren_string[1:]]\n    elif paren_string.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(group) for group in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for group in paren_string.split(' ')[1:]:\n        nested_parens.append(int(group))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    assert paren_string is not None\n    paren_string = paren_string.split()\n    nesting = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            nesting.append(i)\n        elif paren_string[i] == ')':\n            nesting.append(i)\n    return nesting", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[1:])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    nested_parens.extend(int(paren_string.split(' ')[-1]))\n    nested_parens.extend(int(paren_string.split(' ')[0]))\n    nested_parens.extend(int(paren_string.split(' ')[1]))\n    nested_parens.extend(int(paren_string.split(' ')[2]))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(s) for s in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(filter(lambda x: x >= 0 and x < len(paren_string), [int(n) for n in xrange(0, len(paren_string), 1)]))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string is None:\n        return []\n\n    # First find the longest nesting level\n    levels = []\n    for level in range(0, len(paren_string)):\n        levels.append(level)\n\n    # Then find the longest nesting level in the list of levels\n    longest_nesting_level = None\n    for level in levels:\n        longest_nesting_level = max(longest_nesting_level, level)\n\n    # The longest nesting level is the lowest level of nesting\n    return longest_nesting_level", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_levels = []\n    paren_lines = []\n\n    for line in paren_string.split('\\n'):\n        if not line.strip().startswith('#'):\n            paren_levels.append(int(line.strip()) - 1)\n            paren_lines.append(line.strip())\n    return paren_levels, paren_lines", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren not in nested_parens:\n            nested_parens.append(int(paren))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(m) for m in re.findall(r'(\\s*)([\\w\\d])\\s*([\\w\\d])\\s*([\\w\\d])', paren_string)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(paren_string.split(',')[-1]) for paren_string in paren_string.split(',')[1:]]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depth = 0\n    for group in paren_string:\n        if group == '(':\n            depth += 1\n        elif group == ')':\n            depth -= 1\n        elif group == '(()':\n            depth += 1\n            continue\n        elif group == ')':\n            depth -= 1\n            continue\n        elif group == '(()':\n            depth += 1\n            continue\n        elif group == '(()':\n            depth -= 1\n            continue\n        elif group == '(()':\n            depth += 1\n            continue\n        elif group == '(()':\n            depth -= 1\n            continue\n        else:\n            depth += 1\n            continue\n\n    return depth.items()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(s.strip()) for s in paren_string.split(' ') if s.strip()]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(m) for m in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(e) for e in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(s) for s in paren_string.split(' ', 1)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:][1:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:][1:][1:])\n    elif paren_string.startswith('(()'):\n        return parse_nested_parens(paren_string[1:][1:][1:][1:])\n    elif paren_string.startswith('(()'):\n        return parse_nested_parens(paren_string[1:][1:][1:][1:][1:])\n    elif paren_string.startswith('(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(map(int, re.split(r'(\\s)(\\s)(\\s)(\\s)', paren_string)))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for paren in paren_string.split(' ')[1:]:\n        nesting_levels.append(int(paren))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.split(','):\n        if paren.startswith('('):\n            paren_list.append(1)\n        elif paren.startswith(')'):\n            paren_list.append(2)\n        elif paren.startswith('(') and paren.endswith(')'):\n            paren_list.append(3)\n        elif paren.startswith(')') and paren.endswith(')'):\n            paren_list.append(4)\n        else:\n            paren_list.append(5)\n    return paren_list", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.strip().startswith('['):\n        return []\n\n    if paren_string.strip().startswith(']'):\n        return []\n\n    if paren_string.strip().startswith('('):\n        return parse_nested_parens(paren_string.strip())\n\n    if paren_string.strip().startswith(')'):\n        return parse_nested_parens(paren_string.strip())\n\n    return []", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for group in paren_string.split(')'):\n        nesting_levels.append(int(group))\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(c) for c in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return\n    levels = []\n    for paren in paren_string.split(','):\n        if not paren:\n            continue\n        level = parse_nested_parens(paren)\n        if level:\n            levels.append(level)\n    return levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for line in paren_string.splitlines():\n        lines = line.splitlines()\n        if len(lines) < 2:\n            continue\n        nesting_levels.append(int(lines[0].split(' ')[1]))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(map(int, paren_string.split(',')))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for i in range(0, len(paren_string), 2):\n        if paren_string[i] in ('(', ')'):\n            result.append(i)\n        else:\n            result.append(i + 1)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            result.append(1)\n        elif paren.startswith(')'):\n            result.append(2)\n        else:\n            result.append(3)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith('['):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith(']'):\n        return parse_nested_parens(paren_string[1:])\n    else:\n        return []", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string[::-1]).tolist()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return []\n    else:\n        return list(parse_nested_parens(paren_string[1:]))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    result.extend(int(paren_string))\n    result.extend(int(paren_string[1:]))\n    result.extend(int(paren_string[1:][1:]))\n    result.extend(int(paren_string[1:][1:][1:]))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string is None:\n        return []\n\n    return nested_levels(paren_string, [None] * len(paren_string))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting = 0\n    for paren in paren_string.split(' ')[1:]:\n        if paren in ['(', ')']:\n            nesting += 1\n        else:\n            yield nesting", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def _split(paren_string: str) -> List[int]:\n        return paren_string.split(' ')\n\n    def _split_children(paren_string: str) -> List[int]:\n        return _split(paren_string).map(lambda x: x.split(' '))\n\n    def _parse(paren_string: str) -> List[int]:\n        \"\"\"\n        This function is a recursive function that recursively splits the paren string into\n        groups and returns a list of the children levels of the current group.\n        \"\"\"\n        return _split_children(paren_string).map(_parse)\n\n    def _parse_children(paren_string: str) -> List[int]:\n        return _split_children(paren_string).map(_parse)\n\n    def _parse_children_children(paren_string: str) -> List[int]:\n        return _split_children(paren_string).map(_parse_children)\n\n    def _parse_children_level(paren_string: str) -> List[int]:\n        return _split_children(paren_string).map(_parse_level)\n\n    def _parse_children_level_children(paren_string: str) -> List[int]:\n        return _split_children(", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(n) for n in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for i, group in enumerate(paren_string):\n        nested_parens.extend(parse_nested_parens(group))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    nesting_levels = []\n    for paren in paren_string.split(',')[1:]:\n        nesting_levels.append(int(paren))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(c) for c in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string).map(int)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(g) for g in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren_string_group in paren_string.split(','):\n        parens.extend(parse_nested_parens(paren_string_group))\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(re.findall(r'([,;])([,;])', paren_string))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    result.extend(map(int, paren_string.split()))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting = 0\n    for paren in paren_string.split():\n        if paren[0] == '(':\n            nesting += 1\n        elif paren[0] == ')':\n            nesting -= 1\n    return nesting", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # The first group is the empty string.\n    groups = []\n    for group in paren_string.split(' ')[1:]:\n        groups.append(int(group))\n    # The second group is a single space.\n    groups.append(int(' '.join(groups)))\n    # The third group is a single space.\n    groups.append(int(' '.join(groups)))\n    # The fourth group is a single space.\n    groups.append(int(' '.join(groups)))\n    # The fifth group is a single space.\n    groups.append(int(' '.join(groups)))\n    # The last group is a single space.\n    groups.append(int(' '.join(groups)))\n    return groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string).flatten()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(','):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(2)\n        else:\n            raise ValueError('Invalid parenthesis pattern: %s' % paren)\n\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return [int(n) for n in range(1, len(paren_string) - 1)]\n    else:\n        return [int(n) for n in range(0, len(paren_string) - 1)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(n) for n in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    level = 0\n    for paren_string_char in paren_string.split(' ')[1:]:\n        level += 1\n        if level >= 3:\n            break\n    return level", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: should this be a function?\n    if not isinstance(paren_string, str):\n        return []\n    return parse_nested_parens(paren_string.split(','))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for paren_string_index, paren_string in enumerate(paren_string):\n        result.append(int(paren_string[paren_string_index + 1:]))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string.isdigit():\n        return []\n\n    if paren_string.isdigit():\n        return [int(paren_string)]\n\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            return parse_nested_parens(paren_string[1:])\n        elif paren_string[i] == ')':\n            return parse_nested_parens(paren_string[1:])\n\n    return []\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return []\n\n    # Parse the string.\n    groups = []\n\n    # For each group, add it to the list of groups.\n    for group in paren_string.split(','):\n        groups.append(int(group))\n\n    return groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_levels = []\n    for paren in paren_string:\n        paren_levels.append(int(paren.strip()))\n\n    return paren_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(n) for n in re.split(r\"[ ]+\", paren_string) if n > 0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    paren_string = paren_string.split(' ')\n    for paren in paren_string:\n        if paren not in ['(', ')']:\n            continue\n        nesting_levels.append(int(paren))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for i, j in enumerate(paren_string):\n        if i == j:\n            continue\n        if i == 0:\n            result.append(0)\n        else:\n            result.append(1)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    levels = []\n\n    for level in range(2, len(paren_string)):\n        level = int(level)\n        levels.append(level)\n\n    return levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Parse the paren string\n    paren_level = 0\n    paren_levels = []\n    paren_string = paren_string.split(' ')\n    while paren_level < len(paren_string):\n        paren_levels.append(int(paren_string[paren_level]))\n        paren_level += 1\n    return paren_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for paren in paren_string.split(' ')[1:]:\n        if paren in result:\n            result.append(result.index(paren))\n        else:\n            result.append(0)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for paren in paren_string.split(' '):\n        if paren[0]!= ')':\n            continue\n        depth = int(paren[1:])\n        result.append(depth)\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for paren_string_char in paren_string:\n        if paren_string_char == '(':\n            nesting_levels.append(0)\n        elif paren_string_char == ')':\n            nesting_levels.append(1)\n        elif paren_string_char == ',':\n            nesting_levels.append(2)\n        elif paren_string_char == ',':\n            nesting_levels.append(3)\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens: List[int] = []\n    for line in paren_string.splitlines():\n        if line.startswith('('):\n            nested_parens.append(0)\n        elif line.startswith(')'):\n            nested_parens.append(1)\n        elif line.startswith('('):\n            nested_parens.append(2)\n        elif line.startswith(')'):\n            nested_parens.append(3)\n        elif line.startswith('('):\n            nested_parens.append(4)\n        elif line.startswith(')'):\n            nested_parens.append(5)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return List()\n\n    nesting_levels = []\n    nesting_levels.extend(parse_nested_parens(paren_string))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens('(' + paren_string[1:] + ')')\n    elif paren_string.startswith(')'):\n        return parse_nested_parens('(' + paren_string[1:] + ')')\n    elif paren_string.startswith('(('):\n        return parse_nested_parens('((' + paren_string[1:] + '))')\n    elif paren_string.startswith(')'):\n        return parse_nested_parens('(' + paren_string[1:] + '))')\n    else:\n        raise ValueError(\"Expected '(' or ')' or '((' or ')' or '((' or ')' or '(' or ')'.\")\n\n    return List(0)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for n in range(0, len(paren_string)):\n        if paren_string[n].isdigit():\n            result.append(int(paren_string[n]))\n        elif paren_string[n] == ')':\n            result.append(n + 1)\n        elif paren_string[n] == ')':\n            result.append(n + 2)\n        elif paren_string[n] == ')':\n            result.append(n + 3)\n        else:\n            result.append(n + 4)\n\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = 0\n    for group in paren_string.split(' '):\n        if nesting_levels >= 2 and nesting_levels < 3:\n            nesting_levels += 1\n        else:\n            nesting_levels = 0\n    return [int(c) for c in group.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:])\n    else:\n        return []", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string.strip().startswith('('):\n        raise ValueError('Expected a single group for nested parens.')\n\n    return paren_string[2:]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for n in range(1, len(paren_string)):\n        if n < len(paren_string) - 1:\n            nested_parens.append(n + 1)\n        else:\n            nested_parens.append(n + 1)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for group in paren_string.split(' ')[1:]:\n        paren_groups.append(int(group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    if not paren_string:\n        return result\n    for paren in re.finditer(r'(', paren_string):\n        if not paren.group():\n            continue\n        result.append(int(paren.group()))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = [int(x) for x in paren_string.split(',')]\n    if nesting_levels == [None]:\n        return []\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for line in paren_string.splitlines():\n        if line.startswith('#'):\n            continue\n        if line.startswith('('):\n            nested_parens.append(1)\n        elif line.startswith(')'):\n            nested_parens.append(0)\n        else:\n            continue\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depth = 0\n    level = 0\n    for paren in paren_string.split(','):\n        if paren.startswith('('):\n            depth += 1\n            level += 1\n        elif paren.startswith(')'):\n            depth -= 1\n            level += 1\n    return [level, depth]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(map(int, paren_string.split(',')))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in re.split(r'\\s+', paren_string)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_level = 0\n    for line in paren_string.splitlines():\n        # nesting_level is the number of nested parentheses within the group\n        if nesting_level < 3 and line.startswith('('):\n            nesting_level += 1\n        elif nesting_level < 3 and line.startswith(')'):\n            nesting_level -= 1\n        elif nesting_level == 3:\n            continue\n        else:\n            nesting_level += 1\n\n    return [int(n) for n in nesting_level.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(group) for group in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith(\"(\"):\n        return []\n\n    if paren_string.startswith(\")\"):\n        return []\n\n    if paren_string.startswith(\"(\") and paren_string[len(\")\"):] == \")\" and paren_string[len(\")\") - 1 == \")\":\n        return []\n\n    if paren_string.startswith(\"(\") and paren_string[len(\")\"):] == \")\" and paren_string[len(\")\") - 1 == \")\" and paren_string[len(\")\") - 1 == \")\" and paren_string[len(\")\") - 1 == \")\":\n        return []\n\n    if paren_string.startswith(\"(\") and paren_string[len(\")\"):] == \")\" and paren_string[len(\")\") - 1 == \")\" and paren_string[len(\")\") - 1 == \")\" and paren_string[len(\")\") - 1 == \")\" and paren_string[len(\")\") - 1 == \"", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(map(int, paren_string.split(' ')))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # First level of nesting.\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:])\n\n    # Second level of nesting.\n    if paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:])\n\n    # Third level of nesting.\n    if paren_string.startswith('['):\n        return parse_nested_parens(paren_string[1:])\n\n    # Fourth level of nesting.\n    if paren_string.startswith(']'):\n        return parse_nested_parens(paren_string[1:])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting = 0\n    for group in paren_string.split(','):\n        nesting += 1\n        for nested_level in parse_nested_parens(group):\n            yield nesting", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:]).flatten()\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:]).flatten()\n    else:\n        return []", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = list()\n    for nesting_level in range(len(paren_string)):\n        if nesting_level > 0:\n            nesting_levels.append(nesting_level)\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(s) for s in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(line) for line in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    level = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '[':\n            level += 1\n        elif paren_string[i] == ']':\n            level -= 1\n    return level", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = []\n    for group in paren_string.split(','):\n        groups.append(int(group))\n    return groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # First, find all the nested parenthesis\n    nesting_levels = []\n    for paren_string in paren_string:\n        if paren_string.startswith(\"(\"):\n            nesting_levels.append(1)\n        elif paren_string.startswith(\")\"):\n            nesting_levels.append(0)\n        elif paren_string.startswith(\"*\"):\n            nesting_levels.append(0)\n        elif paren_string.startswith(\"/\"):\n            nesting_levels.append(0)\n        elif paren_string.startswith(\"(\"):\n            nesting_levels.append(1)\n        elif paren_string.startswith(\")\"):\n            nesting_levels.append(0)\n        elif paren_string.startswith(\"*\"):\n            nesting_levels.append(0)\n        elif paren_string.startswith(\"/\"):\n            nesting_levels.append(0)\n        else:\n            raise ValueError(\"paren_string: %s\" % paren_string)\n\n    # Now we can do the nesting\n    nesting_levels.sort()\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(s) for s in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_levels = []\n    paren_depth = 0\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            paren_levels.append(int(paren))\n        elif paren.startswith('('):\n            paren_levels.append(paren.split(')')[0])\n        elif paren.startswith(')'):\n            paren_depth += 1\n    return paren_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    try:\n        return [int(line.strip()) for line in open(paren_string, 'r').readlines()]\n    except IOError:\n        raise ValueError(\"Input string is not valid nested parens\")\n\n    return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.count('(') == 0 or paren_string.count(')') == 0:\n        return []\n    return list(parse_nested_parens(paren_string.split(',')))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    assert isinstance(paren_string, str)\n    assert len(paren_string) == 2\n    assert paren_string[0] == '('\n    assert paren_string[-1] == ')'\n\n    for nesting_level in range(0, len(paren_string)):\n        assert paren_string[nesting_level] == '('\n        assert paren_string[nesting_level + 1] == ')'\n        assert paren_string[nesting_level + 2] == ')'\n        assert paren_string[nesting_level + 3] == ')'\n        assert paren_string[nesting_level + 4] == ')'\n        assert paren_string[nesting_level + 5] == ')'\n        assert paren_string[nesting_level + 6] == ')'\n        assert paren_string[nesting_level + 7] == ')'\n        assert paren_string[nesting_level + 8] == ')'\n        assert paren_string[nesting_level + 9] == ')'\n        assert paren_string[nesting_level + 10] == ')'\n        assert paren_string[nesting_level + 11] == ')'\n        assert paren_string[nesting_level + 12] == ')'\n        assert paren_string[nesting_level + 13] == ')'", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(line.strip()) for line in paren_string.splitlines()]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Check for spaces in the input string.\n    if paren_string.endswith(' '):\n        # Check for a valid group.\n        if not paren_string.startswith('('):\n            raise ValueError('Invalid nested_parens: expected a valid group')\n        group = paren_string.split(' ')[0].strip()\n        if not group.startswith(')'):\n            raise ValueError('Invalid nested_parens: expected a valid group')\n        # Check for valid nested group.\n        if not group.startswith('('):\n            raise ValueError('Invalid nested_parens: expected a valid group')\n        group = group[1:]\n        # Check for valid nested group.\n        if not group.startswith(')'):\n            raise ValueError('Invalid nested_parens: expected a valid group')\n        group = group[1:]\n        # Check for valid nested group.\n        if not group.startswith('('):\n            raise ValueError('Invalid nested_parens: expected a valid group')\n        group = group[1:]\n        # Check for valid nested group.\n        if not group.startswith(')'):\n            raise ValueError('Invalid nested_parens: expected a valid group", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.endswith(')'):\n        return parse_nested_parens(paren_string[:-1])\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for paren in paren_string.split(' ')[1:-1]:\n        nesting_levels.append(int(paren))\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return List()\n\n    # Find the maximum number of levels of nesting.\n    # The maximum number of levels of nesting is the depth of the parenthesis.\n    # For example, if the string was (()()) then the maximum level of nesting is 3.\n    max_depth = 0\n    for level in range(0, len(paren_string)):\n        if paren_string[level] in ('(', ')'):\n            max_depth = max(max_depth, level + 1)\n\n    # Return the deepest level of nesting.\n    return max_depth\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string is None:\n        return []\n\n    # Paren is not a valid paren string\n    if paren_string.startswith('('):\n        paren_string = paren_string[len('('):]\n    if paren_string.startswith(')'):\n        paren_string = paren_string[len(')'):]\n\n    # Number of groups\n    nesting_level = 0\n    while paren_string.startswith('('):\n        nesting_level += 1\n        paren_string = paren_string[len('('):]\n    if paren_string.startswith(')'):\n        nesting_level -= 1\n        paren_string = paren_string[len(')'):]\n\n    # Number of spaces\n    spaces = 0\n    while paren_string.startswith(' '):\n        spaces += 1\n        paren_string = paren_string[len(' '):]\n    if spaces == 0:\n        nesting_level = 0\n    else:\n        nesting_level = int(nesting_level / spaces)\n\n    # Return the deepest level of nesting\n    return nesting_level.min()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return [int(paren_string[1:])]\n    elif paren_string.startswith('('):\n        return [parse_nested_parens(paren_string[1:])]\n    elif paren_string.startswith('('):\n        return [int(paren_string[1:])]\n    else:\n        raise ValueError(\"invalid nesting level\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for token in paren_string.split(' '):\n        level = token[0].lower()\n\n        if level not in nesting_levels:\n            nesting_levels.append(level)\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for level in range(0, len(paren_string)):\n        result.append(int(paren_string[level]))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.strip().startswith('('):\n        return parse_nested_parens(paren_string[2:])\n    else:\n        return []", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(n) for n in re.split(r'\\s*([\\w]+)\\s*([\\w]+)\\s*([\\w]+)', paren_string)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for nesting_level in range(1, 3):\n        nested_parens.extend(parse_nested_parens(paren_string[(nesting_level + 1) % len(paren_string)]))\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse(paren_string).values()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    with open(paren_string, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if not line:\n                continue\n            line = line.split(' ')\n            if len(line) < 2:\n                continue\n            result.append(int(line[0]))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse(paren_string).flatten()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return [int(x) for x in parse_nested_parens(x[1:]))\n    elif paren_string.startswith(')'):\n        return [int(x) for x in parse_nested_parens(x[1:])]\n    else:\n        raise ValueError('Parsing parens is not supported!')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for line in paren_string.splitlines():\n        # Parse nested parens\n        if line.startswith('('):\n            nesting_levels.append(1)\n        elif line.startswith(')'):\n            nesting_levels.append(0)\n        else:\n            continue\n\n        # Iterate over nested parens\n        for line in nesting_levels.splitlines():\n            # Remove parens\n            line = line.strip()\n            if line.startswith('('):\n                line = line[1:]\n            elif line.startswith(')'):\n                line = line[1:]\n\n            # Parse nested parens\n            if line.startswith('('):\n                nested_parens = line.split(',')\n                if len(nested_parens) == 2:\n                    nested_parens.pop()\n                    nested_parens = nested_parens[1:]\n                    nested_parens = nested_parens.split()\n                else:\n                    nested_parens = []\n            else:\n                nested_parens = line.split(',')\n            nested_parens.pop()\n            nested_parens = nested_parens.split()\n\n        # Parse nested parens\n        if len", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    nesting = 0\n    for pair in paren_string.split(' '):\n        if nesting > 0:\n            result.append(nesting)\n            nesting = 0\n        else:\n            if pair[0] == '(':\n                result.append(nesting)\n                nesting += 1\n                continue\n            elif pair[0] == ')':\n                result.append(nesting)\n                nesting += 1\n                continue\n            else:\n                result.append(nesting + 1)\n        nesting += 1\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return list(parse_nested_parens(paren_string[2:]))\n    elif paren_string.startswith(')'):\n        return list(parse_nested_parens(paren_string[2:]))\n    elif paren_string.startswith('('):\n        return list(parse_nested_parens(paren_string[1:-1]))\n    elif paren_string.startswith(')'):\n        return list(parse_nested_parens(paren_string[1:-1]))\n    elif paren_string.startswith('('):\n        return list(parse_nested_parens(paren_string[1:-1]))\n    elif paren_string.startswith('('):\n        return list(parse_nested_parens(paren_string[1:-1]))\n    else:\n        raise ValueError(\"Invalid nested parenthesis syntax: %s\" % paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(group) for group in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_levels = []\n    for paren in paren_string.split(' '):\n        if paren[0] not in ['(', ')']:\n            paren_levels.append(0)\n        elif paren[0] == ')':\n            paren_levels.append(1)\n        elif paren[0] == '(':\n            paren_levels.append(2)\n        elif paren[0] == ')':\n            paren_levels.append(3)\n    return paren_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse(paren_string).split(\",\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for pair in paren_string.split(' '):\n        if pair[0] not in [None, '('] and pair[1] not in [None, ')']:\n            result.append(pair[1])\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split(','):\n        # Skip whitespace\n        group = group.strip()\n        # Skip the first group\n        if group.startswith('('):\n            continue\n        # Skip the second group\n        if group.startswith(')'):\n            continue\n        # Skip the third group\n        if group.startswith('(('):\n            continue\n        # Skip the fourth group\n        if group.startswith(')'):\n            continue\n        # Add the group to the result\n        result.append(int(group))\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for paren in paren_string.split('('):\n        nesting_levels.append(int(paren))\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for line in paren_string.split(' '):\n        if line[0] == '(':\n            result.append(1)\n        elif line[0] == ')':\n            result.append(-1)\n        else:\n            raise ValueError('Expected'+ line +'instead')\n\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for group in paren_string:\n        nested_parens.append(int(group))\n\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.count('(') > 0:\n        return parse_nested_parens(paren_string[1:])\n\n    elif paren_string.count(')') > 0:\n        return parse_nested_parens(paren_string[:-1])\n\n    elif paren_string.count('[') > 0:\n        return parse_nested_parens(paren_string[1:-1])\n\n    elif paren_string.count(']') > 0:\n        return parse_nested_parens(paren_string[:-1])\n\n    elif paren_string.count('{') > 0:\n        return parse_nested_parens(paren_string[1:-1])\n\n    elif paren_string.count('}') > 0:\n        return parse_nested_parens(paren_string[:-1])\n\n    return []\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return []\n\n    for group in paren_string.split(',')[1:]:\n        depth = 0\n        while depth < depth_max:\n            if group == '()':\n                depth += 1\n            elif group == ')':\n                depth += 2\n            elif group == ')':\n                depth += 3\n            else:\n                depth += 4\n        return depth", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse(paren_string, depth=1)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nest_levels = []\n\n    for paren in paren_string.split(' '):\n        if paren is None:\n            return nest_levels\n\n        nest_level = int(paren)\n\n        if nest_level > 0:\n            nest_levels.append(nest_level)\n\n    return nest_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    depth = 0\n    for paren in paren_string.split(' ')[1:]:\n        if depth < 3:\n            depth += 1\n        elif depth == 3:\n            yield depth\n        else:\n            yield depth - 1\n    return depth", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    nesting_levels = []\n    for nesting_level in paren_string.split(' '):\n        if nesting_level == '(':\n            nesting_levels.append(1)\n        elif nesting_level == ')':\n            nesting_levels.append(0)\n        elif nesting_level in ['('] and nesting_levels.count(nesting_level) > 0:\n            result.append(nesting_levels.pop())\n        else:\n            raise ValueError(\"Invalid nested parenthesis string\")\n\n    return result", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(range(1, len(paren_string) - 1))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:])\n    else:\n        raise ValueError(\"Expected parenthesis in string '{}'\".format(paren_string))\n\n    return parse_nested_parens(paren_string[1:])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for level in range(0, len(paren_string), 1):\n        if paren_string[level] == ')':\n            nesting_levels.append(level + 1)\n        elif paren_string[level] == ')':\n            nesting_levels.append(level + 1)\n        elif paren_string[level] == ')':\n            nesting_levels.append(level + 1)\n        elif paren_string[level] == ')':\n            nesting_levels.append(level + 1)\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting = 0\n    for paren in paren_string.split(','):\n        if paren.isdigit():\n            nesting += 1\n        elif paren.startswith('('):\n            nesting += 1\n        elif paren.startswith(')'):\n            nesting += 1\n    return nesting", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_levels = []\n    for paren in paren_string.split(')')[1:]:\n        nested_levels.append(int(paren))\n    return nested_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = [int(p) for p in paren_string.split(',')]\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string == '(':\n        return [int(n) for n in parse_nested_parens('(')]\n    elif paren_string == ')':\n        return [int(n) for n in parse_nested_parens(')')]\n    elif paren_string == '(()':\n        return [int(n) for n in parse_nested_parens(')')]\n    elif paren_string == '(()':\n        return [int(n) for n in parse_nested_parens(')')]\n    elif paren_string == '(())':\n        return [int(n) for n in parse_nested_parens(')')]\n    elif paren_string == '(()':\n        return [int(n) for n in parse_nested_parens(')')]\n    elif paren_string == '(()':\n        return [int(n) for n in parse_nested_parens(')')]\n    else:\n        return []", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in re.split(r'[\\s]*([\\s]*)', paren_string)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_level = 0\n    nested_parens = []\n    for paren in paren_string.split(','):\n        if paren in nested_parens:\n            nested_parens.remove(paren)\n            nesting_level += 1\n        else:\n            nested_parens.append(paren)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return list(re.findall(r'([()])', paren_string, re.I))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n\n    if paren_string.startswith('('):\n        nesting_levels.append(0)\n    elif paren_string.startswith(')'):\n        nesting_levels.append(1)\n    elif paren_string.startswith('('):\n        nesting_levels.append(2)\n    elif paren_string.startswith(')'):\n        nesting_levels.append(3)\n    elif paren_string.startswith('('):\n        nesting_levels.append(4)\n    elif paren_string.startswith(')'):\n        nesting_levels.append(5)\n    else:\n        raise ValueError('Invalid paren string.')\n\n    return nesting_levels", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string.startswith('('):\n        return []\n\n    # TODO: remove this function when we are more familiar with Python 3.x.\n    if paren_string.startswith(')'):\n        return []\n\n    # We can only handle nesting up to the level of the first parenthesis.\n    nesting_level = 1\n    for paren in paren_string[1:]:\n        if paren.startswith('('):\n            nesting_level += 1\n        elif paren.startswith(')'):\n            break\n\n    # The first paren is the start of the nest.\n    return [int(x) for x in nesting_level:]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')).items()", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[1:].strip())\n\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[1:].strip())\n\n    else:\n        raise ValueError(\"invalid nested_parens string\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(n) for n in re.split(r'([\\s\\S]+)', paren_string)]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(l) for l in paren_string.split(',')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nesting_levels = []\n    for paren in paren_string.split(','):\n        nesting_levels.append(int(paren))\n    return nesting_levels"]]