[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Init\n    arr = sorted(array(arr), key=lambda item: item[0])\n\n    # Sort by the minimum number of ones\n    return sorted(arr, key=lambda item: len(item) == 1 and item[0] == 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0] > arr[1]:\n        return arr[2] - arr[0]\n    else:\n        return arr[2] - arr[1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # By default, sorting is based on number of ones\n    sorted_arr = sorted(arr, key=lambda item: (int(item) & 0xFFFFFFFF) == 0)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sort_array = []\n    if len(arr) == 0:\n        return\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if not isinstance(arr[i], int):\n            continue\n        if arr[i] == 0:\n            continue\n        if arr[i] > 2:\n            sort_array.append((arr[i], i))\n        else:\n            sort_array.append((arr[i], -1))\n    return sort_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            s += 1\n    if s == len(arr):\n        s = 0\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # If array contains multiple ones, you can assign key to index of the one that\n    # contains the first one in the array.\n    if len(arr) > 1:\n        if arr[0] == 0 and len(arr) > 1:\n            return arr[-1][-1]\n        else:\n            return arr[-1][-1]\n    # If array contains only one one, sort based on binary value.\n    if len(arr) == 1:\n        return arr[-1][-1]\n    else:\n        return sort_array(arr[-1][-1]) + sort_array(arr[-1])\n\n    # Otherwise, sort based on number of ones in the array.\n    elif len(arr) == 2:\n        return sort_array(arr[-2][-1]) + sort_array(arr[-1]) + sort_array(arr[-2])\n    elif len(arr) == 3:\n        return sort_array(arr[-3][-1]) + sort_array(arr[-1]) + sort_array(arr[-2])\n    elif len(arr) == 4:\n        return sort_array(arr[4][-1]) + sort_array(arr[-3][-1]) + sort_array(arr[-2]) + sort_array(arr[-4])\n\n    # Otherwise, sort based on decimal value.\n    else:\n        return sort_array([arr[i] for i", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        arr = [arr]\n\n    if isinstance(arr, int):\n        arr = sorted(arr, key=lambda x: x)\n    else:\n        # This is a list of floats\n        arr = sorted(arr, key=lambda x: x)\n\n    # Sort the integers according to the number of ones in the binary representation\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1:]:\n            arr[i], arr[i + 1] = arr[i], arr[i + 1]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        n = arr[i]\n        if n < 0:\n            n += 1\n        else:\n            i += 1\n        if n > len(arr):\n            i = 0\n            continue\n        if i == len(arr):\n            break\n        i += 1\n    return sorted(arr, key=lambda x : x[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort an array according to number of ones.\n    # Requires at least one sort method.\n    def sort_nones(arr):\n        \"\"\"\n        Sort an array according to number of ones.\n        \"\"\"\n        # Sort first, then sort by binary\n        if not isinstance(arr, tuple):\n            arr = [arr]\n        return sort_nones(arr[::-1])\n\n    # Apply the sort.\n    sort(arr, sort_nones) # TODO: override with better methods\n    return arr\n\n    # TODO: The below should be changed to a dict, but still need a for loop.\n    def sort_dict(arr):\n        \"\"\"\n        Sort an array according to a dictionary.\n        \"\"\"\n        # Sort first, then sort by binary.\n        if not isinstance(arr, dict):\n            arr = dict(sorted(arr.items()))\n        return sort_dict(arr[::-1])\n\n    def sort_failsafe(arr):\n        \"\"\"\n        sort an array according to a dictionary, if failed returns false.\n        \"\"\"\n        if isinstance(arr, dict) and not isinstance(arr, (tuple, list)):\n            if len(arr)!= len(arr):\n                return True\n            else:\n                return arr.keys() == sorted(arr, key=lambda x: x[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sorted(sorted(arr, key=lambda x: abs(x)), reverse=True)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 2:\n        raise ValueError('Not enough items to sort array')\n\n    for i in range(0, len(arr) - 1):\n        if i > 0:\n            sorted_arr[i] = arr[i]\n        else:\n            sorted_arr[i] = 0\n        sorted_arr[i] += sort_array(arr[i - 1])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert len(arr) == 0\n    assert len(arr) == 2\n    assert all(n >= 0 for n in range(len(arr)))\n    assert all(n <= len(arr) for n in range(len(arr)))\n    assert all(n == 0 for n in range(len(arr)))\n    assert all(n == 1 for n in range(len(arr)))\n    assert all(n == 2 for n in range(len(arr)))\n    assert all(n == 3 for n in range(len(arr)))\n    assert all(n == 4 for n in range(len(arr)))\n    assert all(n == 5 for n in range(len(arr)))\n    assert all(n == 6 for n in range(len(arr)))\n    assert all(n == 7 for n in range(len(arr)))\n    assert all(n == 8 for n in range(len(arr)))\n    assert all(n == 9 for n in range(len(arr)))\n    assert all(n == 10 for n in range(len(arr)))\n    assert all(n == 11 for n in range(len(arr)))\n    assert all(n == 12 for n in range(len(arr)))\n    assert all(n == 13 for n in range(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sort = lambda a, b: cmp(str(a), str(b))\n    arr = sorted(arr, key=sort)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 0\n    s = 0\n    while i < len(arr):\n        d = arr[i]\n        if d > 0:\n            s += 1\n        else:\n            i += 1\n        if i == len(arr):\n            break\n    if s == 0:\n        return\n    result = (i - 1) * s + arr[i]\n    return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n!= 0:\n        return [arr[x] for x in range(n)]\n\n    if n == 1:\n        return []\n    elif n == 2:\n        return sorted([arr[x] for x in range(n)])\n\n    if n == 3:\n        return sorted([arr[x] for x in range(n)])\n\n    if n == 4:\n        return sorted([arr[x] for x in range(n)])\n\n    if n == 5:\n        return sorted([arr[x] for x in range(n)])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # is there an array of non-negative integers that would have the same number of ones as the given array?\n    if len(arr)!= len(arr[0]):\n        raise ValueError('There must be %s elements in the array.' % len(arr))\n    # and the same for the values.\n    if not len(arr)!= len(arr[0]):\n        raise ValueError('There must be %s values in the array.' % len(arr))\n    # create a list of indexes\n    if len(arr) == 0:\n        return []\n    # and then we sort the array according to the first number in the list.\n    for i in range(0, len(arr)):\n        if arr[i] < arr[i-1]:\n            return sort_array(arr)\n        else:\n            return sort_array(arr[i-1])\n    # and the second number in the list.\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return sort_array(arr)\n        else:\n            return sort_array(arr[i-1])\n    # and so on.\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 1:\n        return False\n    if arr[0] <= 0 or arr[1] <= 0:\n        return False\n    if arr[0] >= len(arr) - 1:\n        return False\n    if arr[1] >= len(arr) - 2:\n        return False\n    if arr[0] <= arr[1]:\n        return arr[0] >= 0 and arr[0] <= arr[1]\n    if arr[1] <= arr[0]:\n        return arr[1] >= 0 and arr[1] <= arr[0]\n    return True", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr[0] == -1:\n        raise ValueError(\"First element must be positive!\")\n\n    if not arr:\n        return\n    for x in range(len(arr)):\n        if x % 2 == 0:\n            if arr[x] <= 0:\n                raise ValueError(\"First element must be positive!\")\n        else:\n            if arr[x] < 0:\n                raise ValueError(\"First element must be positive!\")\n\n    if len(arr) < 3:\n        raise ValueError(\"Array must be at least 3 elements\")\n\n    if len(arr) == 3:\n        return\n\n    if len(arr) == 2:\n        return\n    if len(arr) == 1:\n        return\n    if len(arr) == 0:\n        return\n    if arr[0] < 0 and arr[1] < 0:\n        return\n    if arr[0] > 0 and arr[1] > 0:\n        return\n    if arr[0] > 0 and arr[1] < 0:\n        return\n    if arr[0] > 0 and arr[1] == 0:\n        return\n    if arr[0] < 0 and arr[1] == 0:\n        return\n\n    if len(arr) == 2:\n        return\n    if len(arr) == 1:\n        return\n    if len(arr) == 0:\n        return\n    if arr[0] < 0 and arr[1] == 0:\n        return\n    if arr[0] >", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    while len(arr) > 1:\n        try:\n            if len(arr) == 1:\n                arr.sort()\n\n            elif len(arr) == 2:\n                arr.sort(key=lambda x: (x[0], x[1]))\n            else:\n                # XXX: instead of sorting based on decimal value\n                arr.sort(key=lambda x: (x[0], x[1])[0])\n                if len(x[0]) == 1:\n                    arr.sort(key=lambda x: x[1])\n                else:\n                    # XXX: instead of sorting based on binary value\n                    arr.sort(key=lambda x: x[0][1])\n                if len(x[1]) == 1:\n                    arr.sort(key=lambda x: x[1][1])\n                else:\n                    # XXX: instead of sorting based on binary value\n                    arr.sort(key=lambda x: x[1][0][1])\n                if len(x[2]) == 1:\n                    arr.sort(key=lambda x: x[2][1])\n                else:\n                    # XXX: instead of sorting based on binary value\n                    arr.sort(key=lambda x: x[2][0][1])\n                if len(x[3]) == 1:\n                    arr.sort(key=lambda x: x[3][1])\n                else:\n                    # XXX: instead of sorting based on binary value\n                    arr.sort(key=", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = 0\n    while s:\n        i = s / 2\n        k = s % 2\n        s = i * 2\n        if k:\n            if k == 0:\n                k = 1\n            else:\n                k = 0\n        if i == 0:\n            i = s\n        elif s == 0:\n            s = 0\n        else:\n            if s == i:\n                i = 0\n            else:\n                s = s - 1\n            i += 1\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    if len(arr) == 1:\n        return arr\n\n    if len(arr) == 2:\n        return arr\n    if len(arr) == 3:\n        if not len(arr) % 2:\n            return arr\n        if not len(arr) / 2:\n            return arr\n    if len(arr) == 4:\n        if not len(arr) % 2:\n            return arr\n        if not len(arr) / 2:\n            return arr\n    if len(arr) == 5:\n        if not len(arr) % 2:\n            return arr\n        if not len(arr) / 2:\n            return arr\n\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted = sorted(arr, key=lambda x: x + 1)\n    if not sorted:\n        return\n    return sorted(sorted, key=lambda x: x * -1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: abs(x))\n    return [(x % n) for n in range(len(arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr == []:\n        return\n    if len(arr)!= 1:\n        return\n    if len(arr[0]) == 1:\n        return\n    if len(arr[0]) == 0:\n        return\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return\n        if arr[i] == 1:\n            return\n        if arr[i] == 2:\n            return\n        if arr[i] == 3:\n            return\n    if len(arr) == 0:\n        return\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return\n        if arr[i] == 1:\n            return\n        if arr[i] == 2:\n            return\n        if arr[i] == 3:\n            return\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def __len__(arr):\n        return len(arr)\n\n    def __eq__(arr, other):\n        return isinstance(other, int) and (other >= 0 and other <= len(arr))\n\n    def __ne__(arr, other):\n        return not __eq__(arr, other)\n\n    def __lt__(arr, other):\n        return lower(arr) <= lower(other)\n\n    def __gt__(arr, other):\n        return upper(arr) >= upper(other)\n\n    def __le__(arr, other):\n        return lower(arr) >= lower(other)\n\n    def __ge__(arr, other):\n        return upper(arr) <= upper(other)\n\n    def __str__(self):\n        if len(self) == 0:\n            return ''\n        else:\n            return '(%d) %s' % (len(self), self)\n\n    def __repr__(self):\n        if len(self) == 0:\n            return ''\n        else:\n            return '(%d) %s' % (len(self), str(self))\n\n    def __hash__(self):\n        return hash((self,))\n\n    def __cmp__(self, other):\n        return cmp(lower(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[i] = arr[i] - 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        raise ValueError(\"array must have length greater than 1\")\n    return sort(n)[:, :n - 1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert(len(arr) == len(arr[0]))\n    for i in range(len(arr)):\n        if not(arr[i] in (0, 1)):\n            continue\n        for j in range(len(arr)):\n            if not(arr[j] in (0, 1)):\n                continue\n            if arr[i] < arr[j]:\n                if arr[j] > arr[i]:\n                    sort(arr, i, j)\n        else:\n            if arr[i] < arr[j]:\n                sort(arr, i, j)\n            else:\n                if arr[j] > arr[i]:\n                    sort(arr, i, j)\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        return array(arr).sort(key=lambda x: x)\n    except:\n        pass\n    return sorted(arr, key=lambda x: x.__version__)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = [None] * len(arr)\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result[i] = sort_digits(arr[i])\n        else:\n            result[i] = sort_digits(arr[i], 2) # unsigned\n\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort_by_value(v1, v2):\n        \"\"\"\n        An integer sorting function that converts the values of arrays\n        that have the same number of ones and then sorts them according to their\n        decimal values.\n\n        :param v1: first value\n        :param v2: second value\n        :return: tuple of new sorted values\n        \"\"\"\n        if type(v1) == type([]) and type(v2) == type:\n            v1 = v1 + v2\n        elif type(v1) == type([int]) and type(v2) == type:\n            v1 = (v1 - 0) * float(v2)\n        elif type(v1) == type([int]) and type(v2) == type:\n            v1 = (v1 - 1) * float(v2)\n        elif type(v1) == type([int]) and type(v2) == type:\n            v1 = (v1 - 2) * float(v2)\n        elif type(v1) == type([int]) and type(v2) == type:\n            v1 = (v1 - 3) * float(v2)\n        elif type(v1) == type([int]) and type(v2) == type:\n            v1 = (v1 - 4) * float(v2)\n        elif type(v1) == type", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 2:\n        raise TypeError('array must be of length 2 or greater.')\n    arr.sort(key=lambda x, y: cmp(x.__bases__[0], y))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Get the first element of the array.\n    i = 1\n    while i < len(arr):\n        if arr[i] == 0:\n            i += 1\n        else:\n            break\n    # Get the next element and return it.\n    j = i\n    while j < len(arr):\n        if arr[j] == 0:\n            j += 1\n        else:\n            break\n    # Update the array.\n    i = j\n    j = i\n    while j < len(arr):\n        if arr[j] == 0:\n            j += 1\n        else:\n            break\n\n    # Return the sorted array.\n    return sort_array(arr[:i] + arr[i+1:j] + arr[j+1:len(arr)])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n\n    arr.sort(key=lambda item: (item, item))\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_all(arr):\n        \"\"\"\n        Returns a sorted list that corresponds to an array of non-negative integers,\n        based on the number of ones in their binary representation in\n        ascending order.\n\n        It must be implemented like this:\n        >>> sort_all([1, 5, 2, 3, 4]) == [0, 1, 2, 3, 4]\n        >>> sort_all([-2, -3, -4, -5, -6]) == [0, 1, 2, 3, 4, 5]\n        \"\"\"\n        return sorted(arr, key=lambda x: x[0], reverse=True)\n    for i in range(len(arr)):\n        x = arr[i]\n        if x[0] == 1 and x[1] == 0:\n            sort_all([x, x, x, x])\n        else:\n            sort_all([x, x, x, x, x])\n    return sort_all(arr)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if arr[0] == 0:\n        return 0\n    if arr[0] == 1 and len(arr[1:]) == 1:\n        if arr[2] in [0, 1, 2]:\n            return arr[1]\n        else:\n            return arr[0] + arr[1] + arr[2]\n    elif arr[0] == 1 and len(arr[1:]) == 2:\n        if arr[2] in [0, 1, 2]:\n            return arr[1]\n        else:\n            return arr[0] + arr[2] + arr[1]\n    elif arr[0] == 1 and len(arr[1:]) == 3:\n        if arr[2] in [0, 1, 2]:\n            return arr[1]\n        else:\n            return arr[0] + arr[2] + arr[3]\n    elif arr[0] == 1 and len(arr[1:]) == 4:\n        if arr[2] in [0, 1, 2]:\n            return arr[1]\n        else:\n            return arr[0] + arr[2] + arr[3] + arr[4]\n    else:\n        return sort_array(arr[1:], 0)\n    return []\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 0:\n        return\n    if len(arr) == 0:\n        return\n    if len(arr)!= 4:\n        return\n    for i in range(4):\n        if len(arr[i]) > 0:\n            sort_array(arr[i])\n    for i in range(4):\n        if not arr[i]:\n            del arr[i]\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, np.ndarray):\n        return\n    if isinstance(arr, np.int):\n        return\n    # integer array\n    if isinstance(arr, float):\n        return\n    # double array\n    for i in range(len(arr)):\n        if not isinstance(arr[i], np.ndarray):\n            return\n        if len(arr[i]) == 2:\n            if arr[i][0] == 1:\n                return\n            elif arr[i][1] == 1:\n                return\n        # double array\n        if len(arr[i]) == 3:\n            if arr[i][0] == 1:\n                return\n            elif arr[i][1] == 1:\n                return\n            elif arr[i][2] == 1:\n                return\n        # double array\n        if len(arr[i]) == 4:\n            if arr[i][0] == 1:\n                return\n            elif arr[i][1] == 1:\n                return\n            elif arr[i][2] == 1:\n                return\n            elif arr[i][3] == 1:\n                return\n        # multiple array\n        if len(arr[i]) > 1:\n            return\n        else:\n            return\n    return\n\n    # sorting order must be descending\n    if len(arr) > 0:\n        return sorted(arr, key=lambda x:(x[1] < x[0]), reverse=True)\n    else:\n        return sorted(arr, key=lambda", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 2:\n        raise RuntimeError(\"Sorry, you should implement sort_array()\")\n\n    # Determine number of ones\n    if len(arr) == 2:\n        # Determine number of ones in binary\n        ones = (arr[0], arr[1])\n    else:\n        # If we have more than 2 elements, we'll have to determine number of ones\n        ones = (len(arr) / 2, arr[::-1])\n\n    # Determine number of ones in decimal\n    if len(arr) == 3:\n        # Determine number of ones in decimal\n        ones = (ord(arr[0]) * ord(arr[1]) + ord(arr[2]))\n\n    # Sort the array according to number of ones in binary\n    return sorted([int(x) for x in ones], key=sort_array)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(zip(*sorted(zip(range(len(arr)), range(len(arr))))))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort by number of ones\n    try:\n        k = 0\n        while arr[k:]:\n            if arr[k] == 0 :\n                k += 1\n                continue\n            # If the next one is not a zero, return\n            if arr[k] == 0:\n                return\n            k += 1\n        else:\n            # If the next one is a zero, return\n            return\n\n    except IndexError:\n        return\n\n    # Sort by the first non-zero\n    try:\n        k = 0\n        while arr[k:]:\n            if arr[k] == 0 :\n                k += 1\n                continue\n            # If the next one is not a zero, return\n            if arr[k] == 0:\n                return\n            k += 1\n        else:\n            # If the next one is a zero, return\n            return\n\n    except IndexError:\n        return\n\n    # Sort by the last non-zero\n    try:\n        k = len(arr) - 1\n        while arr[k:]:\n            if arr[k] == 0 :\n                k += 1\n                continue\n            # If the next one is not a zero, return\n            if arr[k] == 0:\n                return\n            k += 1\n        else:\n            # If the next one is a zero, return\n            return\n\n    except IndexError:\n        return\n\n    # The biggest one\n    try:\n        k = 0\n        while arr[k:]:\n            if arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, dict):\n        return sort_array(sorted(arr.items(), key=lambda x: x[0]))\n    elif isinstance(arr, (int, long)):\n        return sort_array(sorted(arr))\n    elif isinstance(arr, tuple):\n        return sort_array(sorted(arr))\n    elif isinstance(arr, list):\n        return sort_array(sorted(arr))\n    elif isinstance(arr, float):\n        return sort_array(sorted(arr, key=lambda x: x))\n    else:\n        return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = [0]\n    for i in range(0, len(arr), 4):\n        if (i + 2) % 4 == 0:\n            s.append(arr[i])\n        else:\n            s.append(arr[i + 2])\n        i += 2\n    return s\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort with binary value\n    return sorted([(ord(a) & 1) for a in arr], key=lambda a:a)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, list):\n        return sort_array(arr)\n    else:\n        return sorted(arr, key=sort_array)\n\n    # TODO(lazyparty):\n    #   This is redundant and needs to be replaced with a better solution.\n    #   Call sort(arr, key=sorted)\n\n    # TODO(r.m.perez):\n    #   This should be in sort_array.\n\n    # TODO(r.m.perez):\n    #   If you are looking for a solution that works with nested arrays, please\n    #   check out sort_array()\n\n    # TODO(k.s.tom):\n    #   Based on the current implementation of the sort function,\n    #   it should be possible to write a recursive implementation\n\n    # TODO(r.m.perez):\n    #   If you want to use different sorting algorithms on different\n    #   arrays, you can use the shuffle function.\n    #\n    # If you are interested in performing further research on the\n    # sort function, please send us your comments.\n\n    # TODO(k.s.tom):\n    #   Please be sure that this code works properly for numpy arrays,\n    #   since they are different types of arrays than a list of numbers.", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(arr):\n        \"\"\"\n        This function sorts an array of non-negative integers according to number of ones in\n        their binary representation in ascending order. It must be implemented like this:\n        >>> sort([1, 3, 5, 5, 2, 6, 6, 6, 2, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x.__class__.__name__.lower())\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sort_array(arr, key=lambda x: x.__class__.__name__.lower(), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i, j in enumerate(arr):\n        if i + j >= len(arr):\n            continue\n        if len(arr[i]) > len(arr[j]:):\n            i += 1\n        else:\n            j -= 1\n    return sorted(arr, key=lambda x: x.__getitem__(0), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 1:\n        return\n    if len(arr)!= 3:\n        return\n    while len(arr) < 3:\n        sorted_arr = sorted(arr, key=lambda x: (x[1] - x[2]) % 2, reverse=True)\n        if sorted_arr[0] < sorted_arr[1]:\n            sorted_arr = sorted_arr[0], sorted_arr[1]\n        else:\n            sorted_arr = sorted_arr[1], sorted_arr[0]\n        del arr[0], arr[1], arr[2]\n    for i in range(len(arr)):\n        arr[i] = (arr[i] - arr[i - 1]) % 2\n    return sorted(arr, key=lambda x: (x[1] - x[2]) % 2, reverse=True)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return\n    if isinstance(arr, list):\n        return sorted(arr)\n    else:\n        return [sorted(i) for i in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    elif arr[0] == 0:\n        return\n    else:\n        result = []\n        for n in range(1, len(arr)-1):\n            result.append(sorted(arr[n] + n*arr[(n-1)]))\n            if n == len(arr)-1:\n                result.pop(0)\n        return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    else:\n        # This function is expecting an array of non-negative integers.\n        for i in range(len(arr)):\n            arr[i] = sort_array(arr[i]) + 1\n        # This function is expecting an array of integers with one or more\n        # numbers on the end.\n        for i in range(len(arr)):\n            arr[i] = arr[i] + 1\n        # This function is expecting an array of integers.\n        for i in range(len(arr)):\n            arr[i] = arr[i] - 1\n        # This function is expecting an array of integers with no\n        # numbers on the end.\n        for i in range(len(arr)):\n            arr[i] = arr[i] - 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0])\n    if len(arr) == 0:\n        return\n    else:\n        return sorted([int(x) for x in arr], key=lambda x: x[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    return sorted(zip(*sorted(arr)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Sort the array according to number of ones.\n    for i in range(len(arr)):\n        if arr[i].isdigit():\n            if arr[i] in (0, 1):\n                sort_array(arr, i + 1)\n            else:\n                sort_array(arr, i + 2)\n\n    # Sort the array according to decimal value.\n    for i in range(len(arr)):\n        if arr[i] in (0, 2):\n            sort_array(arr, i + 3)\n        elif arr[i] in (2, 3):\n            sort_array(arr, i + 4)\n        elif arr[i] in (4, 5):\n            sort_array(arr, i + 5)\n        else:\n            print('Incorrect value')\n            exit()\n\n    # Save the sorted array into an array of integers.\n    return sorted(sorted(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 2:\n        raise ValueError('You must provide a nonnegative integer array')\n\n    if len(arr) == 1:\n        if arr[0] == 0:\n            arr.sort()\n            return\n        else:\n            # compute first value\n            k = 0\n            while k < len(arr):\n                k += arr[k]\n                if arr[k] == 0:\n                    break\n\n            # sort numbers by value\n            while k < len(arr):\n                if arr[k] > arr[k+1]:\n                    k += 1\n                else:\n                    break\n\n            # put in array with first value\n            arr[k] = k\n            for i in range(k, len(arr)-1):\n                arr[i] = arr[i] - 1\n\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sorted(range(1, len(arr) + 1), key=lambda x: x[0] - 1)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # look for one or more zeros\n    if len(arr) == 0:\n        raise ValueError(\"Array must have at least one non-negative integer.\")\n\n    # first sort by binary\n    for n in arr:\n        if n == 0:\n            continue\n        else:\n            # we are interested in the number of ones in the array\n            # so we can start the sorting by number of ones\n            if n < 0:\n                raise ValueError(\"Number of ones in array must be greater than zero.\")\n            else:\n                return sorted(arr[:n], key=lambda a: a + n), sorted(arr[1:], key=lambda a: a - n)\n\n    # second sort by decimal\n    for n in arr:\n        if n == 0:\n            continue\n        else:\n            # we are interested in the number of ones in the array\n            # so we can start the sorting by number of ones\n            if n < 0:\n                raise ValueError(\"Number of ones in array must be greater than zero.\")\n            else:\n                return sorted(arr[:n], key=lambda a: a * n), sorted(arr[1:], key=lambda a: a * -n)\n\n    # finally, sort by number of ones\n    return sorted(arr[:n], key=lambda a: a + n), sorted(arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return arr[0]\n    elif len(arr) == 3:\n        return arr[1]\n    elif len(arr) == 4:\n        return arr[2]\n    else:\n        raise ValueError('You must implement sort_array() for non-sorted array')\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert isinstance(arr, (list, tuple),),\n    for index, item in enumerate(arr):\n        assert isinstance(item, int),,\n        if index > 0:\n            for i in range(0, len(arr) - index):\n                assert item == 0,\n\n        if index == 0:\n            if item in (-1, 0):\n                raise ValueError('Number of ones in binary representation must be between 0 and '\n                               '(%d)' % len(arr))\n        else:\n            if item in (-1, 1):\n                raise ValueError('Number of ones in binary representation must be between '\n                               '0 and (%d)' % len(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.size == 0:\n        return\n    if arr.size == 1:\n        return\n    if arr.size > 1:\n        res = arr.sort()\n        return res\n    elif arr.size == 2:\n        return [arr[0], arr[1]]\n    elif arr.size == 3:\n        return [arr[0], arr[1, 1], arr[2]]\n    elif arr.size == 4:\n        return [arr[0], arr[1, 1, 1], arr[2, 1], arr[3]]\n    else:\n        raise ValueError(\"Sorry, not implemented.\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert len(arr) == len(arr)\n    if arr[0] == 1:\n        # If the first element is 0, that means the first element has\n        # no one in its binary representation.\n        arr[0] = 0\n    if arr[0] == 0:\n        # If the first element is 1, that means the first element has\n        # one in its binary representation.\n        arr[0] = 1\n    if arr[0] in range(0, len(arr) - 1):\n        # If the first element is equal to the index of the last element in\n        # the array, that means the first element is an exact match.\n        # In the original implementation, it would have been an\n        # element (index = 1) to the right of the last element.\n        arr[0] = arr[-1]\n    else:\n        # Otherwise, if the first element is equal to the index of the\n        # last element in the array, that means the first element is not an\n        # exact match.\n        arr[0] = arr[-1]\n    if arr[-1] in range(0, len(arr) - 1):\n        # If the last element is equal to the index of the first element in\n        # the array, that means the last element is an exact match.\n        # In the original implementation, it would", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    arr = sorted(arr, key=lambda x: (x[1], x[2]))\n    if len(arr) == len(arr[0]):\n        for i in range(len(arr[0])):\n            if arr[i][0] == arr[i][1]:\n                del arr[i]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            arr[i] = 1\n    if len(arr) == 0:\n        return\n    for i in range(len(arr)):\n        arr[i] = 0\n    if len(arr) == 1:\n        arr[len(arr) - 1] = arr[len(arr) - 1] + 1\n    if len(arr) == 2:\n        arr[len(arr) - 1] = arr[len(arr) - 1] + 1\n    if len(arr) == 3:\n        arr[len(arr) - 1] = arr[len(arr) - 1] + 1\n    if len(arr) == 4:\n        arr[len(arr) - 1] = arr[len(arr) - 1] + 1\n    if len(arr) == 5:\n        arr[len(arr) - 1] = arr[len(arr) - 1] + 1\n\n    return sorted(arr, key=lambda x: x[len(arr) - 1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, list):\n        res = []\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                res.append(arr[i])\n            else:\n                res.append(arr[i] + 1)\n        return res\n    else:\n        res = [arr[i] for i in range(len(arr))]\n        return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort by number of ones in binary representation\n    if len(arr) > 2:\n        order = 0\n        for i in range(len(arr)):\n            if ord(arr[i]) > ord(arr[i + 1]):\n                order = 1\n        if order == 0:\n            return sorted(arr, key=lambda i: ord(arr[i]) - ord(arr[i + 1]))\n            # order in descending order\n        else:\n            return sorted(arr, key=lambda i: ord(arr[i]) - ord(arr[i + 1]) + 1)\n            # order in ascending order\n    # Sort by decimal value\n    else:\n        order = 0\n        for i in range(len(arr)):\n            if arr[i] >= ord(arr[i + 1]):\n                order = 1\n        if order == 0:\n            return sorted(arr, key=lambda i: ord(arr[i]) - ord(arr[i + 1]))\n            # order in descending order\n        else:\n            return sorted(arr, key=lambda i: ord(arr[i]) - ord(arr[i + 1]) + 1)\n            # order in ascending order\n\n    # Add them together in descending order if they are the same\n    if order == 0:\n        return sorted(arr, key=lambda", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Use tuple sort (stable and compatible)\n    if isinstance(arr, tuple):\n        arr = [arr]\n    sort_key = lambda a, b: a.__lt__(b)\n        def compare(a, b):\n            return sort_key(a, b) if a.__lt__(b) else sort_key(b, a)\n\n    if len(arr) == 1:\n        return sort_key(arr[0], arr[0])\n    elif len(arr) == 2:\n        return sort_key(arr[1], arr[1])\n    elif len(arr) == 3:\n        return sort_key(arr[2], arr[2])\n    elif len(arr) == 4:\n        return sort_key(arr[3], arr[3])\n    else:\n        raise ValueError(\"Array length must be one or two\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    sorted = []\n    for i, j in enumerate(arr):\n        if i!= j:\n            # if i > j:\n            if i > j:\n                # if i < j:\n                #   sort_array(sorted)\n                sorted.append(j)\n                if j!= len(sorted) - 1:\n                    # if j > len(sorted) - 1:\n                    #     sort_array(sorted)\n                    sorted.append(j)\n\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return\n\n    if n <= 0:\n        return arr\n\n    if n % 2 == 0:\n        x = arr[n/2]\n        y = arr[n/2 + 1]\n        d = (x % y) * (y % x)\n        if d == 0:\n            d = 1\n        return [d, d, d, d]\n\n    if n % 2 == 1:\n        x = arr[n/2]\n        y = arr[n/2 + 1]\n        if (n/2 + 1) % 2 == 0:\n            d = (x % y) * (y % x)\n            if d == 0:\n                d = 1\n        else:\n            d = 1\n        return [d, d, d, d]\n\n    if n == 4:\n        return arr[:4]\n    if n == 3:\n        return arr[:3]\n    if n == 2:\n        return arr[:2]\n    return arr[:1]\n\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort in ascending order\n    if len(arr) <= 1:\n        return\n    elif len(arr) > 1:\n        return sort_array(arr[1:])\n    else:\n        return sort_array(arr[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        if len(arr) == 1:\n            return\n        return [arr[0]]\n    if len(arr) == 2:\n        if len(arr) == 2:\n            return [arr[0]]\n    if len(arr) == 3:\n        if len(arr) == 3:\n            return [arr[0]]\n    if len(arr) == 4:\n        if len(arr) == 4:\n            return [arr[0]]\n    return arr[:]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        arr = arr.copy()\n        arr = list(sorted(arr, key=lambda x:x.__b__.isdigit()))\n    except ValueError:\n        arr = []\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    sorted = []\n    for i in range(len(arr)):\n        if int(arr[i]) == 0:\n            continue\n        else:\n            # sort based on number of ones in decimal value\n            sorted.append(arr[i])\n            if len(sorted) == len(arr):\n                break\n    return sorted\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    try:\n        val = int(arr[-2:], 16)\n    except ValueError:\n        val = -1\n\n    return val - val % 2 * val", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from collections import defaultdict\n    n, _ = range(len(arr))\n    k, _ = defaultdict(int)\n    for i, j in enumerate(arr):\n        if i == 0:\n            # First one is not even, so skip it.\n            continue\n        if j == 0:\n            # Zero is a valid one; if not, skip it.\n            continue\n        # Number of one in binary representation.\n        i = int(i)\n        j = int(j)\n        if i == j:\n            # This is equal, so skip it.\n            continue\n        # Skip it if it is the first one.\n        if k[i] == k[j]:\n            continue\n        # Otherwise, insert it in the array.\n        k[str(k[i]) + str(k[j])] += 1\n        # Count the number of ones.\n        n += 1\n        # Otherwise, skip it.\n        else:\n            k[i] = k[j]\n            k[j] = n\n    return k", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= len(sorted(arr)):\n        return\n    while arr[-1:] == '.':\n        arr = arr[:-1]\n        break\n    if arr[-1] == '.':\n        arr = arr[:-1]\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            break\n    else:\n        raise ValueError(\"first element should be a non-negative integer\")\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n\n    if len(arr) == 3:\n        return arr[0] * arr[1] * arr[2]\n\n    if len(arr) == 4:\n        return arr[0] * arr[1] * arr[2] * arr[3]\n\n    return 0", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i, x in enumerate(arr):\n        result.append(x * 10**(i+1))\n    if len(result)!= 0:\n        result.sort()\n        return result\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    raise NotImplementedError(\n        \"sort_array() must be implemented in another class\")\n\n    def sort(arr, first):\n        for i in range(len(arr)):\n            if i in first:\n                arr[i] = arr[i] - 1\n            else:\n                arr[i] = arr[i] + 1\n        return arr\n\n    sort([1, 2, 3, 4, 5], 1)\n    sort([5, 2, 1, 1, 3, 4], 2)\n    sort([3, 1, 2, 2, 4, 5], 3)\n    sort([1, 3, 2, 4, 5], 4)\n    sort([5, 4, 2, 5, 6], 5)\n    sort([3, 4, 5, 5, 6], 6)\n    sort([5, 6, 4, 6, 7], 7)\n    sort([3, 4, 5, 6, 7], 8)\n    sort([5, 6, 7, 8, 9], 9)\n    sort([3, 4, 5, 6, 7], 10)\n    sort([5, 6, 7, 8, 9, 10], 11)\n    sort([3, 4, 5, 6, 7], 12)\n    sort([5, 6, 7, 8, 9, 10, 11],", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    # Sort by number of ones in binary representation.\n    return int(ord('N')*(len(arr)-1)/2) + int(ord('N')*(len(arr)-1)/2+1) * arr[-1:].lshift(len(arr)-1) + int(ord('N')*(len(arr)-1)/2+2) * arr[-2:].lshift(len(arr)-1) + int(ord('N')*(len(arr)-1)/2+3) * arr[-3:].lshift(len(arr)-1) + int(ord('N')*(len(arr)-1)/2+4) * arr[-4:].lshift(len(arr)-1) + int(ord('N')*(len(arr)-1)/2+5) * arr[-5:].lshift(len(arr)-1) + int(ord('N')*(len(arr)-1)/2+6) * arr[-6:].lshift(len(arr)-1) + int(ord('N')*(len(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    with open(sys.argv[1], 'r') as f:\n        for i in range(len(f)):\n            s = f.readline().strip()\n            if s.startswith('##') or s == '':\n                continue\n            for j in range(len(s)):\n                if ord(s[j]) == ord('0'):\n                    j += 1\n                elif ord(s[j]) == ord('1'):\n                    j += 2\n                elif ord(s[j]) == ord('2'):\n                    j += 3\n                elif ord(s[j]) == ord('3'):\n                    j += 4\n                else:\n                    continue\n                if ord(s[j]) == ord('4'):\n                    j += 5\n                elif ord(s[j]) == ord('5'):\n                    j += 6\n                else:\n                    continue\n            j += 1\n            if j == len(arr):\n                break\n        return sorted(arr, key=sort_array)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda n: n in [1, 2, 3, 4, 5, 6])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # TODO instead of a list, it could be a dict\n    if not isinstance(arr, list):\n        raise TypeError(\"arr must be list\")\n\n    if len(arr) == 0:\n        return\n    if len(arr) == 1 and not isinstance(arr[0], int):\n        return\n    if len(arr) == 1 and isinstance(arr[0], int) and not isinstance(arr[0], int):\n        if isinstance(arr[0], float):\n            arr = [arr]\n        else:\n            arr = [float(str(arr[0]))]\n\n    for i in range(len(arr)):\n        if len(arr) - i > 1:\n            k = i\n            while k < len(arr) - 1 and arr[k] == arr[k + 1]:\n                k += 1\n        else:\n            k = i\n            while k > -1 and arr[k] == arr[k - 1]:\n                k -= 1\n\n    if len(arr) - i > 1:\n        k = i\n        while k < len(arr) - 1 and not arr[k] == arr[k + 1]:\n            k += 1\n    if len(arr) - i > 1:\n        k = i\n        while not arr[k] == arr[k + 1]:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO\n    raise NotImplementedError(\"SortArray must be implemented like this: sort_array\")\n\n    def sort_dict(d):\n        \"\"\"\n        Sort a dict by the values in its keys.\n\n        :param dict d: Dictionary to sort.\n        :return dict: Sorted dictionary\n        \"\"\"\n        return sorted([d[key] for key in sorted(d.keys())], key=lambda x: x[0])\n\n    def sort_arrays(arr, lvl=0):\n        \"\"\"\n        Sorts a list of arrays according to the values in their keys.\n\n        :param array arr: List of arrays to sort.\n        :param int lvl: Ordering level to use.\n        :return dict: Sorted list of arrays\n        \"\"\"\n        if lvl < 0:\n            lvl = len(arr)\n\n        if not isinstance(arr, list):\n            return []\n\n        # TODO\n        raise NotImplementedError(\"SortArrays must be implemented like this: sort_arrays\")\n\n    def sort_binary(arr, lvl=0):\n        \"\"\"\n        Sorts a list of binary arrays according to the values in their keys.\n\n        :param list arr: List of binary arrays to sort.\n        :param int lvl: Ordering level to use.\n        :return dict: Sorted list of binary arrays\n        \"\"\"\n        if lvl <", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, int):\n        return arr, arr\n    elif isinstance(arr, list):\n        return sort_array(arr)\n    else:\n        raise Exception(\"not a real array\")\n\n    if len(arr) == 0:\n        return None, None\n    else:\n        if len(arr) == 1:\n            if arr[0] == 0:\n                return arr, arr\n            else:\n                return arr, arr\n        elif len(arr) == 2:\n            if arr[0] == 1:\n                return arr, arr[1]\n            else:\n                return arr, arr\n        elif len(arr) == 3:\n            if arr[0] == 2:\n                return arr, arr[1][0], arr[1][1]\n            else:\n                return arr, arr[0], arr[1][0], arr[1][1]\n        elif len(arr) == 4:\n            if arr[0] == 2:\n                return arr, arr[1][0], arr[1][1], arr[1][2]\n            else:\n                return arr, arr[0], arr[1][0], arr[1][1], arr[1][2]\n        elif len(arr) == 5:\n            if arr[0] == 2:\n                return arr, arr[1][0], arr[1][1], arr[1][2], arr[1][3]\n            else:\n                return arr, arr[0], arr[1][0], arr[1][1], arr[1][2], arr[1][3]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, list):\n        arr = [arr]\n    return sorted([int(x) for x in arr], key=lambda item: item[0].lower() == item[1].lower())\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort first on the first one\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sort_array(arr, 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(n):\n        try:\n            return int(n) - 1\n        except ValueError:\n            return 0\n\n    return sort(range(len(arr)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 0:\n        if isinstance(arr, list):\n            if len(arr)!= len(arr[-1]):\n                raise ValueError('Sorts must be non-negative.')\n            for i in range(len(arr)):\n                try:\n                    sort_number(arr[i])\n                except ValueError:\n                    raise ValueError('Sorts must be non-negative.')\n            sort_array(arr[1:])\n    else:\n        sort_array([0, 1, 2, 3, 4])\n    sort_array([2, 3, 4, 5, 6])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 0:\n        return arr\n\n    # First we order the array by number of ones\n    sorted_arr = sorted(arr, key=lambda x: x[0])\n    if sorted_arr!= sorted(arr):\n        # The array is sorted in the right order.\n        # We have to order the array again by number of ones\n        sorted_arr = sorted(arr, key=lambda x: x[0])\n\n    return sorted_arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 0:\n        i = 0\n        while i < len(arr):\n            if arr[i] >= 2:\n                i += 1\n            else:\n                break\n        return sorted(arr, key=lambda x:x[1])\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError('Array must be a list')\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        if arr[i] > ord(arr[i]):\n            # if i is the last value, it is a negative number\n            continue\n        sorted_arr = sorted(sorted(arr, key=int))\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, int):\n        raise ValueError(\"Array must be integer.\")\n\n    n = len(arr)\n    n = n % 2 == 0 and n / 2 - 1 or n\n    d = 0\n    for i in range(n):\n        if i % 2:\n            d += 1\n        else:\n            d += 1\n    d = d / 2\n    if d == 0:\n        raise ValueError(\"Array must have more than one non-zero element.\")\n\n    arr = sort_array(arr)\n    arr[0] = d - 1\n    arr[d - 1] = d\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Before we begin this function, we need to sort the list in ascending order.\n    if len(arr) == 0:\n        return\n    # As we are sorting, we have to split up the list into two lists.\n    lower = sorted(set(arr))\n    upper = sorted(set(array(arr)))\n    # Sort the lower list first.\n    for i in range(len(lower)):\n        yield lower[i]\n        lower.pop(i)\n    # Sort the upper list first.\n    for i in range(len(upper)):\n        yield upper[i]\n        upper.pop(i)\n    # Now we can now return the sorted lists.\n    return sorted(lower), sorted(upper)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        arr = [arr]\n\n    return sorted(zip(*arr), key=lambda i: i[0])\n\n    def item_increment(x, y):\n        if x == y:\n            return 1\n        else:\n            return 0\n\n    if len(arr) <= 1:\n        return 0\n\n    return item_increment(0, len(arr) - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    arr.sort(key=lambda x: x, reverse=True)\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    # if the array is not sorted, return the original array\n    if not sort(arr, key=lambda k: k[0], reverse=True):\n        return arr\n    # if the array is sorted, remove duplicate values and sort\n    if sort(arr, key=lambda k: k[0], reverse=True) == sort(arr, key=lambda k: k[0], reverse=False):\n        arr = [arr[len(k)] for k in sorted(arr)]\n    # remove duplicates and sort\n    arr = [sorted(k) for k in sorted(arr)]\n    # and, if required, sort again\n    if sort(arr, key=lambda k: k[0], reverse=True) == sort(arr, key=lambda k: k[0], reverse=False):\n        arr = [sorted(k) for k in sorted(arr)]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # For the above example, sort array with binary to decimal\n    if len(arr) == 2:\n        return list(sorted(sorted(arr[0:2])))\n    else:\n        return list(sorted(sorted(arr[::-1])))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [\n        x for x in arr if x in range(0, len(arr) - 1)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert len(arr) >= 1\n\n    # if array is empty, return\n    if len(arr) == 0:\n        return\n\n    # iterate to all the pairs in ascending order\n    while len(arr) > 1:\n        # iterate all pairs according to number of ones\n        for i in range(len(arr)):\n            # if value is non zero\n            if arr[i][0]!= 0:\n                # if value is not zero\n                if arr[i][1]!= 0:\n                    # compare values\n                    if abs(arr[i][0] - arr[i][1]) > 0:\n                        # compare values\n                        break\n\n    # return sorted array\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = []\n    while len(a) < len(arr):\n        a.append(arr[int(i + (arr[-1] - arr[-2]))])\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_number(a):\n        if a < 0:\n            return False\n        if a == 0:\n            return True\n        return 0 <= a\n\n    for i in range(len(arr) - 1):\n        if arr[i] < 0:\n            continue\n        if is_number(arr[i]):\n            a = arr[i]\n        else:\n            a = 0\n        if a < 0:\n            if a == 0:\n                a = a\n                del arr[i]\n            else:\n                a += 1\n                del arr[i]\n    arr.sort(key=lambda x, y: y * x - 1)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    arr = sorted(arr, key=lambda x: -x[0])\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Invalid number of ones in array\")\n\n    # The length of arr\n    length = len(arr)\n\n    # Now we try to sort arr based on numbers of ones in the binary representation.\n    sorted_arr = []\n    for i in range(length):\n        for j in range(length):\n            if arr[i] == arr[j]:\n                sorted_arr.append(i)\n                sorted_arr.append(j)\n                break\n\n    # Check if we found an equal order\n    for i, j in zip(sorted_arr, sorted_arr[1:]):\n        if (arr[i] - arr[j]) == 0:\n            break\n    else:\n        raise ValueError(\"Array must have exactly same number of ones in their binary representation\")\n\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 3:\n        return\n\n    if len(arr) == 4:\n        return (sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2))\n\n    if len(arr) == 5:\n        return (sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2))\n\n    if len(arr) == 6:\n        return (sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2))\n\n    for i, _ in enumerate(sorted(arr)[1:]):\n        if len(arr[i]) == 1:\n            i = i + 2\n    for i, _ in enumerate(sorted(arr)[:-1]):\n        if len(arr[i]) == 1:\n            i = i - 2\n    return sorted(sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2) + sorted([] * 2) +", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i, j = 0, len(arr)\n    while i + j < len(arr):\n        if arr[i] > arr[j]:\n            i += 1\n        elif arr[i] < arr[j]:\n            j += 1\n    return arr, i, j", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 0:\n        return\n    return [x for x in arr if x >= 0 and x!= 0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            sorted_arr = arr[:i]\n            arr[:i] = arr[i + 1:]\n            sorted_arr[2:] = arr[2:]\n            sorted_arr[3:] = arr[3:]\n        else:\n            sorted_arr = arr[:i]\n            arr[:i] = arr[i + 1:]\n            sorted_arr[2:] = arr[2:]\n            sorted_arr[3:] = arr[3:]\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # We sort the array of non-negative integers based on number of ones in\n    # their binary representation.\n    # The integer array has same number of ones than the array of numbers.\n    # If there are more than one odd number in array, sort based on the\n    # value of the even number.\n    # Otherwise, sort based on the even number.\n    # The same applies to the array of non-negative integers.\n    if len(arr)!= len(arr):\n        raise ValueError('Expected number of elements to be same as number of elements')\n    # Sort based on the value of the even number.\n    if not arr[arr.index(0) + 1:]:\n        raise ValueError('Expected number of elements to be same as number of elements')\n    # Sort based on the value of the even number.\n    if not arr[arr.index(0) + 2:]:\n        raise ValueError('Expected number of elements to be same as number of elements')\n    # If the number of elements in array is less than the number of elements in array', return the result\n    if len(arr) < len(arr):\n        return arr\n\n    # Sort the array based on the value of the even number.\n    if not arr[arr.index(0", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sort([int(x) for x in arr if x == 0], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort according to number of ones in binary representation\n    new_sort = 0\n    for i in arr:\n        if (i == 0 or i == 1) and new_sort == 0:\n            new_sort = 1\n        else:\n            new_sort *= 2\n    return new_sort\n\n    # sort according to decimal value\n    new_sort = 0\n    for i in arr:\n        if (i == 0 or i == 1) and new_sort == 0:\n            new_sort = 3\n        else:\n            new_sort *= 2\n    return new_sort", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = []\n    for i in range(len(arr)-1):\n        if arr[i]!= 0:\n            s.append(i)\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = 0\n    while len(arr) > 0:\n        j = int(arr[-1])\n        if j == 0 or j == len(arr)-1:\n            return arr[:]\n        else:\n            s += 1\n        arr = arr[:j]\n    return arr[:s]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import numpy as np\n    from scipy import ndindex\n\n    keys = np.keys(arr)\n    for k in keys:\n        i = arr[k].sum()\n        if i < 0 and k[0] == ord('.'):\n            if k[-1] == ord('.'):\n                k[-1] = k[-1] - 1\n            else:\n                k[-1] = k[-1] + 1\n\n        if i > 0:\n            arr[k] = arr[k] - 1\n        else:\n            arr[k] = arr[k] + 1\n\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        return\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sorted([int(i) for i in arr], key=lambda x: x[-1:])\n\n    for i in xrange(len(arr)):\n        if not isinstance(arr[i], int):\n            continue\n        else:\n            if arr[i] < 0:\n                sort(arr[i], key=lambda x: x[-1:])\n            else:\n                sort(arr[i], key=lambda x: x[-1:])</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import re\n    l = len(arr) # Number of the elements\n    if l > 0:\n        if arr[0] in range(0, l - 1):\n            return arr[0:i + 1]\n        else:\n            return arr\n    return arr[0:i + l]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [(i, j) for (i, j) in zip(arr, list(range(len(arr)) - 1))]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, int):\n        arr = arr.to_bytes('ascii')\n    elif isinstance(arr, long):\n        arr = arr.to_bytes('ascii', errors='ignore')\n    else:\n        raise TypeError(\"arr must be an integer or a long\")\n    return sorted([arr[o:o+1] for o in range(0, len(arr), len(arr))], key=lambda x: x[::-1])[0]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Number of ones in the array\n    #   =>  -  +  +  +  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        raise ValueError(\"Expected list to sort\")\n\n    for index, value in enumerate(arr):\n        if index == 0:\n            continue\n        if not isinstance(value, (int, long)):\n            raise ValueError(\"Invalid number of ones in array\")\n\n        if not isinstance(value, bool):\n            raise ValueError(\"Invalid number of ones in array\")\n\n        if value < 0:\n            continue\n\n        if value in range(0, len(arr) - 1):\n            # start the first element\n            index = index + 1\n            value = arr[index]\n        elif index == len(arr) - 1:\n            # end the last element\n            index = index - 1\n            value = arr[index]\n        else:\n            raise ValueError(\"Range of numbers must be in range [0, %d]\" % (len(arr)))\n        if value < value:\n            continue\n\n        # for next element\n        index += 1\n        if index > len(arr) - 1:\n            index = len(arr) - 1\n        value = arr[index]\n\n    return sorted(value, key=lambda x: x, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if type(arr)!= type([]):\n        raise ValueError(\"Expected array of non-negative integers.\")\n    if len(arr)!= len([int(x) for x in range(len(arr))]):\n        raise ValueError(\"Expected at least one non-negative integer and \"\n                             \"only %d integers in array.\" % len(arr))\n    return sorted(arr, key=lambda x: x[0] + 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted([int(x) for x in arr], key=operator.itemgetter(0))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = []\n    for i in range(len(arr)):\n        sorted_arr.append(arr[i] - arr[i])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) > 2:\n        return [arr[1]] + sort_array(arr[2:])\n    elif len(arr) == 2:\n        return [arr[1]] + sort_array([arr[2]])\n    else:\n        return sort_array(arr[0:2])\n\n    if len(arr) > 2:\n        sort_array(arr[1:2])\n    else:\n        sort_array(arr)\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"arr must be list, got %r\" % str(arr))\n    for i in range(len(arr)):\n        if not isinstance(arr[i], int):\n            raise TypeError(\"arr must be integer, got %r\" % str(arr))\n        for j in range(i, len(arr)):\n            if arr[j]!= arr[i]:\n                continue\n            if j == i:\n                continue\n            if j == 0:\n                sort_num = i\n                sort_num += 1\n            else:\n                sort_num = j\n            # convert integer to decimal number\n                sort_num = str(round(int(arr[sort_num] + 1, 2), 2))\n            # sort\n            if sort_num!= i and sort_num!= len(arr) - 1:\n                arr[sort_num] = arr[sort_num - 1]\n                sort_num += 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    sorted_arr = [int(n) for n in arr]\n    for i, j in enumerate(sorted_arr):\n        sorted_arr[i] = sorted_arr[j]\n        if sorted_arr[i] == sorted_arr[j]:\n            continue\n        if sorted_arr[i] < sorted_arr[j]:\n            sorted_arr[i] = sorted_arr[j]\n        if sorted_arr[i] > sorted_arr[j]:\n            sorted_arr[j] = sorted_arr[i]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return\n    elif n <= 1:\n        return\n    else:\n        if n % 2:\n            m = n / 2\n        else:\n            m = n\n        while n - m >= 1:\n            arr[m] = arr[m - 1]\n        return\n    sort = [(i, i) for i in sorted(arr)]\n    return sort", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0] + x[1])\n    return [int(arr[i]) for i in range(len(arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1] and arr[i] == arr[i + 2]:\n            arr[i + 1] = arr[i]\n        else:\n            arr[i] = arr[i] + 1\n    for i in range(n):\n        if arr[i] < arr[i] + 1:\n            if arr[i] > 0:\n                del arr[i]\n            else:\n                del arr[i]\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from functools import partial\n    def sort(list, num1, num2, ascending=False):\n        \"\"\"\n        Sort an array of non-negative integers according to number of ones in\n        their binary representation in ascending order. If ascending is true,\n        return a new list ordered by number of ones.\n        If ascending is false, return the previous list.\n        \"\"\"\n        if ascending:\n            return list\n        else:\n            return partial(list.sort, list.items(list))\n\n    sort_keys = [(int(num), num) for num in arr.items() if num]\n\n    new_arr = []\n    for num, key in sort_keys:\n        new_arr.append(num)\n        if num > 0:\n            new_arr.append(key + 1)\n    return new_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort(self, arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        The array must be of the form:\n          arr[0]\n        where the element in the array is the number of ones in its binary\n        representation and the elements in the array are sorted in ascending\n        order with respect to this number.\n        The sorting function must be implemented like this:\n        >>> sort([1, 5, 2, 3, 4, 5])\n        2\n        >>> sort([-2, -3, -4, -5, -6])\n        6\n        \"\"\"\n        ret = []\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                ret.append(i)\n            else:\n                ret.append(i)\n        return ret\n\n    def sort_by_multiplicity(self, arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n        The array must be of the form:\n          arr[0]\n        where the element in the array is the number of ones in its binary\n        representation and the elements in the array are sorted in ascending\n        order with respect to this number", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Work out number of ones in the array.\n    count = 0\n    for i in arr:\n        count += 1\n        if i >= 0:\n            break\n\n    # Sort based on number of ones.\n    return count < count + 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # note: it will raise an error if array is not sorted\n    if len(arr)!= 3:\n        raise ValueError(\"Array is not sorted.\")\n\n    for i, x in enumerate(arr):\n        if i == 0:\n            break\n        else:\n            if i > 0:\n                x = x * (x+1)\n            else:\n                x = x\n\n    # keep the last element\n    for i in range(len(arr)):\n        arr[i] = arr[i-1]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(range(len(arr)) for arr in arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return sort_array(arr[1:])\n    if len(arr) == 3:\n        return sort_array(sorted(arr[:3]))\n    else:\n        raise IndexError(\"Array must have at least 2 elements.\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, int):\n        arr = arr.tostring()\n    for idx, item in enumerate(arr, 1):\n        if idx % 2:\n            if idx > 0:\n                if idx < len(arr) - 1:\n                    item = arr[idx]\n                else:\n                    item = arr[-1]\n            else:\n                if idx > 0:\n                    if idx < len(arr) - 1:\n                        item = arr[idx]\n                    else:\n                        item = arr[-1]\n        else:\n            if idx > 0:\n                if idx < len(arr) - 1:\n                    item = arr[idx]\n                else:\n                    item = arr[-1]\n            else:\n                if idx > 0:\n                    item = arr[idx]\n        if item < 0:\n            item = arr[idx]\n        if item > 0:\n            item = arr[idx + 1]\n        if idx == len(arr) - 1:\n            del arr[idx]\n        arr[idx] = item\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # [[0, 1, 2, 3, 4]] == [[6, -5, -4, -3, -2], [-5, -4, -3, -2], [6, -5, -4, -3, -2], [-5, -4, -3, -2], [-6, -5, -4, -3, -2], [-6, -5, -4, -3, -2], [-5, -4, -3, -2], [-3, -2, -1, -1], [-1, -1, -2, -1, -1], [-2, -1, -2, -1, -1], [-1, -1, -2, -1, -1], [-2, -1, -2, -1, -1], [-2, -1, -2, -1, -1], [-3, -2, -1, -1], [-1, -1, -2, -1, -1], [-3, -2, -1, -1], [-3, -2, -1, -1], [6, -5, -4, -3, -2], [-6, -5, -4, -3, -2], [-6, -5, -4, -3, -2], [-6, -5, -4, -3, -2], [6, -5, -4,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return 0 <= i < len(arr) and arr[i] < arr[i+1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort(arr, sort_value):\n        \"\"\"\n        sort array according to specified value.\n\n        :param arr: array of non-negative integers.\n        :type arr: list of int\n        :param sort_value: one of sorted values.\n        :type sort_value: int\n        :return: sorted array.\n        \"\"\"\n        try:\n            return list(map(sort, arr))\n        except IndexError:\n            return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if arr[0] == 1:\n        return arr[0]\n    for i in range(len(arr) - 1):\n        for j in range(i, len(arr) - 1):\n            if arr[j] > arr[j - 1] and arr[j - 1] < arr[i]:\n                if arr[i] > arr[j] and arr[j] < arr[i]:\n                    arr[j] = arr[i]\n                else:\n                    arr[j] = arr[i]\n    arr = sorted(arr, key=lambda x: x, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if isinstance(arr, int):\n        return sorted(arr, key=lambda x: x)\n    else:\n        return sorted(arr, key=lambda x: x - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    elif len(arr) == 1:\n        if sorted_array.get(arr[0]) == arr[0]:\n            return\n        else:\n            return sorted_array.get(arr[0])\n    elif len(arr) == 2:\n        if sorted_array.get(arr[0]) == arr[0]:\n            return\n        else:\n            return sorted_array.get(arr[1])\n    elif len(arr) == 3:\n        if sorted_array.get(arr[0]) == arr[0]:\n            return\n        else:\n            return sorted_array.get(arr[1])\n    else:\n        return sorted_array.get(arr[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, (list, tuple, bool)):\n        raise TypeError(\"Expected an array of non-negative integers.\")\n    if len(arr)!= len(arr):\n        raise ValueError(\"Incorrect number of elements in array.\")\n    if not any([len(i) > len(j) for i, j in zip(*arr)]):\n        raise ValueError(\"Incorrect array sizes.\")\n\n    def sort(arr, nums):\n        \"\"\"\n        Sort an array according to its number of ones in binary representation. This\n        is in ascending order.\n        \"\"\"\n        if not isinstance(arr, list):\n            arr = [arr]\n        def is_num_ones(i):\n            return i == 0\n        def sorted_arr(arr):\n            if not any([len(i) > len(j) for i, j in zip(*arr)]):\n                return sorted(arr)\n            sorted_arr.append(sorted(arr)[:nums - 1])\n            sorted_arr[nums - 1] = arr[nums - 1]\n            return sorted_arr\n\n        if not isinstance(nums, list):\n            nums = nums.", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            if i % 2 == 0:\n                if arr[i] > arr[i + 1] and arr[i] < arr[i + 2]:\n                    arr[i] = arr[i + 1]\n                if arr[i] > arr[i + 2]:\n                    arr[i] = arr[i + 2 + 1]\n                if arr[i] > arr[i + 3]:\n                    arr[i] = arr[i + 3 + 1]\n            else:\n                if arr[i] > arr[i + 2]:\n                    arr[i] = arr[i + 2 + 1]\n                if arr[i] > arr[i + 3]:\n                    arr[i] = arr[i + 3 + 1]\n    return sorted(arr, key=lambda x: x[1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    print('Sorting number of ones in binary')\n\n    assert len(arr) == len(arr.tolist())\n    if arr.tolist()[0] == 0:\n        if len(arr) > 1:\n            sort_array(arr[1:])\n    else:\n        if len(arr) > 1:\n            sort_array(arr[0:-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return sorted(arr)[0]\n    if len(arr) == 3:\n        return sorted(arr)[1]\n    if len(arr) == 4:\n        return sorted(arr)[2]\n    if len(arr) == 5:\n        return sorted(arr)[3]\n\n    return sorted(arr, key=lambda x: x[1])[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_compare(a, b):\n        \"\"\"\n        Compares two integers a and b according to their binary representation.\n\n        The binary representations of a and b are compared with the binary\n        representation of their least significant digits. If the digits are\n        different, the least significant digit is greater, else they are\n        equal.\n\n        returns:\n            bool\n            True if the binary representations are the same,\n            else False.\n        \"\"\"\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] == b[i]:\n                return True\n            elif a[i] > b[i]:\n                return True\n        return False\n    sort_compare(a, b)\n    sort_compare([-2, -3, -4, -5, -6], [-6, -5, -4, -3, -2])\n    sort_compare([1, 0, 2, 3, 4], [0, 1, 2, 3, 4])\n    sort_compare([-1, -2, -3, -4, -5, -6], [-6, -5, -4, -3, -2])\n    sort_compare([1, 0, 2, 3, 4], [0, 1, 2, 3, 4])\n    sort_compare([-2, -3, -4, -5,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr is None:\n        raise TypeError, 'Array must be non-empty'\n\n    try:\n        sort_arr = arr\n    except:\n        sort_arr = range(len(arr))\n\n    sort_str = ''\n    for i, j in enumerate(arr):\n        if sort_arr[j] == sort_arr[j - 1]:\n            sort_str += '\\t'\n        else:\n            sort_str += ', '\n\n    sort_str = sort_str.strip()\n    return sort_str", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: abs(x & 0xFF))\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            if i % 2 == 0:\n                if (arr[i] > arr[i - 1]):\n                    sort = arr[i - 1]\n                    arr[i] = arr[i] - sort\n                else:\n                    sort = arr[i]\n                    arr[i] = arr[i] - sort\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_array = []\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            sorted_array.append(arr[i])\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort based on numbers of ones.\n    #\n    # If you want to sort the values based on their decimal number, use\n    # :func:`sort`.\n    if 0 <= len(arr) and arr[0] < 1:\n        arr.sort()\n        return\n    #\n    # If you want to sort based on their binary number, use\n    # :func:`sorted`.\n    if not 0 <= len(arr):\n        return sorted(arr, key=lambda x: x[0])\n    #\n    # Otherwise, use :func:`sort`.\n    return arr.sort()", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, int):\n        raise TypeError(\"Sorted array must be an integer\")\n    if not arr:\n        raise ValueError(\"Sorted array must be non-negative integers\")\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            continue\n        while len(arr) > i and arr[i - 1]!= 0:\n            arr[i] = arr[i - 1]\n            i -= 1\n        if i < len(arr) - 1:\n            raise IndexError(\"Sorted array can't be larger than \" + str(len(arr)) + \".\")\n        sorted_arr = []\n        for j in range(i, len(arr)):\n            if arr[j - 1]!= 0:\n                sorted_arr.append(arr[j])\n                j -= 1\n            else:\n                break\n        sorted_arr.sort()\n        return sorted_arr\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr = sorted(arr, key=lambda x: x, reverse=True)\n\n    # This function does not need to be implemented.\n    # It should be removed when Kata is upgraded to 2.4\n\n    # We have to clear the previous items.\n    if len(arr) > 0:\n        for i in range(len(arr)):\n            del arr[i]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # 1. Convert the array to an integer array\n    arr = int(arr)\n    # 2. Compare the number of ones in binary representation of the integers\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            index = i - 1\n        else:\n            index = i + 1\n        # 3. If the number of ones in binary representation of the\n    #     current element is greater than the number of ones in binary\n    #     representation of the previous element, sort based on the\n    #     number of ones in binary representation of the current element.\n    #     Otherwise, sort based on the number of ones in binary\n    #     representation of the previous element.\n    # 3.1. If the number of ones in binary representation of the\n    #     current element is less than the number of ones in binary\n    #     representation of the previous element, sort based on the\n    #     number of ones in binary representation of the current element.\n    # 3.2. Otherwise, sort based on the number of ones in binary\n    #     representation of the previous element.\n    if len(arr) == 0:\n        return\n    else:\n        # 4. For each element, create an array of integers based on the", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, (list, tuple)):\n        raise TypeError('Arrays must be list, tuple or None')\n\n    sort = 0\n    if isinstance(arr, int):\n        if len(arr) > 1:\n            sort = arr[:-1]\n    elif isinstance(arr, float):\n        sort = arr\n    elif isinstance(arr, dict):\n        sort = arr.items()\n    else:\n        sort = sorted(arr)\n\n    for i, value in enumerate(arr, sort):\n        if not isinstance(value, int):\n            raise TypeError('Expected an integer array but got %s' % type(value))\n        else:\n            value = int(value)\n\n    if sort == 0:\n        return\n    else:\n        for j, value in enumerate(arr, sort):\n            if not isinstance(value, int):\n                raise TypeError('Expected an integer array but got %s' % type(value))\n            else:\n                value = int(value)\n            if value == j:\n                return\n\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from itertools import groupby, keyvalue_items, permutations\n    n = len(arr)\n    k = []\n    i = 0\n    while i < n:\n        if arr[i] < arr[k+1]:\n            k.append(arr[i])\n        else:\n            break\n        i += 1\n    return k", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        raise ValueError(\"Argument arrays must be list!\")\n    if len(arr) > 1:\n        raise ValueError(\"Argument arrays must be sorted!\")\n    if len(arr) < 2:\n        raise ValueError(\"Argument arrays must be sorted!\")\n    if len(arr) > 2:\n        raise ValueError(\"Argument arrays must be sorted!\")\n    n = len(arr)\n    if n == 2:\n        d = arr[0]\n        s = arr[1]\n        # We are making a new array here to be passed into the function.\n        arr = [[d, s]]\n    else:\n        d = arr[0]\n        s = arr[1] + [arr[1]]\n        arr = [[d, s]]\n    if not len(arr):\n        return arr\n    if not len(arr[0]):\n        return arr[0]\n    if not len(arr[1]):\n        return arr[1]\n    if n == 2:\n        return arr[0]\n    if n == 3:\n        return arr[1]\n    i = 0\n    while i < len(arr)-1:\n        if i == 0:\n            k = len(arr)-1\n            s = arr[-1]\n        else:\n            k = i\n            s = arr[i]\n        if not isinstance(s,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        out = []\n        for i, e in enumerate(arr):\n            if i == 0:\n                out.append(e)\n            else:\n                out.append(len(out) - 1)\n                out.append(str(e))\n        return out\n    except ValueError:\n        return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def __sort__(self, other):\n        return cmp(self.__bv__, other.__bv__)\n\n    __slots__ = [\"__bv__\", \"original\"]\n\n    def __str__(self):\n        return \"%d on %s with %d ones in binary\" % (self.__bv__, self.__class__.__name__, len(self.__original__))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x + 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    array = []\n    for i in range(len(arr)):\n        array.append(arr[i])\n    if len(array) == 0:\n        return\n    else:\n        return sorted(array, key=lambda x: x[0])\n\n    sorted_arr = []\n    if len(array) == 1:\n        sorted_arr.append(array[0])\n    else:\n        for i in range(len(array)):\n            if array[i] == 0:\n                sorted_arr.append(array[i])\n                break\n        else:\n            sorted_arr.append(array[0])\n\n    if len(array) == 0:\n        return\n    else:\n        return sorted(array, key=lambda x: x[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sort_array = [0]\n    for i in range(len(arr)):\n        # Decrement the count of ones in the binary representation of the array.\n        for j in range(len(arr[i])):\n            if arr[i][j] > 0:\n                sort_array.append(i + j)\n                break\n        # Increment the count of ones in the binary representation of the array.\n        for j in range(len(arr[i])):\n            if arr[i][j] < 0:\n                sort_array.append(i + j)\n                break\n    if sort_array:\n        sort_array.reverse()\n        return sort_array\n    else:\n        return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        return\n    if len(arr) == 1:\n        return arr\n    else:\n        order = 0\n        if len(arr) == 2:\n            order = 2\n        if len(arr) == 3:\n            order = 3\n        elif len(arr) == 4:\n            order = 4\n        elif len(arr) == 5:\n            order = 5\n        else:\n            order = 6\n        for i in range(order):\n            arr[i] = arr[i] + 1\n        for i in range(len(arr)):\n            arr[i] = arr[i] % 1\n        return sorted(arr, key=lambda x: x, reverse=order)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not hasattr(arr,'sort'):\n        return\n    sorted_arr = []\n    for n in range(len(arr)):\n        if n == 1:\n            sorted_arr.append(arr[n])\n        else:\n            sorted_arr.sort(key=lambda x: int(x, 16))\n            sorted_arr.reverse()\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    for i in range(len(arr)):\n        if i > 0:\n            if arr[i] == 0:\n                arr[i] = -arr[i]\n            else:\n                arr[i] = 0\n\n    return sorted(arr, key=lambda x: x[1])</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sorted(arr, key=lambda x: abs(x) > abs(x - 1), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr = list(arr)\n    for i in range(0, len(arr) - 1):\n        if arr[i] + arr[i + 1] <= 0:\n            continue\n        if not arr[i] + arr[i + 1] == arr[-1]:\n            raise ValueError(\"Index %d out of range\" % i)\n\n    for i in range(0, len(arr) - 1):\n        if arr[i]!= arr[-1]:\n            yield arr[i]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, int):\n        return\n    if len(arr) == 0:\n        return\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        if not arr[i] == 1:\n            return\n    sort_order = ord(arr[0])\n    sort_length = len(arr[1:])\n    while sort_order < sort_length:\n        sort_order += ord(arr[sort_order - 1])\n        sort_length += 1\n    sort_order = sort_order % 1000\n    sort_length = sort_length % 1000\n    if sort_length < 1:\n        sort_length = 1\n    return sort_array(arr[sort_order:sort_order + sort_length])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return\n    sorted_arr = []\n    for i in range(len(arr)):\n        sorted_arr.append(arr[i])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if isinstance(arr, int):\n        return arr\n    else:\n        return sorted(sorted(set(zip(*sorted(range(len(arr))))), key=lambda x: x + 1))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # check number of ones in binary\n    if len(arr)!= 0:\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                # if i is odd, sort based on number of ones in binary\n                if arr[i] == 1:\n                    # sort\n                    sort_array(arr[:i])\n                    # remove empty values in array\n                    arr[:i] = [None] * (len(arr) - i)\n                else:\n                    # if i is even, sort based on decimal value\n                    sort_array(arr[i + 1:])\n                    # remove empty values in array\n                    arr[i + 1:] = [None] * (len(arr) - i - 1)\n            else:\n                # if i is even, sort based on number of ones in binary\n                if arr[i] == 0:\n                    # sort\n                    sort_array(arr[:i])\n                    # remove empty values in array\n                    arr[:i] = [None] * (len(arr) - i - 1)\n                else:\n                    # if i is odd, sort based on decimal value\n                    sort_array(arr[i + 1:])\n                    # remove empty values in array\n                    arr[i + 1:] = [None] * (len(arr) - i - 1)\n\n    if not isinstance(arr, list):", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr.isArray():\n        arr.sort()\n    else:\n        for i, x in enumerate(arr, 0, -1):\n            if x == 0 or x == 1:\n                if i == 0:\n                    arr[i] = i + 1\n                else:\n                    arr[i] = arr[i - 1] + 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted([len(x) for x in arr], key=sort, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = arr.copy()\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i].isdigit():\n            break\n        else:\n            i += 1\n    if i == len(arr) - 1:\n        return arr\n    else:\n        return arr[(i - 1):]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        result.append(arr[i])\n    result.sort()\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sort = 1\n    if not isinstance(arr, list):\n        arr = [arr]\n    for i, one in enumerate(arr):\n        if one == 0:\n            return\n        if not sort:\n            break\n        sort += 1\n        if sort == 1:\n            return arr[-i]\n        else:\n            return arr[-i]\n    sort *= -1\n    return sorted(arr, key=lambda x: x[0], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        arr = (arr, arr)\n\n    if len(arr) > 1:\n        raise ValueError(\"Array must be of length 1 or greater\")\n\n    return sorted(arr, key=lambda x: x[1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return (array(arr)[0] >= array(arr)[1]\n                and array(arr)[0] <= array(arr)[1]\n                and array(arr)[0] < array(arr)[1]\n                and array(arr)[1] >= array(arr)[2]\n                and array(arr)[1] <= array(arr)[2]\n                and array(arr)[0] == array(arr)[2]\n               for array in arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Note: Values of the first item in the list should be stored as \"zero\"\n    # if the number of ones is 1.\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        def sort_by(x):\n            \"\"\"\n            In this sorting function, an integer is compared with the\n            number of ones in its binary representation and the\n            result is stored as the value of the first item in the list.\n            \"\"\"\n            return sorted([x for x in zip(arr, [0 for i in range(1, len(arr) - 1)]], key=lambda x: x[0], reverse=True))\n        sort_by(arr[0])\n        return sorted(arr[1:], key=lambda x: x[1], reverse=True)\n    return sorted(arr[1:], key=lambda x: x[1], reverse=True)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2 or len(arr) > 2:\n        return\n    else:\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            return sort_array(arr, -1) + sort_array(arr, 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr == None:\n        return\n    if arr.ndim == 1:\n        # number of ones\n        if arr[0]!= 0:\n            return\n        else:\n            return 0\n    # number of zeros\n    else:\n        # number of ones less number of zeros\n        if arr[0]!= arr[-1] or (arr[0] + arr[-1]) == 0:\n            return\n        else:\n            return 0\n    return 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sort(sorted(arr), key=lambda x: x[0])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from itertools import izip\n    try:\n        # Convert the values from an array to int\n        ret = []\n        for i in range(len(arr)):\n            ret.append(int(arr[i]))\n        # Return the sorted array\n        return ret\n    except ValueError:\n        # Convert the values to str\n        ret = [str(a) for a in arr]\n        # Return the sorted array\n        return ret\n    return izip(*sorted(ret, key=sort_array))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    x = [0]\n    if len(arr) == 0:\n        return x\n    if len(arr) == 1:\n        return sorted(arr, key=lambda x: x[1])\n    if len(arr) == 2:\n        return sorted([(x[0], x[1]) for x in sorted(arr, key=lambda x: x[1])], key=lambda x: x[1])\n    if len(arr) == 3:\n        return sorted([(x[0], x[1], x[2]) for x in sorted(arr, key=lambda x: x[1], reverse=True)], key=lambda x: x[1])\n    if len(arr) == 4:\n        return sorted([(x[0], x[1], x[2], x[3]) for x in sorted(arr, key=lambda x: x[1], reverse=False)], key=lambda x: x[1])\n    if len(arr) == 5:\n        return sorted([(x[0], x[1], x[2], x[3], x[4]) for x in sorted(arr, key=lambda x: x[1], reverse=True)], key=lambda x: x[1])\n    return sorted([x[0] for x in sorted(arr, key=lambda x: x[1])], key=lambda x:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr)!= 3:\n        raise ValueError(\"arr must be a non-negative, non-empty array\")\n    else:\n        nums = np.asarray(arr[:3]).astype(int)\n        nums.sort(key=lambda num: np.logical_and(1, num & 1))\n        nums = nums.tolist()\n        return nums[:, :2]\n    return arr[:3, :2]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = [None] * len(arr)\n    for i in range(len(arr)):\n        if (i + 1) % 2 == 0:\n            a[i] = a[i + 1]\n        else:\n            a[i] = a[i - 1]\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) > 1:\n        raise ValueError(\"number of ones exceeds number of integers\")\n    if len(arr) <= 1:\n        return\n    else:\n        i = 0\n        while len(arr[i:i+len(arr)-1]) == len(arr):\n            i += 1\n        while i < len(arr):\n            while arr[i] < arr[i + len(arr) - 1]:\n                arr[i] += 1\n            else:\n                break\n        i += len(arr)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort(x, y):\n        if x < y:\n            return -1\n        else:\n            return 1\n\n    def sort_nocase(arr):\n        if arr:\n            for x in arr:\n                sort(x, y)\n        else:\n            return\n\n    if sys.version_info[0] < 3:\n            for i in range(0, len(arr)):\n                sort(arr[i], arr[i])\n        sort([0, 1, 2, 3, 4], [0, 1, 2, 3, 4])\n        sort_nocase([-1, 2, 3, 4, -5, -6])\n    else:\n        def sort(x, y):\n            if x < y:\n                return -1\n            else:\n                return 1\n\n        def sort_nocase(arr):\n            if arr:\n                for x in arr:\n                    sort(x, y)\n            else:\n                return\n\n    arr = sort([1, 5, 2, 3, 4])\n    arr = sort_nocase(arr)\n    arr = sort([-2, -3, -4, -5, -6])\n    arr = sort([0, 1, 2, 3, 4])\n    arr = sort_nocase([-1, 2, 3, 4, -5, -6])\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    from itertools import chain, izip, random\n\n    # sort to sort the array\n    if len(arr) == 1:\n        return arr[0]\n\n    # sort according to binary number\n    else:\n        n = len(arr)\n        c = 0\n        while n > 0:\n            if c == 0:\n                break\n            else:\n                c = ord(arr[n])\n                n -= 1\n\n    # sort to sort the array\n    while c > 0:\n        i = randint(1, n)\n        if i == 0:\n            return arr[n]\n        else:\n            return arr[i - 1:]\n\n    # sort to sort the array\n    while c < len(arr):\n        i = randint(0, len(arr) - 1)\n        if i == 0:\n            return arr[n]\n        else:\n            return arr[i - 1:]\n\n    # sort to sort the array\n    while c > len(arr):\n        i = randint(0, len(arr) - 1)\n        if i == 0:\n            return arr[n]\n        else:\n            return arr[i - 1:]\n\n    # sort to sort the array\n    while c < len(arr):\n        i = randint(0, len(arr) - 1)\n        if i == 0:\n            return arr[n]\n        else:\n            return arr[i - 1:]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return\n    if not isinstance(arr, int):\n        return\n    for i in range(len(arr)):\n        if i:\n            if arr[i] > arr[i-1]:\n                arr[i] = arr[i-1]\n            else:\n                arr[i] = arr[i]-1\n    if len(arr) == len(arr)-1:\n        return\n    if arr[len(arr)-1:] == arr[len(arr)]:\n        return\n    i = -1\n    while i < len(arr) and arr[i]!= arr[i-1]:\n        i += 1\n    if i >= len(arr):\n        return\n    result = (arr[i], arr[i+1], arr[i+2], arr[i+3])\n    for i in range(len(arr)):\n        result[i] = result[i] + arr[i]\n    if result[-1] > result[-2]:\n        result[-2]=result[-1]\n    return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_and_sort(array, result):\n        r = 0\n        for i in range(len(array)):\n            if i!= 0:\n                r += array[i]\n                if result >= r:\n                    result -= r\n                    break\n        return result\n\n    sort_array([1, 5, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0, 2, 3, 4])\n    sort_array([-2, -3, -4, -5, -6])\n    sort_array([1, 0,", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sorter(a, b):\n        \"\"\"\n        Sorter based on binary representation of numbers.\n        \"\"\"\n        if a < b:\n            return -1\n        else:\n            return 1\n\n    def sort_middle(a, b):\n        \"\"\"\n        Sorter based on decimal value of numbers.\n        \"\"\"\n        if a <= b:\n            return 0\n        else:\n            return 1\n\n    def sort_down(a, b):\n        \"\"\"\n        Sorter based on number of ones in their binary representation.\n        \"\"\"\n        if a > b:\n            return 1\n        else:\n            return 0\n\n    # Sort according to binary representation of numbers\n    if sort_array(arr)[0] == 1:\n        return sort_middle(arr[0], arr[1])\n    elif sort_array(arr)[0] == 2:\n        return sort_middle(arr[0], arr[1] + 1)\n    elif sort_array(arr)[0] == 3:\n        return sort_middle(arr[0], arr[1] - 1)\n    elif sort_array(arr)[0] == 4:\n        return sort_down(arr[0], arr[1] - 1)\n    else:\n        # Sort according to decimal value of numbers\n        return sort_down(arr[0], arr[1] - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sort_array(arr, ascending=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if type(arr)!= type([]):\n        raise TypeError('Array must be of type: %r' % type(arr))\n\n    num_ones = len(arr)\n    if num_ones < 2:\n        return\n    while num_ones:\n        value = arr[num_ones - 1]\n        if value == 0 or value == 1:\n            break\n        num_ones -= 1\n        if num_ones == 0:\n            raise StopIteration\n\n        # If the next element is a zero, ignore it\n        if value == 0:\n            continue\n\n        if value == 1:\n            num_ones -= 1\n        elif value == 2:\n            num_ones -= 1\n        elif value == 3:\n            num_ones -= 1\n        elif value == 4:\n            num_ones -= 1\n        elif value == 5:\n            num_ones -= 1\n\n        if num_ones == 0:\n            break\n        else:\n            raise StopIteration\n\n    arr_sorted_by_ones = []\n    for i in range(num_ones):\n        arr_sorted_by_ones.append(arr[i])\n    if num_ones == 1:\n        arr_sorted_by_ones[0] = arr_sorted_by_ones[0]\n    else:\n        for i in range(num_ones):\n            arr_sorted_by_ones[i] = arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: implement sort\n\n    if len(arr)!= 0:\n        raise ValueError('Given array length must be same as number of ones')\n    else:\n        return arr\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[i] -= 1\n\n    return sorted(arr, key=lambda x: x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] == 0:\n            i += 1\n        else:\n            if arr[i] == 0:\n                i += 1\n            else:\n                i += 1\n    return i"]]