[["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #-----------------------------\n    # If operator is an integer, then we are done\n    if operator is not None:\n        return operand\n\n    #-----------------------------\n    # If operator is a list of integers, then we are done\n    else:\n        # First, build an empty list\n        if operator is not None:\n            operatorlist = []\n        else:\n            operatorlist = []\n        # And a list of positive integers\n        elif operand is not None:\n            operandlist = [operatorlist, operand]\n        else:\n            # If the length of operand list is not equal to the length of operator list, then \n            # there is no operation to do\n            if len(operandlist) < len(operatorlist):\n                # The length of operand list is less than the length of operator list, so we \n                # have to add a new item to the operator list \n                opcount = len(operandlist)\n                operatorlist.append([opcount, operandlist])\n                # If the length of operand list is equal to the length of operator list, then \n                # we can just add the operators.\n                if len(operandlist) == len(operatorlist):\n                    # Both operand list and operator list have a length, so add one operator\n                    # to the list, and then", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise ValueError('Length of operands must be the same length of operator')\n\n    if operator in ('-', '*', '+'):\n        return (operator, operand[0], operand[1])\n\n    if operator in ('/', '+', '*', '-'):\n        return ('/', operand[0], operand[1])\n\n    if operator in ('*', '/', '+', '-'):\n        return (operand[0], operand[1])\n\n    else:\n        raise ValueError('Operator'+ operator +'is not supported')\n\n    return (operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    for index in range(len(operator)):\n        # add all operands to result\n        result.append(operator[index] + operand[index])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check operand length\n    if len(operand)!= len(operator):\n        raise ValueError(\"len(operand) = %r, len(operator) = %r\" % (len(operand), len(operator)))\n    # Check operator length\n    if len(operand)!= len(operator[-1]):\n        raise ValueError(\"len(operand) = %r, len(operator[-1]) = %r\" % (len(operand), len(operator[-1])))\n    # Check operator length\n    if len(operator)!= len(operand[-2:]):\n        raise ValueError(\"len(operator) = %r, len(operand[-1]) = %r\" % (len(operand), len(operand[-1])))\n\n    # Determine the length of the multiplication operator\n    if len(operator[0]) == 2 and len(operator[1]) == 2:\n        op_length = len(operator[0])\n        op_length += len(operator[1])\n    else:\n        op_length = len(operator[0]) + len(operator[1])\n\n    # Determine the length of the multiplication operator\n    if len(operator[0]) == 3 and len(operator[1]) == 3:\n        op_length = len(operator[0])\n        op_length += len(operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # check length of operator list\n    if len(operator) == len(operand) - 1:\n        raise ValueError(\"Length of operator list must be greater than length of operand list\")\n    # check length of operand list\n    if len(operand) == 0:\n        raise ValueError(\"Length of operand list must be greater than 0\")\n    # check length of operands\n    if len(operand) > len(operator):\n        raise ValueError(\"Length of operands must be equal to length of operator list\")\n\n    # get length of the operands\n    numOperands = len(operand)\n    numOperands += 1\n    if numOperands > len(operator):\n        raise ValueError(\"Length of operands must be equal to length of operator list\")\n\n    # check if the operands are in the list\n    if operator[numOperands] == operand[numOperands]:\n        # we have the same operands\n        return operand[numOperands]\n    else:\n        # operator has different operands\n        raise ValueError(\"operand has different lengths\")", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    for operator in operator:\n        if operator in operand:\n            return operator + operand[operator]\n\n    return operand[operator]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n\n    if len(operator) == len(operand):\n        result.extend(operator + operand)\n\n    else:\n        result.append(operator)\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # This list is the set of operators and values.\n    operator_list = [ operator[0] for operator in operator ]\n    operand_list = [ operand[0] for operand in operand ]\n\n    # Calculate the operator\n    operator = []\n    for operator in operator_list:\n        operator_list[ operator ] = operator[1]\n\n    # Count the operands\n    operand = []\n    for operand in operand_list:\n        operand_list[ operand ] = operand[1]\n\n    # We need to use the operator_list to build the algebric expression\n    for operator in operator_list:\n        # We first have to divide operator by operand\n        for operator in operand_list:\n            if operator[0] == operator[1]:\n                operand_list[ operator ] /= operand_list[ operand ]\n        # Then we have to add operand to the result\n        for operator in operand_list:\n            operand_list[ operator ] += operand_list[ operand ]\n        # Finally, we add the result to the list\n        operator_list[ operator ] += operand_list[ operand ]\n\n    return operator_list, operand_list", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operand1 = operand.copy()\n    for x in operand:\n        operand1[x] += x\n    return operator.apply(*operand1)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # save base value\n    base = operand[-1]\n    # save index of operands\n    index = operand.index(operand[0]) + 1\n    # save index of operand\n    index = operand.index(operand[0]) + 1\n    # save operand values\n    for val in operand:\n        base = val\n        index = index + 1\n    # save operands\n    operand = operand[:index]\n    # calculate the expression\n    # for i = 0; i < index; i ++\n    for i in range(index):\n        for val in operand:\n            result = (base + val) % base\n            # print(result)\n            # if result == 0:\n            #     continue\n            # else:\n            #     print('+')\n            #     result += result\n            # print(result)\n        # print(result)\n        # return result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    n = len(operator) + len(operand)\n    if n < 1:\n        raise ValueError('Could not build algebric expression for elements:'+ str(operator))\n    n = 1\n    while operator[n]:\n        result = operator[n - 1] + operand[n - 1]\n        operand[n - 1] = 0\n        n += 1\n        if n < n:\n            raise ValueError('Could not build algebric expression for elements:'+ str(operand))\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['*'] == '+':\n        result = operator['*'] + operand\n        return result\n    else:\n        if operator['**'] == '-':\n            result = operator['**'] - operand\n            return result\n        else:\n            result = operator['*'] - operand\n            return result\n\n    # This method is called for each possible operand value. \n    # The operands of the first list can be integers, floats or arrays of integers, floats or arrays of floats\n    for index in range(len(operand)):\n        if not isinstance(operand[index], list):\n            raise ValueError('operand must be list')\n        if not isinstance(operand[index], int):\n            raise ValueError('operand index must be an integer')\n        if len(operand[index]) < 2:\n            raise ValueError('operand index must be at least 2')\n        if len(operand[index]) > 2:\n            raise ValueError('operand index must be between 2 and 3')\n        if operator.has_key(operand[index]):\n            raise ValueError('operand index must be a key')\n        if len(operand[index]) == 0:\n            raise ValueError('operand index must have at least one value')\n\n    if len(oper", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operand == []:\n        result = operator\n    elif operand[0] < 0:\n        result = -operator\n    elif operand[0] > 0:\n        result = operator\n    elif operand[0] == operator:\n        if operand[1] < 0:\n            result = -operator\n        else:\n            result = operator\n    else:\n        result = operand\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < 2 or len(operand) < 2:\n        raise ValueError(\"operator and operand must be lists of lists of lists.\")\n\n    # If the lengths of lists are equal or smaller than one, set to zero.\n    operator_length = len(operator)\n    operand_length = len(operand)\n\n    if operand_length == operator_length:\n        return\n\n    # If the length of the operand list is larger than the length of operator list, set the length to zero.\n    if operand_length > operator_length:\n        operand_length = operator_length\n\n    # If the length of operator list is greater than the length of operand list, set the length to zero.\n    if operator_length > operand_length:\n        operator_length = operand_length\n\n    # If the lengths of operator and operand are equal, set the length to zero.\n    if operator_length == operand_length:\n        return\n\n    # Convert operator to a list.\n    operator_list = operator.split(' ')\n\n    # Convert operand to a list.\n    operand_list = operand.split(' ')\n\n    # The length of the operator and the length of the operand lists.\n    operator_length = len(operator_list)\n    operand_length = len(operand_list)\n\n    # Set the length to zero.\n    operator_length = 0\n    operand_length =", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # get list of numbers\n    operands = []\n    for i in range(len(operand)):\n        operands.append(operand[i])\n\n    # if list of numbers is empty, take the first one\n    if len(operands) == 0:\n        operands.append(1)\n\n    # calculate the square root of the numbers\n    if len(operands) == 1:\n        return operands[0] * operands[0]\n\n    # calculate the square root of the numbers\n    if len(operands) == 2:\n        return operands[0] ** operands[0]\n\n    # calculate the number of digits of the number\n    digits = len(operand) - 1\n    result = 0\n\n    # while we have some digits left, find the number with the lowest value\n    while digits > 0:\n        # get lowest digit from operand\n        digit = lowest(operands)\n        # get next digit from operand\n        digit += 1\n        # if next digit is less than current digit, then the number is a power of 2\n        if digit < lowest(operands):\n            result += pow(2, digit) * pow(2, digit) + lowest(operands)\n        digits -= 1\n\n    # return the result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < len(operand):\n        raise ValueError(\"Too few operands. Operator list must have at least 2 operands.\")\n\n    result = operator.copy()\n    for index in range(len(operand)):\n        result[index] = operand[index]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # list length is equal to the sum of operands length plus one\n    operands = [(int(x) for x in operand) for x in operand]\n    length = len(operands)\n    # length is equal to the sum of operands length plus one\n    # length is the number of operands\n    operand_length = len(operand)\n    # length is the number of operands plus one\n    # length is the number of operands plus one\n    # length is the number of operands plus one plus one\n    # length is the number of operands plus one plus one plus one\n    # length is the number of operands plus one plus one plus one\n    # length is the number of operands plus one plus one plus one\n    # length is the number of operands plus one plus one plus one\n    # length is the number of operands plus one plus one plus one plus one\n    # length is the number of operands plus one plus one plus one plus one\n    # length is the number of operands plus one plus one plus one plus one\n    # length is the number of operands plus one plus one plus one plus one\n    # length is the number of operands plus one plus one plus one plus one\n    # length", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['type'] is not 'operator':\n        raise ValueError('Expected argument of type \"operator\".')\n    if operand['type'] is not 'list' or operand['length']!= len(operand)-1:\n        raise ValueError('Expected argument of type \"list\"')\n\n    if operator['length'] == 0:\n        return operand\n    else:\n        l = operator['length']\n        if operator['type'] == 'addition':\n            return list([operator['plus']])\n        elif operator['type'] =='subtraction':\n            return list([operator['subtract']])\n        elif operator['type'] =='multiplication':\n            return list([operator['mul']])\n        elif operator['type'] == 'floor division':\n            return list([operator['floor']])\n        elif operator['type'] == 'exponentiation':\n            return list([operator['exp']])\n\n    # Return default result\n    res = 0\n\n    if operator['type'] == 'addition':\n        res = add(res, operand['plus'])\n    elif operator['type'] =='subtraction':\n        res = sub(res, operand['minus'])\n    elif operator['type'] =='multiplication':\n        res = mul(res, operand['mul'])\n    elif operator['type'] == 'floor division':\n        res = div(res, operand['floor'])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if operator.find(\"+\") == -1 and operand.find(\"*\") == -1:\n        raise ValueError(\"Invalid operand\")\n\n    if operator.find(\"+\") == -1 and operand.find(\"*\") == -1:\n        raise ValueError(\"Invalid operand\")\n\n    if operator.find(\"+\") == -1 and operand.find(\"*\") == -1:\n        raise ValueError(\"Invalid operand\")\n\n    if operator.find(\"+\") == -1 and operand.find(\"*\") == -1:\n        raise ValueError(\"Invalid operand\")\n\n    if operator.find(\"+\") == -1:\n        if operand.find(\"*\") == 0:\n            raise ValueError(\"Invalid operand\")\n        else:\n            if operand.find(\"*\")!= -1:\n                raise ValueError(\"Invalid operand\")\n\n    if operator.find(\"*\") == -1:\n        if operand.find(\"+\")!= -1:\n            raise ValueError(\"Invalid operand\")\n        else:\n            if operand.find(\"+\")!= -1:\n                raise ValueError(\"Invalid operand\")\n\n    if operator.find(\"*\")!= -1:\n        if operand.find(\"+\")!= -1:\n            raise ValueError(\"Invalid operand\")\n        else:\n            if operand.", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator in operator_list:\n        return operator_list[operator](operand)\n    else:\n        # here we have a complex operator, but we do not have an integer.\n        return ''", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Set operator and operand to empty lists\n    operator = [None] * operator.size\n    operand = [None] * operand.size\n\n    # Set the length of the operator list\n    length = len(operator)\n\n    # Set the length of the operand list\n    length = length + 1\n\n    # Add the two lists together\n    operator_list = [operator] * length\n    operand_list = [operand] * length\n\n    # Replace the elements in the list operator with the elements in the operand list.\n    for i in range(length):\n        operator_list[i] = operator_list[i].replace(operand[i], operand_list[i])\n\n    # Set the length of the expression\n    length = len(operator_list)\n\n    # Return the result of the expression\n    return(operator_list[length] * operand_list[length])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check length of operand list\n    if len(operand) < len(operator):\n        raise ValueError('Error, operand and operator list must be of length equal')\n    # Set length of the operator list\n    operator_length = len(operand)\n    # Set length of the operand list\n    operand_length = len(operator)\n    # Create a list of integers\n    result = []\n    # Loop over the number of operands, and get all the operands first\n    for i in range(len(operand)):\n        # Look at the first operand, and if it is a number, add it to the result\n        if operand[i] is not None:\n            result.append(operand[i])\n    # Loop over the number of operators, and get all the operators first\n    for i in range(len(operator)):\n        # Look at the first operator, and if it is a number, add it to the result\n        if operator[i] is not None:\n            result.append(operator[i])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # take operator out of the list, removing all non-negative numbers\n    operator = operator.split(\"-\")\n\n    # check whether the list has an operator\n    if len(operator) == 2:\n        # if list has an operator, then there is no operand\n        if operator[1] == 0 and operator[0] == 0:\n            return 0\n\n    # there is an operand, take out the first operator\n    op1 = operator[0]\n    operand = operand[1:]\n\n    # loop over all operands and add each one to the list\n    for i, operand2 in enumerate(operand):\n        # add each operand to the list\n        if len(operand2) == 1 and operand2[0]!= 0:\n            operand2.append(operator[1])\n        else:\n            # add each operand to the list\n            if len(operand2) == 2 and operand2[0]!= 0 and operand2[1]!= 0:\n                operand2.append(operator[1] + operand2[0])\n            else:\n                # add each operand to the list\n                if len(operand2) == 3 and operand2[0]!= 0 and operand2[1] == 0 and operand2[2]!= 0:\n                    operand2.append(operator[1] + operand2[0] + operand2[1] + operand2[2])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #\n    # Basic algebra operations.\n    #\n    if operator is not None:\n        for op in operator.keys():\n            op = operator[op]\n\n        if operand is not None:\n            for oper in operand.keys():\n                oper = operand[oper]\n\n        if isinstance(operator, list):\n            result = eval(operator)\n        elif isinstance(operator, tuple):\n            result = eval(operator)\n        else:\n            raise ValueError('Operator or operand must be a list or tuple')\n\n        if isinstance(operand, list):\n            result = eval(operand)\n        elif isinstance(operand, tuple):\n            result = eval(operand)\n\n        #\n        # Addition, Subtraction, Multiplication, Floor Division, Exponentiation.\n        #\n        for op in operator.keys():\n            result += operator[op] * oper[op]\n        for op in operand.keys():\n            result -= operand[op]\n        result *= 2\n        result += 4\n        result /= 4\n        result += 8\n        result *= 2\n        result -= 8\n        result += 8\n        result += 16\n        result *= 2\n        result -= 16\n        result *= 2\n        result += 32\n        result *= 2\n        result += 64\n        result *= 2\n\n        #", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is None:\n        raise ValueError(\"operator must be a list of length 1\")\n\n    # Basic algebra operations\n    if operand is None:\n        raise ValueError(\"operand must be a list of length 1\")\n\n    # Lists of integers\n    if len(operand) == 1:\n        if operand[0] < 0:\n            raise ValueError(\"operand list must be of length 0\")\n        if operand[0] > len(operator):\n            raise ValueError(\"operand list must have length less than operator list\")\n\n    return operator[(operator.index(i) + 1) % len(operator)] * operand[(i) % len(operand)]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) > 0:\n        # Convert operator to array of numbers. Array should be long enough for operation.\n        # operator[0] is the first item of the operator list.\n        if len(operator) == 1:\n            oper = operator[0]\n        else:\n            # Operand lists are reduced by one to avoid the multiplication of the operands.\n            oper = [ operator[0] ]\n            for i in xrange(len(oper)):\n                if operator[i]!= oper[i]:\n                    oper.append(oper[i])\n            # Convert the operands to integers\n            for i in xrange(len(oper)):\n                oper[i] = int(oper[i])\n        if len(oper) == 1:\n            operand = operand[0]\n        else:\n            # Operand lists are reduced by two to avoid the division of the operands.\n            operand = [ operand[0], operand[1] ]\n            for i in xrange(len(oper)):\n                if operator[i]!= operand[i]:\n                    operand.append(operand[i])\n            # Convert the operands to integers\n            for i in xrange(len(oper)):\n                operand[i] = int(operand[i])\n            # Return the evaluation of the expression\n            result = operexp(oper, operand)\n        return result\n\n    if len(", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['+'] is not None:\n        return operator['+'](array, operand)        \n    elif operator['*'] is not None:\n        return operator['*'](array, operand)        \n    elif operator['//'] is not None:\n        return operator['//'](array, operand)        \n    elif operator['**'] is not None:\n        return operator['**'](array, operand)        \n    return 0", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # This method implements the operation addition.\n    operator_list = [operator]\n    operand_list = [ operand ]\n    for operator in operator_list:\n        for operand in operand_list:\n            if operator == operand:\n                return 1.0\n        else:\n            raise ValueError('Unsupported operand')\n    \n    # This method implements the operation subtraction.\n    operator_list = [ operator ]\n    operand_list = [ operand ]\n    for operator in operator_list:\n        for operand in operand_list:\n            if operator == operand:\n                return -1.0\n            else:\n                raise ValueError('Unsupported operand')\n    \n    # This method implements the operation multiplication.\n    operator_list = [ operator ]\n    operand_list = [ operand ]\n    for operator in operator_list:\n        for operand in operand_list:\n            if operator == operand:\n                return 1.0\n            else:\n                raise ValueError('Unsupported operand')\n\n    # This method implements the operation floor division.\n    operator_list = [ operator ]\n    operand_list = [ operand ]\n    for operator in operator_list:\n        for operand in operand_list:\n            if operator == operand:\n                return 0.0\n            else:\n                raise ValueError('Unsupported operand')\n\n    # This method implements the operation exponentiation.\n    operator_list = [ operator ]\n    operand_list = [ operand ]\n    for", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert operator in operators.keys(),\n    assert operand in operands\n    assert operand[0] is list\n    assert operand[1] is list\n    assert operator in operators\n\n    # assign the list of operands to the list of operands of the first list.\n    # And change the length of the second list to the length of the first list.\n    operands = [operand]\n    operands.reverse()\n    operands[-1].append(operand[0])\n\n    # construct the new list of operands.\n    newOperands = []\n    for i in operands:\n        newOperands.append(i)\n    newOperands.append(operand[0])\n    newOperands.reverse()\n\n    # do the multiplication with the new operands.\n    result = operator[operator.keys()[0] + 1, newOperands] * operand[1]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise ValueError(\"Operand and operator lists must have the same length\")\n\n    if operator.startswith('+'):\n        return operator.append(operand)\n    elif operator.startswith('-'):\n        return operator.subtract(operand)\n    elif operator.startswith('%'):\n        return operator * operand\n    elif operator.startswith('*'):\n        return operator ** operand\n    elif operator.startswith('%'):\n        return operator / operand\n    elif operator.startswith('*'):\n        return operator * operand\n    elif operator.startswith('%'):\n        return operator / operand\n    else:\n        raise ValueError(\"Unknown operator:\" + operator)\n\n    # If operand has no operands, return zero\n    if len(operand) == 0:\n        return 0\n\n    # If operand has more than one operand, return the sum of their number\n    if len(operand) > 1:\n        return operator.sum()\n\n    # If operand has one operand, return its number\n    if len(operand) == 1:\n        return operand[0]\n\n    # If operand has more than one operand, return the product of their numbers\n    if len(operand) > 2:\n        return operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    while len(operator)!= len(operand):\n        result.append(1)\n        length = len(operator)\n        op = operator[length:]\n        operand.append(op)\n        if length == len(operand):\n            break\n\n    if len(operand) == 1:\n        result.append(1)\n    if len(operand) == 2:\n        result.append(operator[-1])\n    else:\n        raise ValueError(\"Expected 2 lists, got %d.\" % len(operand))\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def __init__(self, operator, operand):\n        self.operator = operator\n        self.operand = operand\n\n    def __call__(self, *args, **kwargs):\n        value = 0\n        for operator in self.operator:\n            value += operator(self.operand[operator.name], *args, **kwargs)\n\n        return value", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) == len(operator):\n        return operand + operator\n    else:\n        return operator + operand[0:len(operand) - 1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #(**)=operator['*'], operand['**']\n    a = [operator['+', '*', '-'] for operator in operator['+', '*', '-'] for operand in operand['+', '*, '-']]\n    b = [operand['+', '*', '-'] for operand in operand['+', '*', '-']]\n\n    if len(a)==len(b):\n        #(**)=operator['//'], operand['**']\n        c = [operator['+', '*', '-'] for operator in operator['+', '*', '-'] for operand in operand['+', '*, '-']]\n    else:\n        #(**)=operator['//'], operand['**']\n        c = [operand['+', '*', '-'] for operand in operand['+', '*, '-']]\n    #(**)=operator['//'], operand['**']\n    result = a + b\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0:\n        return 0\n\n    if len(operand) < 1:\n        return 0\n\n    if len(operand) == 1:\n        return operator[-2:]\n    else:\n        return do_algebra(operator[-1], operand[-2])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #\n    # If operator is a list of integers, the length of operator list is equal to the length of operand list.\n    #\n    if isinstance(operator, basestring):\n        return operator.split(',')\n    else:\n        return operand.split(',')\n\n    return eval(' '.join([\n        operator + operand, *(range(len(operator)) + range(len(operand))))\n    ]))", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Compute the difference of the two lists\n    diff = numpy.zeros(len(operator), dtype=int)\n\n    # Compute the difference of the two lists and the right hand side\n    diff2 = numpy.zeros(len(operator)-1, dtype=int)\n\n    # The first list\n    if operator == '+' or operator == '*':\n        diff2[:,0] = numpy.sum([diff[:,0] * diff2[:,0] for i in range(len(operator)-1)]) - numpy.sum([diff[:,0] * diff2[:,0] for i in range(len(operator)-1)])\n    # The second list\n    else:\n        diff2[:,0] = numpy.sum([diff2[:,0] * diff2[:,0] for i in range(len(operand))]) - numpy.sum([diff2[:,0] * diff2[:,0] for i in range(len(operand))])\n\n    # Evaluate the difference\n    return diff + diff2", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '+' or operator == '*':\n        return operand + operand\n    elif operator == '-':\n        return operand - operand\n    elif operator == '/':\n        return operand // operand\n    elif operator == '*':\n        return operand * operand\n    elif operator == '**':\n        return operand ** operand\n    else:\n        return ''", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if type(operator) is not list:\n        raise ValueError('operator must be a list')\n\n    if type(operand)!= list:\n        raise ValueError('operand must be a list')\n\n    # Get the operator name\n    op = operator.lower()\n    if op.startswith('-'):\n        operand = operand[1:]\n    op = '+' + op\n    # Check if we have a list of operands\n    if operand is None:\n        raise ValueError('operand must be a list')\n\n    # Decide the length of the operands list\n    if len(operand) < 2 and len(operator) < 2:\n        raise ValueError('operand list length must be greater than or equal to operator list length')\n\n    if len(operand) > len(operator) - 1:\n        raise ValueError('operand list length must be smaller than operator list length')\n\n    # Combine operands\n    if op in operator:\n        operand = operator[op]\n    else:\n        operand = []\n\n    # Compute the result of the algebraic expression\n    result = 0\n    for i in operand:\n        result += do_algebra(operand[i], operand[i + 1])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    for i in range(len(operator)):\n        if operator[i] == 0:\n            continue\n        operator_list = operator[i]\n        operand_list = operand[i]\n        if len(operand_list) == 0:\n            return []\n        if len(operator_list) == 1:\n            return operator_list[0]\n        else:\n            return do_algebra(operator_list[0], operand_list[1:])\n\n    def do_algebra_expression(operator, operand):\n        \"\"\"\n        Given two lists operator, and operand. The first list has basic algebra operations, and \n        the second list is a list of integers. Use the two given lists to build the algebric \n        expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n        Addition ( + ) \n        Subtraction ( - ) \n        Multiplication ( * ) \n        Floor division ( // ) \n        Exponentiation ( ** ) \n\n    Example:\n    result = do_algebra_expression(['+', '*, '-'], [2, 3, 4, 5])\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    def", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operator = operator.replace(\"-\", \"\").replace(\"+\", \"\").replace(\"**\", \"\")\n    operand = operand.replace(\"-\", \"\").replace(\"+\", \"\").replace(\"**\", \"\")\n    operator_list = operator.split(\" \")\n    operand_list = operand.split(\" \")\n\n    # Function parameters\n    r = []\n    for i in range(0, len(operand_list), len(operand_list)-1):\n        r.append([int(operand_list[i]), int(operand_list[i+1])])\n\n    # Apply operator\n    if operator_list[0] == \"-\":\n        r.append([operator_list[1], operand_list[0]])\n    else:\n        r.append([operator_list[0], operand_list[0]] + operator_list[1])\n\n    # Apply operands\n    for i in range(len(operand_list)):\n        r.append([int(operand_list[i]), int(operand_list[i+1])])\n\n    # Return result\n    return \" \".join(r)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is None:\n        raise ValueError('operator must be given')\n\n    if operand is None:\n        raise ValueError('operand must be given')\n\n    if len(operator) == len(operand):\n        return operator[:] + operand\n    else:\n        return operator + operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operator) > 0:\n        if len(operand)!= len(operator):\n            raise ValueError('Invalid size of input lists')\n        for i in range(len(operand)):\n            for j in range(len(operator)):\n                if operand[j]!= operator[i]:\n                    raise ValueError('Incorrect size of input lists')\n\n        if len(operand)!= len(operator) - 1:\n            raise ValueError('Invalid size of input lists')\n\n    result = []\n    for operator, operand in zip(operator, operand):\n        if len(operand)!= len(operator) - 1:\n            raise ValueError('Invalid size of input lists')\n\n        result.append(operand[0] + operand[1])\n\n    if len(result) == 0:\n        return 0\n\n    return result[0]\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    try:\n        newOperands = operator.copy()\n        for i, n in enumerate(operand):\n            newOperands[i] = n\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n        newOperands[-1:] = list(newOperands[-1:])\n    except:\n        print 'ERROR: cannot convert list to tuple!'\n    return(newOperands)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operand[0] < 0 or operand[0] > len(operator):\n        raise ValueError(\"not an integer\")\n    if operand[0] == operand[1]:\n        return operand[0]\n    if operand[0] == len(operator) and operand[1] >= 0:\n        return operand[0]\n    if operand[1] >= len(operator) and operand[0] >= 0:\n        return operand[1]\n    if operand[1] >= len(operator) and operand[0] >= 0:\n        return operand[0] + operand[1]\n    return operand[0] + operand[1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check if the operators are different\n    if len(operator)!= len(operand):\n        raise ValueError('Comparison operators must be the same length.')\n\n    # Check if operands are integers.\n    if not isinstance(operand, (list, tuple)):\n        raise ValueError('Operand lists must be list of integers')\n\n    # Build the basic algebra operators.\n    result = []\n    for i in range(len(operator)):\n        try:\n            result.append(operator[i](operand[i]))\n        except ValueError:\n            raise ValueError('Number operators must be integers.')\n\n    # Return the result.\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator!= operand:\n        raise ValueError(\"operator!= operand\")\n\n    # Basic Algebra Operations\n    if operator['+'] is not None:\n        result = operator['+'](operator['+'](operator['-']), operand['-'])\n        return result\n    else:\n        return operand['+'](operator['+'](operator['-']), operand['-'])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Special case: operand can be empty\n    if len(operand) == 0:\n        return operator\n\n    # Initialize list\n    result = []\n    for i in range(len(operand)):\n        result.append(operator[len(operand) - i](operand[i]))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check the length of the list\n    if len(operator)!= len(operand):\n        raise ValueError(\"list lengths are not equal\")\n    else:\n        if operator == '*':\n            # Operand is a list of non-negative integers\n            # Operand is a list of integers\n            # Convert to list\n            operand = [int(i) for i in operand]\n        elif operator == '/':\n            # Operand is a list of non-negative integers\n            # Operand is a list of integers\n            # Convert to list\n            operand = [int(i) for i in operand]\n        else:\n            raise ValueError(\"operator is not a valid list\")\n        return operator + operand\n\n    # Construct a list of basic algebra operations and return the evaluation of the \n    # expression. The list is the result of the expression.\n    list = []\n    for op in operator:\n        if op is not None:\n            list.append(op[0])\n        else:\n            list.append(0)\n    return list", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operands = [float(x) for x in operands]\n    if len(operands)!= 2:\n        raise ValueError('Operand length not matched')\n\n    # the expressions need to be in the form\n    # 'number + operator'\n    # 'number * operator'\n    # 'number / operator'\n    # 'number ** operator'\n\n    if len(operands) == 0:\n        return operator['+'], operand\n\n    if len(operands)!= 1:\n        raise ValueError('Operand length not matched')\n\n    if operator is not operator['+']:\n        raise ValueError('Not a +')\n\n    # the first operand is a list of non-negative integers\n    if len(operand) == 0:\n        return operand[0]\n\n    # the second operand is a list of non-negative integers\n    if len(operand)!= 2:\n        raise ValueError('Operand length not matched')\n\n    # the expression needs to be in the form\n    # 'number * operator'\n    # 'number / operator'\n    # 'number ** operator'\n\n    if len(operand) == 1:\n        return operand[0], operand[1]\n\n    # the expression needs to be in the form\n    # 'number ** operator'\n    # 'number / operator'\n    # 'number", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Calculate the number of elements in the list, and the total length of the list.\n    length = len(operator) - len(operand)\n\n    # Check if the length of the list is equal to the length of operand list.\n    if length!= len(operand):\n        raise ValueError(\"Length of list and operand list differ\")\n\n    # Get the number of arguments.\n    arg_num = len(operand)\n\n    # The first argument is the left operand.\n    arg_operand = operand[-1:]\n\n    # The first argument is the right operand.\n    arg_op = operand[-1:]\n\n    # The second argument is the left operand.\n    arg_other = operator[-1:]\n\n    # The second argument is the right operand.\n    arg_opother = operator[-1:]\n\n    # Calculate the length of the first argument.\n    first_arg_length = len(first_arg)\n\n    # Calculate the length of the second argument.\n    second_arg_length = len(second_arg)\n\n    # Calculate the length of the third argument.\n    third_arg_length = len(third_arg)\n\n    # Calculate the length of the last argument.\n    last_arg_length = len(last_arg)\n\n    # Calculate the total length of the list.\n    total_length = len(args)\n\n    # Get the number of the first argument.", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 1:\n        return operator[0]\n    else:\n        # Convert operator to list of integers\n        # Convert operand to list of non-negative integers\n        result = []\n        for i in operand:\n            result.append(int(i))\n        \n        # Check if operator list contains one operator\n        if len(operator) == 1:\n            return operator[0]\n        else:\n            raise Exception('Operator list contains more than one operator')\n\n    # Check if operand list contains non-negative integers\n    if len(operand) == 0:\n        raise Exception('Operand list contains non-negative integers')\n    \n    # Evaluate the expression\n    try:\n        result = eval('%s(%s)' % (operator, list(operand)))\n    except ValueError:\n        raise Exception('Expression does not evaluate properly')", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is None:\n        operator = [None, None, None, None]\n    if operand is None:\n        operand = []\n    if len(operator)!= len(operand):\n        return False\n    for i in range(0, len(operator), 1):\n        if not operator[i]:\n            return False\n    for i in range(0, len(operand), 2):\n        if not operand[i]:\n            return False\n\n    return True", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0 or len(operand) == 0:\n        return 0\n    if len(operator)!= len(operand):\n        raise ValueError(\"operator!= operand\")\n    if len(operand)!= len(operator):\n        raise ValueError(\"operand!= operator\")\n    if operator[0] not in operator:\n        raise ValueError(\"operator[0] not in operator\")\n    if len(operand)!= len(operator):\n        raise ValueError(\"operand!= operator[len(operand)-1].\")\n    result = 0\n    for operator in operator:\n        result += do_algebra(operator, operand[operator])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operators = list(operator.keys())\n    operand = list(operand.keys())\n    if len(operand) < len(operators):\n        operand.extend(operator)\n    else:\n        operands = operands + operand\n    if len(operands) >= len(operators):\n        raise TypeError('Invalid list of numbers.')\n    # the main part of this function takes a list of operators\n    # and a list of numbers. If the operators is an integer, add it as the\n    # first operand, and store it as the second operand.\n    if isinstance(operand, int):\n        operator = operand[0]\n        operand = operand[1:]\n    else:\n        operator = []\n        operand = list(operand)\n    # First construct the algebra expression\n    if operator in operator:\n        # This is a math operation, add the two operands to the list\n        result = operator[operator]([operand]) + operand\n    # if the two operands are lists, the algebra expression is\n    # the product of the lists and the number\n    else:\n        result = list(operator) * operand\n\n    # This is a multiplication operation, add the two operands to the list\n    else:\n        result += list(operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # First check the length of operands\n    if len(operand)!= len(operator):\n        raise ValueError(\"operands length must be equal to operands length\")\n\n    # Check length of operator list\n    if len(operator)!= len(array):\n        raise ValueError(\"operator list must be equal to array\")\n\n    # First check if there is only one operator in operator list\n    if len(operator) == 1:\n        return operator[0]\n    else:\n        return {\n            '+': do_algebra(operator, operand),\n            '*': do_algebra(operator, operand),\n            '-': do_algebra(operator, operand),\n            '+': do_algebra(operator, operand),\n            '*': do_algebra(operator, operand),\n            '-': do_algebra(operator, operand),\n            '+': do_algebra(operator, operand),\n            '*': do_algebra(operator, operand),\n            '-': do_algebra(operator, operand),\n            '+': do_algebra(operator, operand),\n            '*': do_algebra(operator, operand),\n            '-': do_algebra(operator, operand),\n            '+': do_algebra(operator, operand),\n            '*': do_algebra(operator, operand),\n            '-': do_algebra(operator, operand),\n            '+': do_", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    if operator not in operand:\n        raise ValueError(\"operator must be a list.\")\n    for index in range(len(operand[index])):\n        if operator[index] in operand[index]:\n            result.append(operand[index][index])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    for operator in operator:\n        if operator in operand:\n            return operator, operand[operator]\n    return None, None", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    if operator is None:\n        raise ValueError(\"operator is None\")\n\n    for i in operand:\n        result.append(operator[i] * operand[i])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    return list([op for op in operator if op[0] < operand[0] for operand in operand] + list(operand))", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator not in operator_list:\n        raise ValueError(\"operator must be one of: \" + repr(operator))\n    if operand not in operand_list:\n        raise ValueError(\"operand must be one of: \" + repr(operand))\n\n    # For each operator, construct the algebraic expression\n    for i in range(len(operator)):\n        op = operator[i]\n        operands = operand[i]\n\n        # Construct a list of results\n        result = []\n        for j in range(len(operands)):\n            result.append(do_algebra(op, operands[j]))\n\n        # Return the list of results\n        return result\n\n    # For each operand, construct the algebraic expression\n    for j in range(len(operands)):\n        operands[j] = math.floor(operands[j])\n        result = []\n        for i in range(len(op)):\n            result.append(do_algebra(op, operands[i]))\n\n        # Return the list of results\n        return result\n\n    return None", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    length = len(operator)\n    length = len(operand) + 1\n    result = 0\n    while length > 0:\n        if operator[length - 1] == '*':\n            length -= 1\n            result *= operand[length - 1]\n        else:\n            length += 1\n        operand = operand[:length]\n        operator = operand[length:]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) > 1:\n        raise ValueError('Operator must be of type [string, int] and operand list must contain one integer')\n    if len(operand) > 1:\n        raise ValueError('Operand list must contain one integer')\n    if operator[0]!= '+' and operand[0]!= '*':\n        raise ValueError('Operator must be of type [string, int] and operand list must contain one integer')\n    if operator[0]!= '-' and operand[0]!= '*':\n        raise ValueError('Operator must be of type [string, int] and operand list must contain one integer')\n\n    return operator[-1:-1]+operand[-1:-1]+[operator[1], operator[2]]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    #first check if the operator has more operands than the operand list\n    #if (len(operator) > len(operand)):\n    #    print(\"error, operator has more operands than the operand list\")\n    #    return\n\n    #second check if the operator list is a valid list\n    #if operator not in ['+', '*', '-']:\n    #    print(\"error, operator list is not a list\")\n    #    return\n\n    #check if the operator and the operand are the same length\n    #if len(operator) == len(operand):\n    #    print(\"error, operands are equal length\")\n    #    return\n\n    #add the items to the existing list\n    for i in range(len(operator)):\n        operator[i] += operand[i]\n\n    #add the two new items to the existing list\n    operator = operator[:len(operator) - 1] + operand[:len(operand) - 1]\n\n    #return the result\n    return operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == len(operand):\n        return operator[len(operand) - 1] + operand[len(operand) - 1]\n    else:\n        return operator[len(operand)] + operand[len(operand) - 1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Check length of operands\n    if len(operand)!= len(operator):\n        raise ValueError(\"operand has different length than operator.\")\n\n    # Check length of operator\n    if len(operator)!= len(operand):\n        raise ValueError(\"operand list has different length than operator list.\")\n\n    # Determine length of operator list\n    if len(operator)!= 1:\n        raise ValueError(\"operator list has different length than operator.\")\n\n    # Check length of operand list\n    if len(operand)!= len(operator):\n        raise ValueError(\"operand list has different length than operator list.\")\n\n    # Add elements\n    result = []\n    for i in range(len(operand)):\n        result.append(operator[i] + operand[i])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(operator):\n        i = i + 1\n        if operator[i] == operand[i]:\n            result.append(i)\n            return result\n        else:\n            result.append(operator[i] + operand[i])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    results = []\n    for operator, operand in zip(operator_list, operand_list):\n        if operator == '*':\n            result += operand\n        else:\n            result += operator(operand)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    while len(operator) > 0:\n        result += operator[-1][-1]\n    while len(operand) > 0:\n        result += operand[-1][-1]\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # assume the two lists are non-nil\n    if operand[0] is None:\n        raise ValueError(\"list must not be None\")\n\n    # first find the length of the operand list\n    length = len(operand)\n    # skip the first operand if it is a list, add 1\n    if length == 1:\n        length += 1\n    # get the first element of the operand list\n    try:\n        # check for empty list\n        if operand[0] is None:\n            raise ValueError(\"list must not be empty\")\n        # and loop through the list\n        for i in range(length):\n            # get the first element of the operand list\n            try:\n                # check for empty list\n                if operand[i] is None:\n                    raise ValueError(\"list must not be empty\")\n                # and loop through the list\n                for j in range(length):\n                    # get the first element of the operand list\n                    try:\n                        # check for empty list\n                        if operand[j] is None:\n                            raise ValueError(\"list must not be empty\")\n                        # and loop through the list\n                        if operator[i] == operator[j] and operand[i]!= operand[j]:\n                            raise ValueError(\"list must not contain operators of same length\")\n                    except ValueError:\n                        # if there was an error in the list, stop the", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) == 0 or len(operand) > len(operator):\n        raise ValueError(\"Number of operands and operands length mismatch\")\n    if len(operator)!= len(operand):\n        raise ValueError(\"Number of operands and operands length mismatch\")\n    if operand[len(operand)-1]!= 0:\n        raise ValueError(\"Number of operands and operands length mismatch\")\n    # Check for missing operators\n    if operator[-1]!= 0 or operator[-1][:1]!= operator[-1] or operator[-1][:-1]!= operator[-1]:\n        raise ValueError(\"Operator length mismatch\")\n    if len(operand)!= len(operator):\n        raise ValueError(\"Number of operands and operands length mismatch\")\n    # Check for missing operand\n    if operand[-1][:1]!= operand[-1] or operand[-1][:-1]!= operand[-1]:\n        raise ValueError(\"Operand length mismatch\")\n    # Check for non zero arguments\n    for i in range(len(operand)):\n        if operand[i]!= 0 and operand[i]!= 1:\n            raise ValueError(\"Argument index mismatch\")\n    # Check for missing operators\n    if not", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # for all i in operator:\n    #     yield i\n    #     yield operand[i]\n    #     yield \" + \"\n    #     yield operand[i + 1]\n    #     yield \" - \"\n    #     yield operand[i - 1]\n    #     yield \" * \"\n    #     yield operand[i + 2 + 1]\n    #     yield \" // \"\n    #     yield \" ** \"\n\n    for i in operator:\n        yield i\n\n    for i in operand:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in operand[-1]:\n        yield i\n\n    for i in", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    base = list(base_operand(operator, operand))\n    result = list(base_operand(operator, operand) + operand)\n\n    if len(base) == len(operand):\n        if len(result) == len(base):\n            result = list(base)\n    elif len(base) > len(operand):\n        result = list(base[:len(base)]) + list(operand)\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # convert operator list to a list of integers\n    try:\n        for operator in operator:\n            operator_list = [int(operator)]\n        else:\n            raise ValueError(\"Operator must be a list.\")\n    except:\n        operator_list = []\n\n    # build the algebric expression\n    # return the first element of result\n    result = operand[0]\n    if result is not None:\n        # result is a list of integers\n        result = list([int(x) for x in result])\n    else:\n        # result is a list of string\n        result = [''] * len(operand[0])\n    # return the result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise ValueError(\"Expected an array of lengths equal to the length of operator and operand.\")\n\n    # The length of the operator is the length of the operator plus one.\n    # If the length of the operand list is greater than the length of the operator\n    # list, then we don't have a list of operators.\n    if len(operand)!= len(operator):\n        raise ValueError(\"Expected an array of length equal to the length of operator and operand.\")\n\n    # The length of the operand list is the length of the operand plus one.\n    if len(operand)!= len(operator):\n        raise ValueError(\"Expected an array of length equal to the length of operator and operand.\")\n\n    # Initialize the result. If the length of the operands is greater than the length of the operator,\n    # then the result will be the length of the operand plus one.\n    if len(operand) > len(operator):\n        result = len(operand) + 1\n\n    # Find the length of the operator and operand list. If the length of the operand list\n    # is greater than the length of the operator list, then we don't have a list of operators", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operator = operator.lower()\n    operand = operand.lower()\n\n    if operator.lower() == '+' and operand.lower() == '*':\n        # if the operands are all non-negative integers, it's an addition\n        if len(operand) == 2:\n            # if operands are all non-negative integers\n            result = operand[0] + operand[1]\n        else:\n            # if the operands are all non-negative integers\n            result = operand[0] * operand[1]\n\n    elif operator.lower() == '-':\n        # if the operands are all non-negative integers\n        if len(operand) == 2:\n            # if the operands are all non-negative integers\n            result = operand[0] - operand[1]\n        else:\n            # if the operands are all non-negative integers\n            result = operand[0] * operand[1]\n\n    elif operator.lower() == '=':\n        # if the operands are all non-negative integers\n        if len(operand) == 2:\n            # if the operands are all non-negative integers\n            result = operand[0] == operand[1]\n        else:\n            # if the operands are all non-negative integers\n            result = operand[0] == operand[1]\n\n    elif operator.lower() == '<':\n        # if the operands are all non-negative integers\n        if len(oper", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < len(operand):\n        raise ValueError(\"Length of operand must be equal to or greater than length of operator\")\n    elif len(operand) > len(operator):\n        raise ValueError(\"Length of operator must be equal to or greater than length of operand\")\n\n    if operator.lower()!= operand.lower():\n        raise ValueError(\"Operator must be of the form '+', '*' or '-', which is not supported by operand list\")\n\n    while operator[-1]:\n        operator = operator[:-1]\n    while operand[-1]:\n        operand = operand[:-1]\n    while operator[-1]:\n        operator = operator[:-1]\n    while operand[-1]:\n        operand = operand[:-1]\n\n    return operator + operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if operator!= '+' and operator!= '-' and operator!= '*' and operator!= '/':\n        print \"(1) ERROR: A '+', '-', '*', '/' are expected.\"\n        raise ValueError(\"Expecting '+': '+', '-', '*', '/'\")\n\n    if operand!= []:\n        if operand[1]!= 0:\n            raise ValueError(\"Expecting operand to have only non-negative integers\")\n        else:\n            operand = operand[1:]\n\n    def evaluate(operand, operator, result):\n        if operator == '+' or operator == '*':\n            return result + operand[0]\n        elif operator == '/':\n            return result // operand[0]\n        else:\n            raise ValueError(\"Expecting '+': '+', '-', '*', '/'\")\n\n    # compute the list of operands\n    if operand[0] < 0:\n        operand = operand[1:]\n    if operand[1] < 0:\n        operand = operand[1:]\n    for i in range(len(operand)):\n        operand[i] = int(operand[i])\n\n    # compute the list of operators\n    if operator!= '*':\n        operator = '+'\n    for i in range(len(operand)):\n        operator = operator.lower() + '+' + operand[i]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n\n    for operator, operand in zip(operator, operand):\n        # Look for each operator in operator list\n        for operator_list in operator:\n            if isinstance(operator_list, list):\n                for operator in operator_list:\n                    operator = operator.split()[0]\n                    if operator not in result:\n                        result.append(operator)\n\n    # Store result in array\n    result = array + result\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    for i in range(len(operator)):\n        if operator[i] in operand:\n            result.append(operator[i])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['type'] not in ['+', '*', '-']:\n        raise ValueError(\"operator must be '+', '*', '-'\")\n    if operator['length'] < operand['length']:\n        raise ValueError(\"operand must be at least twice the length of operator\")\n\n    list_one = operator['list']\n    list_two = operand['list']\n    operator_list = [(list_one + list_two, operator) for operator in operator['list']]\n    operand_list = [(list_one, operand) for operand in operand['list']]\n\n    # Iterate through all operands, and call the method for each of them\n    for op in operand_list:\n        op(op_list)\n\n    return list_one", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # args:\n    # operator, operand\n\n    # Operand list\n    operands = operand\n    # How many operands are there?\n    length = len(operands)\n\n    # In the case of an empty operand list, we return False\n    if len(operands) == 0:\n        return False\n\n    # If there are no operands, we return True\n    if len(operands) == 0:\n        return True\n\n    # If there are more than one operand, we return False\n    if len(operands)!= 1:\n        return False\n\n    # If the length of operand list is greater than or equal to 2\n    if length >= 2:\n        return False\n\n    # If the length of operand list is less than or equal to 2\n    if length < 2:\n        return False\n\n    # If the length of operand list is zero\n    if len(operands)!= 0:\n        return False\n\n    # We are done. All the operands are added in the list to return result\n    result = operand[0] + operand[1]\n\n    # The length of operand list is equal to the length of the expression\n    return length == len(result) + 1", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # ***********\n    # Basic Algebra Operations\n    # ***********\n\n    if operator['+'] and operand:\n        result = operator['+'](operand)\n    elif operator['-'] and operand:\n        result = operator['-'](operand)\n    elif operator['*'] and operand:\n        result = operator['*'](operand)\n    elif operator['//'] and operand:\n        result = operator['//'](operand)\n\n    if operator['**'] and operand:\n        result = operator['**'](operand)\n    else:\n        result = operand\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < 2:\n        raise TypeError(\"operator list has to be an integer list\")\n\n    if len(operand)!= 2:\n        raise TypeError(\"operand list has to be an integer list\")\n\n    list_of_expressions = []\n\n    for i in range(len(operand)):\n        list_of_expressions.append(operator[i]+operand[i])\n\n    return list_of_expressions", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n\n    if operator is not None and len(operand) > 0:\n        for operator in operator:\n            result.append(do_algebra(operator, operand[0]))\n\n    if operator is not None and len(operand) > 0:\n        for operator in operator:\n            result.append(do_algebra(operator, operand[1]))\n\n    if operator is not None and len(operand) > 0:\n        for operator in operator:\n            result.append(do_algebra(operator, operand[2]))\n\n    if operator is not None and len(operand) > 0:\n        for operator in operator:\n            result.append(do_algebra(operator, operand[3]))\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '+' and operand == []:\n        return operator\n    elif operator == '*' and operand == []:\n        return operator\n    elif operator == '-' and operand == []:\n        return operator\n    elif operator == '/' and operand == []:\n        return operator\n    elif operator == '%' and operand == []:\n        return operator\n    elif operator == '*=' and operand == []:\n        return operator\n    elif operator == '*=' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:\n        return operator\n    elif operator == '-' and operand == []:\n        return operator\n    elif operator == '-' and operand == []:\n        return operator\n    elif operator == '/' and operand == []:\n        return operator\n    elif operator == '/' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:\n        return operator\n    elif operator == '+' and operand == []:", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Create the list of basic algebra operations\n    operatorlist = []\n    for op in operator:\n        operatorlist.append(op)\n\n    # Create a list of integers. We need to do this because operator must be a list of integers.\n    operandlist = []\n    for i in range(len(operand)):\n        operandlist.append(i)\n\n    # Build the algebra expression\n    algebra_expr = ''\n    for operator in operatorlist:\n        algebra_expr += '(' + operator + ') *'+ operandlist[i] + ')'\n\n    return algebra_expr", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is None:\n        raise ValueError('operator argument must be a list')\n    if operand is None:\n        raise ValueError('operand argument must be a list')\n    if len(operator) < len(operand):\n        raise ValueError('length of list of operators must be equal to length of list of operands')\n\n    if operator[0] == '+' and operand[0] == '*':\n        return operand[1:len(operand)]\n    elif operator[0] == '-' and operand[0] == '*':\n        return operand[len(operand):]\n    elif operator[0] == '*' and operand[0] == '-':\n        return operand[:len(operand)]\n    elif operator[0] == '/' and operand[0] == '*':\n        return operand[len(operand):]\n    elif operator[0] == '+' and operand[0] == '/':\n        return operand[:len(operand)]\n    elif operator[0] == '*' and operand[0] == '/':\n        return operand[len(operand):]\n    elif operator[0] == '+' and operand[0] == '/':\n        return operand[len(operand):]\n\n    return operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Build operands for addition\n    addOp = operator.split(\"+\")\n    # Base array\n    baseOp = operator.split(\"-\")[0]\n    # The first operands\n    addOp[0] = baseOp\n    # The second operands\n    addOp[1] = operand\n    # Return result\n    return addOp[2:] + operand[2:]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if operator['+' in operand]:\n        new_list = []\n        new_list.append(operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator['+', operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    list = [operator[l for l in operand if l < 0] for l in operand]\n    nums = operand.keys()\n    assert len(list) == len(nums) - 1\n    for i in range(len(list)):\n        assert operator[list[i]] == nums[i]\n    return list[0]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert len(operator) >= 2 and len(operand) >= 2\n    assert len(operator) == len(operand) - 1\n    return operator[-len(operator):] + operand[-len(operand):]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def compose(operator, operand):\n        if isinstance(operator, list):\n            return operator.copy()\n        else:\n            if isinstance(operand, list):\n                return []\n            else:\n                return operator.copy() + operand.copy()\n\n    if operator['type'] == 'plus':\n        return operator['+', operand]\n    else:\n        if operator['type'] == 'times':\n            return operator['*']\n        else:\n            if operator['type'] == 'divide':\n                return operator['/']\n            else:\n                return operator['**']\n\n    def _subs(operator, operand):\n        try:\n            if isinstance(operator, list):\n                return operator.copy()\n            else:\n                return operand.copy()\n        except TypeError:\n            return []\n\n    def _multiply(operator, operand):\n        try:\n            if isinstance(operator, list):\n                return operator.copy()\n            else:\n                return operand.copy()\n        except TypeError:\n            return []\n\n    def _sum(operator, operand):\n        try:\n            if isinstance(operator, list):\n                return operator.copy()\n            else:\n                return operand.copy()\n        except TypeError:\n            return []\n\n    def _sqrt(operator, operand):\n        try:\n            if isinstance(operator, list):\n                return operator.copy()\n            else:\n                return operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operators = operator.split(' ')\n    result = []\n    for operator in operators:\n        if operator in operand:\n            result.append(operator)\n        else:\n            print('Error! This operator cannot be applied to expression:'+ operator)\n            raise ValueError('Operator does not exist in operand')\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '+' or operator == '*' or operator == '-':\n        if operand == ['+']:\n            return operator['plus'](array)\n        elif operand == ['/']:\n            return operator['divide'](array)\n        elif operand == ['**']:\n            return operator['exp'](array)\n        else:\n            raise ValueError(\"Invalid operand list\")\n\n    return 0", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Get the list\n    list = list(operator, operand)\n\n    # Transform to list of integers\n    list = list([int(i) for i in list])\n\n    # Apply the operations\n    result = 0\n    for i in range(len(list)):\n        result += operator[i](list[i])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise ValueError('num of operands and operators must be the same.')\n    listOperator = [operator]\n    listOperands = [operand]\n    try:\n        listOperatorLen = len(listOperator)\n    except:\n        listOperatorLen = len(operator)\n    listOperandsLen = len(listOperands)\n\n    for i in range(listOperatorLen):\n        listOperator[i] = None\n        listOperands[i] = None\n\n    return Expression(listOperator, listOperands)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Basic algebra operations\n    if isinstance(operator, dict):\n        for operator in operator:\n            if operator not in ['+', '*', '-']:\n                operator = '-' * operator\n\n        # We have a number which can be used to build an expression.\n        # The length of the list is the length of operand, plus one.\n        operatorlist = []\n        operandlist = []\n        for operator, operand in zip(operator, operand):\n            if operator not in ['+', '*', '-']:\n                operatorlist.append('-' * operator)\n            else:\n                operandlist.append(operator)\n\n        # Now, we have to build an expression from these expressions.\n        # We just have to add some length to each list and add the lengths to the other lists.\n        # This will give us the length of an expression in the form\n        #\n        #   - + + + + + + + + + + + + + + + + + + + + + +\n        #\n        # Here + is the operation, + is the operand, and + + + + + + + + + + + + + + + + is the length of the expression.\n\n        # We have the expressions to build the expression.\n        # We add some length to each list and add the lengths", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if isinstance(operand, list):\n        list = operand\n    else:\n        list = []\n\n    # To compute the sum of two lists, one list is concatenated with the other list\n    # We get two lists of length 2. We can use the familiar length of lists to count\n    # the length of each element. The element at position i in the first list\n    # is shorter than the element at position j in the second list.\n    # Therefore, we can use the length of list at position i to count the length\n    # of list at position j. Also, we can use the length of list at position j to\n    # count the length of list at position i.\n    #\n    # Using the above, we can compute:\n    #\n    # operator[0] + operator[1] = operator[2]\n    #\n    # This gives us:\n    #\n    # operator[0] + operator[1] = [ 2 + 3 * 4 - 5, 9 ]\n    #\n    # Now we can compute the sum of this list with this list. We can use the\n    # length of list at position i to compute the length of list at position j.\n    # Also, we can use the length of list at position j to compute the length\n    # of list at position i.", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if isinstance(operator, list):\n        return operator + operand\n    elif isinstance(operator, list):\n        return operator + operand[:]\n    elif isinstance(operator, int):\n        return operator\n    else:\n        return operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operand or not operand[0]:\n        raise ValueError('Operand must be a list of non-negative integers.')\n    if not operator or not operand[1]:\n        raise ValueError('Operator list must contain at least one operator.')\n\n    if operand[0] == operator:\n        return operand[1]\n    else:\n        return do_algebra(operator, operand[1:])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    for operator, operand in zip(operator, operand):\n        if operator not in operator_list:\n            raise ValueError('Expected an operator.')\n        if operand not in operand_list:\n            raise ValueError('Expected an operand.')\n        if operator!= operand[0]:\n            raise ValueError('Expected operators with the same name.')\n        if operator not in operator_list.keys():\n            raise ValueError('Expected operators with the same name.')\n        if operand[0]!= operand[1]:\n            raise ValueError('Expected operands with the same length.')\n\n    if len(operator) < 2 or len(operand) < 2:\n        raise ValueError('Expected at least 2 operators and at least 2 operands')\n\n    return op(operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    n = len(operator)\n    # insert a zero in the array if there is no operator in the array\n    if n == 0:\n        operator.insert(0, 0)\n\n    # if there is a zero, then it is the first element, so it is a list\n    if n == 0:\n        operand.insert(0, [])\n\n    # construct the expression\n    return operator + operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator:\n        list_index = 0\n    else:\n        list_index = len(operand)\n    for i in range(list_index+1):\n        list_index = i\n    if operator:\n        list_index = list_index\n    for i in operand:\n        list_index = i + 1\n    if list_index!= len(operand):\n        raise ValueError('Number of operands does not match length of operator list')\n    return operator[list_index] + operand[list_index]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is not None:\n        operator = re.sub(r'[^0-9]', '', operator)\n        operand = re.sub(r'[^0-9]', '', operand)\n        # Check length of operand list\n        if len(operand) == len(operator)-1:\n            raise ValueError(\"operand list must have at least two arguments\")\n        else:\n            operand = [operand] + operand\n            operator = re.sub(r'[^0-9]', '', operator)\n\n    return operator, operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise ValueError('Operands have different lengths.')\n\n    if operator == '+' or operator == '-':\n        op_plus = '+'\n    elif operator == '*':\n        op_minus = '*'\n    elif operator == '/':\n        op_divide = '/'\n    elif operator == '**':\n        op_exponent = '**'\n\n    # Compute all the operations:\n    if len(operand) == 0:\n        raise ValueError('To sum and divide, you need at least one operand.')\n\n    # Evaluate the expression with all the known operations:\n    for op in operator:\n        if op not in operand:\n            raise ValueError('Invalid operand (%s)' % op)\n        # Evaluate the expression with the given operand and the given op:\n        op_eval = do_algebra(op, operand[op])\n        result = op_eval\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if isinstance(operator, str):\n        operator = [operator]\n\n    for i in operand:\n        if isinstance(i, str):\n            if operator[i] is not None:\n                raise TypeError('Operand list must contain only string')\n        elif i is None:\n            raise TypeError('Operand must be a list')\n\n    if isinstance(operand, str):\n        if operator in operand:\n            raise TypeError('Operand list must contain only string')\n    else:\n        if operand is not None:\n            raise TypeError('Operand list must contain only string')\n        else:\n            raise TypeError('Operand list must contain only string')\n\n    result = []\n    for operator in operator:\n        result.extend(do_algebra(operator, operand))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # 1. Basic algebra operations\n    if isinstance(operator, list):\n        for operator in operator:\n            operands = []\n            for operand in operand:\n                operands.append(operator(operand))\n            if len(operands) == 1:\n                result = operator(operands[0])\n            else:\n                result = operator(operands, operands[1:])\n        else:\n            raise Exception('Operator list must be a list of 2 elements')\n    else:\n        raise Exception('Operator list must be a list of 3 elements')\n\n    # 2. Addition and subtraction\n    if operator['+'] and operand and operands == operand:\n        return operator['+'](operands)\n    elif operator['-'] and operand and operands == operand:\n        return operator['-'](operands)\n    elif operand and operand == operand:\n        return operator['-'](operands)\n    elif not operand and operand:\n        return operator['-'](operands)\n    else:\n        return None\n\n    # 3. Multiplication, Division, and Exponentiation\n    if operator['*'] and operand and operands == operand:\n        return operator['*'](operands)\n    elif not operand:\n        return operator['*'](operands)\n    elif operand and operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operand[0] == 0:\n        # returns 1\n        return 1\n\n    if operand[0] == 1:\n        # returns 2\n        return 2\n\n    if operand[0] == 2:\n        # returns 3\n        return 3\n\n    if operand[0] == 3:\n        # returns 4\n        return 4\n\n    if operand[0] == 4:\n        # returns 5\n        return 5\n\n    if operand[0] == 5:\n        # returns 6\n        return 6\n\n    if operand[0] == 6:\n        # returns 7\n        return 7\n\n    if operand[0] == 7:\n        # returns 8\n        return 8\n\n    if operand[0] == 8:\n        # returns 9\n        return 9\n\n    # operator is a list of elements, and operand is a list of elements\n\n    if len(operator) == len(operand) - 1 and operand[0] == 0:\n        # operator is a list of elements, operand is a list of elements\n        return operator[len(operand) - 1] + operand[len(operand) - 1]\n\n    if operator[len(operand) - 1] == 0:\n        # operator is a list of elements, operand is a list of elements\n        return operator\n\n    if len(operator) == len(operand) - 1 and operand[0] == 1:\n        # operator is a list of elements, operand is a list of elements\n        return operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    length = len(operator)\n    length = length + 1\n    if length > operand.shape[0]:\n        raise ValueError('Length of operand and operator list are unequal.')\n\n    expression = []\n    for i in range(len(operator)):\n        expression.append(operator[i] + operand[i])\n    return expression", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # check the lengths\n    if operator.shape!= operand.shape:\n        raise ValueError(\"operator and operand are not of the same length\")\n\n    # Make a list of combinations\n    combinations = {}\n    for k in operator:\n        combinations[k] = []\n        for i in operand:\n            combinations[k].append(k + i)\n\n    # now add all combinations to a list\n    result = []\n    for k in combinations:\n        result.append(combination[k])\n\n    # now check if result is empty\n    if result == []:\n        return result\n\n    # now return the result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    if operator in operand:\n        for oper in operand[operator]:\n            result = result * oper\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) <= 1:\n        return 0\n\n    if len(operand)!= 2:\n        raise ValueError('Expected 2 elements, got {}'.format(len(operand)))\n    result = []\n    for i in range(len(operand)):\n        operator_list = operator.split('-', 1)\n        operand_list = operand.split('-', 1)\n        result.append(do_algebra(operator_list[i], operand_list[i]))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is not None and operand is None:\n        return\n    length = len(operator)\n    operand.reverse()\n\n    if length == 0:\n        return\n\n    if length == 1:\n        # Use add and sub to generate the expression\n        operand.append(operator)\n        return operator\n\n    # Use two operations to generate the expression\n    result = operator['+'](operator['*'](operand))\n    if result == operator['+']:\n        result = operator['*'](operand)\n    elif result == operator['+']:\n        result = operator['*'](operand, operand[0])\n    else:\n        result = operator['*'](operand, operand[0], operand[1])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if isinstance(operator, list):\n        # if the length of list is equal to the length of operand list, then if list is\n        # a tuple, then it's the list of lists that represent the operands.\n        if len(operator) == len(operand):\n            return operator, operand\n        else:\n            # if the length of list is greater than len(operand), then if list is a tuple\n            # it means we have more operands than the list of operands, and if list is not\n            # a tuple, then it means we've got a list of tuples\n            if len(operand) > len(operator):\n                raise ValueError(\"operator list has more elements than operand list\")\n            elif len(operator)!= len(operand):\n                raise ValueError(\"operand list has more elements than operator list\")\n            else:\n                # the length of operands list is equal to the length of operator list\n                return operator, operand\n\n    elif isinstance(operator, tuple):\n        # if the length of list is greater than len(operand), then if list is a tuple\n        # it means that the length of the list is greater than the length of the operands, and if\n        # list is not", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # initialize, assign, and free variables\n    if operator not in ['+', '*', '-']:\n        raise Exception('Invalid operator in'+ operator)\n    if operand not in ['*', '+', '-', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '+', '-', '*', '", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '+' or operator == '*':\n        operands = [element for element in operand]\n        result = operator(operands, operand)\n    else:\n        for element in operand:\n            if operator in element:\n                result = operator(element, operand)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Defining first order functions:\n    def basic_algebra(operator, operand):\n        \"\"\"\n        Given a list of integers, operator, and operand. Return the evaluation of this\n        expression. \n        operator is a list of three elements, consisting of operator and operand\n        operand is a list of integers, returned by operator['+', '*', '-']\n        returns the number of operations to be performed.\n\n        \"\"\"\n        result = 0\n        for op in operator:\n            if op[1] == operand[1] and op[0] == operand[0]:\n                result += op[1] * operand[0]\n\n        return result\n\n    # Defining second order functions:\n    def second_algebra(operator, operand):\n        \"\"\"\n        Given two lists operator, and operand. Return the evaluation of this\n        expression. \n        operator is a list of three elements, consisting of operator and operand\n        operand is a list of integers, returned by operator['+', '*', '-']\n        returns the number of operations to be performed.\n\n        \"\"\"\n        result = 0\n        for op in operator:\n            if op[1] == operand[1] and op[0] == operand[0]:\n                result += op[1] * operand[0]\n\n        return result\n\n    # Using the two lists to build the algebric expression and return the evaluation", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if type(operator) is list and len(operand) < len(operator):\n        raise ValueError('operator and operand must be lists of nonnegative integers')\n\n    for i in range(len(operand)):\n        operand[i] = operator[i]\n    return operator, operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    assert operand.__class__ == list\n    assert len(operand) == len(operator)\n\n    # Set operands\n    assert len(operand) == 1\n    operands = operand[0]\n    assert len(operands) == 1\n\n    # Set the length of operator list\n    operator_length = len(operator)\n\n    # Set the length of operand list\n    operand_length = len(operand)\n\n    # Set the length of the output list\n    output_length = len(operator) + len(operand)\n\n    # Set the length of the output list\n    output_length = max(output_length, operand_length)\n\n    # Apply the algebra operation on the two lists\n    result = []\n    for operator in operator:\n        result.append(do_algebra(operator, operand))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Use a dict to maintain the operands in one list and the results in the other.\n    result = {}\n    for operator in operator:\n        result[operator] = []\n        for operand in operand:\n            result[operator][operand].append(do_algebra(operator, operand))\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = list(range(len(operator), len(operand)))\n    if len(operator) > len(operand):\n        error = 'Failed to build expression because of length differences.'\n        raise ValueError(error)\n\n    # If the length of the operands is greater than the length of the operator, then\n    # we have to reset the operands.\n    if len(operand) > len(operator):\n        for i in range(len(operand)):\n            operand[i] = []\n\n    result.append(operator[len(operand) - 1] + operand[len(operand) - 1])\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is None:\n        raise ValueError(\"operator must be specified\")\n    if operand is None:\n        raise ValueError(\"operand must be specified\")\n\n    if len(operator)!= len(operand):\n        raise ValueError(\"operator and operand lists must be of same length\")\n\n    if operator is None:\n        return None\n    if len(operand)!= len(operator):\n        raise ValueError(\"operand lists must be of same length\")\n\n    for i in range(len(operator)):\n        if operator[i]!= operand[i]:\n            raise ValueError(\"operator list must be of same length\")\n\n    for i in range(len(operand)):\n        if operand[i] is None:\n            return None\n        if len(operand[i])!= len(operator[i]):\n            raise ValueError(\"operand list must be of same length\")\n\n    return operator[i] + operand[i]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise TypeError('Expected lists of length n and length m respectively.')\n    elif len(operator) == len(operand):\n        return operator[len(operand):], operand[len(operand):]\n    else:\n        assert operator, 'Expected list of operators and list of operands of length'+ \\\n                str(len(operator)) +'and'+ str(len(operand))\n        assert operand, 'Expected list of operands and list of operators of length'+ \\\n                str(len(operand)) +'and'+ str(len(operator))\n\n    if operator.startswith('-') and operand.startswith('-'):\n        return operator.replace('-', '-'), operand.replace('-', '-')\n    elif operator.startswith('+') and operand.startswith('+'):\n        return operator.replace('+', '+'), operand.replace('+', '+')\n    else:\n        assert operator, 'Expected operands and operators of length'+ \\\n                str(len(operator)) +'and'+ str(len(operand))\n\n    result = []\n    for i, op in enumerate", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if isinstance(operand, list):\n        if len(operand) > 1:\n            raise ValueError(\"Operand list must contain at least two operands.\")\n        result = []\n        for i in operand:\n            result.append(operator.do_algebra(i, operand[i]))\n    else:\n        result = operator.do_algebra(operand)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not operator or operand:\n        raise ValueError(\"operator, operand must be integers\")\n\n    if operator is None:\n        raise ValueError(\"operator must be given\")\n\n    if operator not in ['+', '*'] and operand not in ['+', '*']:\n        raise ValueError(\"operator, operand list must be non-negative integers\")\n\n    if operator == '+' and operand:\n        raise ValueError(\"operator, operand list must be non-negative integers\")\n\n    if operator in ['-', '*', '/'] and operand:\n        raise ValueError(\"operator, operand list must be non-negative integers\")\n\n    return operator.__call__(operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not isinstance(operand, list):\n        raise ValueError('Operand must be a list of non-negative integers')\n\n    # Basic algebra operations\n    operator_list = operator.split(' ')\n    operand_list = operand.split(' ')\n    operands = [int(x) for x in operands]\n    base = operand_list[0]\n    for i in range(len(operand_list)):\n        if operand_list[i]!= base:\n            raise ValueError('Operand lists must be equal')\n\n        # Get a tuple of the elements of the first operand list\n        element = operands[i]\n        if operator_list[0] == '+' or operator_list[0] == '*':\n            if element[0]!= 0:\n                raise ValueError('Operand lists must have the same length')\n\n        # Get a tuple of the elements of the second operand list\n        element = operand_list[i]\n        if operator_list[1] == '-' or operator_list[1] == '/':\n            if element[0]!= 1:\n                raise ValueError('Operand lists must have the same length')\n\n        if operator_list[0] == '*' or operator_list[0] == '/':\n            # Calculates the sum of elements\n            sum = element[0] * element[1]\n            # Addition\n            result = sum - operand_list[0]\n            #", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 1 and len(operand) == 1:\n        return operator[0] + operand[0]\n\n    # The length of operator list is greater than the length of operand list.\n    if len(operator) > len(operand):\n        raise ValueError('too many operands for list operator')\n\n    # The length of operand list is greater than the length of operator list.\n    if len(operand) > len(operator):\n        raise ValueError('too many operands for list operand')\n\n    # The length of operand list is equal to the length of operator list.\n    if len(operand) == len(operator):\n        return operator[0] + operand[0]\n\n    # The length of operand list is less than the length of operator list.\n    if len(operand) < len(operator):\n        raise ValueError('too few operands for list operand')\n\n    # The length of operand list is less than the length of operator list.\n    if len(operand) < len(operator):\n        raise ValueError('too few operands for list operand')\n\n    # The length of operand list is greater than the length of operator list.\n    if len(operand) > len(operator):\n        raise ValueError('too", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '+':\n        return 1 + operand\n    elif operator == '*':\n        return 1 * operand\n    elif operator == '-':\n        return -1 * operand\n    elif operator == '+':\n        return operand[0]\n    elif operator == '*':\n        return operand[1:]\n    elif operator == '-':\n        return operand[1]\n    else:\n        raise ValueError('Operator'+ operator +'not supported')", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '*':\n        if operand == 0:\n            raise ValueError('operator must be plus or minus')\n        else:\n            return int(operator) * int(operand)\n\n    elif operator == '+':\n        if operand == 0:\n            raise ValueError('operator must be plus or minus')\n        else:\n            return int(operator) + int(operand)\n\n    elif operator == '=':\n        if operand == 0:\n            raise ValueError('operator must be plus or minus')\n        else:\n            return int(operator) == int(operand)\n\n    else:\n        raise ValueError('unknown operator: %r' % operator)\n\n    # Check whether the input is a list of numbers or a list of strings\n    if operand is not list:\n        raise ValueError('operand must be a list of integers or a list of strings')\n\n    # Recurse the list\n    return do_algebra(operator, [int(x) for x in operand])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator.__class__ == types.ListType:\n        # TODO\n\n    if operator.__class__ == types.TupleType:\n        # TODO\n    else:\n        raise ValueError('Invalid type')\n\n    op = operator.__class__\n    if not isinstance(operand, list):\n        operand = list(operand)\n\n    if not isinstance(operator, types.ListType):\n        raise ValueError('Invalid type')\n\n    # First, do the basic algebra\n    result = []\n    for o, a in enumerate(operand):\n        result.append(do_algebra(op, a))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is None:\n        return\n    if operand is None:\n        return\n    if len(operand)!= len(operator):\n        raise ValueError(\"Length of operand list and operator list differs!\")\n    if not isinstance(operand, list):\n        operand = operand[:]\n    if not isinstance(operator, list):\n        operator = operator[:]\n    if len(operand)!= len(operator):\n        raise ValueError(\"Length of operand list and operator list differs!\")\n    for i, operand in enumerate(operand):\n        if len(operand[i]) == len(operator[i]):\n            if operator[i]:\n                # operator[i] = operator[i] + operand[i]\n                result = operator[i] + operand[i]\n            else:\n                # operand[i] = operand[i] - operator[i]\n                result = operand[i] - operator[i]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not isinstance(operator, list):\n        raise ValueError(\"operator must be a list\")\n    if not isinstance(operand, list):\n        raise ValueError(\"operand must be a list\")\n\n    for operator, operand in zip(operator, operand):\n        if operator == '+' or operator == '*' or operator == '-':\n            result = operand + operator\n        elif operator == '**':\n            result = operand ** operator\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operand[0] >= len(operator):\n        operator.append(operand[0])\n        operand.append(operand[1:])\n\n    if operand[0] < len(operator):\n        raise ValueError('Operand must be at least two')\n\n    if operand[0] == len(operator):\n        return operator\n    else:\n        # Count number of operations.\n        op = 0\n        for i in operand:\n            op += 1\n        result = 0\n        while op < len(operator):\n            result += do_algebra(operator[op], operand[op])\n            op += 1\n        return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator == '+' or operator == '*':\n        return add(operator, operand)\n    else:\n        return operate(operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator not in ['+', '*', '-']:\n        raise ValueError(\"Invalid operator\")\n    if operand not in ['+', '*', '-']:\n        raise ValueError(\"Invalid operand\")\n\n    # Convert to list\n    operatorlist = operator.split('+')\n    operandlist = operand.split('+')\n\n    # Convert to lists\n    operatorlist = operatorlist[:]\n    operandlist = operandlist[:]\n\n    # Evaluate the expression\n    if operator not in ['+', '*', '-']:\n        return\n\n    # Create a simple list of all possible combinations of operands\n    # Add up all the operands\n    sum = 0\n    for op in operatorlist:\n        sum += op\n\n    # Add all the operands together\n    sum += operandlist\n\n    # Zero the sum\n    sum = 0\n    for op in operatorlist:\n        sum = sum + op\n\n    # Create the expression\n    result = sum\n\n    # Return the expression\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # see if we have the right number of operands and operators\n    operands = [len(operand) for operand in operand]\n    operators = [len(operator) for operator in operator]\n    length = len(operands) - 1\n    for operator in operators:\n        length -= 1\n    length += 1\n    result = []\n\n    if length < 0:\n        raise ValueError(\"Error: list length is too small.\")\n\n    for operand in operands:\n        for operator in operators:\n            if operand!= operator:\n                if operator in operator:\n                    break\n                else:\n                    raise ValueError(\"Error: operands list not equal to operator list.\")\n            result.append(do_algebra(operand, operator))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Special case of algebra operations:\n    if operator in ('+', '*', '-':\n        return [math.pow(i, operator), math.pow(j, operator) for i, j in zip(operator, operand)]\n    elif operator in ('+', '-', '*', '-':\n        return [math.log(i), math.log(j) for i, j in zip(operator, operand)]\n    else:\n        raise ValueError(\"Invalid operator type: %r\" % operator)\n\n    return []", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator.lower().startswith('+'):\n        op = '+'\n        operand = list(operand)\n    elif operator.lower().startswith('-'):\n        op = '-'\n        operand = list(operand)\n    else:\n        raise ValueError('Operator must be '+str(operator)+' or '-')\n\n    if operator in ('+', '-'):\n        return operator + operand\n    else:\n        return operand[len(operator)-1:] + operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # create a list of all the operators\n    operator_list = []\n    for i in operand:\n        operator_list.append(\"*\" + str(i) + \"+\")\n    return operator_list", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['type'] not in ('+', '*', '-':\n        raise ValueError('Type of operation should be '+str(type(operand)))\n    if not operand:\n        raise ValueError('Operand must be a list of non-negative integers.')\n    if len(operand)!= len(operator):\n        raise ValueError('Operand list should have the same length as operator list.')\n    for i, oper in enumerate(operator):\n        if oper not in operand:\n            raise ValueError('Operator \"+ \"+ not in operand.')\n    for i, val in enumerate(operand):\n        if val not in operand:\n            raise ValueError('Operand \"+ \"+ not in operand.')\n    return [val, operator[i]]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = [ list(x for x in operator)[0] for x in operand ]\n    if len(result)!= len(operator):\n        raise ValueError(\"Length of operator and operand are not equal.\")\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = {}\n    for operator in operator:\n        result[operator] = do_operation(operand, operator)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator:\n        operator = operator.copy()\n    else:\n        operator = {}\n\n    # The length of operand list\n    length = len(operand)\n    # First, remove the first element\n    operand[0] = operand[0] - 1\n    # Create a list of operands\n    operands = operand\n\n    for i in range(length):\n        if operator[i] is not None:\n            operands.append(operator[i](operand[i:i+length]))\n    # Next, add all operands and return\n    return do_algebra(operands)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Nested lists do not allow use of getitem()\n    # list = [1, 2, 3, 4, 5, 6]\n    list = (operand for operand in operand if operand!= [])\n    # getitem does not work for nested lists\n    for item in list:\n        list = list - item\n        # operator = []\n        # operand = item\n        # result = operator ** operand\n\n    # Loop to iterate over the list of operands\n    for item in operand:\n        # Add to the list\n        if operator:\n            result += operator.getitem(item)\n        else:\n            result += item\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    a = operator.keys()\n    b = operand.keys()\n    op = 0\n    count = 0\n    if len(a) > len(b):\n        op = 1\n    for i in range(len(a)):\n        if i in operator:\n            op = operator.index(a[i])\n        if i in b:\n            op = b.index(a[i])\n    if op == 0:\n        return 0\n    elif op == 1:\n        return 1\n    else:\n        return (math.pow(b[op], 2) + math.pow(a[op], 2) - 1) / 2", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    return operator[(not operator)] + operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand)!= len(operator):\n        raise ValueError('Addition or Subtraction must have the same length as operand')\n\n    # Assign operators to operands.\n    result = [op for op in operand]\n    for op in operator:\n        result.append(op(result))\n\n    # Evaluate expression. Use the given operands.\n    try:\n        result = eval(result)\n    except ValueError:\n        raise ValueError('Failed to evaluate expression: %s' % repr(expression))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise ValueError(\"Incorrect length of operators: %r and %r\" % (len(operator), len(operand)))\n    if len(operand)!= 1:\n        raise ValueError(\"Incorrect length of operands.\")\n    return operator.get(operand[0], None) + operand[1]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator.startswith('+') and operand.startswith('+'):\n        return add(operator, operand)\n    if operator.startswith('-') and operand.startswith('-'):\n        return subtract(operator, operand)\n    if operator.startswith('*') and operand.startswith('*'):\n        return *(operator + operand)\n    if operator.startswith('/') and operand.startswith('/'):\n        return /(operator * operand)\n    if operator.startswith('*') and operand.startswith('**'):\n        return **(operator * operand)\n    if operator.startswith('+') and operand.startswith('/'):\n        return +(operator + operand)\n    if operator.startswith('-') and operand.startswith('/'):\n        return -(operator - operand)\n    if operator.startswith('+') and operand.startswith('+'):\n        return +(operator + operand)\n    if operator.startswith('-') and operand.startswith('+'):\n        return -(operator - operand)\n    if operator.startswith('/') and operand.startswith('/'):\n        return /(operator * operand + operand)\n    if operator.startswith('+') and operand.startswith", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = None\n    if operator in operand:\n        result = operand[operator](operand[operator], operand[operator + 1])\n    else:\n        if operand:\n            result = operand[-1]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operand) < len(operator):\n        return 0\n\n    if len(operand) == len(operator):\n        return operand[0] + operand[1]\n\n    if len(operand) == 0:\n        return operator[0]\n\n    if len(operand) == 1:\n        result = operator[0] + operand[1]\n\n    if len(operand) == 2:\n        result = operator[0] + operand[1] + operand[2]\n\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operator) < len(operand):\n        raise ValueError('operand must be an integer list, and operator list has more than one operator')\n\n    for i in range(len(operator)):\n        if operator[i]!= operand[i]:\n            raise ValueError('operator does not match operand')\n\n    return operator[i] + operand[i]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # The length of the input operands can be calculated\n    # from the length of the operator list.\n    operands = numpy.arange(len(operand))\n\n    # Get length of operator list\n    length = len(operator)\n\n    # There is no operator in the first operand\n    if length == 0:\n        return None\n\n    # If we have a multiplicator in the first operand, there is a multiplication operator\n    if operand[0].ndim == 1:\n        op_mul = operand[0].dot(operand[1])\n        return numpy.multiply(op_mul, operand[1].dot(operand[0]))\n\n    # There is no multiplicator in the first operand\n    if length == 2:\n        return None\n\n    # If we have a modulus in the first operand, there is a floor division operator\n    if operand[0].ndim == 2:\n        op_div = operand[0].floor(operand[1])\n        return numpy.modulus(op_div, operand[1].floor(operand[0]))\n\n    # There is no modulus in the first operand\n    if length == 3:\n        return None\n\n    # If we have a multiplication operator, there is a floor division operator\n    if operand[0].ndim == 3:\n        op_div = operand[0].floor(operand[1])\n        return numpy", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Variables\n    operands = []\n    length = len(operand) - 1\n    result = 0\n\n    # Loop over elements of operand list\n    for i in range(length):\n        # add to operands\n        operands.append(operand[i])\n        result += operand[i]\n\n    # return result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = 0\n    for o in operand:\n        if o not in operator:\n            raise ValueError(\"operator.list.add: \" + o)\n        result += o\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # If the operands are both lists, then they are all lists.\n    if len(operand) == len(operator):\n        # If they have the same length, then they are all lists.\n        if len(operand[0]) == len(operand[1]):\n            # If they have the same number of elements, then they are all lists.\n            if len(operand[0]) == len(operand[1]):\n                # If they are all lists, then we have a list of tuples.\n                return operator, operand[0], operand[1], operand[2], operand[3]\n            # If they are all lists, but some are not lists, then they are all lists but not tuples.\n            else:\n                # If there are more than one list, then the list is not a list.\n                if len(operand[0])!= len(operand[1]):\n                    # If there are more than one list, then the list is not a list.\n                    return operator, operand[0], operand[1], operand[2], operand[3]\n        else:\n            # Otherwise, they are not lists.\n            return None\n\n    # Otherwise, they are both lists.\n    else:\n        # If they have the same length, then they are both lists.\n        if len(operand[0])!= len", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        raise ValueError(\"Illegal operands length (%d) and length of operator (%d)\" % (len(operator), len(operand)))\n    if len(operator)!= len(operand[1:]):\n        raise ValueError(\"Illegal operand length (%d) and length of operator (%d)\" % (len(operator), len(operand)))\n    if len(operator)!= len(operand[0]):\n        raise ValueError(\"Illegal operand length (%d)\" % len(operand))\n    else:\n        if operator[0] == '*':\n            operand.append(operand[0] + operand[1:])\n        elif operator[0] == '+' or operator[0] == '-':\n            operand.append(operand[0])\n        elif operator[0] == '/' or operator[0] == '**':\n            operand.append(-1 * operand[1:])\n        else:\n            raise ValueError(\"Illegal operand type for operator (%s)\" % operator[0])\n    return operator[-1][len(operand):] + operand[1:]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # operator\n    operator_list = operator.split('+')\n    operand_list = operand.split('*')\n    num = len(operator_list) + len(operand_list)\n    operator_list = operator_list[num:]\n    operand_list = operand_list[num:]\n    # print operator, operand\n    return operator, operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # -- The operator list\n    operator = [operator, operator]\n\n    # -- The operand list\n    operand = [operand, operand]\n\n    # -- The list of integers\n    n = len(operand)\n\n    # -- The length of the operator list\n    length = len(operator)\n\n    # -- The length of the operand list\n    length = len(operand)\n\n    # -- The length of the total number of operations\n    totalLength = length + 1\n\n    # -- The length of the number of operations\n    totalLength = length\n\n    # -- The number of operations\n    totalLength = length\n\n    # -- The sum of all the operations\n    sum = 0\n\n    # -- The number of operations\n    totalLength = length\n\n    # -- The expression\n    return (\"\".join([''.join(x) for x in operator]) + \" + \" +\n            \" \".join([''.join(x) for x in operand]) + \" = \" +\n            \" \".join([''.join(x) for x in operator]) + \" * \" +\n            \" \".join([''.join(x) for x in operand]) + \" = \" +\n            \" \".join([''.join", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if type(operator) not in (list, tuple, list):\n        raise ValueError('Invalid list type')\n\n    if type(operand) not in (list, tuple):\n        raise ValueError('Invalid list type')\n\n    return operator, operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    op, operand = operator, operand\n\n    for i, op_e in enumerate(op):\n        for j, operand_e in enumerate(operand):\n            if op_e in operand and operand_e in operand_e:\n                result = operands[i] * operand_e[op_e] + operands[j] * operand_e[operand_e]\n                break\n\n    # Return the result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operator[operand[0], operand[1]]\n    if operand[1] == 0:\n        result += operand[0]\n    else:\n        result *= operand[0]\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator)!= len(operand):\n        return \"Error: The operands must have the same length.\"\n    if len(operator) == 0:\n        return \"Error: The first operand must have a non-zero length.\"\n    if len(operand)!= len(operator) - 1:\n        return \"Error: The second operand must have a non-zero length.\"\n    result = []\n    for operator in operator:\n        if len(operator)!= len(operand) - len(operator):\n            return \"Error: The length of operator list is not equal to length of operand list.\"\n        result.append(do_algebra(operator, operand[len(operator) - len(operator): -len(operator)]))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    for i in range(len(operand)):\n        result.append(eval(operand[i]))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    n = len(operator)\n    op = operator[-n:]\n    if n < 0:\n        raise ValueError('Operator list must have length at least one')\n\n    if n == len(operand)-1:\n        return operand\n    elif n == 0:\n        return operator\n    else:\n        # The length of operand list is equal to the length of operator list\n        operand = operand[n:]\n        return do_algebra(op, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Update values in operands list.\n    if len(operand) < 2:\n        operand.append(0)\n    else:\n        operand[0] += 1\n    if len(operator) < 2:\n        operator.append(0)\n    else:\n        operator[0] += 1\n    # Create a new list that contains the list of operands.\n    # The length of this list is the length of operator list minus one.\n    operands = [operand]\n\n    # For each operator, create a new list that contains the list of operands.\n    # The length of this list is the length of operator list minus one.\n    for i in range(1, len(operator)):\n        # Add 1 to the first operand to make sure it is non-negative.\n        operands[i] += 1\n    # Create a new list that contains the list of operand.\n    # The length of this list is the length of operator list minus one.\n    operand = [operand]\n\n    # Create an operator list that contains a list of operators and operands.\n    # The length of this list is the length of operator list minus one.\n    operator_list = []\n    for i in range(1, len(operator)):\n        operator_list.append([operator[i], operands[i]])\n    # Return the expression.\n    return operator", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    for op, val in operator.items():\n        if not isinstance(val, list):\n            val = [val]\n\n    if len(operand)!= len(operator):\n        raise ValueError(\"Operands and operands length mismatch: operator = %r, operand = %r\" % (\n            operator, operand))\n    elif len(operand) == 0:\n        raise ValueError(\"Operands have zero length\")\n    else:\n        if operator == '*':\n            return operator[:] + operand\n        elif operator == '+':\n            return operator[:] + operator[-1:]\n        elif operator == '-':\n            return operator[:] - operator[-1:]\n        elif operator == '*':\n            return operator[:] * operand\n        elif operator == '+':\n            return operator[:] + operand\n        elif operator == '-':\n            return operator[:] - operand\n        elif operator == '*':\n            return operator[:] * operand[-1:]\n        elif operator == '+':\n            return operator[:] + operand[-1:]\n        elif operator == '-':\n            return operator[:] - operand[-1:]\n\n    return operator[-1:] + operand[-1:]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operand)!= 2:\n        raise TypeError(\"operator should be a list of numbers\")\n\n    if len(operator)!= 2:\n        raise TypeError(\"operator should be a list of numbers\")\n\n    # First step: Basic algebra operations\n    # operator[0] = operator[1]\n    # operator[1] = operand[1]\n    # operator[2] = operand[2]\n    # operator[3] = operand[3]\n\n    operator = numpy.asarray(operator)\n    operand = numpy.asarray(operand)\n\n    # First step: Calculating the first operand\n    # index = operator.size\n    index = 0\n    while index < len(operator):\n        index += 1\n        operand[index] = numpy.asarray(operand[index - 1])\n\n    # Second step: Calculating the second operand\n    # index = operand.size\n    index = 0\n    while index < len(operand):\n        index += 1\n        operand[index] = numpy.asarray(operator[index])\n\n    # First step: If there are no other operator, we have the same result as the first\n    # step, which is the result of multiplication by the first operand.\n    # Second step: If there are other operator, we have the same result as the second\n    # step, which is the result of", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if not isinstance(operand, list):\n        operand = [operand]\n\n    if operator.has_key('+'):\n        if operand.has_key('+'):\n            operator = '+'\n        else:\n            return operator\n\n    if operator.has_key('-'):\n        if operand.has_key('-'):\n            operator = '-'\n        else:\n            return operator\n\n    if operator.has_key('*'):\n        if operand.has_key('*'):\n            operator = '*'\n        else:\n            return operator\n\n    if operator.has_key('/'):\n        if operand.has_key('/'):\n            operator = '/'\n        else:\n            return operator\n\n    return operator, operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # parse list of integers to integers\n    # each operand is a list of integers\n    operands = []\n    for i in range(len(operand)):\n        operands.append([])\n    for i in range(len(operand[0])):\n        operands[0].append(i)\n\n    # Set up operator\n    operators = []\n    for i in range(len(operand)):\n        # Operand is a list of integers\n        operands[i] = [float(i) for i in operand[i]]\n\n    # For each operand, we add a function that will evaluate the expression\n    # This function will be called for each operand, and will return the result of \n    # the expression.\n    for i in range(len(operands)):\n        for j in range(len(operands[i])):\n            for k in range(len(operands[i][k])):\n                # Evaluate the expression\n                result = operands[i][k][i]\n                # add a handler that will print the result\n                # result = eval(f(i, j, k))\n                result = operator.do_algebra(operands[i][k], result)\n\n    # return the result of the expression\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if isinstance(operator, list):\n        if len(operand) < len(operator):\n            raise ValueError(\"operator and operand lists must be of the same length\")\n        else:\n            operator_list = operator\n    else:\n        operator_list = operator\n    operand_list = operand\n    result = []\n    for i, operator in enumerate(operator_list):\n        result.append(do_algebra(operand[i], operand[i+1]))\n    return result\n</s>", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # check input list\n    if len(operator)!= len(operand):\n        raise ValueError('Operator must have length: {}, operand must have length: {}'.format(len(operator), len(operand)))\n    elif len(operator)!= len(operand[operator.index('+'):]:):\n        raise ValueError('Operator must have length: {}, operand must have length: {}'.format(len(operator), len(operand)))\n    elif len(operator) < len(operand[operator.index('-'):]:):\n        raise ValueError('Operator must have length: {}, operand must have length: {}'.format(len(operator), len(operand)))\n    else:\n        # for each operator, add corresponding arguments to operand list\n        for i, op in enumerate(operator):\n            # check operand list\n            if not isinstance(operand[i], list):\n                raise ValueError('Operand must be a list.')\n            # add operator to list of arguments\n            operand[operator.index(op)].append(operand[i])\n\n    # return result\n    return operator[operator.index('+'):] + operand[operator.index('-')", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # get length of operand list\n    num = len(operand)\n\n    # if length of operand list is less than length of operator list\n    if num < len(operator):\n        return operator[num]\n    # if length of operand list is more than length of operator list\n    else:\n        return []\n\n    # build basic algebra\n    oper = []\n    result = []\n    for num in operand:\n        oper.append(do_algebra(operator[num], operand[num]))\n    # return the evaluation\n    return operator[num], result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    op_len = len(operator)\n    operand_len = len(operand)\n    if operand_len!= op_len:\n        raise Exception(\"Operands length differ: operand_len = %d, operator_len = %d\" % (operand_len, op_len))\n    if operand_len == 0:\n        raise Exception(\"operand list empty\")\n\n    op = {\n        '+' : operator['+'],\n        '*' : operator['*'],\n        '-' : operator['-'],\n        '+' : operator['+'],\n        '-' : operator['-'],\n        '*' : operator['*'],\n        '/' : operator['/'],\n        '%' : operator['%'],\n        '+' : operator['+'],\n        '-' : operator['-'],\n        '%' : operator['%'],\n        '+' : operator['+'],\n        '-' : operator['-'],\n        '%' : operator['%'],\n        '+' : operator['+'],\n        '-' : operator['-'],\n        '%' : operator['%'],\n        '+' : operator['+'],\n        '-' : operator['-'],\n        '%' : operator['%'],\n        '+' : operator['+'],\n        '-' : operator['-'],\n        '%' : operator['%'],\n        '+' : operator['+'],\n        '-' : operator['-'],\n        '%'", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Calculation of length\n    length = 0\n    for operator in operator:\n        length += 1\n    length -= 1\n    length = length + 1\n    result = []\n\n    if length <= 0:\n        raise ValueError('Length of operator and operand must be greater or equal to zero')\n\n    # Obtain the result\n    for operator, operand in operand:\n        result.append(operator[length:] + operand[length:])\n\n    # Return the result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = []\n    for operator in operator:\n        result.append(operator( operand[ operator ]))\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Number of operands\n    length = len(operator)\n    # Number of operators\n    length2 = length - 1\n    \n    if length <= 0:\n        return\n    else:\n        # Compile operator list\n        for operator in operator:\n            # Number of operands\n            length3 = len(operand)\n            # Number of operators\n            length2 = length3 - 1\n            # Compute length of operator list\n            length = length3\n            # Evaluate operator\n            result = operator.__getitem__(length)\n            # Return the evaluation of the expression\n            return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0 or len(operand) == 0:\n        raise ValueError('not enough parameters.')\n    if len(operator) > len(operand) - 1:\n        raise ValueError('not enough parameters.')\n    if len(operator) < len(operand) + 1:\n        raise ValueError('not enough parameters.')\n    if len(operator)!= len(operand) + 1:\n        raise ValueError('not enough parameters.')\n    if not operator.has_key('+'):\n        raise ValueError('not enough parameters.')\n\n    # Create a list of operators\n    operators = [\n        operator['+', '*, '-']\n        for operator in operator.keys()\n    ]\n    # Create a list of operands\n    operand = operand.copy()\n    # For each operator, add the operands to the operand list\n    for operator in operators:\n        operand.append(operand[operator])\n    # Add the result to the operator list\n    operator['+', '*, '-'].append(result)\n    # Return the result\n    return operator['+', '*, '-']", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['plus'] in operands.keys():\n        if not operand.has_key(operator['plus']):\n            raise ValueError(\"operator should have 'plus' in operand list, \"\n                                 \"but it has not.\")\n        add = operand[operator['plus']-1]\n    elif operator['minus'] in operands.keys():\n        if not operand.has_key(operator['minus']):\n            raise ValueError(\"operator should have'minus' in operand list, \"\n                                 \"but it has not.\")\n        del = operand[operator['minus']-1]\n    elif operator['*'] in operands.keys():\n        if not operand.has_key(operator['*']):\n            raise ValueError(\"operator should have '*' in operand list, \"\n                                 \"but it has not.\")\n        mul = operand[operator['*']-1]\n    elif operator['//'] in operands.keys():\n        if not operand.has_key(operator['//']):\n            raise ValueError(\"operator should have '//' in operand list, \"\n                                 \"but it has not.\")\n        div = operand[operator['//']-1]\n    else:\n        raise ValueError(\"operator should have '*' or '//", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def add(a, b):\n        return a + b\n    def sub(a, b):\n        return a - b\n    def mul(a, b):\n        return a * b\n    def floor(a):\n        return int(a / float(a))\n    def exp(a):\n        return float(a) ** 2\n    def sqrt(a):\n        return float(a) ** 3\n    def abs(a):\n        return float(a) ** 4\n    def sin(a):\n        return float(a) ** 5\n    def cos(a):\n        return float(a) ** 6\n    def tan(a):\n        return float(a) ** 7\n    def atan(a):\n        return float(a) ** 8\n    def absdiff(a, b):\n        return abs(a - b)\n\n    # The list of integers is added to the list of integers, then passed to each operation.\n    result = []\n    for i in operand:\n        # Add integers to the list of integers.\n        result.append(do_algebra(operator[i], operand[i]))\n    # The result is concatenated. The order is the same as the list of integers.\n    return ''.join", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    operator_to_val = {\n        '+': operator['+'], \n        '*': operator['*'], \n        '-': operator['-'], \n        '/': operator['//'], \n        **: operator['**']\n    }\n    result = 0\n    for operator, operand in operator_to_val.items():\n        result += do_algebra(operator, operand)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    l = operator.split(\",\")\n    r = operand.split(\",\")\n    # Make sure the length of operand list is at least two.\n    if len(l)!= len(r) - 1:\n        raise ValueError(\"Length of operands cannot be greater than length of operators.\")\n\n    # Do algebra on each element.\n    for i in range(len(l)):\n        for j in range(len(r)):\n            if operator[j][:i] == r[i]:\n                operator[j][:i] = r[j]\n            else:\n                operator[j][:i] = r[j] + operator[j][:i]\n\n    return operator[l[i]] * operator[r[i]]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # initialise the results\n    result = []\n    while len(operator) < len(operand):\n        result.append(0)\n    while len(operand) < len(operator):\n        result.append(0)\n\n    return (result)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator in operator_list:\n        value = operator(*operator_list[operator])\n    else:\n        raise RuntimeError(\"Operator must be in operator_list, cannot do %s.\" % operator)\n\n    if operand in operand_list:\n        value = operand(*operand_list[operand])\n    else:\n        raise RuntimeError(\"Operand must be in operand_list, cannot do %s.\" % operand)\n\n    return value", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['+'] == '-':\n        return operand - operand\n    if operator['+'] == '*':\n        return operand * operand\n    if operator['+'] == '/':\n        return operand // operand\n    if operator['+'] == '*':\n        return operand * operand // operand\n    if operator['+'] == '/':\n        return operand // operand // operand // operand\n    return operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator.startswith('+'):\n        return operator + operand\n    elif operator.startswith('-'):\n        return operator - operand\n    else:\n        return operator * operand", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # The length of the operator list is the length of operand list plus one.\n    length = len(operator)\n    length = length - 1\n    # The length of the operand list is the length of the operator list plus one.\n    length = len(operand) + 1\n    # The length of the expression is the length of the operand list plus one.\n    length = length - 1\n    # The length of the result is the length of the operand list plus one.\n    length = length - 1\n    # The length of the result is the length of the operator list plus one.\n    length = length - 1\n    # The length of the result is the length of the operand list plus one.\n    length = length - 1\n    # The length of the result is the length of the operator list plus one.\n    length = length - 1\n    # The length of the result is the length of the operator list plus one.\n    length = length - 1\n    # The length of the result is the length of the operator list plus one.\n    length = length - 1\n    # The length of the result is the length of the operator list plus one.\n    length = length - 1\n    # The length of the result is the length of the operator list plus one.\n    length = length - 1\n    # The", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator.startswith('+'):\n        array = operand[0] + operand[1]\n        result = operand[0] * operand[1]\n    elif operator.startswith('-'):\n        array = operand[0] - operand[1]\n        result = operand[0] * operand[1] * operand[2]\n    elif operator.startswith('*='):\n        array = operand[0] * operand[1]\n        result = operand[0] * operand[1] * operand[2]\n    elif operator.startswith('%'):\n        array = operand[0] * operand[1]\n        result = operand[0] * operand[1] * operand[2]\n\n    return array", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    for operator in operator:\n        for operand in operand:\n            if operator not in operand:\n                raise ValueError('operator not in operand')\n\n    return eval('operator[' + operator + ',' + operand])", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # build expression\n    # result = operator.subtract(operand)\n\n    # if an error occurs, return\n    if result is None:\n        raise ValueError('Invalid expression')\n\n    # build result\n    result = []\n    for l in operand:\n        result.append(l)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    try:\n        operator = list(list(map(operator, operand)))\n    except:\n        operator = []\n    result = []\n    for o in operator:\n        result += o(array, o)\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator.name in operator_regex:\n        if operand.name in operand_regex:\n            raise ValueError(\"Calculation of algebraic expression with list of operators \"\n                             \"contains both operations for which the expression is valid\")\n        else:\n            raise ValueError(\"The expression must contain two operations with the same name\")\n\n    if operator in operators:\n        return operators[operator](operand)\n    else:\n        return do_algebra(operator, operand)", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator is None:\n        raise ValueError('Operator list is required')\n\n    # Used to construct the input\n    input = []\n    if isinstance(operand, list):\n        input.extend(operand)\n\n    # Binary operator\n    for i, op in enumerate(operator):\n        # Generate input values (may have length higher than required)\n        if len(operand) > i:\n            input.append(i - len(operand) + 1)\n        else:\n            input.append(i)\n\n    # Do basic algebra operations on input\n    for i in range(len(input)):\n        try:\n            operand[i] = operator[i](input[i])\n        except ValueError:\n            print \"Error in operator: \" + str(i)\n            raise\n\n    # Return result\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if operator['plus']:\n        # Operand list has one element.\n        result = operator['plus'](operand)\n    else:\n        # Operand list has two elements.\n        result = operator['plus']([]) + operand\n    return result", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    try:\n        result = []\n        for operator in operator:\n            for operand in operand:\n                result.append(operator[operand] + operator[operator] * operand[operand])\n        return result\n    except IndexError:\n        return False", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    r = 0\n    for operator in operator:\n        for i in operand:\n            r += operator(i, i + 1)\n        return r\n\n    return 0", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # check that the length of the operand list is equal to the length of the operator list.\n    if len(operand)!= len(operator):\n        raise ValueError('Illegal argument length.')\n\n    # compute the elements of the operands.\n    values = []\n    for i in range(len(operand)):\n        value = int(operand[i])\n        values.append(value)\n    # compute the elements of the operator list.\n    operands = []\n    for i in range(len(operator)):\n        operator = operator[i]\n        operand = operand[i]\n        values.append(operator)\n        operands.append(operand)\n\n    # build an expression\n    expression = \"\"\n    for value in values:\n        expression += value\n    return expression", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) < len(operand):\n        raise ValueError('Operator lists must have the same length')\n    for i in range(len(operator)):\n        if operator[i][0]!= operand[i][0]:\n            raise ValueError('Operator lists must have the same length')\n    return operator[range(len(operator))] + operand[range(len(operand))]", "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # First construct the basic algebra expressions:\n    new_list = []\n    for operator in operator['+']:\n        new_list.append({'operation': operator, 'operand': operand})\n    for operator in operator['*']:\n        new_list.append({'operation': operator, 'operand': operand})\n    for operator in operator['-']:\n        new_list.append({'operation': operator, 'operand': operand})\n    for operator in operator['//']:\n        new_list.append({'operation': operator, 'operand': operand})\n    for operator in operator['**']:\n        new_list.append({'operation': operator, 'operand': operand})\n\n    # And now, add the basic algebra expressions together and return the result:\n    result = 0\n    for list in new_list:\n        result += list.operation(list.operand)\n    return result"]]