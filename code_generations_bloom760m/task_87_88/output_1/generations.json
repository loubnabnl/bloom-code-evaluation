[["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if lst[0] == 0:\n        lst = lst[1:]\n    if lst[0] == len(lst)-1:\n        lst = lst[:-1]\n    # sort by columns\n    if lst[1] == 0:\n        lst = lst[1:]\n    if lst[1] == len(lst)-1:\n        lst = lst[:-1]\n    # sort by coordinates\n    if lst[2] == 0:\n        lst = lst[1:]\n    if lst[2] == len(lst)-1:\n        lst = lst[:-1]\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == len(x):\n        return lst\n    else:\n        return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index: %i\" % x)\n    if x >= len(lst):\n        raise ValueError(\"invalid index: %i\" % x)\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return []\n    if x == 1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst) - 1:\n        return lst[x]\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x < len(lst) - 1:\n        return lst[:x]\n    else:\n        return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    else:\n        return [(x, y) for x, y in zip(lst, xrange(x))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = lst.index(x)\n    if x >= len(lst):\n        return []\n    return [(x, lst[x]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return lst\n    if x == len(lst):\n        return lst[:x]\n    if x == 0:\n        return lst\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    else:\n        return [(x, i) for i in range(x, len(lst) - 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    else:\n        return [(x, x) for x in lst if x!= x-1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[0]!= x.shape[1]:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst)-1:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 1)]\n    if x == len(lst)-1:\n        return [(x, 2)]\n    return [(x, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = lst.index(x)\n    if x >= len(lst):\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == 1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == 1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == lst.shape[0]:\n        return []\n    if x == lst.shape[1]:\n        return []\n    if x == lst.shape[2]:\n        return []\n    if x == lst.shape[3]:\n        return []\n    if x == lst.shape[4]:\n        return []\n    if x == lst.shape[5]:\n        return []\n    if x == lst.shape[6]:\n        return []\n    if x == lst.shape[7]:\n        return []\n    if x == lst.shape[8]:\n        return []\n    if x == lst.shape[9]:\n        return []\n    if x == lst.shape[10]:\n        return []\n    if x == lst.shape[11]:\n        return []\n    if x == lst.shape[12]:\n        return []\n    if x == lst.shape[13]:\n        return []\n    if x == lst.shape[14]:\n        return []\n    if x == lst.shape[15]:\n        return []\n    if x == lst.shape[16]:\n        return []\n    if x == lst.shape[17]:\n        return []\n    if x == lst.shape[18]:\n        return []\n    if x == lst.shape", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index: \" + str(x))\n    if x >= len(lst):\n        raise ValueError(\"invalid index: \" + str(x))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[1:]\n    return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < len(lst):\n        return [(x, 0)]\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return [(x, 0)]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError('x must be greater than 0')\n    if x >= len(lst):\n        raise ValueError('x must be less than or equal to length(lst)')\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return lst[:x]\n    if x == len(lst):\n        return lst[1:]\n    return lst[:x] + lst[1:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order.\n    if x == 0:\n        x = lst[0]\n    if x == lst.shape[0]:\n        x = lst[1:]\n    if x == lst.shape[1]:\n        x = lst[:-1]\n    lst = lst[:x]\n    lst = [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]\n    # Sort coordinates by columns in descending order.\n    if x == lst.shape[0]:\n        x = lst[1:]\n    if x == lst.shape[1]:\n        x = lst[:-1]\n    lst = lst[:x]\n    lst = [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    if x == len(lst) - 4:\n        return [(x, 3)]\n    if x == len(lst) - 5:\n        return [(x, 4)]\n    return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if lst[0] == lst[1]:\n        lst = lst[1:]\n    else:\n        lst = [lst]\n    # sort by columns\n    if lst[0] == lst[1]:\n        lst = lst[1:]\n    else:\n        lst = [lst]\n    # sort by coordinates\n    if lst[0] == lst[1]:\n        lst = lst[1:]\n    else:\n        lst = [lst]\n    # sort by rows\n    if lst[0] == lst[1]:\n        lst = lst[1:]\n    else:\n        lst = [lst]\n    # sort by columns\n    if lst[0] == lst[1]:\n        lst = lst[1:]\n    else:\n        lst = [lst]\n    # sort by coordinates\n    if lst[0] == lst[1]:\n        lst = lst[1:]\n    else:\n        lst = [lst]\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if lst[0] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by columns\n    if lst[1] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by first element\n    if lst[0] == 1:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by last element\n    if lst[1] == 1:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by first element\n    if lst[0] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by last element\n    if lst[1] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if x == 0:\n        return []\n    if x < len(lst) - 1:\n        return lst[x]\n    if x > len(lst) - 2:\n        return lst[x + 1]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    return [(x, i) for i in range(x, len(lst) - 1, -1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return lst\n    else:\n        return [(x, 1) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    else:\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if lst[0] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by columns\n    if lst[1] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by coordinates\n    if lst[2] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # return\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index: %s\" % x)\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[x:]\n    return lst[:x] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    return [(x, 0), (x, 1), (x, 2)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return [(0, 0)]\n    if x == len(lst)-1:\n        return [(x, 0)]\n    if x == len(lst)-1:\n        return [(x, len(lst)-1)]\n    if x == len(lst)-1:\n        return [(x, len(lst)-1)]\n    if x == len(lst)-1:\n        return [(x, len(lst)-1)]\n    if x == len(lst)-1:\n        return [(x, len(lst)-1)]\n    if x == len(lst)-1:\n        return [(x, len(lst)-1)]\n    if x == len(lst)-1:\n        return [(x, len(lst)-1)]\n    return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort the list by rows\n    if lst[0] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:-1]\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort the list by columns\n    if lst[1] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:-1]\n    lst = sorted(lst, key=lambda x: x[1])\n    # return the list\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[x:]\n    if x == len(lst) - 3:\n        return lst[x:]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x == len(lst) - 2:\n        return []\n    if x == len(lst) - 3:\n        return []\n    if x == len(lst) - 4:\n        return []\n    if x == len(lst) - 5:\n        return []\n    if x == len(lst) - 6:\n        return []\n    if x == len(lst) - 7:\n        return []\n    if x == len(lst) - 8:\n        return []\n    if x == len(lst) - 9:\n        return []\n    if x == len(lst) - 10:\n        return []\n    if x == len(lst) - 11:\n        return []\n    if x == len(lst) - 12:\n        return []\n    if x == len(lst) - 13:\n        return []\n    if x == len(lst) - 14:\n        return []\n    if x == len(lst) - 15:\n        return []\n    if x == len(lst) - 16:\n        return []\n    if x == len(lst) - 17:\n        return []\n    if x == len(lst) - 18:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # First sort coordinates by rows in ascending order\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the first column is the first row)\n    # (i.e. the", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = lst.index(x)\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return []\n    if x == 1:\n        return lst[x]\n    if x == len(lst) - 1:\n        return lst[x]\n    return [(x, y) for x, y in zip(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = len(lst)\n    if x > len(lst):\n        x = len(lst) - 1\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return lst\n    if x == len(lst) - 2:\n        return lst[:x]\n    if x == len(lst) - 3:\n        return lst[x:x + 1]\n    return lst[:x] + lst[x:x + 1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = lst.index(x)\n    if x >= lst.size:\n        return []\n    if x == 0:\n        return []\n    if x == lst.size - 1:\n        return []\n    if x == lst.size - 2:\n        return []\n    if x == lst.size - 3:\n        return []\n    if x == lst.size - 4:\n        return []\n    if x == lst.size - 5:\n        return []\n    if x == lst.size - 6:\n        return []\n    if x == lst.size - 7:\n        return []\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[1]!= x.shape[1]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[2]!= x.shape[2]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[3]!= x.shape[3]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[4]!= x.shape[4]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[5]!= x.shape[5]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[6]!= x.shape[6]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[7]!= x.shape[7]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[8]!= x.shape[8]:\n        raise ValueError(\"lst.shape!= x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than len(lst)\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return lst[:x]\n    if x == len(lst):\n        return lst\n    return lst[:x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # First, sort the list by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # Now, sort the list by columns\n    lst = sorted(lst, key=lambda x: x[2], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst, key=lambda x: x[3], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst, key=lambda x: x[4], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst, key=lambda x: x[5], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst, key=lambda x: x[6], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst, key=lambda x: x[7], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst, key=lambda x: x[8], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst, key=lambda x: x[9], reverse=True)\n    # Now, sort the list by rows and columns\n    lst = sorted(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    return [(x, i) for i in range(x, len(lst) - 1, -1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    if x == len(lst) - 4:\n        return [(x, 3)]\n    if x == len(lst) - 5:\n        return [(x, 4)]\n    if x == len(lst) - 6:\n        return [(x, 5)]\n    return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if lst[0] == 0:\n        lst = lst[1:]\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by columns\n    if lst[0] == 0:\n        lst = lst[1:]\n    lst = sorted(lst, key=lambda x: x[2])\n    # return tuple([(x, y) for x, y in lst])\n    return tuple([(x, y) for x, y in lst])", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index\")\n    if x >= len(lst):\n        raise ValueError(\"invalid index\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == 2:\n        return lst[:x][1:]\n    if x == len(lst):\n        return lst[:x][1:]\n    return lst[:x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if lst[0] == 0:\n        return []\n    if lst[1] == 0:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1] + 1:\n        return []\n    if lst[0] == lst[1] + 2:\n        return []\n    if lst[0] == lst[1] + 3:\n        return []\n    if lst[0] == lst[1] + 4:\n        return []\n    if lst[0] == lst[1] + 5:\n        return []\n    if lst[0] == lst[1] + 6:\n        return []\n    if lst[0] == lst[1] + 7:\n        return []\n    if lst[0] == lst[1] + 8:\n        return []\n    if lst[0] == lst[1] + 9:\n        return []\n    if lst[0] == lst[1] + 10:\n        return []\n    if lst[0] == lst[1] + 11:\n        return []\n    if lst[0] == lst[1] + 12:\n        return []\n    if lst[0] == lst[1] + 13:\n        return []\n    if lst[0] == lst[1] + 14:\n        return []\n    if lst[0] == lst[1] + 15:\n        return []\n    if lst[0] == lst[1] + 16:\n        return []\n    if lst[0] == lst[1] + 17:\n        return []\n    if lst[0] == lst[1] + 18:\n        return []\n    if lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return lst\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 1:\n        return [(x, 1)]\n    if x == len(lst) - 1:\n        return [(x, 2)]\n    if x == len(lst) - 1:\n        return [(x, 3)]\n    if x == len(lst) - 1:\n        return [(x, 4)]\n    if x == len(lst) - 1:\n        return [(x, 5)]\n    if x == len(lst) - 1:\n        return [(x, 6)]\n    return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5), (x, 6)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x[0] == 0:\n        return []\n    if x[0] == len(lst) - 1:\n        return []\n    if x[0] == len(lst) - 2:\n        return []\n    if x[0] == len(lst) - 3:\n        return []\n    if x[0] == len(lst) - 4:\n        return []\n    if x[0] == len(lst) - 5:\n        return []\n    if x[0] == len(lst) - 6:\n        return []\n    if x[0] == len(lst) - 7:\n        return []\n    if x[0] == len(lst) - 8:\n        return []\n    if x[0] == len(lst) - 9:\n        return []\n    if x[0] == len(lst) - 10:\n        return []\n    if x[0] == len(lst) - 11:\n        return []\n    if x[0] == len(lst) - 12:\n        return []\n    if x[0] == len(lst) - 13:\n        return []\n    if x[0] == len(lst) - 14:\n        return []\n    if x[0] == len(lst) - 15:\n        return []\n    if x[0] == len(lst) - 16:\n        return []\n    if x[0] == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == len(x):\n        return [(x[0], x[1])]\n    else:\n        return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return lst\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        return []\n    if lst.shape[1]!= x.shape[1]:\n        return []\n    if lst.shape[2]!= x.shape[2]:\n        return []\n    if lst.shape[3]!= x.shape[3]:\n        return []\n    if lst.shape[4]!= x.shape[4]:\n        return []\n    if lst.shape[5]!= x.shape[5]:\n        return []\n    if lst.shape[6]!= x.shape[6]:\n        return []\n    if lst.shape[7]!= x.shape[7]:\n        return []\n    return lst.tolist()\n</s>", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    return [(x, i) for i in range(x, len(lst) - 1, -1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    else:\n        return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if lst[0] == 0:\n        return []\n    if lst[1] == 0:\n        return []\n    if lst[2] == 0:\n        return []\n    if lst[3] == 0:\n        return []\n    if lst[4] == 0:\n        return []\n    if lst[5] == 0:\n        return []\n    if lst[6] == 0:\n        return []\n    if lst[7] == 0:\n        return []\n    if lst[8] == 0:\n        return []\n    if lst[9] == 0:\n        return []\n    if lst[10] == 0:\n        return []\n    if lst[11] == 0:\n        return []\n    if lst[12] == 0:\n        return []\n    if lst[13] == 0:\n        return []\n    if lst[14] == 0:\n        return []\n    if lst[15] == 0:\n        return []\n    if lst[16] == 0:\n        return []\n    if lst[17] == 0:\n        return []\n    if lst[18] == 0:\n        return []\n    if lst[19] == 0:\n        return []\n    if lst[20] == 0:\n        return []\n    if lst[21] == 0:\n        return []\n    if lst[22] == 0:\n        return []\n    if lst[23] == 0:\n        return []\n    if lst[24] == 0:\n        return []\n    if lst[25] == 0:\n        return []\n    if lst[26]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if lst[0] == 0:\n        return []\n    if lst[1] == 0:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of lst\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return lst\n    if x == len(lst):\n        return [(x, 0)]\n    else:\n        return [(x, 1) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        x = len(lst) - 1\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == 1:\n        return [(lst[x][0], lst[x][1])]\n    if x == 2:\n        return [(lst[x][2], lst[x][3])]\n    if x == 3:\n        return [(lst[x][4], lst[x][5])]\n    if x == 4:\n        return [(lst[x][6], lst[x][7])]\n    if x == 5:\n        return [(lst[x][8], lst[x][9])]\n    if x == 6:\n        return [(lst[x][10], lst[x][11])]\n    if x == 7:\n        return [(lst[x][12], lst[x][13])]\n    if x == 8:\n        return [(lst[x][14], lst[x][15])]\n    if x == 9:\n        return [(lst[x][16], lst[x][17])]\n    if x == 10:\n        return [(lst[x][18], lst[x][19])]\n    if x == 11:\n        return [(lst[x][20]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if lst[0] == 0:\n        lst = lst[1:]\n    lst = [lst[x:x] for x in lst]\n    # sort by columns\n    if lst[0] == 1:\n        lst = lst[1:]\n    lst = [lst[x:x] for x in lst]\n    # sort by coordinates\n    if lst[0] == 2:\n        lst = lst[1:]\n    lst = [lst[x:x] for x in lst]\n    # return tuple\n    return tuple(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    else:\n        if x == len(lst)-1:\n            return []\n        else:\n            return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 1:\n        return lst[:x] + lst[1:]\n    return lst[:x] + lst[1:] + lst[x:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    if x == len(lst) - 4:\n        return [(x, 3)]\n    if x == len(lst) - 5:\n        return [(x, 4)]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if lst[0] == 0:\n        return []\n    if lst[1] == 0:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    else:\n        return [(x, x) for x in lst if x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x[0] == 0:\n        return []\n    if x[1] == 0:\n        return []\n    if x[0] == x[1]:\n        return []\n    if x[0] == x[1] + 1:\n        return []\n    if x[0] == x[1] + 2:\n        return []\n    if x[0] == x[1] + 3:\n        return []\n    if x[0] == x[1] + 4:\n        return []\n    if x[0] == x[1] + 5:\n        return []\n    if x[0] == x[1] + 6:\n        return []\n    if x[0] == x[1] + 7:\n        return []\n    if x[0] == x[1] + 8:\n        return []\n    if x[0] == x[1] + 9:\n        return []\n    if x[0] == x[1] + 10:\n        return []\n    if x[0] == x[1] + 11:\n        return []\n    if x[0] == x[1] + 12:\n        return []\n    if x[0] == x[1] + 13:\n        return []\n    if x[0] == x[1] + 14:\n        return []\n    if x[0] == x[1] + 15:\n        return []\n    if x[0] == x[1] + 16:\n        return []\n    if x[0] == x[1] + 17:\n        return []\n    if x[0] == x[1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == 0:\n        return []\n    if x < 0:\n        x = len(lst) - 1\n    if x > 0:\n        x = 0\n    if x == len(lst):\n        return []\n    return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    return [(x, i) for i in range(0, x, 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return lst[:x]\n    else:\n        return [(x, len(lst)) for x in range(0, x + 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[1:]\n    return [(x, y) for x, y in zip(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return lst\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == len(x):\n        return lst\n    else:\n        return [(x[0], x[1]) for x in lst if x[0] == x[1]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    return [(x, y) for x, y in zip(lst, xrange(x, x + 1))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == len(x):\n        return lst\n    else:\n        return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x == len(lst) - 2:\n        return []\n    if x == len(lst) - 3:\n        return []\n    if x == len(lst) - 4:\n        return []\n    if x == len(lst) - 5:\n        return []\n    if x == len(lst) - 6:\n        return []\n    if x == len(lst) - 7:\n        return []\n    if x == len(lst) - 8:\n        return []\n    if x == len(lst) - 9:\n        return []\n    if x == len(lst) - 10:\n        return []\n    if x == len(lst) - 11:\n        return []\n    if x == len(lst) - 12:\n        return []\n    if x == len(lst) - 13:\n        return []\n    if x == len(lst) - 14:\n        return []\n    if x == len(lst) - 15:\n        return []\n    if x == len(lst) - 16:\n        return []\n    if x == len(lst) - 17:\n        return []\n    if x == len(lst) - 18:\n        return []\n    if x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return lst\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst[0] == x and lst[1] == x and lst[2] == x and lst[3] == x and lst[4] == x and lst[5] == x and lst[6] == x and lst[7] == x and lst[8] == x and lst[9] == x and lst[10] == x and lst[11] == x and lst[12] == x and lst[13] == x and lst[14] == x and lst[15] == x and lst[16] == x and lst[17] == x and lst[18] == x and lst[19] == x and lst[20] == x and lst[21] == x and lst[22] == x and lst[23] == x and lst[24] == x and lst[25] == x and lst[26] == x and lst[27] == x and lst[28] == x and lst[29] == x and lst[30] == x and lst[31] == x and lst[32] == x and lst[33] == x and lst[34] == x and lst[35] == x and lst[36] == x and lst[37] == x and lst[38] == x and lst[39] == x and lst[40] == x and lst[41] == x and lst[42]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst) - 1:\n        return lst[1:]\n    return [(x, y) for x, y in zip(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[2], reverse=True)\n    # sort by first column\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort by last column\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by first row\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by last row\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by first column\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort by last column\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by first row\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by last row\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by first column\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort by last column\n    lst = sorted(lst, key=lambda", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return [(x, 0)]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates\n    if x < 0:\n        x = lst.index(lst[x])\n    if x > lst.index(lst[x + 1]):\n        x = lst.index(lst[x + 1])\n    if x < lst.index(lst[x + 2]):\n        x = lst.index(lst[x + 2])\n    if x > lst.index(lst[x + 3]):\n        x = lst.index(lst[x + 3])\n    # sort rows\n    if x < 0:\n        x = lst.index(lst[x])\n    if x > lst.index(lst[x + 1]):\n        x = lst.index(lst[x + 1])\n    if x < lst.index(lst[x + 2]):\n        x = lst.index(lst[x + 2])\n    if x > lst.index(lst[x + 3]):\n        x = lst.index(lst[x + 3])\n    # sort columns\n    if x < 0:\n        x = lst.index(lst[x])\n    if x > lst.index(lst[x + 1]):\n        x = lst.index(lst[x + 1])\n    if x < lst.index(lst[x + 2]):\n        x = lst.index(lst[x + 2])\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return lst[:]\n    if x == len(lst)-1:\n        return lst[1:]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[1:]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:-1]\n    if x == len(lst)-1:\n        return lst[:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == len(x):\n        return lst\n    if x[0] == 0:\n        return []\n    if x[0] == 1:\n        return [(x[1], x[2])]\n    if x[0] == 2:\n        return [(x[1], x[2])]\n    if x[0] == 3:\n        return [(x[1], x[2])]\n    if x[0] == 4:\n        return [(x[1], x[2])]\n    if x[0] == 5:\n        return [(x[1], x[2])]\n    if x[0] == 6:\n        return [(x[1], x[2])]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if lst[0] == 0:\n        return []\n    if lst[1] == 0:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return lst[:x]\n    if x >= len(lst):\n        return lst[:x]\n    if x == 0:\n        return lst\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    else:\n        return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if lst[0] == []:\n        return []\n    if lst[0].count(x) == 0:\n        return []\n    if lst[0].count(x) == 1:\n        return [(x, 0)]\n    if lst[0].count(x) == 2:\n        return [(x, 1)]\n    if lst[0].count(x) == 3:\n        return [(x, 2)]\n    if lst[0].count(x) == 4:\n        return [(x, 3)]\n    if lst[0].count(x) == 5:\n        return [(x, 4)]\n    if lst[0].count(x) == 6:\n        return [(x, 5)]\n    if lst[0].count(x) == 7:\n        return [(x, 6)]\n    if lst[0].count(x) == 8:\n        return [(x, 7)]\n    if lst[0].count(x) == 9:\n        return [(x, 8)]\n    if lst[0].count(x) == 10:\n        return [(x, 9)]\n    if lst[0].count(x) == 11:\n        return [(x, 10)]\n    if lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst.ndim == 1:\n        return lst[0]\n    if x.ndim == 1:\n        return x[0]\n    if x.ndim == 2:\n        return get_row(lst, x[0])\n    if x.ndim == 3:\n        return get_row(lst, x[1])\n    if x.ndim == 4:\n        return get_row(lst, x[2])\n    if x.ndim == 5:\n        return get_row(lst, x[3])\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, len(lst) - 1)]\n    if x == len(lst) - 3:\n        return [(x, len(lst) - 2)]\n    if x == len(lst) - 4:\n        return [(x, len(lst) - 3)]\n    if x == len(lst) - 5:\n        return [(x, len(lst) - 4)]\n    return [(x, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    return [(x, y) for x, y in zip(lst, xrange(x))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return lst\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = 0\n    if x > len(lst):\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return []\n    if x == 1:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    if x == 2:\n        return [(x, 1)]\n    if x == len(lst):\n        return [(x, 1)]\n    if x == 3:\n        return [(x, 2)]\n    if x == len(lst):\n        return [(x, 2)]\n    if x == 4:\n        return [(x, 3)]\n    if x == len(lst):\n        return [(x, 3)]\n    if x == 5:\n        return [(x, 4)]\n    if x == len(lst):\n        return [(x, 4)]\n    if x == 6:\n        return [(x, 5)]\n    if x == len(lst):\n        return [(x, 5)]\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst[0] == x and lst[1] == x and lst[2] == x and lst[3] == x and lst[4] == x and lst[5] == x and lst[6] == x and lst[7] == x and lst[8] == x and lst[9] == x and lst[10] == x and lst[11] == x and lst[12] == x and lst[13] == x and lst[14] == x and lst[15] == x and lst[16] == x and lst[17] == x and lst[18] == x and lst[19] == x and lst[20] == x and lst[21] == x and lst[22] == x and lst[23] == x and lst[24] == x and lst[25] == x and lst[26] == x and lst[27] == x and lst[28] == x and lst[29] == x and lst[30] == x and lst[31] == x and lst[32] == x and lst[33] == x and lst[34] == x and lst[35] == x and lst[36] == x and lst[37] == x and lst[38] == x and lst[39] == x and lst[40] == x and lst[41] == x and lst[42]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return lst[:x]\n    if x == len(lst) - 1:\n        return lst[1:]\n    if x == len(lst) - 2:\n        return lst[:x + 1]\n    if x == len(lst) - 3:\n        return lst[:x + 2 + 1]\n    return lst[:x] + lst[x:x + 2] + lst[x:x + 3 + 1] + lst[x:x + 4 + 1] + lst[x:x + 5 + 1] + lst[x:x + 6 + 1] + lst[x:x + 7 + 1] + lst[x:x + 8 + 1] + lst[x:x + 9 + 1] + lst[x:x + 10 + 1] + lst[x:x + 11 + 1] + lst[x:x + 12 + 1] + lst[x:x + 13 + 1] + lst[x:x + 14 + 1] + lst[x:x + 15 + 1] + lst[x:x + 16 + 1] + lst[x:x + 17 + 1] + lst[x:x + 18", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return lst\n    if x == len(lst):\n        return [(x, 0)]\n    else:\n        return [(x, 1) for x in range(x, len(lst)-1, -1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort the list\n    sorted_lst = []\n    for i in range(len(lst)):\n        sorted_lst.append(lst[i])\n    sorted_lst.sort(key=lambda x: x[0])\n    # find the first element in the list\n    first = sorted_lst[0]\n    # find the second element in the list\n    second = sorted_lst[1:]\n    # find the third element in the list\n    third = sorted_lst[2:]\n    # find the fourth element in the list\n    fourth = sorted_lst[3:]\n    # find the fifth element in the list\n    fifth = sorted_lst[4:]\n    # find the sixth element in the list\n    sixth = sorted_lst[5:]\n    # return the tuple\n    return (first, second, third, fourth, fifth, sixth)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        x = lst.index(lst[x])\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x == len(lst) - 2:\n        return []\n    if x == len(lst) - 3:\n        return []\n    if x == len(lst) - 4:\n        return []\n    if x == len(lst) - 5:\n        return []\n    return lst[x].tolist()", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort the list\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort the list by column\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort the list by row\n    lst = sorted(lst, key=lambda x: x[2])\n    # sort the list by column\n    lst = sorted(lst, key=lambda x: x[3])\n    # sort the list by row\n    lst = sorted(lst, key=lambda x: x[4])\n    # sort the list by column\n    lst = sorted(lst, key=lambda x: x[5])\n    # sort the list by row\n    lst = sorted(lst, key=lambda x: x[6])\n    # return the list\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return lst[:x]\n    if x == len(lst):\n        return lst\n    if x == 2:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == 3:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    return lst[:x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return lst\n    else:\n        return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == lst.shape[0]:\n        return lst\n    if x == lst.shape[1]:\n        return lst[:, :]\n    if x == lst.shape[2]:\n        return lst[:, :]\n    if x == lst.shape[3]:\n        return lst[:, :]\n    if x == lst.shape[4]:\n        return lst[:, :]\n    if x == lst.shape[5]:\n        return lst[:, :]\n    if x == lst.shape[6]:\n        return lst[:, :]\n    if x == lst.shape[7]:\n        return lst[:, :]\n    if x == lst.shape[8]:\n        return lst[:, :]\n    if x == lst.shape[9]:\n        return lst[:, :]\n    if x == lst.shape[10]:\n        return lst[:, :]\n    if x == lst.shape[11]:\n        return lst[:, :]\n    if x == lst.shape[12]:\n        return lst[:, :]\n    if x == lst.shape[13]:\n        return lst[:, :]\n    if x == lst.shape[14]:\n        return lst[:, :]\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Create a list of tuples, [(x1, y1), (x2, y2)...]\n    # where each tuple is a coordinate - (row, columns), starting with 0.\n    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    # The first tuple is the row, the second is the column.\n    #\n    #", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        x = len(lst) - 1\n    if x > len(lst):\n        x = len(lst) - 1\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst) - 1:\n        return lst\n    if x == len(lst) - 2:\n        return lst\n    if x == len(lst) - 3:\n        return lst\n    if x == len(lst) - 4:\n        return lst\n    if x == len(lst) - 5:\n        return lst\n    if x == len(lst) - 6:\n        return lst\n    if x == len(lst) - 7:\n        return lst\n    if x == len(lst) - 8:\n        return lst\n    if x == len(lst) - 9:\n        return lst\n    if x == len(lst) - 10:\n        return lst\n    if x == len(lst) - 11:\n        return lst\n    if x == len(lst) - 12:\n        return lst\n    if x == len(lst) - 13:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]\n    if x == len(lst)-1:\n        return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # return the list of tuples\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x in lst:\n        return lst[x]\n    else:\n        lst.sort()\n        return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x in lst:\n        return lst[x]\n    else:\n        lst.sort()\n        x = lst.index(x)\n        return [(x, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x < 0:\n        x = 0\n    if x >= len(lst[x]):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst[x]))\n    if x == 0:\n        return lst\n    else:\n        return [(x, x) for x in lst[x] if x!= 0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[1]!= x.shape[1]:\n        raise ValueError(\"lst.shape[1]!= x.shape\")\n    if lst.shape[2]!= x.shape[2]:\n        raise ValueError(\"lst.shape[2]!= x.shape\")\n    if lst.shape[3]!= x.shape[3]:\n        raise ValueError(\"lst.shape[3]!= x.shape\")\n    if lst.shape[4]!= x.shape[4]:\n        raise ValueError(\"lst.shape[4]!= x.shape\")\n    if lst.shape[5]!= x.shape[5]:\n        raise ValueError(\"lst.shape[5]!= x.shape\")\n    if lst.shape[6]!= x.shape[6]:\n        raise ValueError(\"lst.shape[6]!= x.shape\")\n    if lst.shape[7]!= x.shape[7]:\n        raise ValueError(\"lst.shape[7]!= x.shape\")\n    if lst.shape[8]!= x.shape[8]:\n        raise ValueError(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = lst.index(x)\n    if x >= lst.size():\n        x = lst.size()\n    if x == 0:\n        return []\n    return [(x, lst[x]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # First, sort the list by rows\n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    # Now, sort the list by columns\n    sorted_lst = sorted(lst, key=lambda x: x[1])\n    # Now, sort the list by rows and columns\n    sorted_lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # Now, sort the list by rows and columns\n    sorted_lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # Now, sort the list by rows and columns\n    sorted_lst = sorted(lst, key=lambda x: x[0], reverse=True, reverse=False)\n    # Now, sort the list by rows and columns\n    sorted_lst = sorted(lst, key=lambda x: x[1], reverse=True, reverse=False)\n    # Now, sort the list by rows and columns\n    sorted_lst = sorted(lst, key=lambda x: x[0], reverse=True, reverse=False)\n    # Now, sort the list by rows and columns\n    sorted_lst = sorted(lst, key=lambda x: x[1], reverse=True, reverse=False)\n    # Now, sort the list by rows and columns\n    sorted_lst = sorted(lst, key=", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if lst[0] == 0:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[2]:\n        return []\n    if lst[0] == lst[3]:\n        return []\n    if lst[0] == lst[4]:\n        return []\n    if lst[0] == lst[5]:\n        return []\n    if lst[0] == lst[6]:\n        return []\n    if lst[0] == lst[7]:\n        return []\n    if lst[0] == lst[8]:\n        return []\n    if lst[0] == lst[9]:\n        return []\n    if lst[0] == lst[10]:\n        return []\n    if lst[0] == lst[11]:\n        return []\n    if lst[0] == lst[12]:\n        return []\n    if lst[0] == lst[13]:\n        return []\n    if lst[0] == lst[14]:\n        return []\n    if lst[0] == lst[15]:\n        return []\n    if lst[0] == lst[16]:\n        return []\n    if lst[0] == lst[17]:\n        return []\n    if lst[0] == lst[18]:\n        return []\n    if lst[0] == lst[19]:\n        return []\n    if lst[0] == lst[20]:\n        return []\n    if lst[0] == lst[21]:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x < 0:\n        x = 0\n    if x >= len(lst[x]):\n        raise ValueError(\"row must be greater than or equal to %d\" % len(lst[x]))\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    if x == len(lst) - 4:\n        return [(x, 3)]\n    if x == len(lst) - 5:\n        return [(x, 4)]\n    return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if lst[0] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by columns\n    if lst[1] == 0:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by coordinates\n    if lst[0] == 1:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # sort by coordinates\n    if lst[1] == 1:\n        lst = lst[1:]\n    else:\n        lst = lst[:]\n    # return list\n    return [(x, y) for x, y in zip(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == lst.shape[0]:\n        return []\n    if x == lst.shape[1]:\n        return []\n    if x == lst.shape[2]:\n        return []\n    if x == lst.shape[3]:\n        return []\n    if x == lst.shape[4]:\n        return []\n    if x == lst.shape[5]:\n        return []\n    if x == lst.shape[6]:\n        return []\n    if x == lst.shape[7]:\n        return []\n    if x == lst.shape[8]:\n        return []\n    if x == lst.shape[9]:\n        return []\n    if x == lst.shape[10]:\n        return []\n    if x == lst.shape[11]:\n        return []\n    if x == lst.shape[12]:\n        return []\n    if x == lst.shape[13]:\n        return []\n    if x == lst.shape[14]:\n        return []\n    if x == lst.shape[15]:\n        return []\n    if x == lst.shape[16]:\n        return []\n    if x == lst.shape[17]:\n        return []\n    if x == lst.shape[18]:\n        return []\n    if x == lst.shape", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return [(x, 0)]\n    if x == len(lst)-1:\n        return [(x, len(lst))]\n    if x == len(lst):\n        return [(x, len(lst))]\n    return [(x, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst.shape[0]!= x.shape[0]:\n        raise ValueError(\"lst.shape!= x.shape\")\n    if lst.shape[1]!= x.shape[1]:\n        raise ValueError(\"lst.shape[1]!= x.shape\")\n    if lst.shape[2]!= x.shape[2]:\n        raise ValueError(\"lst.shape[2]!= x.shape\")\n    if lst.shape[3]!= x.shape[3]:\n        raise ValueError(\"lst.shape[3]!= x.shape\")\n    if lst.shape[4]!= x.shape[4]:\n        raise ValueError(\"lst.shape[4]!= x.shape\")\n    if lst.shape[5]!= x.shape[5]:\n        raise ValueError(\"lst.shape[5]!= x.shape\")\n    if lst.shape[6]!= x.shape[6]:\n        raise ValueError(\"lst.shape[6]!= x.shape\")\n    if lst.shape[7]!= x.shape[7]:\n        raise ValueError(\"lst.shape[7]!= x.shape\")\n    if lst.shape[8]!= x.shape[8]:\n        raise ValueError(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index: %i\" % x)\n    if x >= len(lst):\n        raise ValueError(\"invalid index: %i\" % x)\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return []\n    if x == 1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst) - 1:\n        return lst[x]\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = lst.index(x)\n    if x >= len(lst):\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst) - 1:\n        return lst[x:]\n    return lst[:x] + lst[x:]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x < 0:\n        x = 0\n    if x >= len(lst):\n        x = len(lst)\n    if x == 0:\n        return []\n    if x == len(lst):\n        return []\n    if x == 1:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x == len(lst) - 2:\n        return []\n    if x == len(lst) - 3:\n        return []\n    if x == len(lst) - 4:\n        return []\n    if x == len(lst) - 5:\n        return []\n    if x == len(lst) - 6:\n        return []\n    if x == len(lst) - 7:\n        return []\n    if x == len(lst) - 8:\n        return []\n    if x == len(lst) - 9:\n        return []\n    if x == len(lst) - 10:\n        return []\n    if x == len(lst) - 11:\n        return []\n    if x == len(lst) - 12:\n        return []\n    if x == len(lst) - 13:\n        return []\n    if x == len(lst) - 14:\n        return []\n    if x == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[:x + 1]\n    if x == len(lst) - 3:\n        return lst[:x + 2 + 1]\n    if x == len(lst) - 4:\n        return lst[:x + 3 + 1]\n    if x == len(lst) - 5:\n        return lst[:x + 4 + 1]\n    if x == len(lst) - 6:\n        return lst[:x + 5 + 1]\n    if x == len(lst) - 7:\n        return lst[:x + 6 + 1]\n    if x == len(lst) - 8:\n        return lst[:x + 7 + 1]\n    if x == len(lst) - 9:\n        return lst[:x + 8 + 1]\n    if x == len(lst) - 10:\n        return lst[:x + 9 + 1]\n    if x == len(lst) - 11:\n        return lst[:x + 10 + 1]\n    if x == len(lst) - 12:\n        return lst[:x + 11 + 1]\n    if x == len(lst) - 13:\n        return lst[:x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    if x < 0:\n        x = lst.index(lst[x])\n    if x > lst.index(lst[x]) + 1:\n        x = lst.index(lst[x]) - 1\n    # sort coordinates by columns in descending order\n    if x < 0:\n        x = lst.index(lst[x]) + 1\n    if x > lst.index(lst[x]) - 1:\n        x = lst.index(lst[x]) - 2\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    # Sort coordinates initially by rows in ascending order.\n    # Also, sort coordinates of the row by columns in descending order.\n    lst = [lst[x] for x in xrange(0, lst.index(lst[x]), x)]\n    # sort coordinates by rows in descending order\n    lst = [lst[x] for x in xrange(0, lst.index(lst[x]), x)]\n    # sort coordinates by columns in ascending order\n    lst = [lst[x] for x in xrange(0, lst.index(lst[x]), x)]\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        x = len(lst) - 1\n    if x >= len(lst):\n        x = 0\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[x:]\n    return lst[:x] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[:x + 1]\n    if x == len(lst) - 3:\n        return lst[:x + 2 + 1]\n    return lst[:x] + lst[x:x + 2] + lst[x:x + 3 + 1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return [(x, len(lst)) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    else:\n        return [(x, y) for x, y in zip(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst) - 1:\n        return lst[x:]\n    if x == len(lst) - 2:\n        return lst[x:]\n    return [(x, 0), (x, 1), (x, 2), (x, 3)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return lst[:x]\n    if x == len(lst):\n        return lst[1:]\n    if x == len(lst):\n        return lst[:x + 1]\n    return lst[:x] + lst[x:x + 1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    else:\n        return [(x, 0), (x, 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return lst\n    else:\n        if x == len(lst)-1:\n            return lst\n        else:\n            return [(x, 0) for x in lst]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index\")\n    if x >= len(lst):\n        raise ValueError(\"invalid index\")\n    if x < 0:\n        x = lst[x]\n    if x >= len(lst):\n        x = lst[x]\n    if x < 0:\n        x = lst[x]\n    if x >= len(lst):\n        x = lst[x]\n    if x == 0:\n        return []\n    return [(x, y) for x, y in lst[x]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    x = sorted(x, key=lambda x: x[0])\n    # sort coordinates by columns in descending order\n    x = sorted(x, key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    lst = [(x[0], x[1]) for x in lst]\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row < 0\")\n    if x >= len(lst):\n        raise ValueError(\"row >= len(lst)\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == 0:\n        return lst[x]\n    if x == 1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if lst[0] == x and lst[1] == x and lst[2] == x and lst[3] == x and lst[4] == x and lst[5] == x:\n        return lst\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x < 0:\n        x = 0\n    if x >= len(lst):\n        x = len(lst) - 1\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x < 0:\n        x = 0\n    if x >= len(lst):\n        x = len(lst) - 1\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x < 0:\n        x = 0\n    if x >= len(lst):\n        x = len(lst) - 1\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x < 0:\n        x = 0\n    if x >= len(lst):\n        x = len(lst) - 1\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return []\n    if x < 0:\n        x = 0\n    if x >= len(lst):\n        x = len(lst) - 1\n    if x == 0:", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[:x + 1]\n    if x == len(lst) - 3:\n        return lst[:x + 2 + 1]\n    return lst[:x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    return [(x, i) for i in range(x, len(lst) - 1, -1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == len(x):\n        return lst\n    if x[0] == 0:\n        return []\n    if x[0] == len(lst) - 1:\n        return lst[:x[0]]\n    else:\n        return [(x[0], x[1]) for x in lst[:x[0]] + lst[x[1:]]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row < 0\")\n    if x >= len(lst):\n        raise ValueError(\"row > len(lst)\")\n    if x < 0:\n        x = 0\n    if x >= len(lst[x]):\n        raise ValueError(\"row > len(lst[x])\")\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        x = len(lst) - 1\n    if x > len(lst):\n        x = len(lst) - 1\n    return get_row(lst, x)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    else:\n        return [(x, x) for x in lst[:x]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    return [(x, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x in lst:\n        return lst[x]\n    else:\n        return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst == []:\n        return []\n    if lst[0] == lst[1]:\n        return lst\n    if lst[0] == lst[2]:\n        return [(x, 1) for x in lst[1:]]\n    if lst[0] == lst[3]:\n        return [(x, 2) for x in lst[2:]]\n    if lst[0] == lst[4]:\n        return [(x, 3) for x in lst[3:]]\n    if lst[0] == lst[5]:\n        return [(x, 4) for x in lst[4:]]\n    if lst[0] == lst[6]:\n        return [(x, 5) for x in lst[5:]]\n    if lst[0] == lst[7]:\n        return [(x, 6) for x in lst[7]]\n    if lst[0] == lst[8]:\n        return [(x, 7) for x in lst[8]]\n    if lst[0] == lst[9]:\n        return [(x, 8) for x in lst[9]]\n    if lst[0] == lst[10]:\n        return [(x, 9) for x in lst[10]]\n    if lst[0] == lst[11]:\n        return [(x, 10) for x in lst[11]]\n    if lst[0] == lst[12]:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x[0] == 0:\n        return []\n    if x[1] == 0:\n        return []\n    if x[0] == x[1]:\n        return []\n    if x[0] == x[1] + 1:\n        return []\n    if x[0] == x[1] + 2:\n        return []\n    if x[0] == x[1] + 3:\n        return []\n    if x[0] == x[1] + 4:\n        return []\n    if x[0] == x[1] + 5:\n        return []\n    if x[0] == x[1] + 6:\n        return []\n    if x[0] == x[1] + 7:\n        return []\n    if x[0] == x[1] + 8:\n        return []\n    if x[0] == x[1] + 9:\n        return []\n    if x[0] == x[1] + 10:\n        return []\n    if x[0] == x[1] + 11:\n        return []\n    if x[0] == x[1] + 12:\n        return []\n    if x[0] == x[1] + 13:\n        return []\n    if x[0] == x[1] + 14:\n        return []\n    if x[0] == x[1] + 15:\n        return []\n    if x[0] == x[1] + 16:\n        return []\n    if x[0] == x[1] + 17:\n        return []\n    if x[0] == x[1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if len(lst) == len(x):\n        return lst\n    if x[0] == 0:\n        return []\n    if x[0] == len(lst):\n        return lst\n    if x[0] == len(lst) - 1:\n        return lst\n    if x[0] == len(lst) - 2:\n        return lst\n    if x[0] == len(lst) - 3:\n        return lst\n    if x[0] == len(lst) - 4:\n        return lst\n    if x[0] == len(lst) - 5:\n        return lst\n    if x[0] == len(lst) - 6:\n        return lst\n    if x[0] == len(lst) - 7:\n        return lst\n    if x[0] == len(lst) - 8:\n        return lst\n    if x[0] == len(lst) - 9:\n        return lst\n    if x[0] == len(lst) - 10:\n        return lst\n    if x[0] == len(lst) - 11:\n        return lst\n    if x[0] == len(lst) - 12:\n        return lst\n    if x[0] == len(lst) - 13:\n        return lst\n    if x[0] == len(lst) - 14:\n        return lst\n    if x[0] == len(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst[0]):\n        return lst\n    if x == len(lst[1]):\n        return lst\n    if x == len(lst[2]):\n        return lst\n    if x == len(lst[3]):\n        return lst\n    if x == len(lst[4]):\n        return lst\n    if x == len(lst[5]):\n        return lst\n    if x == len(lst[6]):\n        return lst\n    if x == len(lst[7]):\n        return lst\n    if x == len(lst[8]):\n        return lst\n    if x == len(lst[9]):\n        return lst\n    if x == len(lst[10]):\n        return lst\n    if x == len(lst[11]):\n        return lst\n    if x == len(lst[12]):\n        return lst\n    if x == len(lst[13]):\n        return lst\n    if x == len(lst[14]):\n        return lst\n    if x == len(lst[15]):\n        return lst\n    if x == len(lst[16]):\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"invalid index: %s\" % x)\n    if x >= len(lst):\n        raise ValueError(\"invalid index: %s\" % x)\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return []\n    return [(x, y) for x, y in zip(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 2:\n        return [(x, 1)]\n    if x == len(lst) - 3:\n        return [(x, 2)]\n    return [(x, x) for x in lst[:x]]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return lst[:x]\n    if x == 0:\n        return lst\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        raise ValueError(\"Argument x must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"Argument x must be less than or equal to length of lst\")\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return [(x, 0)]\n    if x == len(lst) - 1:\n        return [(x, x)]\n    return [(x, x) for x in range(x, len(lst) - 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[:x + 1]\n    return lst[:x] + lst[x:x + 1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x in lst:\n        return lst[x]\n    else:\n        return [(x, 0) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[:x + 1]\n    if x == len(lst) - 3:\n        return lst[:x + 2 + 1]\n    return lst[:x] + [(x + 1, x + 2)] + lst[x:x + 2] + lst[x:x + 3]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst) - 1:\n        return lst\n    if x == len(lst) - 1:\n        return [(x, 0)]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    if x == len(lst) - 1:\n        return [(x, len(lst))]\n    return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    else:\n        return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        x = lst.index(lst[x])\n    if x >= len(lst):\n        x = len(lst)\n    return lst[x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x[0] == 0:\n        return []\n    if x[1] == 0:\n        return []\n    if x[0] == x[1]:\n        return []\n    if x[0] == x[1] + 1:\n        return []\n    if x[0] == x[1] + 2:\n        return []\n    if x[0] == x[1] + 3:\n        return []\n    if x[0] == x[1] + 4:\n        return []\n    if x[0] == x[1] + 5:\n        return []\n    if x[0] == x[1] + 6:\n        return []\n    if x[0] == x[1] + 7:\n        return []\n    if x[0] == x[1] + 8:\n        return []\n    if x[0] == x[1] + 9:\n        return []\n    if x[0] == x[1] + 10:\n        return []\n    if x[0] == x[1] + 11:\n        return []\n    if x[0] == x[1] + 12:\n        return []\n    if x[0] == x[1] + 13:\n        return []\n    if x[0] == x[1] + 14:\n        return []\n    if x[0] == x[1] + 15:\n        return []\n    if x[0] == x[1] + 16:\n        return []\n    if x[0] == x[1] + 17:\n        return []\n    if x[0] == x[1]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == 1:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, 0)]\n    return [(x, 0)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 1:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == 2:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == 3:\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst[x]\n    if x == len(lst):\n        return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x < 0:\n        raise ValueError(\"invalid x: %i\" % x)\n    if x >= len(lst):\n        raise ValueError(\"invalid x: %i\" % x)\n    if x % 2 == 0:\n        return []\n    if x % 2 == 1:\n        return [(x, 0)]\n    if x % 2 == 2:\n        return [(x, 1)]\n    return [(x, i) for i in range(x / 2)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < len(lst):\n        return lst[x]\n    else:\n        return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x == 0:\n        return []\n    if x == len(lst)-1:\n        return []\n    if x == len(lst):\n        return lst[:x]\n    if x == 0:\n        return lst\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst):\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    return lst[:x]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort by rows\n    if x < 0:\n        lst.sort(key=lambda x: x[0])\n    else:\n        lst.sort(key=lambda x: x[1])\n    # Sort by columns\n    if x < 0:\n        lst.sort(key=lambda x: x[2])\n    else:\n        lst.sort(key=lambda x: x[3])\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort the list by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort the list by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort the list by the first column\n    lst = sorted(lst, key=lambda x: x[1][0])\n    # sort the list by the last column\n    lst = sorted(lst, key=lambda x: x[1][-1])\n    # sort the list by the first row\n    lst = sorted(lst, key=lambda x: x[0][1])\n    # sort the list by the last row\n    lst = sorted(lst, key=lambda x: x[0][-1])\n    # sort the list by the first column\n    lst = sorted(lst, key=lambda x: x[0][1][0])\n    # sort the list by the last column\n    lst = sorted(lst, key=lambda x: x[0][1][-1])\n    # sort the list by the first row\n    lst = sorted(lst, key=lambda x: x[0][1][0])\n    # sort the list by the last row\n    lst = sorted(lst, key=lambda x: x[0][1][-1])\n    # sort the list by the first column\n    lst = sorted(lst, key=lambda x: x[0][1][0])\n    # sort the", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst) - 1:\n        return lst\n    if x == len(lst) - 2:\n        return lst\n    if x == len(lst) - 3:\n        return lst\n    if x == len(lst) - 4:\n        return lst\n    if x == len(lst) - 5:\n        return lst\n    if x == len(lst) - 6:\n        return lst\n    if x == len(lst) - 7:\n        return lst\n    if x == len(lst) - 8:\n        return lst\n    if x == len(lst) - 9:\n        return lst\n    if x == len(lst) - 10:\n        return lst\n    if x == len(lst) - 11:\n        return lst\n    if x == len(lst) - 12:\n        return lst\n    if x == len(lst) - 13:\n        return lst\n    if x == len(lst) - 14:\n        return lst\n    if x == len(lst) - 15:\n        return lst\n    if x == len(lst) - 16:\n        return lst\n    if x == len(lst) - 17:\n        return lst\n    if x ==", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == 0:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be greater than 0\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to %d\" % len(lst))\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5), (x, 6)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    if x < 0:\n        x = lst.index(lst[x])\n    else:\n        x = lst[x]\n    # sort by columns\n    if x > 0:\n        x = lst.index(lst[x-1])\n    else:\n        x = lst[x-1]\n    # return tuple\n    return [(x, x) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if x < 0:\n        raise ValueError(\"row must be positive\")\n    if x >= len(lst):\n        raise ValueError(\"row must be less than or equal to length of list\")\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst)-1:\n        return []\n    return [(x, y) for (x, y) in zip(lst, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 1:\n        return lst[:x] + lst[x:]\n    if x == len(lst) - 1:\n        return lst[:x] + lst[x:] + lst[x:]\n    return lst[:x] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if x is None:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return []\n    if x < len(lst):\n        return [(x, 0)]\n    if x > len(lst):\n        return [(x, len(lst))]\n    if x == 0:\n        return [(x, 0)]\n    if x == len(lst):\n        return [(x, len(lst))]\n    if x < len(lst):\n        return [(x, len(lst))]\n    if x == len(lst):\n        return [(x, len(lst))]\n    return [(x, x)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if lst is None:\n        return []\n    if lst[0] == 0:\n        return []\n    if lst[1] == 0:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return []\n    if lst[0] == lst[1]:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort the list\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort the list by column\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort the list by row\n    lst = sorted(lst, key=lambda x: x[2])\n    # return the list\n    return lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return lst[:x]\n    if x == len(lst)-1:\n        return", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return []\n    if x == len(lst):\n        return lst\n    if x == len(lst) - 1:\n        return lst[:x]\n    if x == len(lst) - 2:\n        return lst[x:]\n    if x == len(lst) - 3:\n        return lst[x:]\n    if x == len(lst) - 4:\n        return lst[x:]\n    if x == len(lst) - 5:\n        return lst[x:]\n    if x == len(lst) - 6:\n        return lst[x:]\n    return lst[:x] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:] + lst[x:]"]]