[["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return True\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0] + lst[1]\n    if len(lst) == 3:\n        return lst[0] + lst[1] + lst[2]\n    if len(lst) == 4:\n        return lst[0] + lst[1] + lst[2] + lst[3]\n    if len(lst) == 5:\n        return lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    # First check if the two strings are balanced\n    if lst[0] == '(':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Second check if the two strings are balanced\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Third check if the two strings are balanced\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Fourth check if the two strings are balanced\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Fifth check if the two strings are balanced\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Sixth check if the two strings are balanced\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Seventh check if the two strings are balanced\n    if lst[0] == ')':\n        if lst", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return False\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return False\n    if len(lst) == 6:\n        return False\n    if len(lst) == 7:\n        return False\n    if len(lst) == 8:\n        return False\n    if len(lst) == 9:\n        return False\n    if len(lst) == 10:\n        return False\n    if len(lst) == 11:\n        return False\n    if len(lst) == 12:\n        return False\n    if len(lst) == 13:\n        return False\n    if len(lst) == 14:\n        return False\n    if len(lst) == 15:\n        return False\n    if len(lst) == 16:\n        return False\n    if len(lst) == 17:\n        return False\n    if len(lst) == 18:\n        return False\n    if len(lst) == 19:\n        return False\n    if len(lst) == 20:\n        return False\n    if len(lst) == 21:\n        return False\n    if len(lst) == 22:\n        return False\n    if len(lst) == 23:\n        return False\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == ')':\n        return 'No'\n    if lst[-1] == ')':\n        return 'Yes'\n    if lst[-1] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        if lst[0] == '(':\n            lst = lst[1:]\n        else:\n            lst = lst[:-1]\n    return lst[0] == '(' and lst[1:] == ')' and lst[-1] == ')'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    lst = [lst[0]] + lst[1:]\n    if len(lst) == 2:\n        return 'Yes'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        if lst[0] == '(':\n            return True\n        elif lst[0] == ')':\n            return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        if lst[0] == '(':\n            return True\n        elif lst[0] == ')':\n            return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0]!= '(':\n        return 'No'\n    if lst[1]!= ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[1] == ')':\n        return 'Yes'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0]!= '(':\n        return 'No'\n    if lst[1]!= ')':\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[1] == ')':\n        return 'Yes'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    lst = [lst[0]] + lst[1:]\n    if len(lst) == 2:\n        return 'Yes'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    lst = [lst[0]] + lst[1:]\n    if lst[0] == '(':\n        lst = [lst[1:]]\n    if lst[0] == ')':\n        lst = [lst[-1]]\n    return match_parens(lst)", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return False\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return False\n    if len(lst) == 6:\n        return False\n    if len(lst) == 7:\n        return False\n    if len(lst) == 8:\n        return False\n    if len(lst) == 9:\n        return False\n    if len(lst) == 10:\n        return False\n    if len(lst) == 11:\n        return False\n    if len(lst) == 12:\n        return False\n    if len(lst) == 13:\n        return False\n    if len(lst) == 14:\n        return False\n    if len(lst) == 15:\n        return False\n    if len(lst) == 16:\n        return False\n    if len(lst) == 17:\n        return False\n    if len(lst) == 18:\n        return False\n    if len(lst) == 19:\n        return False\n    if len(lst) == 20:\n        return False\n    if len(lst) == 21:\n        return False\n    if len(lst) == 22:\n        return False\n    if len(lst) == 23:\n        return False\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0]!= '(':\n        return 'No'\n    if lst[1]!= ')':\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[1] == ')':\n        return 'Yes'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == '(':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return False\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return False\n    if len(lst) == 6:\n        return False\n    if len(lst) == 7:\n        return False\n    if len(lst) == 8:\n        return False\n    if len(lst) == 9:\n        return False\n    if len(lst) == 10:\n        return False\n    if len(lst) == 11:\n        return False\n    if len(lst) == 12:\n        return False\n    if len(lst) == 13:\n        return False\n    if len(lst) == 14:\n        return False\n    if len(lst) == 15:\n        return False\n    if len(lst) == 16:\n        return False\n    if len(lst) == 17:\n        return False\n    if len(lst) == 18:\n        return False\n    if len(lst) == 19:\n        return False\n    if len(lst) == 20:\n        return False\n    if len(lst) == 21:\n        return False\n    if len(lst) == 22:\n        return False\n    if len(lst) == 23:\n        return False\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return True\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return False\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return False\n    if len(lst) == 6:\n        return False\n    if len(lst) == 7:\n        return False\n    if len(lst) == 8:\n        return False\n    if len(lst) == 9:\n        return False\n    if len(lst) == 10:\n        return False\n    if len(lst) == 11:\n        return False\n    if len(lst) == 12:\n        return False\n    if len(lst) == 13:\n        return False\n    if len(lst) == 14:\n        return False\n    if len(lst) == 15:\n        return False\n    if len(lst) == 16:\n        return False\n    if len(lst) == 17:\n        return False\n    if len(lst) == 18:\n        return False\n    if len(lst) == 19:\n        return False\n    if len(lst) == 20:\n        return False\n    if len(lst) == 21:\n        return False\n    if len(lst) == 22:\n        return False\n    if len(lst) == 23:\n        return False\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return False\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return False\n    if len(lst) == 6:\n        return False\n    if len(lst) == 7:\n        return False\n    if len(lst) == 8:\n        return False\n    if len(lst) == 9:\n        return False\n    if len(lst) == 10:\n        return False\n    if len(lst) == 11:\n        return False\n    if len(lst) == 12:\n        return False\n    if len(lst) == 13:\n        return False\n    if len(lst) == 14:\n        return False\n    if len(lst) == 15:\n        return False\n    if len(lst) == 16:\n        return False\n    if len(lst) == 17:\n        return False\n    if len(lst) == 18:\n        return False\n    if len(lst) == 19:\n        return False\n    if len(lst) == 20:\n        return False\n    if len(lst) == 21:\n        return False\n    if len(lst) == 22:\n        return False\n    if len(lst) == 23:\n        return False\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0]!= '(':\n        return 'No'\n    if lst[1]!= ')':\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[1] == ')':\n        return 'Yes'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    # If the first string is a list of two strings, then we have to\n    # check if the second string is a list of two strings.\n    if isinstance(lst[0], list):\n        if isinstance(lst[1], list):\n            return 'No'\n        else:\n            return 'Yes'\n\n    # If the first string is a string, then we have to check if the second\n    # string is a string.\n    if isinstance(lst[0], str):\n        if isinstance(lst[1], str):\n            return 'No'\n        else:\n            return 'Yes'\n\n    # If the first string is a list of strings, then we have to check if\n    # the second string is a list of strings.\n    if isinstance(lst[0], list):\n        if isinstance(lst[1], list):\n            return 'No'\n        else:\n            return 'Yes'\n\n    # If the first string is a string, then we have to check if the second\n    # string is a string.\n    if isinstance(lst[0], str):\n        if isinstance(lst[1], str):\n            return 'No'\n        else:\n            return 'Yes'\n\n    # If the first string is a list of strings, then we", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n\n    if lst[1] == '(':\n        return 'Yes'\n    elif lst[1] == ')':\n        return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return False\n    return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        if lst[0] == '(':\n            return 'Yes'\n        elif lst[0] == ')':\n            return 'No'\n        else:\n            return 'Yes'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[0].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[1].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[2].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[3].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[4].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[5].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[6].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[7].isdigit():\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if not lst[8].isdigit():\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return True\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        if lst[0] == '(':\n            return 'Yes'\n        elif lst[0] == ')':\n            return 'No'\n        else:\n            return 'Not good'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if lst[0] == '(':\n        return True\n    elif lst[0] == ')':\n        return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if lst[0] == '(':\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if lst[0] == '(':\n        return True\n    elif lst[0] == ')':\n        return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        if lst[0] == '(':\n            if lst[1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0]!= '(':\n        return 'No'\n    if lst[1]!= ')':\n        return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if lst[0] == '(':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    elif lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return False\n    if len(lst) == 4:\n        return False\n    if len(lst) == 5:\n        return False\n    if len(lst) == 6:\n        return False\n    if len(lst) == 7:\n        return False\n    if len(lst) == 8:\n        return False\n    if len(lst) == 9:\n        return False\n    if len(lst) == 10:\n        return False\n    if len(lst) == 11:\n        return False\n    if len(lst) == 12:\n        return False\n    if len(lst) == 13:\n        return False\n    if len(lst) == 14:\n        return False\n    if len(lst) == 15:\n        return False\n    if len(lst) == 16:\n        return False\n    if len(lst) == 17:\n        return False\n    if len(lst) == 18:\n        return False\n    if len(lst) == 19:\n        return False\n    if len(lst) == 20:\n        return False\n    if len(lst) == 21:\n        return False\n    if len(lst) == 22:\n        return False\n    if len(lst) == 23:\n        return False\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    lst = [lst[0]] + lst[1:]\n    if len(lst) == 2:\n        return 'Yes'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if lst[0] == '(':\n        return True\n    elif lst[0] == ')':\n        return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 2:\n        if lst[0] == '(':\n            return True\n        elif lst[0] == ')':\n            return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if lst[0] == '(':\n        lst = lst[1:]\n    if lst[0] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] == ')':\n        lst = lst[:-1]\n    if lst[-1] ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == '(':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Check if", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return True\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if len(lst) == 3:\n        return 'Yes'\n    if len(lst) == 4:\n        return 'Yes'\n    if len(lst) == 5:\n        return 'Yes'\n    if len(lst) == 6:\n        return 'Yes'\n    if len(lst) == 7:\n        return 'Yes'\n    if len(lst) == 8:\n        return 'Yes'\n    if len(lst) == 9:\n        return 'Yes'\n    if len(lst) == 10:\n        return 'Yes'\n    if len(lst) == 11:\n        return 'Yes'\n    if len(lst) == 12:\n        return 'Yes'\n    if len(lst) == 13:\n        return 'Yes'\n    if len(lst) == 14:\n        return 'Yes'\n    if len(lst) == 15:\n        return 'Yes'\n    if len(lst) == 16:\n        return 'Yes'\n    if len(lst) == 17:\n        return 'Yes'\n    if len(lst) == 18:\n        return 'Yes'\n    if len(lst) == 19:\n        return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return True\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    # First check if there is a way to make a good string\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n\n    # Now check if there is a way to make a good string\n    if lst[1] == '(':\n        return 'Yes'\n    elif lst[1] == ')':\n        return 'No'\n\n    # Now check if there is a way to make a good string\n    if lst[2] == '(':\n        return 'Yes'\n    elif lst[2] == ')':\n        return 'No'\n\n    # Now check if there is a way to make a good string\n    if lst[3] == '(':\n        return 'Yes'\n    elif lst[3] == ')':\n        return 'No'\n\n    # Now check if there is a way to make a good string\n    if lst[4] == '(':\n        return 'Yes'\n    elif lst[4] == ')':\n        return 'No'\n\n    # Now check if there is a way to make a good string\n    if lst[5] == '(':\n        return 'Yes'\n    elif lst[5] == ')':\n        return 'No'\n\n    # Now check if there is a way to", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return False\n    if len(lst) == 3:\n        return True\n    if len(lst) == 4:\n        return True\n    if len(lst) == 5:\n        return True\n    if len(lst) == 6:\n        return True\n    if len(lst) == 7:\n        return True\n    if len(lst) == 8:\n        return True\n    if len(lst) == 9:\n        return True\n    if len(lst) == 10:\n        return True\n    if len(lst) == 11:\n        return True\n    if len(lst) == 12:\n        return True\n    if len(lst) == 13:\n        return True\n    if len(lst) == 14:\n        return True\n    if len(lst) == 15:\n        return True\n    if len(lst) == 16:\n        return True\n    if len(lst) == 17:\n        return True\n    if len(lst) == 18:\n        return True\n    if len(lst) == 19:\n        return True\n    if len(lst) == 20:\n        return True\n    if len(lst) == 21:\n        return True\n    if len(lst) == 22:\n        return True\n    if len(lst) == 23:\n        return True\n    if len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 0:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n\n    # First check if there is a way to make a good string\n    if lst[0] == '(':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Second check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Third check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Fourth check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Fifth check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Sixth check if there is a way to make a good string\n    if lst[0] == ')':\n        if lst[1] == ')':\n            return 'Yes'\n        else:\n            return", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0]!= '(':\n        return 'No'\n    if lst[1]!= ')':\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[1] == ')':\n        return 'Yes'\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst)!= 2:\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    if lst[0] == ')':\n        return 'Yes'\n    if lst[0] == '", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        return False"]]