[["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Init\n    notes = []\n    for i in music_string:\n        beats = i.split(' ')\n        if beats[0] == 'o':\n            beats = [i for i in beats if i.split('|')[0] == 'o']\n        elif beats[0] == 'o|':\n            beats = [i for i in beats if i.split('|')[0] == 'o|']\n        elif beats[0] == 'o|':\n            beats = [i for i in beats if i.split('|')[0] == 'o|']\n        elif beats[0] == 'o|':\n            beats = [i for i in beats if i.split('|')[0] == 'o|']\n        else:\n            beats = [i for i in beats if i.split('|')[0] == 'o|']\n        notes.append(int(beats[0]) * 4 + int(beats[1]) * 2 + int(beats[2]) * 1 + int(beats[3]))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music = music_string.split()\n    for i in range(len(music) - 3):\n        music[i], music[i + 1], music[i + 2] = music[i], music[i + 1], music[i + 2]\n\n    return music\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"n = music_string.split(' ')\n    if len(n) < 3:\n        return None\n    return n", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n\n    if music_string.startswith('o'):\n        # This is a whole note\n        music_string = music_string[4:]\n    elif music_string.startswith('o|'):\n        # This is a half note\n        music_string = music_string[1:-1] + music_string[-2:]\n    elif music_string.startswith('.|'):\n        # This is a quater note\n        music_string = music_string[:-1] + music_string[1:-1] + music_string[-2:]\n\n    return list(map(int, music_string.split('|')))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        music_string = music_string[1:]\n    elif music_string.startswith('.'):\n        music_string = music_string[1:]\n    else:\n        raise ValueError(\"Invalid music string\")\n\n    return list(map(int, music_string.split()))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Separate note from string\n    note = music_string.split('|')\n    note = note[0]\n    note = note.strip()\n\n    # Remove white spaces\n    note = note.replace(' ', '')\n\n    # Remove notes which start and end with silence\n    note = note.replace('  ', '')\n\n    # Remove missing note\n    note = note.replace('  ', '')\n\n    # Remove lower notes\n    note = note.replace('|', '')\n\n    # Remove notes above the next beat\n    note = note.replace('  ', '')\n\n    # Remove missing note\n    note = note.replace('|', '')\n\n    # Remove notes above the next beat\n    note = note.replace('|', '')\n\n    # Remove missing note\n    note = note.replace('|', '')\n\n    # Remove missing note\n    note = note.replace('|', '')\n\n    # Remove missing note\n    note = note.replace('|', '')\n\n    # Remove missing note\n    note = note.replace('|', '')\n\n    # Remove missing note\n    note = note.replace('|', '')\n\n    # Remove missing note\n    note = note.replace('", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return tuple(tuple(re.match(r'O[-]+$', music_string).groups()) +\n                     tuple(re.match(r'[-]+$', music_string).groups()) +\n                     tuple(re.match(r'[-]+$', music_string).groups()) +\n                     tuple(re.match(r'[-]+$', music_string).groups()) +\n                     tuple(re.match(r'[-]+$', music_string).groups()) +\n                     tuple(re.match(r'[-]+$', music_string).groups()) +\n                     tuple(re.match(r'[-]+$', music_string).groups()))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.lstrip('\\n')\n\n    if music_string[:3]!= '.':\n        raise ValueError(\"Music string must contain '.'\")\n\n    for i in music_string[3:]:\n        if i == '|':\n            continue\n        if i == 'o|':\n            pass\n        elif i == 'o':\n            pass\n        elif i == 'o|':\n            pass\n        elif i == 'o':\n            pass\n        elif i == 'o|':\n            pass\n        elif i == 'o|':\n            pass\n        elif i == 'o':\n            pass\n        else:\n            raise ValueError(\"Too many notes\")\n\n    return music_string[:-3]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"audio = music_string.split()\n    sound = []\n    for i in range(0, len(audio), 4):\n        if audio[i] == 'o':\n            sound.append(audio[i + 1])\n        elif audio[i] == 'o|':\n            sound.append(audio[i + 1] | audio[i + 2])\n        elif audio[i] == 'o|':\n            sound.append(audio[i + 1] | audio[i + 2] | audio[i + 3])\n        elif audio[i] == 'o|':\n            sound.append(audio[i + 1] | audio[i + 2] | audio[i + 3] | audio[i + 4])\n        else:\n            sound.append(audio[i + 1])\n\n    return sound", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_music_list(music_string).tolist()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"values = []\n    try:\n        for position in music_string.split('|'):\n            values.append(int(position))\n    except ValueError:\n        raise ValueError(\"not a valid ASCII musical notation\")\n\n    # We can use the magic integer generator to make a list of all the beats that\n    # haven't been played yet.  In our case, the values will be [2, 1, 4, 1].\n    # But we also need to call it back to emit the appropriate information.\n    return values\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split('|')\n    music = []\n    for n in range(1, len(music_string)):\n        music.append(int(music_string[n]))\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return list(map(int, music_string.split(\" \")))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('o'):\n        music_string = music_string[len('|'):]\n    if music_string.startswith('O'):\n        music_string = music_string[len('|'):]\n    return [int(c) for c in music_string.split('|') if c == 'o']]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace('.', '').replace('|', '').replace('^', '').replace('|', '').replace('^', '')\n    # find the first word ending in an underscore\n    word = music_string.split('_')[-1]\n    while len(word) < 6:\n        word = word[0:len(word)] + '_' + word[1:]\n    # find the last word\n    word = music_string.split('_')[-1]\n    while len(word) > 6:\n        word = word[0:len(word)] + '_' + word[1:]\n    # check if word is a number\n    num = num_for_number(word)\n    if num < 0:\n        raise ValueError('Invalid number of beats for notes: %s' % word)\n    return num", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"let_break = False\n\n    if music_string:\n        music_string = music_string.split(\"|\")\n        let_break = True\n\n    if let_break:\n        let_break = False\n        music_string = music_string[1:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[2:]\n\n    let_break = True\n    music_string = music_string[", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Trim whitespace\n    music_string = music_string.strip()\n    music_string = music_string.replace('\\r', '')\n    music_string = music_string.replace('\\n', '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\\t', '')\n\n    # Split up string to match each note\n    music_string = music_string.split(' ')\n\n    # Count how many beats note lasts\n    beats_per_note = 0\n    for i in range(len(music_string)):\n        beat = int(music_string[i])\n        if beat > 0:\n            beats_per_note += 1\n        else:\n            break\n    return beats_per_note", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split(\" \")\n\n    if len(music_string)!= 4:\n        return [None, None]\n\n    if music_string[0] == \"o\" and music_string[1] == \"o\" and music_string[2] == \"o\" and music_string[3] == \"o\" and music_string[4] == \"o\" and music_string[5] == \"o\" and music_string[6] == \"o\" and music_string[7] == \"o\" and music_string[8] == \"o\" and music_string[9] == \"o\" and music_string[10] == \"o\" and music_string[11] == \"o\" and music_string[12] == \"o\" and music_string[13] == \"o\" and music_string[14] == \"o\" and music_string[15] == \"o\" and music_string[16] == \"o\" and music_string[17] == \"o\" and music_string[18] == \"o\" and music_string[19] == \"o\" and music_string[20] == \"o\" and music_string[21] == \"o\" and music_string[22] == \"o\" and music_string[23] == \"o\" and music_string[24] == \"o\" and music_string[25] == \"o\" and music_string[26] == \"o\" and music_string[27] == \"o\" and music_string[28] == \"o\" and music_string[29] == \"o\" and music_string[30]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"from urllib.parse import quote\n\n    def convert_instruments_to_notes/notes_to_instruments(string: str) -> List[int]:\n        # You can convert the strings in your program to a list of int by reading them from\n        # a string.\n        #\n        # For instance:\n        #\n        # >>> musical_note_list = parse_music(\"o o|.| o| o|.|.| o o')\n        # >>> musical_note_list\n        # [  4,  2,  1,  2,  1,  1,  1,  4,  4]\n        #\n        # Each string has one int in the list.\n        for s in string.split():\n            int = int(s)\n            if int not in musical_note_list:\n                musical_note_list.append(int)\n\n    return musical_note_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_str = music_string.strip().replace('|', '|').replace('.', '.')\n    return int(music_str.split('|')[0]) for music_str in music_str.split('|')[1:]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music = music_string.split('\\n')\n\n    beats = []\n    notes = []\n    for line in music:\n        # Ignore blank lines\n        if not line:\n            continue\n\n        beats.append(int(line))\n\n        # Check for end of line\n        if line[:-1] == '|':\n            notes.append(line[1:])\n        elif line[:-1] == 'o':\n            notes.append(line[1:])\n            beats.pop(0)\n\n        if len(notes) == 0:\n            raise ValueError('Missing notes')\n\n        # Keep track of note-beat.\n        beats.append(0)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: This should be a better way to get a list of integers\n    # from an ASCII string.\n    # This is a simplified version of a work-around for a bug in python 2.5.1\n    # with http://bugs.python.org/issue25608.\n    # The problem is that the code doesn't work for some other strings;\n    # if you pass a string like \"|o\", for example, it will fail to\n    # return an integer.\n    #\n    # TODO: Replace with a better function that can handle a wide range of ASCII strings.\n    #\n    # NOTE: If the string is \"|o\", then it will fail in this case.\n    #\n    # TODO: Replace with a better function that can handle a wide range of ASCII strings.\n    #\n    # TODO: Replace with a better function that can handle a wide range of ASCII strings.\n    #\n    # NOTE: If the string is \"|o\", then it will fail in this case.\n    #\n    # TODO: Replace with a better function that can handle a wide range of ASCII strings.\n    #\n    # TODO: Replace with a better function that can handle a wide range of ASCII strings.\n    #\n    # TODO: Replace with a better function that can handle a wide range of ASCII strings.\n    #\n    # NOTE: If the", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip().decode('utf-8')\n\n    if music_string.startswith('|'):\n        note = music_string.split('|')[0]\n        if note!= '0':\n            music_string = music_string.split('|')[1]\n        else:\n            music_string = music_string.split('|')[0] + '|' + music_string.split('|')[1]\n\n    return music_string.split('|')</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for char in music_string:\n        if char not in \".\" and char not in \"|\":\n            result.append(int(char))\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(x) for x in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for n in music_string.split(\"|\")[1:]:\n        if n.startswith(\"o\"):\n            notes.append(int(n[5:]))\n        elif n.startswith(\"o\") and n.startswith(\"o\"):\n            notes.append(int(n[5:]) - 1)\n        elif n.startswith(\"o\") and n.startswith(\"|\"):\n            notes.append(int(n[5:]) - 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"length = 0\n    end_of_note = None\n    notes = music_string.split(\"|\")\n    for note in notes:\n        length += len(note)\n\n        if note.isdigit():\n            end_of_note = note\n        else:\n            note = note.replace(\".\", \"\")\n            if note in [\"o\", \"|\", \".\"]:\n                length -= 2\n\n    return length", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return int.fromstring(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# The special ASCII notation for a complete note has 3 digits separated by spaces\n    # (the previous one can be omitted if it isn't necessary).\n    numbers = ''.join(map(str, music_string.split('.')))\n    if numbers:\n        return [int(number) for number in numbers.split('|')]\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_str = music_string.split('|')[0]\n    note_str = music_str.split('|')[1]\n    beat_str = music_str.split('|')[2]\n\n    return [int(note_str[4:]) + int(beat_str[2:])]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n\n    # First, detect the number of beats.\n    for i in range(0, len(music_string), 4):\n        if music_string[i] == 'o':\n            result.append(i)\n        else:\n            result.append(i - len(music_string))\n\n    # Second, detect the start and end of the note.\n    start = 0\n    end = len(music_string) - 1\n\n    start_between = 0\n    if music_string.startswith('o'):\n        end_between = 4\n        start_between = 1\n    elif music_string.startswith('o|'):\n        end_between = 2\n        start_between = 1\n    elif music_string.startswith('|'):\n        end_between = 1\n        start_between = 1\n        for i in range(start_between, len(music_string)):\n            if music_string[i] == 'o':\n                end_between = i - start_between\n            elif music_string[i] == 'o|':\n                end_between = i - start_between\n                start_between = i + 1\n    elif music_string.startswith('|'):\n        end_between = 2", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [int(i) for i in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    beats = music[0].split(' ')\n    return [int(x) for x in beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    if len(music) < 2:\n        return None\n\n    # First note, last four beats\n    first_note = music[0]\n    last_beat = music[1]\n    if first_note.isdigit():\n        last_beat = int(first_note.split('.')[1], 16)\n\n    # Second note, last two beats\n    second_note = music[2]\n    last_beat = music[3]\n    if second_note.isdigit():\n        last_beat = int(second_note.split('.')[1], 16)\n\n    # Third note, last one beat\n    third_note = music[4]\n    last_beat = music[5]\n    if third_note.isdigit():\n        last_beat = int(third_note.split('.')[1], 16)\n\n    return List([last_beat] + [first_beat, last_beat, last_beat, last_beat, last_beat, last_beat])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"try:\n        music_string = music_string.strip().decode('utf-8')\n    except ValueError as e:\n        return []\n\n    def _do_key(key) -> int:\n        try:\n            return int(key[0:2])\n        except ValueError:\n            return int(key[1:])\n\n    def _do_more_note(note: str) -> int:\n        try:\n            return int(note[0:2])\n        except ValueError:\n            return int(note[1:])\n\n    for i in range(len(music_string)):\n        if _do_key(music_string[i:i + 1])!= 1:\n            continue\n\n        if _do_more_note(music_string[i:i + 1]) == 4:\n            break\n\n    return list(map(int, music_string.split('')))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(b' ')\n    if len(music) > 1:\n        raise ValueError('Too many musical notes')\n    # Number of notes:\n    # o - whole note, lasts four beats\n    # o| - half note, lasts two beats\n    # o|| - quater note, lasts one beat\n    # o |- whole note, lasts one beat\n    # o|- half note, lasts one beat\n    # o|- quater note, lasts one beat\n    num_notes = int(music[0])\n    # Number of notes per beat:\n    # o - whole note, lasts four beats\n    # o| - half note, lasts two beats\n    # o|| - quater note, lasts one beat\n    # o|- whole note, lasts one beat\n    # o|- half note, lasts one beat\n    # o|- quater note, lasts one beat\n    beats = num_notes * int(music[1])\n\n    # Number of notes per beat with rounding off:\n    # o - whole note, lasts four beats\n    # o| - half note, lasts two beats\n    # o|| - quater note, lasts", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split()\n    beats = music[0].split(\"|\")[1:]\n    last_note = music[-1].split(\"|\")[-1]\n    if last_note not in (\"o\", \"o\"|\"):\n        raise ValueError(\"invalid music string\")\n    beats[-1] += 1\n    for i in range(4, beats[-1]):\n        yield i", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(c) for c in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return music_string.split('|')[1:]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.decode('utf-8')\n    if music_string.startswith('|'):\n        music_string = music_string[1:]\n    if music_string.startswith('.'):\n        music_string = music_string[1:]\n    if music_string.startswith('o'):\n        music_string = music_string[1:]\n    if music_string.endswith('o|'):\n        music_string = music_string.rstrip('|')\n    if music_string.endswith('o|'):\n        music_string = music_string.rstrip('|')\n    return [int(m) for m in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"numbers = []\n    for digit in music_string.split('|'):\n        if digit == '.':\n            numbers.append(int(digit))\n        elif digit == 'o':\n            numbers.append(int(digit) + 1)\n        else:\n            numbers.append(int(digit))\n    return numbers", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return _parse_list(music_string, _i64_to_int)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.decode('utf-8')\n    music_string = music_string.strip().lower()\n    if music_string[0] == 'o':\n        return music_string[1:].split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|')\n\n    if music_string[0] == 'o|':\n        return music_string[1:].split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop().split('|').pop", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(\" \")\n    if len(music)!= 4:\n        raise ValueError(\"Expected 4 beats, got %r\" % music)\n\n    for i in range(len(music)):\n        if music[i] in ['o', 'o', 'o', 'o|', 'o|', 'o', 'o|', 'o|', 'o', 'o'] and music[i] in ['o', 'o', 'o|', 'o|', 'o', 'o|'] and music[i] not in ['|', '|', '|', 'o', 'o', 'o', 'o']:\n            break\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: improve regex?\n    music_string = music_string.strip().split()\n    beats = [int(m) for m in music_string if int(m) <= int(m)]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return parse_music(music_string).values()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_bars = music_string.split(' ', 1)[0].split('|', 1)\n    music_words = music_string.split(' ', 1)[1].split('|', 1)\n    music_elements = music_string.split(' ', 1)[2].split('|', 1)\n\n    music_elements_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for music_element in music_elements:\n        music_element_lengths.append(int(music_element.split('.', 1)[0]))\n    music_elements = music_elements_lengths\n\n    return music_elements", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.lower()\n    # The beginning of the music string.\n    in_beginning_of_note = True\n    in_quarter_of_note = True\n    in_end_of_note = True\n    in_beg_of_note = True\n\n    # Identify all the pieces in the music string.\n    pieces = music_string.split()\n\n    if in_beginning_of_note:\n        pieces = pieces.map(lambda p: p[:4] + [(p[5:] - p[4]) / 2]).filter(lambda x: x > 0)\n        pieces = pieces.map(lambda p: p[:4] + [(p[5:] - p[4]) / 2]).filter(lambda x: x > 0)\n        pieces = pieces.filter(lambda x: x > 0).distinct()\n\n    if in_quarter_of_note:\n        pieces = pieces.map(lambda p: p[:4] + (p[5:] - p[4]) / 2).filter(lambda x: x > 0)\n        pieces = pieces.map(lambda p: p[:4] + (p[5:] - p[4]) / 2).filter(lambda x: x > 0)\n        pieces = pieces.filter(lambda x: x > 0).distinct()\n\n    if in_end_of_note:\n        pieces = pieces.map(lambda", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        music_string = music_string[1:].split('|')\n    elif music_string.startswith('.'):\n        music_string = music_string[1:].split('.')\n    else:\n        music_string = music_string.split('|')\n    return int(music_string[1:-1])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        music_string = music_string[1:]\n    return music_string.split('|')[4:]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"let = music_string.split()\n    let_len = len(let)\n\n    if let_len % 2:\n        let = [int(x) for x in let[1:]]\n\n    for _ in range(let_len):\n        let.append(int(let[-2]))\n\n    return list(map(int, let))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# if this is a new string, just return the first index of the first string\n    if music_string == None:\n        return [None] * len(music_string)\n    else:\n        music_string = music_string.strip(' ').split('|')\n        if len(music_string) == 1:\n            return [music_string[0], music_string[1]]\n        else:\n            return [music_string[1], music_string[2:]]\n    # too long to parse\n    return [None, None, None, None, None, None, None, None]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.lower()\n    music = music_string.split()\n    if music[-3:] == '|':\n        music = music[:-3] + music[-3:]\n    elif music[-3:] == '|':\n        music = music[:-3] + music[-3:]\n    elif music[-3:] == '|':\n        music = music[:-3] + music[-3:]\n    elif music[-3:] == '|':\n        music = music[:-3] + music[-3:]\n    else:\n        music = music[:-3] + music[-3:]\n        music = music.split()\n\n    score = music[:-3] + music[-3:]\n\n    return [int(i) for i in range(score)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"parsed_words = []\n    for word in music_string.split(' '):\n        words = word.split('|')\n        for word in words:\n            if word.startswith('o'):\n                parsed_words.append((word[1:], True))\n            elif word.startswith('o|'):\n                parsed_words.append((word[1:], False))\n            elif word.startswith('|'):\n                parsed_words.append((word[1:], True))\n            elif word.startswith('.'):\n                parsed_words.append((word[1:], False))\n            elif word.startswith('|'):\n                parsed_words.append((word[1:], True))\n            elif word.startswith('.'):\n                parsed_words.append((word[1:], False))\n        if word in parsed_words:\n            parsed_words.remove(word)\n\n    return parsed_words", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = ''.join(['\\'' for _ in music_string.split('|')])\n    return [int(c for c in notes.split()) for c in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(\"\\n\")\n    for note in music:\n        if note == \"\":\n            continue\n        elif note.startswith(\"o \"):\n            for beat in note.split(\"|\"):\n                yield beat\n        elif note.startswith(\"o|\"):\n            for beat in note.split(\"|\"):\n                yield beat\n        elif note.startswith(\"o|\"):\n            for beat in note.split(\"|\"):\n                yield beat\n        elif note.startswith(\"o|\"):\n            yield beat\n        elif note.startswith(\"o|\"):\n            yield beat\n\n    return", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [int(c) for c in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split(\" \")\n    # Loop through each note\n    for note-index, note in enumerate(music_string):\n        # If the note is a whole note\n        if note == \"\":\n            # Do nothing\n        elif note-index < 3:\n            # If note ends with a |\n            if note == \"|\":\n                # Do nothing\n                elif note-index >= 5:\n                    # If the note is a half note\n                    if note == \"|\":\n                        # Do nothing\n                        elif note-index >= 6:\n                            # If the note is a quarter note\n                            if note == \"|\":\n                                # Do nothing\n                                elif note-index >= 6:\n                                    # If the note is a whole note\n                                    if note == \"|\":\n                                        # Do nothing\n                                        elif note-index >= 6:\n                                            # If the note is a half note\n                                            if note == \"|\":\n                                                # Do nothing\n                                                elif note-index >= 6:\n                                                    # If the note is a quarter note\n                                                    if note == \"|\":\n                                                        # Do nothing\n                                                        elif note-index >= 6:\n                                                            # If the note is a whole note\n                                                            if note == \"|\":\n                                                                # Do nothing\n                                                        elif note-index >= 6:\n                                                                    # If the", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# e.g.'o| O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    for i in range(0, len(music) - 2):\n        music[i + 1] = music[i + 1] * -1\n\n    return music.tolist()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip().lower().split()\n    if music_string[-1] == '.':\n        return music_string.split()\n    else:\n        return music_string", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music_string = music_string.replace('\"', '')\n\n    return int.fromstring(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"MusicParser(music_string=music_string).extract_syllable_list()\n    if MusicParser.NOTE:\n        return [int(s[b'|']) for s in music_string.split(b'|')]\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"numbers = []\n\n    for _ in range(4):\n        for i in music_string.split('|'):\n            if i in range(2, 3):\n                numbers.append(i)\n            else:\n                numbers.append(i)\n\n    return numbers", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"let_octaves = ''\n    let_beats = ''\n    let_dots = ''\n    let_dashes = ''\n    let_accents = ''\n    let_capital_accents = ''\n    let_dash_accents = ''\n    let_accent_dashes = ''\n    let_capital_dash_accents = ''\n    let_dash_capital_dash_accents = ''\n    let_accent_dashes_capital_dash_accents = ''\n    let_accent_dashes_capital_dash_dash_accents = ''\n    let_accent_dashes_capital_dash_dash_dash_accents = ''\n    let_accent_dashes_dash_capital_dash_dash_dash_accents = ''\n    let_dash_capital_dash_dash_dash_dash_accents = ''\n    let_dash_capital_dash_dash_dash_dash_accents = ''\n    let_dash_dash_dash_dash_dash_accents = ''\n    let_dash_dash_dash_dash_dash_dash_accents = ''\n    let_dash_dash_dash_dash_dash_dash_accents = ''\n    let_d", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('#'):\n        return []\n    elif music_string.startswith('.'):\n        return parse_note(music_string[1:])\n    else:\n        return [int(c) for c in music_string.split(' ')[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"string = music_string.replace('|', '|')\n    string = string.replace('.', '.')\n    string = string.replace('|', '|')\n    string = string.replace('.', '.')\n\n    return list(map(int, string.split()))\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return music_string.split(\"|\")[1:].map(int)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert music_string.startswith('%'), 'Invalid music string'\n    if music_string.endswith('%'):\n        music_string = music_string[:-2]\n    return [int(x) for x in music_string.split('|')[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    if len(notes) < 3:\n        return None\n    else:\n        return int(notes[0]) + int(notes[1]) + int(notes[2])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n\n    if music_string.startswith('|'):\n        return music_string.split('|')\n    else:\n        return music_string.split(' ')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split('|')\n    if len(music_string)!= 4:\n        raise ValueError('Invalid input: \"%s\" has %d note(s)' % (music_string, len(music_string)))\n    if len(music_string)!= 2:\n        raise ValueError('Invalid input: \"%s\" has %d note(s)' % (music_string, len(music_string)))\n    if len(music_string)!= 1:\n        raise ValueError('Invalid input: \"%s\" has %d note(s)' % (music_string, len(music_string)))\n    if len(music_string)!= 0:\n        raise ValueError('Invalid input: \"%s\" has %d note(s)' % (music_string, len(music_string)))\n    return music_string", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split(\"|\")\n\n    return map(int, music_string.split())", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('|'):\n        music_string = music_string[:-1]\n    elif music_string.endswith('|') and music_string[:-1].endswith('|'):\n        music_string = music_string[:-1][:-1] + music_string[:-1]\n    else:\n        return list(map(int, music_string.split('|')))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music_string = music_string.lower().strip('\\n').split(' ')[1:]\n\n    for i in music_string:\n        if i.isdigit():\n            yield i\n\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(' ')\n    beats = 0\n    for i in music:\n        if i == '.':\n            beats += 1\n        elif i == '|':\n            beats += 2\n        elif i == 'o':\n            beats += 2\n        else:\n            beats += 3\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Assume all tones have 4 beats\n    start_note = music_string[0:3]\n    end_note = music_string[3:6]\n    note_between = music_string[6:10]\n    note_between_three = music_string[10:15]\n    note_between_two = music_string[15:20]\n    note_between_one = music_string[20:25]\n    note_between_four = music_string[25:30]\n    note_between_four_three = music_string[30:35]\n    note_between_four_two = music_string[35:40]\n    note_between_four_one = music_string[40:45]\n    note_between_four_four_three = music_string[45:50]\n    note_between_four_four_two = music_string[50:55]\n    note_between_four_four_one = music_string[55:60]\n    note_between_four_four_three = music_string[60:65]\n    note_between_four_four_two = music_string[65:70]\n    note_between_four_four_one = music_string[70:75]\n    note_between_four_four_four_three", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string.startswith('O'):\n        raise ValueError('Expected O or O')\n    else:\n        start = music_string.find('|')\n        end = music_string.find('.') + 2\n        for i in range(start, end):\n            music_string = music_string[:i] + music_string[i + 1:]\n        return parse_music(music_string[1:start] + music_string[end:])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return list(map(int, music_string.split('|')))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return music_string.split('|')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"n = 0\n    for k, v in music_string.items():\n        n += (int(k) - (k % 4))\n        n += int(v) - (v % 2)\n        n += int(v) - (v % 4)\n    return n", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(\"|\")\n\n    if len(music) < 4:\n        raise ValueError(\"Input string must be longer than 4 or 'o o|' must be part of the string.\")\n    if len(music) > 2:\n        raise ValueError(\"Input string must be shorter than 2 or 'o o|' must be part of the string.\")\n\n    music.append(0)\n\n    # the order of these numbers is important in figuring out how long a note lasts.\n    order = music[0] + music[1] + music[2]\n    music.pop(0)\n\n    return music[order:order + 4]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Find out where the notes start.\n    start = music_string.find('|')\n\n    # Find out where the notes end.\n    end = music_string.find(' ')\n\n    # The note length in beats.\n    length = int(start - end)\n\n    # The number of beats per note.\n    beats_per_note = (length / (end - start + 1))\n\n    # The start of the note.\n    note_start = music_string[start:end]\n\n    # The end of the note.\n    note_end = music_string[end:]\n\n    # The number of beats per note + 1.\n    # Note: this is the number of beats after the first note.\n    beats_per_note += 1\n\n    return [beats_per_note, note_start, note_end, note_start + 1, note_end + 1]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    for digit in music_string.split('|')[1:]:\n        if digit == '0' or digit == '.':\n            music_list.append(0)\n        elif digit == '1' or digit == '.':\n            music_list.append(1)\n        elif digit == '2' or digit == '.':\n            music_list.append(2)\n        elif digit == '3' or digit == '.':\n            music_list.append(3)\n        elif digit == '4' or digit == '.':\n            music_list.append(4)\n    return music_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"import re\n    assert music_string.endswith('|')\n\n    chunks = music_string.split('|')\n    n = len(chunks)\n    chunks = chunks[1:]\n\n    beats = []\n    while chunks:\n        beats.append(int(chunks[1:-1]))\n        chunks = chunks[1:]\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(\" \")\n    for i, beat in enumerate(music):\n        if i == 0:\n            beat = \"\"\n        else:\n            beat = beat + \" \"\n        yield i + beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"chunks = music_string.split(\"|\")\n    if chunks[0] is not None:\n        chunks[0] = int(chunks[0])\n        chunks[1] = int(chunks[1])\n        chunks[2] = int(chunks[2])\n        chunks[3] = int(chunks[3])\n\n    return chunks", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"parsed = []\n    notes = music_string.split()\n    for i in range(1, len(notes) - 1):\n        if notes[i + 1] == '|':\n            parsed.append(int(notes[i + 2] + 4))\n        elif notes[i + 1] == '.':\n            parsed.append(int(notes[i + 2] + 2))\n        elif notes[i + 1] == '|':\n            parsed.append(int(notes[i + 2] + 1))\n        elif notes[i + 1] == '.':\n            parsed.append(int(notes[i + 2] + 1))\n    return parsed", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Checking for \"...\" at the beginning of the string, if present, the first not\n    # will last four beats.\n    first_not = None\n    last_not = None\n    for n in music_string.split(\" \")[1:]:\n        if n.startswith(\"...\"):\n            first_not = n.split(\" \")[0]\n            last_not = n.split(\" \")[-1]\n            break\n\n    # If all of the above are true, then the first beat will be 4.\n    if first_not == \"...\":\n        first_not = 4\n    elif first_not == \"...\":\n        last_not = 4\n\n    # If all of the above are true, then the second beat will be 2.\n    elif last_not == \"...\":\n        last_not = 2\n    elif last_not == \"...\":\n        first_not = 2\n\n    # If all of the above are true, then the third beat will be 1.\n    elif first_not == \"...\":\n        last_not = 1\n    elif first_not == \"...\":\n        last_not = 1\n\n    # If all of the above are true, then the fourth beat will be 1.\n    elif last_not == \"...\":\n        last_not = 1\n    elif last_not == \"...\":", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music_lines = music_string.split(\" \")\n    return map(int, music_lines)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"data = []\n\n    for n in music_string.split('|'):\n        data.append(int(n))\n\n    return list(map(int, data))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"from utils.compat import StringIO\n    from utils.compat import ascii_to_str, ascii_to_str_native\n    from utils.compat import BytesIO\n    from utils.compat import unicode_to_bytes\n\n    music_string = ascii_to_str(music_string)\n    with StringIO(music_string) as f:\n        reader = BytesIO(f.read())\n\n    results = []\n    while True:\n        beats = 0\n        last_not = 0\n        for line in reader:\n            beat = 0\n            if last_not == 0:\n                last_not = 1\n            else:\n                beats += 1\n            if line.startswith('|'):\n                beat += 1\n            elif line.startswith('.'):\n                last_not = 1\n            elif line.startswith(' '):\n                beats += 1\n            elif line.startswith('['):\n                last_not = 1\n            elif line.startswith(']'):\n                beats -= 1\n            else:\n                raise Exception('Invalid line in music file')\n\n            results.append(beats)\n\n        last_not = 1\n\n    return results", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(\"\\n\")\n    assert music.count(\"o\") == 4\n    assert music.count(\"o\") == 2\n    assert music.count(\"o\") == 1\n    assert music.count(\"o\") == 4\n    assert music.count(\"o\") == 2\n    assert music.count(\"o\") == 1\n    assert music.count(\"o\") == 4\n    assert music.count(\"o\") == 2\n    assert music.count(\"o\") == 1\n    assert music.count(\"o\") == 4\n\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" parsed_notes = []\n\n    for b in music_string.split(b'|')[1:]:\n        if not parsed_notes:\n            parsed_notes.append(b)\n        else:\n            parsed_notes.append(b | (b & 0x7f))\n    return parsed_notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"while True:\n        assert isinstance(music_string, str), music_string\n        m = music_string.find('|')\n        if m == -1:\n            break\n        n = music_string.find('.')\n        if n == -1:\n            break\n        m += 1\n        n += 1\n        yield int(n)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"let_between_note_words = ['|', '|','','', '|','', '|']\n    let_between_note_words.reverse()\n\n    let_note_string = music_string.split('|')\n    let_between_note_words.reverse()\n\n    let_note = tuple(let_note_string)\n    let_between_note = tuple(let_between_note_string)\n\n    let_music_length = len(let_note)\n\n    let_between_note_num = 0\n\n    while let_between_note_num <= let_music_length:\n        let_between_note_num += 1\n\n        let_note_num = tuple(let_note_string)\n        let_between_note_num += 1\n\n        let_note = tuple(let_note_string)\n        let_between_note = tuple(let_between_note_string)\n\n        if let_between_note_num > let_music_length:\n            let_note_num = let_note_num - 1\n            let_note = let_note[let_between_note_num:]\n            let_between_note = let_between_note[let_between_note_num:]\n\n        let_between_note = tuple(let_between_note)\n\n        let_note_string = let_note.split", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"try:\n        return int(music_string.split()[0])\n    except ValueError as e:\n        raise ValueError(e)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"with open(music_string) as f:\n        data = f.read().split(' ', 4)\n        if len(data) == 0:\n            return None\n        # 'O' is complete, so we have to split every half note and then\n        # parse them separately.\n        for i in range(len(data) / 2 - 1):\n            m = int(data[i / 2])\n            for j in range(i % 2):\n                data[i / 2] = m + (m - 1) * j\n                data[i / 2] = m - 1 * j\n        return data", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO (modified by Lehrer)\n    # replace the original string with its value in an ASCII list\n    # (no need to change the length of the string or even the length of the list)\n    music_lines = list(map(lambda i: int(i.decode('ascii')), music_string.splitlines()))\n    return music_lines", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Construct the list of beats from a string that starts with o\n    with open(music_string, 'r') as f:\n        # Get the number of note on the string (= how many beats last)\n        n = 0\n        while True:\n            line = f.readline()\n            if not line:\n                break\n            n += int(line.split()[1])\n\n        # Get the number of beats on the string (= how many beats last)\n        n = n - len(line)\n        # Get the number of beats by inserting. on the end of line\n        n = n + 1\n        # Iterate over the string, inserting. on every line\n        for line in f:\n            # Add all notes in the string into a list\n            l = []\n            for i in range(n):\n                l.append(i +. * n)\n            l.append(i +. * n)\n            # Append the list to the list of notes\n            l.append(line)\n            # Get the next line\n            f = open(f, 'r')\n        return l", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n\n    if len(music_string) < 8:\n        return None\n\n    music_instruments = {}\n    with open(music_string, 'r') as f:\n        for line in f:\n            music_instruments[line.strip()] = int(line.strip()[0:2])\n\n    return music_instruments", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(' ')\n    n = len(music)\n\n    # if the first part is a whole note, then the rest is a half note\n    if music[0] == 'o':\n        music.pop(0)\n        if music[-1] == 'o':\n            music.pop(n - 1)\n            if music[-1] == 'o':\n                music.pop(n - 1)\n            return music[1:-1]\n        else:\n            return music[1:]\n\n    # if the first part is a half note, then the rest is a full note\n    elif music[0] == 'o|':\n        music.pop(0)\n        if music[-1] == 'o|':\n            music.pop(n - 1)\n            if music[-1] == 'o|':\n                music.pop(n - 1)\n            return music[1:-1]\n        else:\n            return music[1:]\n\n    # if the first part is a quater note, then the rest is a full note\n    elif music[0] == 'o|.':\n        music.pop(0)\n        if music[-1] == 'o|':\n            music.pop(n - 1)\n            if music[-1] == 'o|':\n                music.pop(n - 1)\n            return music[1:-1]\n        else:\n            return music[1:]\n\n    # if the first part is", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"with open(music_string, 'r') as music_string_file:\n        lines = music_string_file.readlines()\n        lines = [l.strip() for l in lines]\n        music_str = lines[:-1]\n        beats = 0\n        for i in music_str.split():\n            if i!= 'o':\n                beats += 1\n        return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"words = music_string.split()\n    return parse_words(words)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.lower().strip().strip('\\n')\n    music_string = music_string.replace(\" \", \"\")\n    music_string = music_string.split(\" \")\n\n    n_beat = 0\n    beats = 0\n    for word in music_string:\n        if word == \"\":\n            n_beat += 1\n            beats += 1\n        elif word in [\"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# FIXME: Start with an empty list to reduce if these will be helpful\n    try:\n        return _parse_music_from_string(music_string, 0)\n    except ValueError as e:\n        raise e", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" while True:\n        start = music_string.find('|')\n        if start == -1:\n            break\n\n        end = music_string.find('.', start)\n        if end == -1:\n            break\n\n        n = int(music_string[start:end].strip())\n        if n < 1:\n            break\n\n        return n\n\n    return []\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"parsed = []\n    for key in music_string.split('|'):\n        if key in ('O', 'O|', 'O', 'O', 'O|'):\n            parsed.append(int(key[2:]))\n        elif key in ('O|', 'O', 'O', 'O|'):\n            parsed.append(int(key[2:]))\n        elif key in ('|', '|', '|', '|', '|', '|'):\n            parsed.append(int(key[2:]))\n    return parsed", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # First, convert the string to an array of integers:\n    data = [int(n) for n in music_string.split() if n >= '0' and n <= '9']\n\n    # Second, the number of beats that each note lasts:\n    n_betters = len(data)\n\n    # Third, the position of the last note in the sequence:\n    last_note_position = 0\n\n    return data, n_betters, last_note_position", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        music_string = music_string.split('|')\n        if len(music_string) == 2:\n            music_string = music_string[1]\n        elif len(music_string) == 3:\n            music_string = music_string[1]\n        elif len(music_string) == 4:\n            music_string = music_string[1]\n        elif len(music_string) == 5:\n            music_string = music_string[1]\n    else:\n        music_string = music_string.split(' ')\n\n    if music_string[0] <= 0:\n        raise ValueError(\"Invalid music string\")\n\n    return music_string.split(' ')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(c) for c in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string.endswith('|'):\n        return [0 for _ in range(len(music_string))]\n    else:\n        return music_string.split('|')\n\n    if len(music_string) == 4:\n        return int(music_string[1:-1])\n    elif len(music_string) == 2:\n        return int(music_string[1:-1])\n    else:\n        return 0", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip().decode('utf-8')\n    return music_string.split(' ')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes: List[int] = []\n    for i in music_string.split(' '):\n        note = int(i.strip())\n        notes.append(note)\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Number of beats per note\n    n = 0\n    # Number of beats\n    b = 0\n    # Number of beats last\n    e = 0\n    # Number of beats last last\n    l = 0\n    # Number of beats last last last\n    l_e = 0\n    # Number of beats last last last last\n    l_e_l = 0\n    # Number of beats last last last last\n    l_e_l_e = 0\n    # Number of beats last last last last\n    l_e_l_e_l = 0\n    # Number of beats last last last last\n    l_e_l_e_l_l = 0\n    # Number of beats last last last last\n    l_e_l_e_l_l_l = 0\n    # Number of beats last last last last\n    l_e_l_e_l_l_l = 0\n    # Number of beats last last last last last\n    l_e_l_e_l_l_l_l = 0\n    # Number of beats last last last last last\n    l_e_l_e_l_l_l_l = 0\n    # Number of beats last last last last last\n    l_e_l_e_l_l_l_l = 0\n    # Number of beats last last last last last\n    l_e_l_e_l_l_l_l = 0\n    # Number of beats last last last last last\n    l_e_l", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('.'):\n        # Only music which ends with '.' is a note\n        return music_string[:-1]\n    else:\n        # It is a full note\n        return music_string[:-1]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return music_string.split('|').flatten()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip().lower()\n    music_note_count = 0\n    for c in music_string:\n        if c == '.' or c == '|':\n            music_note_count += 1\n        elif c == 'o':\n            music_note_count += 4\n        elif c == 'o|':\n            music_note_count += 2\n        elif c == '.|':\n            music_note_count += 1\n    return music_note_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.lower()\n\n    # The length of a musical note is the length of a complete beat\n    note_length = music_string.split('|')[1]\n\n    # Number of beats a note lasts.\n    beats = [int(a) for a in music_string.split('|')[1:].split('|')[:-1]]\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n    # Note: '|' is not a valid ASCII punctuation.\n    music_string = music_string.replace('|', '|').split('|')\n    # Note: 'oo|' is a valid ASCII punctuation.\n    music_string = music_string.replace('oo', 'oo').split('oo')\n    # Note: '.' is not a valid ASCII punctuation.\n    music_string = music_string.replace('.', '.').split('.')\n    # Note: 'o' is a valid ASCII punctuation.\n    music_string = music_string.replace('o', 'o').split('o')\n    # Note: 'o' is not a valid ASCII punctuation.\n    music_string = music_string.replace('o', 'o').split('o')\n    # Note: 'o' is not a valid ASCII punctuation.\n    music_string = music_string.replace('o', 'o').split('o')\n    # Note: 'o' is a valid ASCII punctuation.\n    music_string = music_string.replace('o', 'o').split('o')\n    # Note: 'o' is a valid ASCII punctuation.\n    music_string = music_string.replace('o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # TODO(khan): remove this\n\n    # TODO(khan): add this\n    \"\"\"\n    >>> parse_music('o o|.| o o| o o|.| o o| o o|.| o o|.| o o| o o| o o| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # TODO(khan): add this\n    \"\"\"\n    >>> parse_music('o o|.| o o| o o|.| o o| o o|.| o o| o o| o o| o o| o o| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # TODO(khan): add this\n    \"\"\"\n    >>> parse_music('o o|.| o o| o o|.| o o| o o|.| o o| o o| o o| o o| o o| o o| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.rstrip().split(\"|\")\n    try:\n        return int(music_string[0])\n    except ValueError:\n        raise ValueError(\"Missing number of beats after first \" + music_string[0])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('o'):\n        return [4, 2, 1, 2, 1, 1, 1, 4, 4]\n    elif music_string.startswith('o|'):\n        return [2, 1, 2, 1, 1, 1, 4, 4, 4]\n    elif music_string.startswith('|'):\n        return [2, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert isinstance(music_string, str), 'Invalid music string'\n\n    # Loop through each note in the music string, and compute the number of beats\n    # required to last it.\n    # Note that we only care about notches that end with 'o', as this is the only\n    # case where we can do a simple check on the note and the rest of the string.\n    for note in music_string:\n        last_note = note[3:]\n        last_note = last_note.rfind('o')\n        if last_note!= -1:\n            beats = last_note - 1\n        else:\n            beats = 0\n        yield beats\n\n    return None", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"parser = re.compile('([a-zA-Z]+)(.+)([a-zA-Z]+)(.+)([a-zA-Z]+)(.+)')\n    music_lines = parser.findall(music_string)\n    for line in music_lines:\n        if not line:\n            continue\n        beats = int(line.split('|')[0])\n        beats += int(line.split('|')[1])\n        beats += int(line.split('|')[2])\n        beats += int(line.split('|')[3])\n        beats += int(line.split('|')[4])\n        return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('|'):\n        music_string = music_string[:-1]\n    return music_string.split('|')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"data = music_string.split(\" \")[1:]\n    i = 0\n    while i < len(data):\n        data[i] = int(data[i]) * 4\n        i += 1\n    return data", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if music_string == 'o':\n        return list(range(4))\n    elif music_string == 'o|':\n        return list(range(2))\n    elif music_string == 'o|.|':\n        return list(range(1))\n    else:\n        raise ValueError(\"Unknown note string %r\" % music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split()\n    if music_string[-1] == 'o':\n        music_string = music_string[:-1]\n    else:\n        music_string = music_string[1:]\n    return music_string.split('')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        music_string = music_string.split('|')[0]\n    music_string = music_string.replace('-','')\n    music_string = music_string.replace('_','')\n\n    # Iterate over all notes:\n    music_notes = music_string.split(' ')\n    beats_per_note = music_notes[0] * 4 + music_notes[1] * 2 + music_notes[2] * 1 + music_notes[3] *\n    music_notes = music_notes[2:]\n\n    return music_notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# read music string, split into digits and keyframes\n    music_string = music_string.split('.')\n\n    # get all beats\n    beats = []\n    for digit in music_string.split('|'):\n        beats.append(int(digit))\n\n    # get all keys\n    keys = []\n    for key in music_string.split('.'):\n        keys.append(int(key))\n\n    # get number of notes\n    nb_eyes = 0\n    nb_eyes_in_key = 0\n    for key in keys:\n        if key == 'o':\n            nb_eyes += 1\n        elif key == 'o|':\n            nb_eyes_in_key += 1\n        elif key == 'o':\n            nb_eyes += 1\n\n    # count note length\n    nb_note_eyes = 0\n    nb_note_eyes_in_key = 0\n    for key in keys:\n        if key == 'o':\n            nb_note_eyes += 1\n        elif key == 'o|':\n            nb_note_eyes_in_key += 1\n        elif key == 'o':\n            nb_note_eyes += 1\n\n    # skip any keys that are not a whole note (i.e. not four or two", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = re.match(r'.*[a-f]{2,4}[a-f]{2}[-a-f]{2}[a-f]{2}', music_string, re.IGNORECASE)\n    if m:\n        return [m.group() for m in m.groups()]\n\n    return [int(m.group(1)) for m in m.groups()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')[1:]\n    if music:\n        music_list = music.split(' ')\n        return music_list[1:]\n\n    # example without music:\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o o|\n    # o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace('|', '|').replace('|', '|').replace('.', '.').replace('|', '|').replace('|', '|').replace('.', '.').replace('|', '|')\n    return map(int, music_string.split())", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace(' ', '').replace('|', '').replace('#', '')\n\n    return parsed_by_numbers(music_string, music_lengths=list(map(int, music_string.split(' ')[1:])))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_note = music_string.split('|')\n    # get note size\n    size = music_note[0]\n    note_size = 0\n    for i in range(1, len(music_note) - 1):\n        if music_note[i] == music_note[i - 1] and music_note[i + 1] == music_note[i]:\n            note_size += 1\n    return [note_size * size]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split()\n    return music[3:].rstrip().split('|')[1:]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Split up the string into a list of integers\n    return _split_string_to_list(music_string).split()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# We make this function immutable, so the comments in it can be removed.\n    # This helps prevent the error\n    #   >>> from multiprocessing import Pool\n    #   >>> import random\n    #   >>> from time import sleep\n    #   >>> sleep(4)\n    #   >>> random.seed()\n    #   >>> L = list(range(1,2,1,1,1,4,4,4,4,4))\n    #   >>> L\n    #     [\n    #       1, 1, 1, 2, 2, 2, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\n    #       1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1\n    #     ]\n\n    # Note the use of the itertools module:\n    #   >>> import itertools\n    #   >>> n = 5\n    #   >>> for i,x in itertools.combinations(range(n),1):\n    #     yield x\n    #   >>> print(i, len(L))\n    #   2, 3, 4, 5, 6", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"data = []\n    for c in music_string:\n        if c == '.':\n            c = '|'\n        elif c == 'o':\n            data.append(0)\n        elif c == 'o|':\n            data.append(1)\n        elif c == 'o|':\n            data.append(2)\n        elif c == 'o|':\n            data.append(3)\n        elif c == 'o|':\n            data.append(4)\n        else:\n            data.append(0)\n    return data", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return int.from_bytes(music_string.encode('utf-8'), 'utf-8', 'ignore')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = 0\n    if music_string.startswith(' '):\n        beats = music_string[1:].split('|')\n    else:\n        beats = music_string.split('|')\n\n    for i in range(1, len(beats)):\n        beats[i] = int(beats[i])\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    # note length is not a valid length of an ASCII note\n    note_length = music[0].count('|') - 1\n    note_count = music[0].count('|') - 1\n\n    # extract length of each note\n    for i in range(note_length):\n        note = music[i]\n        note_length -= note.count('|')\n        note_count -= note.count('|')\n\n    # extract length of each beat\n    for i in range(note_count):\n        beat = music[i]\n        beat_length = music[i].count('|')\n        beat_count = music[i].count('|')\n        beat.count('|') - 1 - beat_count - beat_length\n\n    # return lengths of each note and beat\n    return (note_length, note_count)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    return music[3:]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split(' ')\n\n    for i in range(0, len(music_string), 3):\n        music_string[i] = music_string[i].replace(' ', '|')\n\n    return music_string", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"int_list = []\n    music = music_string.split('|')\n    # There is a bug in the built-in music parser in Python 2 that\n    # generates a different output for the same string than it actually does.\n    # If you want the output you would expect from the built-in music parser, you\n    # need to pass the string directly to the function and not try to parse\n    # it and then use that output in your input.\n    for number in music:\n        # This is what is missing from the built-in music parser.\n        if not number.isdigit():\n            # The first letter should be the digit, as in 'o'\n            number = number[1:]\n            int_list.append(int(number))\n    return int_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"chunk_list = []\n    chunk_list.extend(re.split(r'([^|]*)', music_string))\n    chunk_list = chunk_list[::-1]\n    return chunk_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    for c in music_string:\n        if c in '|':\n            music_list.append(1)\n        elif c in 'o:':\n            music_list.append(0)\n        elif c in 'o|':\n            music_list.append(1)\n        elif c in 'o|':\n            music_list.append(0)\n        elif c in 'o|':\n            music_list.append(0)\n        elif c in 'o|':\n            music_list.append(0)\n        elif c in '|':\n            music_list.append(1)\n        elif c in '.':\n            music_list.append(0)\n        elif c in'':\n            music_list.append(1)\n        else:\n            music_list.append(0)\n\n    return music_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return music_string.split(\"|\").pop().split(\"|\").pop().split(\"|\").pop().split(\"|\")", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip().replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\")\n    music_string = music_string.replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\")\n    music_string = music_string.replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\")\n    music_string = music_string.replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\")\n    music_string = music_string.replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\").replace(\"o\", \"o\")\n    music_string = music_string.replace(\"o\", \"o\").replace", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        # Partition string\n        music_string = music_string[1:]\n    else:\n        # Partition string\n        music_string = music_string[1:]\n        music_length = music_string.split('|')[1]\n        music_length += music_length\n        for i in range(music_length):\n            music_string = music_string[:i]\n    return parse_music(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" m = 0\n    w = 0\n    len = music_string.split('|')[0].count(' ')\n    for i in range(len):\n        c = music_string.split('|')[i].split(' ')[0].split(' ')[-1]\n        if c == 'o':\n            m = int(w)\n            w += 4\n        elif c == 'o|':\n            m = int(w)\n            w += 2\n        elif c == '|':\n            m = int(w)\n            w += 1\n        elif c == 'o|':\n            m = int(w)\n            w += 1\n        else:\n            m = int(w)\n            w += 1\n\n    return m, w", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"try:\n        music_string = music_string.split()\n    except ValueError:\n        pass\n\n    # FIXME: handle duplicate notes.\n    # FIXME: handle all cases except for 'o' and 'o|'\n    return music_string.replace(\" \", \"\").split()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.isdigit():\n        m = music_string.split(\"|\")\n        return int(m[0]) + int(m[1]) + int(m[2]) + int(m[3]) + int(m[4])\n    else:\n        raise ValueError(\"Music not a valid: {}\".format(music_string))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"str = music_string.strip()\n    if not isinstance(str, str):\n        str = str.decode('utf-8').encode('utf-8')\n    # Remove trailing spaces\n    str = str.split()\n    return [int(x) for x in str]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return list(re.findall(r\"[.]\", music_string))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for string in music_string.split('|'):\n        if string[0] == 'o':\n            notes.append(int(string[1:], 16))\n        elif string[0] == 'o|':\n            notes.append(int(string[1:], 8))\n        elif string[0] == 'o|':\n            notes.append(int(string[1:], 6))\n        elif string[0] == 'o|':\n            notes.append(int(string[1:], 4))\n        elif string[0] == 'o|':\n            notes.append(int(string[1:], 2))\n        elif string[0] == 'o|':\n            notes.append(int(string[1:], 1))\n        elif string[0] == 'o|':\n            notes.append(int(string[1:], 0))\n        elif string[0] == 'o|':\n            notes.append(int(string[1:], 5))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"with open(music_string, 'r') as f:\n        return list(map(int, f.readlines()))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string is None:\n        raise TypeError(\"music_string is None\")\n\n    if music_string.startswith(\"o \"):\n        return [1, 4, 2, 1, 2, 1, 1, 1, 4, 4, 4, 4, 4]\n    elif music_string.startswith(\"o| \"):\n        return [1, 2, 3, 4, 2, 1, 1, 1, 1, 4, 4, 4, 4, 4]\n    elif music_string.startswith(\"o|.| \"):\n        return [1, 2, 3, 4, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4]\n    elif music_string.startswith(\"o|.| \"):\n        return [1, 2, 3, 4, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4]\n    elif music_string.startswith(\"o|.| \"):\n        return [1, 2, 3, 4, 2, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4]\n    else:\n        raise ValueError(\"music_string is not a valid string\")", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"score = music_string.split(':')\n    notes = list(score[1:])\n\n    for note in score[1:]:\n        if note[0] == ':':\n            if note[1] == 'o':\n                return notes[:] + [int(note[2])]\n            else:\n                return notes[:] + [int(note[1])]\n        elif note[0] == '|':\n            if note[1] == 'o':\n                return notes[:] + [int(note[2])]\n            else:\n                return notes[:] + [int(note[1])]\n        elif note[0] == 'o|':\n            if note[1] == 'o':\n                return notes[:] + [int(note[2])]\n            else:\n                return notes[:] + [int(note[1])]\n        elif note[0] == '.':\n            if note[1] == 'o':\n                return notes[:] + [int(note[2])]\n            else:\n                return notes[:] + [int(note[1])]\n        elif note[0] == '.|':\n            if note[1] == 'o':\n                return notes[:] + [int(note[2])]\n            else:\n                return notes[:] + [int(note[1])]\n        elif note[0] == 'o|':\n            if note", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert isinstance(music_string, str)\n    assert music_string.count('-') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('-') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('-') ==", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return music_string.split('|')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n\n    if music_string.startswith(\".\"):\n        music_string = music_string[1:]\n    notes.append(int(music_string[1:])) # /\n\n    # Reset to end if we need to.\n    if music_string == \"\":\n        music_string = \"0 \"\n    elif music_string == \"0 o\" or music_string == \"0 o|\" or music_string == \"0 o|.|\" or music_string == \"0 o|.|\":\n        music_string = \"0 \"\n    elif music_string == \"0 o\" or music_string == \"0 o|\" or music_string == \"0 o|.|\" or music_string == \"0 o|.|\":\n        music_string = \"0 \"\n    elif music_string == \"0 o\" or music_string == \"0 o|\" or music_string == \"0 o|.|\" or music_string == \"0 o|.|\":\n        music_string = \"0 \"\n    else:\n        music_string = music_string[:-1]\n\n    return music_string.split(\" \")", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return map(int, music_string.split())", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# if music_string == 'o o|.| o| o|.| o|.|.|.|.| o| o| o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"with open(music_string, 'r') as f:\n        music_lines = f.readlines()\n    return music_lines", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n    music_sep = music_string[0:7]\n\n    # Handle all the musical notes\n    m = music_sep.split('|')[1][1:].split('|')[2][1:].split('|')[3][1:].split('|')[4]\n    return m", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split('|')\n    notes: List[int] = []\n    for i in music_string.split('|')[1:]:\n        if i not in notes:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    for char in music_string:\n        # If the letter is an equal sign, there is a whole note\n        if char in '|' or char in '.' or char in 'o':\n            music_list.append(int(char))\n        else:\n            music_list.append(int(char) / 4)\n    return music_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"assert isinstance(music_string, str)\n    assert music_string.strip() == 'o'\n    assert music_string.count('.') == 4\n    assert music_string.count('|') == 2\n    assert music_string.count('|') == 2\n    assert music_string.count('.') == 1\n\n    # First we handle 'o'\n    assert music_string.count('o') == 0\n    assert music_string.count('|o') == 2\n    assert music_string.count('o') == 1\n\n    # Then we handle 'o' and 'o'|\n    assert music_string.count('o|') == 2\n    assert music_string.count('o|') == 2\n    assert music_string.count('o|') == 1\n    assert music_string.count('o|') == 1\n\n    # Next we handle 'o' and 'o|'\n    assert music_string.count('o|') == 2\n    assert music_string.count('o|') == 2\n    assert music_string.count('o|') == 2\n    assert music_string.count('o|') == 2\n    assert music_string.count('o|') == 2\n\n    #", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"text = music_string\n    text = text.replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|', '|').replace('|',", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace('\\n', '').replace('\\r', '').replace('\\t', '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.split('|')\n\n    return music_string.split('|').map(int).partition(4)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Before each note, there are two bytes:\n    #   BIF - bit length of the last byte of the note.\n    #   NOP - number of bytes left to read from the file.\n    # Note 1:\n    # There are two byte boundaries between the note (0xF) and the note's end (0xA0).\n    # Note 2:\n    # There are two bytes left to read from the file.\n    # Note 3:\n    # There are two bytes left to read from the file.\n    # Note 4:\n    # There are two bytes left to read from the file.\n    # Note 5:\n    # There are two bytes left to read from the file.\n    # Note 6:\n    # There are two bytes left to read from the file.\n    # Note 7:\n    # There are two bytes left to read from the file.\n    # Note 8:\n    # There are two bytes left to read from the file.\n    # Note 9:\n    # There are two bytes left to read from the file.\n    # Note 10:\n    # There are two bytes left to read from the file.\n    # Note 11:\n    # There are two bytes left to read from the file.\n    # Note 12:\n    # There are two bytes left to read from the file.\n    # Note 13:\n    # There are two bytes left to read", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = re.match('([0-9]{1})([0-9]{1})([0-9]{1})([0-9]{1})', music_string, re.M)\n    if not m:\n        return None\n    else:\n        return m.group(1), m.group(2), m.group(3), m.group(4)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes: List[int] = []\n\n    for _ in range(len(music_string)):\n        if music_string[_ + 1: _ + 2] == 'o':\n            notes.append(int(music_string[_ + 2:]))\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace('|', '.').replace('.', '.').replace('|', '.')\n    music_string = music_string.replace('.', '.').replace('.', '.')\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            music_string = music_string[i + 1]\n        elif music_string[i] == 'o|':\n            music_string = music_string[i + 1] + music_string[i + 2]\n        elif music_string[i] == '.|':\n            music_string = music_string[i + 1] + music_string[i + 2] + music_string[i + 3]\n    return music_string.split('|')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split('|')\n    with open(os.path.join(os.path.dirname(__file__), '..', '..','music','melody.txt'), 'r') as music_file:\n        music_data = json.load(music_file)\n        music_info = music_data.get('info', {})\n        for n, beat in enumerate(music_info['notes']):\n            if n % 4 == 0:\n                beat += 4\n            else:\n                beat += 2\n        return music_info['notes']", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Replace 'o' with its uppercase letter\n    music_string = music_string.upper()\n    # Replace 'o' with its lowercase letter\n    music_string = music_string.lower()\n\n    # Replace 'o' with its upper case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its lower case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its lower case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its lower case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its upper case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its upper case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its upper case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its upper case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with its upper case letter\n    music_string = music_string.replace('O', 'o')\n\n    # Replace 'o' with", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_linenumbers = music_string.split('|')\n    music_numbers = [int(line.strip()) for line in music_linenumbers]\n    for n in music_numbers:\n        music_linenumbers.remove(n)\n        music_numbers.remove(n)\n        music_linenumbers.insert(0, n)\n        music_numbers.insert(1, n)\n        music_linenumbers.insert(2, n)\n        music_linenumbers.insert(3, n)\n        music_linenumbers.insert(4, n)\n        music_numbers.remove(n)\n    return music_numbers\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"num = 0\n    end = music_string[music_string.find(' ', num):]\n    for (i, b) in enumerate(end):\n        b = b.lstrip(' ')\n        if not b:\n            continue\n        if b in ('|', '.', 'o'):\n            num += 1\n        elif b == '|':\n            num += 2\n        else:\n            num += 3\n\n    return num", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n    parsed_notes = music_string.split('|')\n    number_of_notes = int(parsed_notes[-1])\n    return [number_of_notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return music_string.split('|').map(int).sum().sum(1)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return _parse_legacy(music_string, str.decode('ascii'))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"split_music_string = music_string.split(' ')\n\n    if len(split_music_string) < 4:\n        raise ValueError(\"Too many beats missing\")\n\n    return List(map(int, split_music_string.split(' ')))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if len(music_string) > 0 and music_string[-1] == '.':\n        music_string = music_string[:-1] + '.' + music_string[-1:]\n    return music_string.split('|')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(' ')\n\n    # First find all the notes in music\n    notes = []\n    for note in music:\n        if not note.startswith('|'):\n            notes.append(int(note))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        music_string = music_string[1:]\n    elif music_string.startswith('o'):\n        music_string = music_string[1:]\n    elif music_string.startswith('o|'):\n        music_string = music_string[1:]\n    elif music_string.startswith('o.'):\n        music_string = music_string[1:]\n    elif music_string.startswith('|.'):\n        music_string = music_string[1:]\n    elif music_string.startswith('.'):\n        music_string = music_string[1:]\n    else:\n        raise ValueError(\"Music string '%s' not in regular ASCII notation\" % music_string)\n\n    music = music_string.split(' ')\n    beats = music[0]\n    if music[1].isdigit():\n        beats = int(music[1], 16)\n    else:\n        beats = int(music[1], 0)\n    if music[2].isdigit():\n        beats = int(music[2], 16)\n    else:\n        beats = int(music[2], 0)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('d'):\n        music_string = music_string.strip('d')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e')\n    elif music_string.startswith('e|'):\n        music_string = music_string.strip('e|')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e')\n    elif music_string.startswith('e|'):\n        music_string = music_string.strip('e|')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e|')\n    elif music_string.startswith('e'):\n        music_string = music_string.strip('e|')\n    elif music_string.startswith('e", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Skip whitespace\n    music_string = music_string.strip()\n\n    # Split the string into notes\n    note_list = music_string.split('|')\n\n    # Count how many notes last\n    notes = 0\n    for note in note_list:\n        notes += 1\n        if notes % 4 == 0:\n            # Add up to 4\n            notes += 2\n\n    # Return the number of notes\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # get note count and beat count\n    note_count, beat_count = music_string.split('|')\n\n    # return list of integers\n    return list(range(note_count, beat_count + 1))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_dict = []\n    for n in music_string.split(' '):\n        if n in ('|',''):\n            music_dict.append(n.split(' ')[0])\n        else:\n            music_dict.append(n)\n    return music_dict\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" names = ['o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('|'):\n        music_string = music_string[:-1]\n\n    # For each note, we have four numbering positions and one notation:\n    #  0   1   2   3   4\n    #  o     o     o     o     o\n    #  o     o     o     o     o\n    #  o     o     o     o     o\n    #  o     o     o     o     o\n    #  o     o     o     o     o\n\n    # We have to convert the note to a list of integer positions:\n    notes = [int(i) for i in music_string.split()]\n    positions = [int(j) for j in music_string.split()]\n    notes.extend([1, 2, 3, 4, positions])\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.split(' ')\n\n    return [int(i) for i in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    with open(music_string, 'rt') as f:\n        for line in f:\n            if line.startswith('|'):\n                music_list.append(int(line[2:]))\n            elif line.startswith('o'):\n                music_list.append(int(line[1:]))\n            else:\n                music_list.append(int(line[0:1]))\n    return music_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.isdigit():\n        return parse_integer(music_string).tolist()\n    elif music_string.isalnum():\n        return parse_integer(music_string).tolist()\n    else:\n        return [int(m) for m in music_string.split()]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"r\"\"\"\n      >>> music_string = \"ooo\"\n      >>> parse_music(music_string)\n      >>> music_string\n      'ooo'\n      >>> parse_music('oo|')\n      >>> music_string\n      'oo|'\n      >>> parse_music('oo|'|') #. only one note\n      >>> music_string\n      'oo|'\n      >>> parse_music('oo|'|'|') #. only two notes\n      >>> music_string\n      'oo|'\n      >>> parse_music('oo|'|'|') #. only three notes\n      >>> music_string\n      'oo|'\n      >>> parse_music('oo|') # one note\n      >>> music_string\n      'oo'\n      >>> parse_music('oo|') # two notes\n      >>> music_string\n      'o'\n      >>> parse_music('oo|') # three notes\n      >>> music_string\n      'o'\n      >>> parse_music('oo|') # four notes\n      >>> music_string\n      'o'\n      >>> parse_music('oo|') # five notes\n      >>> music_string\n      'o'\n      >>> parse_music('oo|') # six notes\n      >>> music_string", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('?'):\n        music_string = music_string[1:]\n\n    if music_string.startswith('|'):\n        music_string = music_string[1:]\n\n    if music_string.startswith('?'):\n        music_string = music_string[1:]\n\n    if music_string.startswith('^'):\n        music_string = music_string[1:]\n\n    list = []\n\n    for notchar in music_string:\n        if notchar == '*':\n            list.append(0)\n        elif notchar in ['|', '^']:\n            list.append(notchar)\n        else:\n            list.append(int(notchar))\n\n    return list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        music_string = music_string[1:]\n\n    if music_string.startswith('o'):\n        music_string = music_string[1:]\n\n    # If the last note is o or |, we need to calculate how many beats the last note lasts.\n    if music_string.endswith('o|') or music_string.endswith('.|'):\n        if music_string.endswith('o'):\n            music_string = music_string[:-2]\n        else:\n            music_string = music_string[:-2] + music_string[1:]\n    else:\n        music_string = music_string\n\n    # Do the magic!\n    return int(music_string[1:])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('|'):\n        music_string = music_string[:-1]\n    else:\n        music_string = music_string[:-1]\n\n    if music_string.endswith('|') or music_string.endswith('|', 3):\n        music_string = music_string[:-1] + music_string[2:]\n    elif music_string.endswith('|') or music_string.endswith('|', 2):\n        music_string = music_string[:-1] + music_string[:-2]\n    elif music_string.endswith('|') or music_string.endswith('|', 1):\n        music_string = music_string[:-1] + music_string[:-1]\n    elif music_string.endswith('|') or music_string.endswith('|', 0):\n        music_string = music_string[:-1] + music_string[:-1]\n\n    list_bits = [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        28,\n        29,\n        30,\n        31"]]