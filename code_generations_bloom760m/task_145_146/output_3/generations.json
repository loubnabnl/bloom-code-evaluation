[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort(nums, key=lambda num: num + 1)\n    return sorted([sum(p.digits) for p in nums], key=lambda num: num, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    def sort_order(num):\n        \"\"\"\n        Sort num in ascending order according to sum of its digits.\n\n        The sorting is based on the sum of the digits of the\n            input integers, starting from the 1st digit.\n        \"\"\"\n        first_dig = num.digits[0]\n        return (first_dig - num.digits[-1]) * sort_order(num.digits[-1])\n    return sort_order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, reverse=True)\n    sorted_num = nums[0]\n    sorted_num = sorted_num.upper()\n    return sorted_num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    newnums = []\n    newsum = 0\n    for i in nums:\n        num = float(i) / float(sum(1 for i in range(len(nums))))\n        newnums.append(num)\n        newsum += num\n    return newnums, newsum\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = nums[0]\n    digits = [digits[i] for i in range(1, len(nums) - 1)]\n    nums = nums[1:]\n    nums.sort(key=lambda n: (n - digits[-1 - i]) / digits[-1 - i])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in nums:\n        nums.sort(reverse=True)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list into ascending order, and add the digits\n    nums.sort()\n    # make a tuple (low, high) of the sorted values\n    low, high = sorted([int(num) for num in nums])\n    # return low, high and a tuple of the sorted values\n    return low, high, tuple(sorted([int(n) for n in nums]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    result = []\n\n    for i, num in enumerate(nums):\n        if num >= 0:\n            result.append(i)\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Create a sorted list containing the sum of digits.\n    sum = [0]*(len(nums)+1) # We want to count sum of digits as a whole\n    digits = 0\n    for num in nums:\n        if digits < num:\n            digits += 1\n    while digits < sum:\n        sum[digits] = (sum[digits] + 1)%len(nums) # Add 1 to the sum of digits\n        digits += 1\n    return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # If the list is sorted as descending order, reverse it.\n    # In the case of a sorted list, the desired behavior is to keep the\n    # reverse ordering.\n    # If the list is not sorted, we sort it as ascending order.\n    sorted_list = list(order(nums))\n    sorted_list = sorted_list[-sorted_list.index(nums[0]):]\n    # Set the new sort order.\n    sorted_list = sorted_list.reverse()\n\n    # The algorithm is\n    #   1. Iterate over the sorted list.\n    #   2. Reverse the list.\n    #   3. Iterate over the reverse list.\n    #   4. Reverse the reverse list.\n    #   5. Iterate over the sorted list.\n    #   6. Reverse the reverse list.\n    #   7. Iterate over the reversed list.\n    #   8. Reverse the reversed list.\n    #   9. Iterate over the sorted list.\n    #   10. Reverse the reversed list.\n    #   11. Iterate over the reversed list.\n    #   12. Iterate over the reversed list.\n    #   13. Iterate over the reversed list.\n    #   14. Iterate over the reversed list.\n    #   15. Iter", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    i = 0\n    d = 0\n    while i < nums.size:\n        i += 1\n        while i < nums.size:\n            if nums[i] < nums[d]:\n                d += 1\n            else:\n                break\n        else:\n            d += 1\n        nums[d] = nums[i]\n\n    return nums, d", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n\n    order = []\n    order.append(0)\n    for i in range(0, len(nums), 1):\n        order.append(nums[i])\n    order = sorted(order, key=lambda x: x[1], reverse=True)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        nums = sorted(nums, key=lambda n: n + 1)\n    else:\n        nums = [1, 11, -1, -11, -12]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n\n    # Sort by sum of digits\n    nums.sort(reverse=True)\n    return nums[:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # only sort items with low sum of digits\n    sorted_list = [i for i in nums if i < 1000]\n    sorted_list.sort(reverse=True)\n    sorted_list = sorted_list[:-1]\n    sorted_list.reverse()\n\n    return sorted(sorted_list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: (x ** 2) - x)\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [i for i in nums if i < nums.index(i)]\n    # sort the list in descending order\n    sorted_list = [sum([i.digits - i.index in nums]) for i in nums]\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = map(ord, nums)\n    return sum(nums) + 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # For sorting by sum of digits\n    if len(nums) > 2:\n        index = sum(nums)\n        nums = list(nums[:index])\n    else:\n        nums = nums.tolist()\n\n    # For sorting by index\n    if len(nums) > 1:\n        nums = sorted(nums, key=lambda x: x + 1)\n    else:\n        nums = sorted(nums, key=lambda x: x)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num in [0, 10, 100, 200, 300]:\n            nums[num] += 1\n        else:\n            nums[num] -= 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # if there are several items with similar sum of their digits,\n    # order them based on their index in original list.\n    # this also does the integer sorting, which is implicit in the\n    # indices.name property of the tuple\n    return sorted([ix for ix in nums if ix.sum() == ix.digits], key=lambda x: x.index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    sort = None\n    total = 0\n    for num in nums:\n        total += num\n        if sort:\n            if sort == total:\n                continue\n            sort = total\n            sort = (num - total) / (num - total)\n        else:\n            total += num\n            if sort == total:\n                continue\n            sort = (num - total) / (num - total)\n        nums.sort(reverse=True)\n        if sort:\n            nums.sort(reverse=True, reverse=sort)\n    if sort:\n        nums.sort(reverse=True, reverse=sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    assert len(nums) == 1\n    if nums[0] < nums[1:]:\n        nums[-1] = nums[0]\n        if nums[0] < nums[-1]:\n            nums[-1] = nums[0]\n    nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # This is a hack to avoid endless loop on sort that takes a list of numbers\n    # sorted in ascending order.\n    if len(nums) == 1:\n        nums = [nums]\n    # sort the list according to the sum of digits\n    for num in nums:\n        if num < 1:\n            num = num + 1\n        nums.insert(0, num)\n\n    return sorted(nums, key=lambda x: (x[0], x[1], x[2]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_asc(num):\n        # sort\n        num -= 1\n        if num == 0:\n            return\n        if num > 0:\n            sort = num\n        else:\n            sort = -num\n        return sort\n\n    # write the sort function\n    nums.sort(lambda x: x[0] - x[1])\n\n    # return the sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums:\n        for num in nums:\n            val = num.sum()\n            if val == 0:\n                return\n            if val <= num:\n                return\n            if val == num:\n                return\n            order = val - num\n            if order > 0:\n                return\n            order += 1\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, (list, tuple)):\n        nums = list(nums)\n    n = len(nums)\n    for i in range(n):\n        num = nums[i]\n        if num in nums:\n            break\n    return nums[:n] + [num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if nums == [1, 11]:\n        return\n    s = 0\n    for i in nums:\n        s += i\n    digits = [i for i in nums if s < 10]\n    sum_digits = sum(digits)\n    if sum_digits > sum([int(n) for n in nums if n < 10]):\n        return\n    digits.reverse()\n    s = 0\n    for n in nums:\n        s += n\n        if n < 10 and s > 0:\n            s /= sum_digits\n    return sorted(list(set(digits) - set([0,])), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums)!= 3:\n        raise ValueError(\"array must have 3 elements\")\n    else:\n        number = int(nums[0])\n        return [number + int(num[1]) for number, int in nums[1:]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        nums = sorted(nums)\n    n = len(nums)\n    # Backward order\n    for i in range(n):\n        if nums[i] - nums[i - 1] > 1:\n            continue\n        n -= 1\n        if n == 0:\n            break\n        yield nums[0:n]\n    # Swap\n    yield nums[:n]\n    # Increment counter\n    n += 1\n    for i in range(n):\n        yield nums[i:]\n    # Return sorted list\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(a, b):\n        # Might be necessary to change the base-2 to base-9 conversion\n        # before calling sort. Note that, since sort() is only called\n        # once per loop, it will take care of a bug in Python 3.5+.\n        if isinstance(a, int):\n            return a - b\n        if isinstance(a, float):\n            return (a - b) / 2\n        return (a - b) / float(a) / float(b)\n\n    # Get rid of the last value. We need to compare the last value with the\n    # the max value so that the order is the same whether the max value or\n    # the last value is the max value.\n    return sorted(nums, (a, b) for a, b in zip(nums, range(len(nums))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not isinstance(nums, (list, tuple)):\n        nums = [nums]\n\n    if len(nums) == 1:\n        return nums[0]\n\n    def func(num, **kw):\n        # Use this function to sort the given list in ascending order\n        sorted_list = []\n        for num in nums:\n            sorted_list.append(num * kw.get('factor', 1) + num)\n        sorted_list.sort()\n        return sorted_list\n\n    if len(nums) > 1:\n        # Sort the sorted list by the sum of digits\n        sorted_list = []\n        for num in nums:\n            sorted_list.append(sum(num * kw.get('factor', 1) + num))\n        sorted_list = sorted(sorted_list, key=func)\n        return sorted_list\n\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = []\n    for num in nums:\n        s.append('%s * %s' % (num, ord(num)))\n    return s.reverse()\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # If the function was called with a list of integers, get a list of integers\n    # sorted by sum of digits.\n    if isinstance(nums, list):\n        return list(sorted(nums, key=lambda x: x.sum()))\n\n    # Otherwise use the default sorting algorithm.\n    return sort(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    sort_list = []\n    for i in range(len(nums)):\n        sort_list.append(i)\n    sort_list.sort(reverse=True)\n    return sorted(sort_list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for item in nums:\n        if len(item) == 1:\n            result.append(item)\n        else:\n            result.append(tuple(result))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda x, y: x + y", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare(x, y):\n        if x.count(y) == 0:\n            return x\n        else:\n            return y - x\n\n    _compare = lambda x: x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count(x) - x.count", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums:\n        return sum(nums)\n    else:\n        return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _apply_function(x):\n        if x in nums:\n            return x\n        else:\n            return -x\n    return lambda x, y: _apply_function(y) + x\n\n    def _apply_sort(a, b):\n        if len(a) == len(b):\n            return sum(a) + sum(b)\n        else:\n            return _apply_function(a) - _apply_function(b)\n\n    def _apply_ascending(x):\n        if x not in nums:\n            return 0\n        else:\n            return _apply_sort(x) - _apply_sort(a) + 1\n    return lambda a, b: _apply_sort(a) - _apply_sort(b) + 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    print('Calculating order by digits', end=' ')\n\n    return sum(range(len(nums)) for num in nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) > 1:\n        return order_by_points(nums[0], nums[1])\n    else:\n        return order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    new_list = []\n    for item in nums:\n        new_list.append(item / 1000.0)\n    return new_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = []\n    if nums is not None and len(nums) > 0:\n        if nums[0] == 0:\n            order.append(0)\n        else:\n            for i in range(1, len(nums)):\n                order.append(i * nums[i])\n    return sorted(order)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        result = []\n        for j in range(i + 1, len(nums) - 1):\n            result.append(nums[i] + nums[j])\n        result.sort()\n        nums.reverse()\n        if nums[0] == nums[-1]:\n            nums.pop(0)\n        else:\n            nums[-1] = nums[0]\n            nums.pop(0)\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    first = 0\n    last = len(nums) - 1\n    # sort the list in descending order\n    while first < last:\n        for i in range(first, last):\n            if nums[i] < nums[last - i]:\n                first = i + 1\n        else:\n            last = i + 1\n    return first, last", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by(num):\n        try:\n            return num - nums\n        except IndexError:\n            return num\n    return sort_by(range(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n\n    nums = sorted(nums)\n    out = []\n    for i in range(len(nums)):\n        out.append(i)\n    out.reverse()\n    return out", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = 1\n    i = 0\n    for n in nums:\n        if n == 0:\n            continue\n        s += 1\n        if s == len(nums):\n            return nums\n        else:\n            nums[i:++] = n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if nums.count(' ') == 1:\n        nums = nums.split(' ')\n    total = sum(nums)\n    digits = total // 10\n    nums = nums[:-digits]\n    return nums, total, digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    nums = [nums[0] for _ in range(1, len(nums)-1)]\n    sorted_list = [nums for _ in range(len(nums)) if nums[_-1] == 0]\n    nums.sort(key=lambda a: a.sum())\n    return order_by_points_by_index(sorted_list, nums, nums.index, nums.index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # order by sum\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 0:\n        return\n    if nums.count(2) == 0:\n        return\n    # sort by index\n    nums.sort(lambda i: int(i))\n    # sort by sum\n    return sorted(nums[:-1], key=lambda x: int(x) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    sorted_list = []\n    for num in nums:\n        sorted_list.append(sum(np.abs(num) * (len(nums) - 1)))\n\n    # Write the sorted list as a list of tuples\n    if sorted_list:\n        out = []\n        for item in sorted_list:\n            out.append((int(item[0]), item[1]))\n        return out\n\n    # If we need to sort the list in descending order, use the\n    # next method\n    if sorted_list and nums == []:\n        out = []\n        for item in sorted_list:\n            out.append((int(item[0]), item[1]))\n            out.append([item[1]])\n        return out\n\n    # Otherwise, we need to sort in ascending order\n    else:\n        for num in nums:\n            sorted_list.reverse()\n            if sorted_list:\n                out = []\n                for item in sorted_list:\n                    out.append((int(item[0]), item[1]))\n                    out.append([item[1]])\n                return out", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    r = []\n    for i in range(len(nums)):\n        r.append(sum(i))\n        \n    return r", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Construct the sorted list.\n    return sorted([int(i) for i in nums], key=lambda n: sum(n))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums.sort()\n    return tuple(sorted(nums, reverse=True))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by(a, b):\n        return sum(map(lambda x: abs(x - a), a) - map(lambda x: abs(x - b), b))\n\n    return function(order_by_points, nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums[0] == nums[1]:\n        return\n    order = (nums - [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n    if nums[0] > nums[1]:\n        order.reverse()\n    order = [order[_ > 0] for _ in order]\n    for _ in range(len(order)):\n        for i in range(len(order)):\n            order[i] += order[i - 1]\n        if len(order) == len(order[0]):\n            break\n        else:\n            order[0] += order[0][:] + order[1:]\n    result = sorted(order, key=lambda x: x)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sort = lambda x : (x[1] - x[0]) * (x[1] - x[0])\n    def sort_by(x):\n        \"\"\"\n        sort_by is a function that returns the sequence\n        (x[1] - x[0]) * (x[1] - x[0]) if x is a sequence\n        of integers in the order of ascending order.\n        \"\"\"\n        sorted_x = []\n        for x in xrange(len(x)):\n            sorted_x.append(sort(x[1] - x[0]))\n            x = x[0]\n        return sorted_x\n    nums.sort(sort, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        self.sort_list(nums)\n        self.make_sort()\n        self.make_sort()\n\n    def sort_list(self, nums):\n        \"\"\"\n        Sort the list of integers based on the sum of their digits.\n        \"\"\"\n        if nums is not None:\n            for i, n in enumerate(nums):\n                n = n.digits() + n.length()\n            if nums is not None:\n                self.sort_list([ i for i in nums if i.digits() == n.digits() ])\n\n    def make_sort(self):\n        \"\"\"\n        Make a sorted list of integers.\n        \"\"\"\n        if self._sort_list is not None:\n            return\n\n        self._sort_list = []\n        self._sort_list.append([])\n        self._sort_list.append([])\n        self._sort_list.append([])\n        for i in range(self.nums):\n            self._sort_list.append([i, self._sort_list[i]])\n\n        self._sort_list = sorted(self._sort_list, key=lambda i: i[1][0])\n\n    def _make_sort(self):\n        \"\"\"\n        Make a sorted list of integers.\n        \"\"\"\n        if self._sort_list is", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort according to index\n    def sort_by_index(items):\n        \"\"\"\n        Sort according to index. Useful if nums has multiple items\n        of different sum of their digits.\n        \"\"\"\n        items.sort(key=lambda item: item.digits - item.pos - item.neg - 1)\n        return items\n    # sort by sum of digits\n    def sort_by_sum(items):\n        \"\"\"\n        Sort by sum of digits.\n        \"\"\"\n        return items.sort(key=lambda item: item.pos - item.neg - item.digits)\n    # sort by sum of digits and index\n    def sort_by_sums(items):\n        \"\"\"\n        Sort by sum of digits and index.\n        \"\"\"\n        items.sort(key=lambda item: item.digits + item.pos + item.neg)\n        return items\n    # sort by sum of digits and index and index\n    def sort_by_sums_and_index(items):\n        \"\"\"\n        Sort by sum of digits and index and index.\n        \"\"\"\n        items.sort(key=lambda item: item.digits + item.pos + item.neg + item.index)\n        return items\n    # sort by sum of digits and index and index\n    def sort_by_sums_and_index_and_index(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if len(nums)!= 2:\n        return\n    ids = [int(x) for x in nums]\n    result = {}\n\n    for idx, item in enumerate(ids):\n        result[idx] = item + 1\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if len(nums) == 1:\n        return\n    nums = [int(n) for n in nums]\n    if len(nums) == 1:\n        nums.sort()\n        return\n    if len(nums) > 1:\n        order = [int(n) for n in nums]\n    else:\n        order = list(zip(nums, nums))\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return cmp(int(a), int(b))\n\n    print(\"Ordering by points:\")\n    for i, num in enumerate(nums):\n        num = num + 1\n        #print(i + 1, \" \", num)\n        #print(\"  \", num, \" \", sort(int(i), int(num)))\n        if sort(int(i), int(num)) < 0:\n            print(i, \" > \", sort(int(i), int(num)))\n    print(\"\")", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n\n    if len(nums) == 1:\n        nums = nums[0]\n    order = []\n    for num in nums:\n        if num > 0:\n            order.append(num)\n        else:\n            order.append(0)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return (i for i, x in enumerate(nums) if sum(x) <= sum([x for x in nums]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    # TODO: verify that we are dealing with a valid list of integers\n    # and not just an array of ints\n    sorted_numlist = sorted(nums)\n    # sort them to get the original order\n    sorted_numlist = sorted(sorted_numlist)[:-1]\n    return sorted_numlist[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return abs(a - b)\n    return sort, sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda n: sum(n.digits), reverse=True)\n    if len(nums)!= len(nums):\n        # there were more items than the original\n        # we need to sort them based on index\n        nums = [num for num in nums if num > nums[-1]]\n    for i, n in enumerate(nums):\n        # all the items with the same sum of digits should be\n        # sorted based on the index\n        if i == 0:\n            # use the last one\n            n = nums[-1]\n        else:\n            # the rest of the items are sorted based on the\n            # sum of digits\n            n = nums[:-1]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_nums = [sum(len(i)) for i in nums]\n    return sorted(sorted_nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort by sum of digits\n    result = []\n    for num in nums:\n        for n in nums:\n            if n <= num:\n                result.append(num)\n            else:\n                result.append(n)\n    return list(result)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    order = []\n    for i in nums:\n        order.append(sum([i.digits for i in nums]))\n    return sorted(order, key=lambda i: i, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort()\n    # The default for number of digits is 1\n    _digits = 1\n    _digits = max(1, nums[0] for nums in nums)\n    _digits = min(_digits, len(nums) - 1)\n    _digits = _digits / _digits\n    _digits = max(_digits, 0) - 1\n    # _digits = nums[0] - 1\n    # _digits = _digits / _digits\n    # _digits = max(0, _digits - 1)\n    _digits = _digits - 1\n    # _digits = nums[1] - 1\n    # _digits = _digits / _digits\n    # _digits = max(0, _digits - 1)\n    # _digits = _digits - 1\n    _digits = _digits - 1\n\n    # If we need to add the value of the first item to the first\n    # item, add that value to the list.\n    _first = True\n    _total = 1\n    # _total = nums[0] - 1\n    # _total = _total / _digits\n    # _total = max(0,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        num *= 10\n        result.append(str(num))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        res = []\n        for num in nums:\n            if num > 0:\n                res.append(num / num * 10)\n        return res\n\n    def __nonzero__(obj):\n        return len(obj) > 0\n\n    def __eq__(a, b):\n        if type(a) is type(b):\n            return a == b\n        elif a is not b:\n            return False\n        else:\n            return True\n\n    def __ne__(a, b):\n        if type(a) is type(b):\n            return a!= b\n        elif a is not b:\n            return True\n        else:\n            return False\n\n    def __repr__(self):\n        return str(self)\n\n    def __str__(self):\n        return repr(self)\n\n    def __len__(self):\n        return len(self.__dict__)\n\n    def __contains__(self, num):\n        \"\"\"\n        Return True if num is in the list, otherwise False.\n        \"\"\"\n        if num in self:\n            return True\n        else:\n            return False\n\n    def __ne__(self, num):\n        \"\"\"\n        Return True if num is not in the list, otherwise False.\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert nums == [0, 1, 2, 3, 4]\n    nums.sort(key=lambda num: sum([len(i) for i in num]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # We do this so that we don't have to write a copy.\n    if nums is not None:\n        assert len(nums) == len(nums[0])\n        nums = nums[0]\n    else:\n        nums = range(len(nums))\n\n    sorted_list = []\n    for i, num in enumerate(nums):\n        sorted_list.append(i)\n    sorted_list.sort(key=lambda x : x)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num < nums:\n            return i, num\n        else:\n            return i + 1, num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    return list(range(len(nums))) + sorted(nums)[::-1]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = []\n    for i in nums:\n        if i <= 0:\n            s.append(i)\n        else:\n            s.append(int(i))\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = []\n    for n in nums:\n        s.append(n + s)\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums.shape[0]!= 1:\n        raise ValueError('List of integer must have a single digit')\n    nums.sort(key=lambda x: int(x), reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return np.array([np.sum(s) for s in nums])\n    else:\n        return np.array(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    #Sort by sum of digits, i.e. minimum sum of digits\n    s = []\n    for i in nums:\n        if len(s) < len(i):\n            s.append(i)\n        else:\n            s.reverse()\n\n    #Add the first to the end of the list\n    s.append(0)\n    for i in nums:\n        s.append(i - s.pop())\n\n    return s\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        raise ValueError('Need at least one number to sort by.')\n\n    def sort_asc(num1, num2):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if num1 > num2:\n            return 1\n        elif num1 < num2:\n            return -1\n        else:\n            return 0\n\n    return sort_asc\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted = []\n    for num in nums:\n        for i in range(len(num)):\n            nums[i] -= num[i]\n            sorted.append(nums[i])\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # get the first one\n    first = nums[0]\n    # get the next one\n    next = nums[1]\n    # reverse the list\n    while next:\n        next = next - 1\n        nums.reverse()\n        nums[0] = first\n        first = next\n    # return\n    return sorted(nums, key=lambda i: (i - 1) * 1.0 / (float(i) + 1.0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums.count(1) == 0:\n        return\n    assert nums.count(2) == 0\n    assert nums.count(3) == 0\n    assert nums.count(4) == 0\n    assert nums.count(5) == 0\n    if nums.count(6) == 0:\n        assert nums.count(7) == 0\n    for i in range(nums.count(1)):\n        nums.sort(key=lambda num: len(str(num)))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def test(sum):\n        for x in range(len(nums)):\n            if sum == 0:\n                return (None, x)\n            elif sum == 1:\n                return (x, None)\n            else:\n                return (x, sum - 1)\n        return (None, len(nums))\n\n    for nums in nums:\n        sum = sum(nums)\n        test(sum)\n\n    return test", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([(sum(x) for x in nums) - sum(x) for x in nums], key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        if num >= 0:\n            result.append(num)\n        else:\n            result.append(int(num * 10))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from math import factorial\n    sorted_list = sorted(nums, key=lambda x: x** factorial(len(x)) / len(nums)))\n    return tuple(sorted_list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) > 1:\n        nums = list(sorted(nums))\n    return [int(digit) for digit in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(seq):\n        i = 0\n        n = len(seq)\n        while i < n:\n            # sort in descending order\n            if seq[i] < seq[i + 1]:\n                seq[i] = seq[i + 1]\n            else:\n                seq[i] = seq[i] + 1\n            i += 1\n        return seq\n    s = []\n    for i in range(nums.size()):\n        seq = nums[i]\n        s.append(sort(seq))\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by(a, b):\n        if a >= b:\n            return int(a) - int(b)\n        else:\n            return int(b) - int(a)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # First, sort the list in ascending order\n    nums.sort()\n    # Apply '+' function to the sorted list\n    return str(nums + 1) + str(nums + 2) + str(nums + 3) + str(nums + 4) + \\\n            str(nums + 5) + str(nums + 6) + str(nums + 7) + str(nums + 8) + \\\n            str(nums + 9) + str(nums + 10) + str(nums + 11) + str(nums + 12)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    digits = set([len(i) for i in nums])\n    if not digits:\n        raise ValueError(\"list of numbers must contain only positive numbers\")\n    order = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n    for i in nums:\n        order += int(i)\n        if i > order:\n            order += 1\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return cmp(a, b) * (len(a) - len(b))\n\n    nums.sort(sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) < 3:\n        raise ValueError(\"Must have 3 or more items.\")\n\n    return sorted(nums, key=lambda item_num: item_num + 1)\n    # [-1, -11, 1, -12, 11]\n    # [0, 1, 2, 3, 4, 5]\n    # [-1, -12, -11, -11, -1]\n    # [0, 0, 1, 0, 1, 0]\n    # [1, 1, 1, 1, 0, 0, 0]\n    # [-1, -12, -11, -11, -11, -1]\n    # [0, 0, 1, 0, 1, 0]\n    # [-1, -12, -11, -11, -11, -1]\n    # [0, 0, 1, 0, 1, 0]\n    # [-1, -11, -11, -11, -11, -1]\n    # [0, 0, 1, 0, 1, 0]\n    # [-1, -12, -11, -11, -11, -1]\n    # [0, 0, 1, 0, 1, 0]\n    # [-1, -12, -11, -11, -11, -1]\n    # [0, 0, 1, 0, 1, 0]\n    # [-1, -11, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The algorithm:\n    # (1) Remove first item from the list:\n    #   0: digit 1\n    #   1: digit 2\n    #   2: digit 3\n    #   (2) Compare the digit count of the first item with the sum of\n    #     digits of all other items:\n    #   0: digit 1\n    #   1: digit 2\n    #   2: digit 3\n    #   3: digit 4\n    #   (3) If difference is 0, the item is removed from the list.\n    #   0: digit 1\n    #   1: digit 2\n    #   2: digit 3\n    #   (4) Return the removed item.\n    #   0: digit 1\n    #   1: digit 2\n    #   2: digit 3\n    #   3: digit 4\n    #   (5) Repeat steps (1-4) until the sum of digits is the same as\n    #     the number of items, or until all items have the same sum of\n    #     digits.\n    # Returned: None\n    #    (6) Remove the last item from the list:\n    #   0: digit 1\n    #   1: digit 2\n    #   2: digit 3\n    #   3: digit 4\n    #    (7) Repeat steps (6-6) until all items have the same sum of\n    #", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for n in nums:\n        sum += ord(n)\n    return sum / len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # first, the list is sorted\n    # we first sort by sum of digits\n    s = sorted(nums, key=lambda x: int(x.split('-')[0])/int(x.split('-')[1]))\n    if len(s) == 1:\n        # last digit is 1\n        s[0] = s[1]\n    # now sort by sum of digits again\n    else:\n        for i, digit in enumerate(s):\n            if digit == digit:\n                # digit is 1, so we are at the end\n                break\n            elif digit < digit:\n                s[i] = s[i-1]\n        # now sort by sum of digits again\n        else:\n            for i, digit in enumerate(s):\n                if digit > digit:\n                    s[i] = s[i-1]\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for n in range(len(nums)):\n        sum += int(nums[n])\n    nums = sorted(range(len(nums)),\n                         key=lambda x: sum/int(x) * 10)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        nums = [nums]\n    nums = [(i, j) for i, j in zip(*nums)]\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    else:\n        s = [num for num in nums if num > 0]\n        i = min(s)\n        return [num, i + 1 for num, i in enumerate(s) if num >= i]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(items):\n        if len(items) == 1:\n            return items[0]\n        else:\n            return [item for item in items if len(item)]\n    digits = range(len(nums))\n    if nums[0] == 0:\n        digits = [-1]\n    for item in nums:\n        index = (item + 1) / digits\n        if item < 0:\n            index += digits\n        elif item >= len(nums) - 1:\n            index = len(nums) - 1\n        if index!= 0:\n            return item\n        else:\n            return None\n    return items[index]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(l1, l2):\n        return cmp(abs(l1), abs(l2))\n\n    # sort the list of integers based on the sum of their digits\n    results = []\n    for num in nums:\n        results.append(list(map(cmp, num.split('.')))[0])\n    return sorted(results, key=lambda num: cmp(abs(num), abs(num + 1)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums.size() == 0:\n        return []\n\n    for num in nums:\n        if num > 0:\n            i = num - 1\n            if i <= 0:\n                return []\n            else:\n                return [i, num]\n\n    return [i, num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    nums = sorted(nums, key=lambda n: -n + 1, reverse=True)\n\n    nums.sort()\n    return len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return _order_points(nums, nums[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = [sum(x) for x in nums]\n    nums.sort(key=lambda x: x[0])\n    return nums[:-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda n: n.sum())\n    return set([(i, i) for i in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(map(int, nums))\n    def sort_func(a, b):\n        if a + b > 0:\n            return a\n        else:\n            return b\n\n    # sort items by their sum of their digits\n    # e.g. [1, 11] -> [1, 11], [1, 11, -1] -> [11, -1]\n    return sorted([sort_func(x, y) for x, y in zip(nums, nums)], key=lambda x: x[1], reverse=True, reverse_order=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ord = [0, -1, 0, 0, 0]\n    for i in range(len(nums)):\n        ord.append(ord[i] + ord[i - 1])\n    return ord", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not isinstance(nums, list):\n        nums = list(nums)\n\n    # Create the list of sorted numbers\n    sorted_num_list = []\n    for i in range(len(nums)):\n        if i == 0:\n            sorted_num_list.append(i)\n        else:\n            if i % 2 == 0:\n                sorted_num_list.append(sorted_num_list[i - 1] + nums[i])\n            else:\n                sorted_num_list.append(sorted_num_list[i - 1])\n            sorted_num_list.append(sorted_num_list[i - 1] + nums[i - 1])\n        sorted_num_list.append(sorted_num_list[i - 1] + nums[i - 1])\n    sorted_num_list.sort()\n\n    # Write the function to the file\n    with open(os.path.join('../', '..', '..', '..', 'functions'), 'w') as f:\n        for num in sorted_num_list:\n            f.write(str(num) + '\\t')\n        f.close()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted = []\n    for i in nums:\n        sorted.append(i)\n    sorted_list = sorted\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    max_num = max(nums)\n    nums = sorted(nums, reverse=True)\n    max_num = max_num - 1\n    return max_num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort\n    orders = []\n    for num in nums:\n        orders.append(num)\n    for num in nums:\n        if num not in orders:\n            raise IndexError, 'num %r not in orders' % num\n    for num in nums:\n        if num not in orders:\n            raise IndexError, 'num %r not in orders' % num\n    if len(orders) == 1:\n        orders.pop()\n    orders.sort()\n\n    # reverse\n    reverse = False\n    for num in nums:\n        if num not in orders:\n            reverse = True\n            break\n\n    # sort\n    nums = reversed([num])\n    orders = reversed([order for order in orders if num in order])\n\n    return [num] * len(nums), orders", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    for i in xrange(len(nums)):\n        if nums[i] < nums[++i] or nums[i + 1] < nums[++i]:\n            sort = [i for i in xrange(len(nums)) if nums[i] > nums[++i]}\n            if sort:\n                nums = sort\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(a, b):\n        if a < b:\n            return 1\n        return -1\n\n    # sorting by sum of digits\n    def order_by_digits(a, b):\n        return (a + b) / 2\n\n    # sort by index in original list\n    def order_by_index(a, b):\n        return int(a) - int(b)\n\n    return sorted(nums, key=order, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0], nums[1]\n    else:\n        nums.sort()\n        return [int(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ord = sorted(nums, key=lambda n: n + 1)\n    if ord:\n        nums = [ord(n) for n in nums]\n    else:\n        nums = [n]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum_digits = 0\n    for num in nums:\n        sum_digits += num.digits\n    total = sum_digits / len(nums)\n    for i, num in enumerate(nums):\n        num = int(num) + total * i\n    return sorted(nums, key=lambda x: sum_digits % x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # make a list of integers\n    nums = [num for num in nums if num in range(len(nums))]\n    # sort by sum of digits\n    sorted_nums = sorted(list(set(nums)), key=lambda num: sum(num.digits))\n    # sort by minimum\n    sorted_min = sorted(list(range(len(sorted_nums)), 0), key=lambda num: min(sorted_nums))\n    # return the sorted list\n    return sorted(sorted_nums, key=lambda num: sum(num.digits), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    size = len(nums)\n    return int(nums)[size:].sum() - nums[0].sum()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda a: a.__getitem__(0).sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(int(num / float(\"inf\")))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    sorted_list = []\n    for num in nums:\n        if num == 1 or num == -1 or num == -11:\n            sorted_list.append(num)\n            if num == -11:\n                sorted_list.pop()\n            else:\n                sorted_list.append(num + 1)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # We need the list of integers themselves\n    list_of_nums = nums\n    num_index = 0\n    num = 1\n\n    while num_index < len(list_of_nums):\n\n        # Now check which digits were added to the list\n        # by the integer added to the end of the list\n        # (because all the digits except the last are added at the end)\n        digits = list_of_nums[num_index + 1] - list_of_nums[num_index]\n\n        # Only add digits to the index of the first digit\n        # that was added to the list.\n        if digits < 0:\n            num_index += 1\n        else:\n            num_index = 0\n            num = 1\n\n        # Now write out the number\n        num += str(int(num))\n\n    return list_of_nums, num_index\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        elif len(nums) == 1:\n            return nums[0]\n        else:\n            x = []\n            for i in range(len(nums) - 1):\n                x.append(nums[i] + nums[i + 1])\n            return sorted(x, key=lambda x: x[0], reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums)!= 1:\n        raise ValueError(\"wrong number of nums (%d)\" % len(nums))\n    i = 0\n    tmp = nums[0]\n    while i < len(nums):\n        num = nums[i]\n        num *= 10\n        tmp += num\n        i += 1\n        if i == len(nums):\n            return tmp\n        if tmp == tmp:\n            return None\n    return tmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    nums.sort(key=lambda x: sum(x.digits), reverse=True)\n\n    if len(nums) > 1:\n        nums = sorted([nums[0], nums[1], nums[2], nums[3]], key=lambda x: x)\n\n    return tuple(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    def order_by_score(item):\n        return item.score - item.total\n    return lambda x, y: order_by_score(x) + y\n\n    for num in nums:\n        ordered_list = []\n        for i in num:\n            x = num[i]\n            y = order_by_score(x)\n            ordered_list.append({x: y, y: x + y})\n        return ordered_list\n\n    return sort(order_by_points(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for idx, num in enumerate(nums):\n        if num == 0:\n            result.append(None)\n        else:\n            result.append(int(idx) + 1)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert len(nums) == 3\n\n    if isinstance(nums, int):\n        nums = [nums]\n    else:\n        raise TypeError(\"iterable expected\")\n\n    for num in nums:\n        yield num\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(list(range(len(nums))), cmp=lambda x, y: cmp(int(x), int(y)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    # handle case where we have only one item\n    if len(nums) == 1:\n        return nums\n    # handle multiple items with the same sum of digits\n    if len(nums) > 1:\n        # find the first item\n        first = nums[0]\n        nums.append(first)\n        if first is None:\n            return nums\n        else:\n            # order the items by their index\n            return nums\n\n    # build the list\n    num_list = []\n    # find the first item\n    num = first\n    for i in range(len(nums)):\n        if nums[i] == num:\n            num_list.append(num)\n            num = nums[0]\n    # sort the items\n    for i in range(len(num_list)):\n        num_list[i].index = (i + 1) % len(num_list)\n        num_list[i].sort()\n\n    return num_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # For each number in list, compute sum of its digits\n    # (makes sense for every number with only one digit)\n    for n in nums:\n        # Sum of digits\n        sum = n.sum()\n        if sum == 0:\n            continue\n        # Sorting by sum of digits\n        sorted_list = sorted(zip(range(1, sum - 1), range(1, sum + 1)))\n        # Replace the empty list by a single item\n        if sorted_list == []:\n            sorted_list.append(n)\n        # Replace the remaining item with its first item\n        else:\n            sorted_list[0] = n\n        return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return\n    if len(nums) == 0:\n        return\n    print('order_by_points:')\n    for num in nums:\n        print('num = {}'.format(num))\n    print()\n    for num in nums[0:]:\n        print('num = {}'.format(num))\n    for num in nums[1:]:\n        print('num = {}'.format(num))\n    for num in nums[2:]:\n        print('num = {}'.format(num))\n    print()\n    for num in nums[0:-1]:\n        print('num = {}'.format(num))\n    for num in nums[-1:-1]:\n        print('num = {}'.format(num))\n    print()\n    for num in nums[1:-1]:\n        print('num = {}'.format(num))\n    for num in nums[1:-1:-1]:\n        print('num = {}'.format(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    if len(nums) == 1 and nums[0] == 0:\n        return [nums]\n\n    if len(nums) > 1 and len(nums) % 2 == 0:\n        if len(nums) % 2:\n            nums = tuple([nums[0:2] + nums[0:2]])\n        else:\n            nums = tuple([nums[0:2] + nums[2:]])\n\n    if len(nums) > 1 and len(nums) % 2 == 1:\n        nums = tuple([nums[2:2] + nums[2:2], nums[1:2] + nums[1:2]])\n    else:\n        nums = tuple([nums[1:2] + nums[1:2], nums[2:2] + nums[2:2], nums[1:2] + nums[1:2]])\n\n    if len(nums) == 2:\n        return [nums[0], nums[1], nums[0]]\n\n    if len(nums) == 3:\n        if nums[0] == -1 and nums[1] == -1 and nums[2] == -1:\n            return [nums[0]]\n        else:\n            return [nums[0], nums[1], nums[2]]\n\n    if len(num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, int):\n        return\n    # Check if list is sorted, if not, return\n    if nums.ndim == 2:\n        return\n    # Sort the list, but don't put values back into list\n    new_list = []\n    for i, n in enumerate(nums):\n        if i == 0:\n            break\n        if n.ndim == 1:\n            new_list.append(n)\n        else:\n            new_list.append(i)\n\n    # Return new sorted list\n    return new_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from functools import partial\n    ret = []\n    for item in nums:\n        item = int(item)\n        if partial(partial, item) > item:\n            ret.append(item)\n        else:\n            ret.append(item)\n    return ret", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(zip(*nums))\n    return sum([int(d) if d else int(d) for d in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num > 0:\n            # find the next item\n            next_item = num\n        else:\n            # return the current item\n            return next_item\n    return next_item", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for item in nums:\n        result.append(item)\n    result.sort(key=lambda x: x.sum())\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if isinstance(nums, (list, tuple)):\n        nums = [i for i in nums]\n    if nums is not None and len(nums) == 1:\n        return nums[0]\n    else:\n        nums = nums.map(ord)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if nums is not None and len(nums) > 0:\n        # We're dealing with a list, so we don't have to worry about sorting them\n        # directly\n        return [int(num) for num in nums]\n\n    # Get sorted list\n    sorted_num_list = list(zip(*sorted(nums, key=itemgetter(0))))\n\n    # We do the sorting\n    nums = sorted_num_list\n\n    # Sort the order\n    ordered_list = []\n    for i, num in enumerate(sorted_num_list):\n        if num > i:\n            ordered_list.append(i)\n            num = i\n        else:\n            ordered_list.append(num)\n\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n\n    # Find the index of first item of list\n    first_num = nums[0]\n    sum = nums[1] - first_num\n    if sum >= 0:\n        first_num += 1\n\n    # Determine the index of next item\n    next_num = nums[1] + 1\n    if next_num >= len(nums):\n        next_num = 0\n    else:\n        next_num = len(nums) - 1\n\n    return first_num, next_num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in xrange(len(nums)):\n        num = nums[i]\n        if num in nums:\n            nums.remove(num)\n        else:\n            nums.append(num)\n\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        nums = [0]*len(nums)\n    nums = sorted(nums, key=lambda x:(x[1] - x[0]))\n    return '{'.join(['%d' % num for num in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    from collections import defaultdict\n    from typing import List, Dict, Optional, Union\n    from jinja2 import template\n    from jinja2.ext.order_by import Ordering\n    from jinja2.ext.sorted import sorted\n    from jinja2.exceptions import UndefinedError\n    from jinja2.utils.string import quote\n\n    def _sort(l: List[int]) -> str:\n        if len(l) > 1:\n            return tuple(sorted(l) if l else l)\n        else:\n            return l[0]\n\n    def _make_sorted_list(l: List[int]) -> List[str]:\n        result = defaultdict(list)\n        for i in range(len(l)):\n            result[l[i]] = l[i]\n        return result\n\n    def _make_ordered_dict(d: Dict[int, str]) -> dict:\n        for key, value in d.items():\n            if isinstance(value, str):\n                result[key] = quote(value)\n            else:\n                result[key] = quote(value.split('.')[0])\n        return result\n\n    def _sorted_list_to_dict(l: List[int], ordered: Ordering) -> Dict[int, str]:\n        result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return None\n    if isinstance(nums, basestring):\n        nums = [nums]\n    nums = [int(i) for i in nums]\n    sorted_nums_list = []\n    for num in nums:\n        nums.remove(num)\n        sorted_nums_list.append(num)\n    return sorted_nums_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers by their sum of digits\n    res = []\n    for n in nums:\n        res.append(n % 10)\n    return sorted(res, key=lambda x: x.__nonzero__()[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([\n        num for num in nums if isinstance(num, int) and num >= 0], key=lambda item: len(item) == 1)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The upper and lower bounds of the list are already sorted\n    # by sum of digits.\n    #\n    # The sorted list is returned in the form:\n    #\n    #   [-1, 11, -12], [-11, 1], [12, 11], [-1, 11, -12]\n    #\n    # Note that there is no need to sort the list if it has more than\n    # one element.\n    #\n    # This implementation calls sorted() which sorts the first element\n    # of the list, then calls _list_to_sorted() to sort the rest\n    # of the list. This is used to avoid having to use a single\n    # call to sort each element of the list once.\n\n    nums = sorted(nums, key=lambda x,y: x-y)\n    return _list_to_sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    a, b, c = 0, 0, 0\n    for i in range(len(nums)):\n        if nums[i] < nums[i + 1]:\n            a += 1\n        elif nums[i] >= nums[[i + 1 + 1]]:\n            b += 1\n        else:\n            c += 1\n        if a + b + c == len(nums):\n            break\n    return sorted(a, key=lambda i: i, reverse=True, key=lambda i: (a + b + c) / len(nums), reverse=True, key=lambda i: (a + b + c) / len(nums) + 2)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return None\n\n    for num in nums:\n        if num > 0:\n            yield num\n\n    # Sort by sum of digits\n    sorted = [num for num in nums]\n    ordered_lines = [list(i) for i in sorted]\n    return ordered_lines", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Create a dictionary with a dict mapping integers to a list of tuples\n    # with (index in nums, val).\n    sorted_num_list = {}\n    for i, num in enumerate(nums):\n        # Loop over all numbers in sorted_num_list\n        # Add index to each number in num\n        nums[index] = sorted_num_list[num]\n        # Add val to each number in num\n        sorted_num_list[num] = (i, val)\n\n    # Set the sort order\n    nums = sorted(sorted_num_list)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n\n    return sorted([sum(x) for x in nums], key=lambda x: sum(x))\n\n    # Numeric sort\n    elif isinstance(nums, int):\n        nums = nums\n    else:\n        raise ValueError('Expected a list of numbers, got %s' % repr(nums))\n\n    nums = sorted(nums, key=lambda x: sum(x), reverse=True)\n\n    # If the item has less than len(nums), do nothing.\n    if len(nums) < len(nums) - 1:\n        return\n\n    # If the item has more than len(nums), sort it.\n    elif len(nums) > len(nums) - len(nums[0]) + 1:\n        return\n    else:\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Check order\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        list = sorted(nums, key=lambda x: x.sum(), reverse=True)\n        # Restore original order\n        list.reverse()\n        return list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num * (num - sum) / (sum + 1)\n\n    if sum == 1:\n        return sum\n    else:\n        return sum - sum - 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        try:\n            n = int(nums[0])\n            return nums[1]\n        except ValueError:\n            return nums[1]\n    if len(nums) == 3:\n        if n in [0,1,2]:\n            return nums[2]\n        if n in [3,4,5]:\n            return nums[3]\n        if n in [6,7,8,9,10]:\n            return nums[6]\n        if n in [11,12,13,14,15,16,17,18,19,20]:\n            return nums[7]\n        if n in [3,4,5,6,7,8,9,10]:\n            return nums[8]\n        if n in [11,12,13,14,15,16,17,18,19,20]:\n            return nums[9]\n        if n in [3,4,5,6,7,8,9,10]:\n            return nums[10]\n    return None", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # use the default ordering algorithm, that is, the natural order\n    # of digits.\n    def order_by_natural(self):\n        \"\"\"\n        Return the sorted list in ascending order according to the sum of their digits.\n\n        Args:\n            nums (list of integers): The list to sort.\n        \"\"\"\n        # to be sure, the results are always in the order in which they were passed to us\n        # from the caller.\n        for num in nums:\n            if num >= 0:\n                break\n            else:\n                nums.append(num)\n\n        return sorted(list(zip(*sorted(self.__iter__()))), key=lambda x: len(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return [nums,]\n    return zip(*sorted(nums, key=lambda x: x.sum()), reversed(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        nums = [nums]\n    else:\n        # If there are multiple items with the same sum of their digits,\n        # order them by index.\n        nums = sorted(nums, key=lambda x: x.__len__(), reverse=True)\n    return [num] + nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = [ 1, 11, -1, -11, -12]\n    if len(nums) == 1:\n        order = order_by_points(order)\n    else:\n        for i in range(len(nums)):\n            if i > 1:\n                order += [ nums[i] - nums[i - 1], nums[i + 1] - nums[i - 1], nums[i] - nums[i - 2], nums[i + 1] - nums[i - 2] ]\n            else:\n                order += [ nums[i] - nums[i - 1], nums[i + 1] - nums[i - 1], nums[i - 2] - nums[i - 1], nums[i + 1] - nums[i - 2] ]\n\n    if len(nums) == 1:\n        sort = [1, 11, -1, -11, -12]\n    else:\n        for i in range(len(nums)):\n            if i > 1:\n                sort += [ nums[i] - nums[i - 1], nums[i + 1] - nums[i - 1], nums[i] - nums[i - 2], nums[i + 1] - nums[i - 2] ]\n            else:\n                sort += [ nums[i] - nums[i - 1], nums[i + 1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Sort by sum of digits.\n    s = [int(x) for x in nums]\n    s.sort(reverse=True)\n    s.reverse()\n\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # First sort by value.\n    #\n    # FIXME: does this add a \"hidden\" factor of the sum to the sorting?\n    #\n    # NOTE: this is a hack to handle items with similar sum of their digits.\n    #        It could be removed if the `nums` argument is sorted as a\n    #        list of integers.\n    #\n    # Note that if the sum of the digits for the same item is\n    # different, the result will not be the same as if the sum is\n    # the same.\n    #\n    # NOTE: if the sum of the digits for a specific item is the same\n    # as the sum of all the digits, it will be the same as if the sum\n    # is the sum of all the digits.\n    #\n    # NOTE: if the sum of the digits for the same item is different\n    # from the sum of all the digits, it will be the sum of all the digits.\n    #\n    # NOTE: if the sum of the digits for a specific item is different\n    # from the sum of all the digits, it will not be the sum of all the digits.\n    #\n    # NOTE: if the sum of the digits for a specific item is the same as\n    # the sum of all the digits, it will be the sum of", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    nums = sorted(nums, key=lambda x: x / 10)\n    sum = 0\n    for num in nums:\n        sum += int(num * 10)\n        if sum == num:\n            return num\n    return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i, num in enumerate(nums):\n        if isinstance(num, int):\n            num = num.to_nan()\n        if isinstance(num, basestring):\n            num = str(num).to_nan()\n\n        num = str(num) + \" \"\n        if num in nums:\n            if num.isdigit():\n                num = num.digits[:num] + num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num.digits[num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order_by = []\n    for num in nums:\n        if num >= 0:\n            num = num / 100\n        else:\n            num = num - 1\n        nums.append(num)\n    return order_by", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n\n    def _sort(x):\n        if x == 0:\n            return 1\n        return cmp(x, -x)\n\n    for num in nums:\n        try:\n            x = int(num)\n        except ValueError:\n            continue\n        if num > 0:\n            _sort(x)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        # sort nums in ascending order\n        nums.sort(key=lambda num: sum([len(n) for n in nums]))\n        # sort nums in reverse order\n        return nums - sorted([-num for _, num in enumerate(nums)])\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return sorted(list(map(lambda x: int(x), nums)))\n\n    else:\n        return map(int, nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if isinstance(x, list):\n            return [x[0], x[1]]\n        else:\n            return sort(x)\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # get the number of elements\n    # if it is not equal to the number of elements, then it is not\n    # possible to find an order\n    # (or more than one order)\n    if len(nums)!= nums:\n        raise ValueError(\"list lengths must be equal\")\n\n    # calculate the sum of the digits\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    # sorted with the sum\n    return sorted([sum], key=lambda x: x * 1000 / sum, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # find the minimum and maximum digits\n    min_digits = min(nums, key=lambda n: int(n * 10))\n    max_digits = max(nums, key=lambda n: int(n * 10))\n\n    # find the minimum and maximum digits (in the order of the original list)\n    min_digits = min(nums, key=lambda n: int(n * 10))\n    max_digits = max(nums, key=lambda n: int(n * 10))\n\n    # sort the list based on min_digits\n    min_nums = list(nums[:min_digits])\n    max_nums = list(nums[max_digits:])\n    min_nums = sorted(min_nums, key=lambda n: int(n * 10))\n    max_nums = sorted(max_nums, key=lambda n: int(n * 10))\n\n    # write the result\n    return f\"sort({})\".format(\", \".join(sorted(min_nums, key=lambda n: int(n * 10))))\n    \"\"\"\n    \"\"\"\n    # if len(nums) is not equal to 2, return the list as is\n    if len(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    total = sum(n.digits for n in nums)\n    if total == 0:\n        return\n    else:\n        sorted = sorted(range(total / nums), key=lambda n: n)\n        return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([sum(i) for i in nums], key=lambda i: i)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _(a):\n        return a.index in nums\n\n    def sorted(nums, key=lambda x: _(x[0]), reverse=True):\n        \"\"\"\n        Write a function to sort the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n            order them based on their index in original list.\n        \"\"\"\n        def _compare(a, b):\n            return _(a[0]) < _(b[0]) or _(a[1]) < _(b[1])\n\n        def sort(x):\n            return sorted(nums, key=_compare, reverse=reverse)\n\n        if nums:\n            return sort(sorted(nums, key=_compare, reverse=True))[0]\n        else:\n            return sort(sorted([], key=_compare, reverse=True))\n\n    nums = nums.tolist()\n    try:\n        return sorted(nums, key=_compare, reverse=True)\n    finally:\n        # Reinitialize list to remove duplicate items\n        nums = list(set(nums))\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered = sorted(nums, key=lambda n: int(n))\n    for i in range(len(ordered)):\n        if i % 2 == 0:\n            ordered_i = ordered[i]\n        else:\n            ordered_i = ordered[i]\n        if i > 0:\n            ordered_i += 1\n        ordered_i.sort()\n        ordered.append(ordered_i)\n\n    return ordered", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            nums[i] = (nums[i] + 1) // 2\n        else:\n            nums[i] = (nums[i] + 1) // 2\n    return sorted(nums, key=lambda x: x[1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    index = 0\n    new_list = []\n    for num in nums:\n        new_list.append(index)\n        index += 1\n    return new_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) > 1:\n        return tuple(zip(nums, nums[1:]))\n    else:\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # list of integers to sort\n    nums = sorted(nums, key=lambda x: x.__sum__())\n    nums = list(set(nums))\n    # sort order\n    nums = sorted(nums, reverse=True)\n    # write function\n    return __builtin__.sort(nums) == __builtin__.sort(nums.sort())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list of integers\n    nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return zip(*sorted(nums, key=lambda n: sum(n), reverse=True),\n                  reverse=lambda n: sum(n) > sum(n) - 1)\n\n    def _sort(arr, start, end):\n        \"\"\"\n        Sort the list according to the provided function, starting with start\n        and finishing at end.  Return the sorted array of integers.\n        \"\"\"\n        return zip(*sorted(arr[start:end], key=_sort), reverse=_sort)\n\n    def _distinct(arr, start, end):\n        \"\"\"\n        Sort the list according to the provided function, starting with start\n        and finishing at end.  Return a list containing all unique values.\n        \"\"\"\n        return sorted(zip(*sorted(arr[start:end], key=_sort), reverse=_sort))\n\n    def sort_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers in\n        ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for i, digit in enumerate(nums):\n        if digit not in result:\n            result.append(digit)\n        else:\n            result.reverse()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    digits = list(set(nums))\n    digits.sort()\n    return (digits[::-1], digits[::-1], digits[::-1], digits[::-1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    digits = 1\n    nums.sort(lambda x, y: (x * digits + y * digits) / 2)\n    return nums.split(',')", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for n in nums:\n        if n < 0:\n            continue\n        if n == 0:\n            # The last digit is zero\n            continue\n        elif n == 1:\n            # The last digit is one\n            continue\n        if n == 2:\n            # The last digit is two\n            continue\n        elif n == 3:\n            # The last digit is three\n            continue\n        elif n == 4:\n            # The last digit is four\n            continue\n        else:\n            # The last digit is five\n            n += 1\n    return sorted([int(x) for x in reversed(list(n))])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # sort by sum of digits\n    s = lambda i: sum([i for i in nums if i.isdigit()])\n    result = s(nums[0])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n\n    if nums[0] == 0:\n        nums.reverse()\n    result = []\n    i = 0\n    num = 0\n    for num in nums:\n        if num == 0:\n            break\n        i += 1\n        result.append(num)\n        num += 1\n    for i in range(1, len(result)-1):\n        result[i] = result[i-1]\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x - x + 1)[1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a is b and a < b:\n            return a\n        if a is b and a > b:\n            return -1\n        return b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    else:\n        order_list = []\n        for index in range(len(nums)):\n            if index!= 0:\n                order_list.append(index)\n            else:\n                order_list.append(1)\n        order_list.sort(reverse=True)\n        return order_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(list):\n        if len(list) == 0:\n            return []\n        else:\n            return list[:] + sorted(list[1:])\n\n    if len(nums) == 0:\n        nums = [2, 10]\n    if len(nums) == 1:\n        nums = nums[0]\n    nums = sorted(nums)\n    if len(nums) == 1:\n        nums = nums[0]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(num):\n        # Keep track of the position of the item in the list\n        # num[0] is the first number in the list\n        num_pos = 0\n        # Sort the list\n        for i in range(len(nums)):\n            # Sort number by index (i)\n            num_pos = num_pos + ord(nums[i])\n            # If the position is greater than the number, break\n            if num_pos > num:\n                break\n        return num_pos\n    # sort the list\n    return order(list(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return \" \".join([str(i) for i in nums])"]]