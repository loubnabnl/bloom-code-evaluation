[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    nums = [nums.pop()]\n    nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return\n    if nums[1] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[2] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[3] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[4] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[5] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[6] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[7] == 0:\n        return\n    if len(nums) == 8:\n        return\n    if nums[8] == 0:\n        return\n    if len(nums) == 9:\n        return\n    if nums[9] == 0:\n        return\n    if len(nums) == 10:\n        return\n    if nums[10] == 0:\n        return\n    if len(nums) == 11:\n        return\n    if nums[11] == 0:\n        return\n    if len(nums) == 12:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[4]\n    if len(nums) == 6:\n        return nums[5]\n    if len(nums) == 7:\n        return nums[6]\n    if len(nums) == 8:\n        return nums[7]\n    if len(nums) == 9:\n        return nums[8]\n    if len(nums) == 10:\n        return nums[9]\n    if len(nums) == 11:\n        return nums[10]\n    if len(nums) == 12:\n        return nums[11]\n    return nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return\n    if nums[1] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[2] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[3] == 0:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[0] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[0] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return\n    if nums[0] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return\n    if nums[1] == nums[3]:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return\n    if nums[1] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[2] == 0:\n        return\n    if nums[1] == nums[0]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[0] < nums[1]:\n        return\n    if nums[1] < nums[0]:\n        return\n    if nums[1] > nums[0]:\n        return\n    if nums[0] > nums[1]:\n        return\n    if nums[1] > nums[2]:\n        return\n    if nums[2] > nums[0]:\n        return\n    if nums[2] > nums[3]:\n        return\n    if nums[3] > nums[2]:\n        return\n    if nums[2] > nums[4]:\n        return\n    if nums[4] > nums[2]:\n        return\n    if nums[2] > nums[5]:\n        return\n    if nums[5] > nums[2]:\n        return\n    if nums[2] > nums[6]:\n        return\n    if nums[6] > nums[2]:\n        return\n    if nums[2] > nums[7]:\n        return\n    if nums[7] > nums[2]:\n        return\n    if nums[2] > nums[8]:\n        return\n    if nums[8] > nums[2]:\n        return\n    if nums[2] > nums[9]:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1 and nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[5] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(d) for d in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 0:\n        return\n    if nums[1] == 1:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if nums[1] == 2:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = [num] + nums\n    nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list in ascending order\n    nums = sorted(nums, key=lambda x: x.sum())\n    # return the sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 1:\n        return\n    if nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 1:\n        return\n    if nums[3] == 1:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 1:\n        return\n    if nums[3] == 1:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    nums = [num]\n    for i in range(nums.count(0)):\n        nums.pop(i)\n    return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[0] < nums[1]:\n        return\n    if nums[0] > nums[1]:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] < nums[0]:\n        return\n    if nums[1] > nums[0]:\n        return\n    if nums[1] == nums[0]:\n        return\n    if nums[0] < nums[1]:\n        return\n    if nums[0] > nums[1]:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[1] == nums[1]:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 1:\n        return\n    if nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 1:\n        return\n    if nums[3] == 1:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 1:\n        return\n    if nums[3] == 1:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 1:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return\n    if nums[1] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[2] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[3] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[4] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[5] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[6] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[7] == 0:\n        return\n    if len(nums) == 8:\n        return\n    if nums[8] == 0:\n        return\n    if len(nums) == 9:\n        return\n    if nums[9] == 0:\n        return\n    if len(nums) == 10:\n        return\n    if nums[10] == 0:\n        return\n    if len(nums) == 11:\n        return\n    if nums[11] == 0:\n        return\n    if len(nums) == 12:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(n) for n in nums], key=lambda n: n.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x + 1)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = [num]\n    for i in range(len(nums)):\n        nums[i] = nums[i] + 1\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum())\n    # sort by index\n    nums = sorted(nums, key=lambda x: x.index, reverse=True)\n    # sort by index\n    nums = sorted(nums, key=lambda x: x.index, reverse=True)\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n    # sort by index\n    nums = sorted(nums, key=lambda x: x.index, reverse=True)\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n    # sort by index\n    nums = sorted(nums, key=lambda x: x.index, reverse=True)\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n    # sort by index\n    nums = sorted(nums, key=lambda x: x.index, reverse=True)\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n    # sort by index\n    nums =", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[2]\n    if len(nums) == 6:\n        return nums[1]\n    if len(nums) == 7:\n        return nums[0]\n    if len(nums) == 8:\n        return nums[1]\n    if len(nums) == 9:\n        return nums[0]\n    if len(nums) == 10:\n        return nums[1]\n    if len(nums) == 11:\n        return nums[1]\n    if len(nums) == 12:\n        return nums[1]\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list in ascending order\n    nums.sort()\n    # return the sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    else:\n        return sorted(nums, key=lambda i: sum(i.digits), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[3] == nums[4]:\n        return\n    if nums[4] == nums[5]:\n        return\n    if nums[5] == nums[6]:\n        return\n    if nums[6] == nums[7]:\n        return\n    if nums[7] == nums[8]:\n        return\n    if nums[8] == nums[9]:\n        return\n    if nums[9] == nums[10]:\n        return\n    if nums[10] == nums[11]:\n        return\n    if nums[11] == nums[12]:\n        return\n    if nums[12] == nums[13]:\n        return\n    if nums[13] == nums[14]:\n        return\n    if nums[14] == nums[15]:\n        return\n    if nums[15] == nums[16]:\n        return\n    if nums[16] == nums[17]:\n        return\n    if nums[17] == nums[18]:\n        return\n    if nums[18] == nums[19]:\n        return\n    if nums[19] == nums[20]:\n        return\n    if nums[20] ==", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[-1] for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[3] == nums[4]:\n        return\n    if nums[4] == nums[5]:\n        return\n    if nums[5] == nums[6]:\n        return\n    if nums[6] == nums[7]:\n        return\n    if nums[7] == nums[8]:\n        return\n    if nums[8] == nums[9]:\n        return\n    if nums[9] == nums[10]:\n        return\n    if nums[10] == nums[11]:\n        return\n    if nums[11] == nums[12]:\n        return\n    if nums[12] == nums[13]:\n        return\n    if nums[13] == nums[14]:\n        return\n    if nums[14] == nums[15]:\n        return\n    if nums[15] == nums[16]:\n        return\n    if nums[16] == nums[17]:\n        return\n    if nums[17] == nums[18]:\n        return\n    if nums[18] == nums[19]:\n        return\n    if nums[19] == nums[20]:\n        return\n    if nums[20] ==", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1:\n        nums[1] = nums[1] + 1\n    if nums[1] == 1:\n        nums[1] = nums[1] - 1\n    if nums[1] == 0:\n        nums[1] = 0\n    if nums[1] == -1:\n        nums[1] = -1\n    if nums[1] == -1:\n        nums[1] = -1\n    if nums[1] == 0:\n        nums[1] = 0\n    if nums[1] == 1:\n        nums[1] = 1\n    if nums[1] == -1:\n        nums[1] = -1\n    if nums[1] == -1:\n        nums[1] = -1\n    if nums[1] == 0:\n        nums[1] = 0\n    if nums[1] == 1:\n        nums[1] = 1\n    if nums[1] == -1:\n        nums[1] = -1\n    if nums[1] == -1:\n        nums[1] = -1\n    if nums[1] == 0:\n        nums[1] = 0\n    if nums[1] == 1:\n        nums[1] = 1\n    if nums[1] == -1:\n        num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[0] == nums[2]:\n        return\n    if nums[0] == nums[3]:\n        return\n    if nums[0] == nums[4]:\n        return\n    if nums[0] == nums[5]:\n        return\n    if nums[0] == nums[6]:\n        return\n    if nums[0] == nums[7]:\n        return\n    if nums[0] == nums[8]:\n        return\n    if nums[0] == nums[9]:\n        return\n    if nums[0] == nums[10] and nums[1] == nums[11] and nums[2] == nums[12] and nums[3] == nums[13] and nums[4] == nums[14] and nums[5] == nums[15] and nums[6] == nums[16] and nums[7] == nums[17] and nums[8] == nums[18] and nums[9] == nums[19] and nums[10] == nums[20] and nums[11] == nums[21] and nums[12] == nums[22] and nums[13] == nums[23] and nums[14] == nums[24] and nums[15] == nums[25] and nums[16] == nums[26] and nums[17] == nums[27] and num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[0] == nums[1] + nums[2]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = [num]\n    for i in range(len(nums)):\n        nums[i] = nums[i] + nums[i]\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1 and nums[1] == 0:\n        return\n    if nums[0] == 1 and nums[1] == 1:\n        return\n    if nums[0] == 1 and nums[1] == 2:\n        return\n    if nums[0] == 1 and nums[1] == 3:\n        return\n    if nums[0] == 1 and nums[1] == 4:\n        return\n    if nums[0] == 1 and nums[1] == 5:\n        return\n    if nums[0] == 1 and nums[1] == 6:\n        return\n    if nums[0] == 1 and nums[1] == 7:\n        return\n    if nums[0] == 1 and nums[1] == 8:\n        return\n    if nums[0] == 1 and nums[1] == 9:\n        return\n    if nums[0] == 1 and nums[1] == 10:\n        return\n    if nums[0] == 1 and nums[1] == 11:\n        return\n    if nums[0] == 1 and nums[1] == 12:\n        return\n    if nums[0] == 1 and nums[1] == 13:\n        return\n    if nums[0] == 1 and nums[1] == 14:\n        return\n    if nums[0] == 1 and num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    nums = nums[1:]\n    nums = nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    else:\n        return sorted(nums, key=lambda x: x.__getitem__(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = [num]\n    for i in range(len(nums)):\n        nums[i] = nums[i] + 1\n    nums = sorted(nums, key=lambda x: x)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.__getitem__(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    nums = [nums[-1] for nums in nums]\n    if nums[0] == nums[1]:\n        return\n    for i in range(len(nums)):\n        if nums[i] == nums[i - 1]:\n            return\n        if nums[i] > nums[i - 1]:\n            return\n        if nums[i] < nums[i - 1]:\n            return\n    return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return\n    #return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return []\n    if nums[1] == 0:\n        return []\n    if nums[2] == 0:\n        return []\n    if nums[3] == 0:\n        return []\n    if nums[4] == 0:\n        return []\n    if nums[5] == 0:\n        return []\n    if nums[6] == 0:\n        return []\n    if nums[7] == 0:\n        return []\n    if nums[8] == 0:\n        return []\n    if nums[9] == 0:\n        return []\n    if nums[10] == 0:\n        return []\n    if nums[11] == 0:\n        return []\n    if nums[12] == 0:\n        return []\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1 and nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[5] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = [num]\n    nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[4]\n    if len(nums) == 6:\n        return nums[5]\n    if len(nums) == 7:\n        return nums[6]\n    if len(nums) == 8:\n        return nums[7]\n    if len(nums) == 9:\n        return nums[8]\n    if len(nums) == 10:\n        return nums[9]\n    if len(nums) == 11:\n        return nums[10]\n    if len(nums) == 12:\n        return nums[11]\n    return nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda n: n.__getitem__(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1 and nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[5] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    nums = [nums for num in nums]\n    if nums.count(1) == 0:\n        return\n    nums = [num for num in nums if num.count(1) == 1]\n    if nums.count(2) == 0:\n        return\n    nums = [num for num in nums if num.count(2) == 2]\n    if nums.count(3) == 0:\n        return\n    nums = [num for num in nums if num.count(3) == 3]\n    if nums.count(4) == 0:\n        return\n    nums = [num for num in nums if num.count(4) == 4]\n    if nums.count(5) == 0:\n        return\n    nums = [num for num in nums if num.count(5) == 5]\n    if nums.count(6) == 0:\n        return\n    nums = [num for num in nums if num.count(6) == 6]\n    if nums.count(7) == 0:\n        return\n    nums = [num for num in nums if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1 and nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[5] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if nums[1] == 0:\n        return nums[1]\n    if nums[2] == 0:\n        return nums[2]\n    if nums[3] == 0:\n        return nums[3]\n    if nums[4] == 0:\n        return nums[4]\n    if nums[5] == 0:\n        return nums[5]\n    if nums[6] == 0:\n        return nums[6]\n    if nums[7] == 0:\n        return nums[7]\n    if nums[8] == 0:\n        return nums[8]\n    if nums[9] == 0:\n        return nums[9]\n    if nums[10] == 0:\n        return nums[10]\n    if nums[11] == 0:\n        return nums[11]\n    if nums[12] == 0:\n        return nums[12]\n    if nums[13] == 0:\n        return nums[13]\n    if nums[14] == 0:\n        return nums[14]\n    if nums[15] == 0:\n        return nums[15]\n    if nums[16] == 0:\n        return nums[16]\n    if nums[17] == 0:\n        return nums[17]\n    if nums[18] == 0:\n        return nums[18]\n    if nums[19] == 0:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(i) for i in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list in ascending order\n    nums.sort(key=lambda x: x.sum())\n    # return the sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(x) for x in nums], key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = [num] * len(nums)\n    nums = [num] * len(nums)\n    for i in range(len(nums)):\n        nums[i] = nums[i] + 1\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(i) for i in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(i) for i in nums], key=lambda i: i, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0], nums[1]\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]\n    if len(nums) == 7:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]\n    if len(nums) == 8:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]\n    if len(nums) == 9:\n        return nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum(x) for x in nums], key=lambda x: x.__getitem__(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[0] == nums[1] + nums[2]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8]:\n        return\n    if nums[0] == nums[1] + nums[2] + nums[3] + num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[4]\n    if len(nums) == 6:\n        return nums[5]\n    if len(nums) == 7:\n        return nums[6]\n    if len(nums) == 8:\n        return nums[7]\n    if len(nums) == 9:\n        return nums[8]\n    if len(nums) == 10:\n        return nums[9]\n    if len(nums) == 11:\n        return nums[10]\n    if len(nums) == 12:\n        return nums[11]\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1:\n        return\n    if nums[1] == 0:\n        return\n    if nums[1] == 1:\n        return\n    if nums[2] == 0:\n        return\n    if nums[2] == 1:\n        return\n    if nums[3] == 0:\n        return\n    if nums[3] == 1:\n        return\n    if nums[4] == 0:\n        return\n    if nums[4] == 1:\n        return\n    if nums[5] == 0:\n        return\n    if nums[5] == 1:\n        return\n    if nums[6] == 0:\n        return\n    if nums[6] == 1:\n        return\n    if nums[7] == 0:\n        return\n    if nums[7] == 1:\n        return\n    if nums[8] == 0:\n        return\n    if nums[8] == 1:\n        return\n    if nums[9] == 0:\n        return\n    if nums[9] == 1:\n        return\n    if nums[10] == 0:\n        return\n    if nums[10] == 1:\n        return\n    if nums[11] == 0:\n        return\n    if nums[11] == 1:\n        return\n    if nums[12] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[2]\n    if len(nums) == 6:\n        return nums[1]\n    if len(nums) == 7:\n        return nums[0]\n    if len(nums) == 8:\n        return nums[1]\n    if len(nums) == 9:\n        return nums[0]\n    if len(nums) == 10:\n        return nums[1]\n    if len(nums) == 11:\n        return nums[1]\n    if len(nums) == 12:\n        return nums[0]\n    if len(nums) == 13:\n        return nums[1]\n    if len(nums) == 14:\n        return nums[1]\n    if len(nums) == 15:\n        return nums[1]\n    if len(nums) == 16:\n        return nums[1]\n    if len(nums) == 17:\n        return nums[1]\n    if len", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort by sum of digits\n    nums.sort(key=lambda x: x.sum())\n    # Sort by index in original list\n    nums.sort(reverse=True)\n    # Return sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == nums[0]:\n        return\n    if nums[1] == nums[1]:\n        return\n    if nums[2] == nums[2]:\n        return\n    if nums[3] == nums[3]:\n        return\n    if nums[4] == nums[4]:\n        return\n    if nums[5] == nums[5]:\n        return\n    if nums[6] == nums[6]:\n        return\n    if nums[7] == nums[7]:\n        return\n    if nums[8] == nums[8]:\n        return\n    if nums[9] == nums[9]:\n        return\n    if nums[10] == nums[10]:\n        return\n    if nums[11] == nums[11]:\n        return\n    if nums[12] == nums[12]:\n        return\n    if nums[13] == nums[13] and nums[14] == nums[14]:\n        return\n    if nums[14] == nums[14] and nums[15] == nums[15]:\n        return\n    if nums[15] == nums[15] and nums[16] == nums[16]:\n        return\n    if nums[16] == nums[16] and nums[17] == nums[17]:\n        return\n    if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 2:\n        return\n    if nums.count(3) == 3:\n        return\n    if nums.count(4) == 4:\n        return\n    if nums.count(5) == 5:\n        return\n    if nums.count(6) == 6:\n        return\n    if nums.count(7) == 7:\n        return\n    if nums.count(8) == 8:\n        return\n    if nums.count(9) == 9:\n        return\n    if nums.count(10) == 10:\n        return\n    if nums.count(11) == 11:\n        return\n    if nums.count(12) == 12:\n        return\n    if nums.count(13) == 13:\n        return\n    if nums.count(14) == 14:\n        return\n    if nums.count(15) == 15:\n        return\n    if nums.count(16) == 16:\n        return\n    if nums.count(17) == 17:\n        return\n    if nums.count(18) == 18:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1 and nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[5] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[2]\n    if len(nums) == 6:\n        return nums[1]\n    if len(nums) == 7:\n        return nums[0]\n    if len(nums) == 8:\n        return nums[1]\n    if len(nums) == 9:\n        return nums[2]\n    if len(nums) == 10:\n        return nums[1]\n    if len(nums) == 11:\n        return nums[0]\n    if len(nums) == 12:\n        return nums[1]\n    return nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(i) for i in nums], key=lambda x: x.__getitem__(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if len(nums) == 2:\n        return\n    if nums[0] == 1 and nums[1] == 0:\n        return\n    if len(nums) == 3:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 0:\n        return\n    if len(nums) == 4:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 0:\n        return\n    if len(nums) == 5:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 0:\n        return\n    if len(nums) == 6:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums[5] == 0:\n        return\n    if len(nums) == 7:\n        return\n    if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1 and nums[4] == 1 and nums["]]