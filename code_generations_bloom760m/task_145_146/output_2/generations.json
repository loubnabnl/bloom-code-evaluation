[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by index\n    nums = sorted(nums, key=lambda x: x[0])\n    # sort by sum of digits\n    nums = sorted([sum(x) for x in nums], key=lambda x: x[0])\n    # return sorted list\n    return list(zip(nums, nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n\n    nums = [num]\n    return nums.sort(key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Create a list of tuples with the first element as the index\n    # and the second element as the sum of digits.\n    # The tuple is sorted in ascending order according to the sum of\n    # their digits.\n    #\n    # Example\n    # >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    # >>> order_by_points([-1, 11, 11, -11]) == [-1, -11, 11, -12]\n    #\n    # The tuple [-1, 11, 11, -11] is sorted in descending order.\n    #\n    # Note\n    #    1 is the first item and 11 is the sum of digits.\n    #\n    #    1 is the first item and 11 is the sum of digits.\n    #\n    #    1 is the first item and 11 is the sum of digits.\n    #\n    #    1 is the first item and 11 is the sum of digits.\n    #\n    #    1 is the first item and 11 is the sum of digits.\n    #\n    #    1 is the first item and 11 is the sum of digits.\n    #\n    #    1 is the first item and 11 is the sum of digits.\n    #\n    #    1 is the first", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for i, n in enumerate(nums):\n        result.append(int(n) + (n - 1) * i)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return sum([int(n) for n in nums])\n    else:\n        return sum([int(n) for n in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_sum(num1, num2):\n        return num1 - num2\n\n    nums = sorted(nums, key=sort_by_sum)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums = list(nums)\n    nums.sort()\n    if nums.index(0) == 0:\n        return\n    if nums.index(1) == 1:\n        return\n    if nums.index(2) == 2:\n        return\n    if nums.index(3) == 3:\n        return\n    if nums.index(4) == 4:\n        return\n    if nums.index(5) == 5:\n        return\n    if nums.index(6) == 6:\n        return\n    if nums.index(7) == 7:\n        return\n    if nums.index(8) == 8:\n        return\n    if nums.index(9) == 9:\n        return\n    if nums.index(10) == 10:\n        return\n    if nums.index(11) == 11:\n        return\n    if nums.index(12) == 12:\n        return\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums\n    elif len(nums) == 2:\n        return nums[0], nums[1]\n    else:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]], [nums[2], nums[3]], [nums[1], nums[0]], [nums[0], nums[1]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = list(set(nums))\n    for i in range(len(nums)):\n        nums[i] += nums[(i-1)%len(nums)]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 1:\n        return\n    if nums.count(1) == 1:\n        return\n    if nums.count(2) == 1:\n        return\n    if nums.count(3) == 1:\n        return\n    if nums.count(4) == 1:\n        return\n    if nums.count(5) == 1:\n        return\n    if nums.count(6) == 1:\n        return\n    if nums.count(7) == 1:\n        return\n    if nums.count(8) == 1:\n        return\n    if nums.count(9) == 1:\n        return\n    if nums.count(10) == 1:\n        return\n    if nums.count(11) == 1:\n        return\n    if nums.count(12) == 1:\n        return\n    if nums.count(13) == 1:\n        return\n    if nums.count(14) == 1:\n        return\n    if nums.count(15) == 1:\n        return\n    if nums.count(16) == 1:\n        return\n    if nums.count(17) == 1:\n        return\n    if nums.count(18) == 1:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[1])\n    return sum([ord(n) for n in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Note: this will work only for the case where all digits of the sum are\n    # digits, which is the case in most cases.\n    # For example:\n    # >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    # >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    #\n    # In this case, all digits of the sum will be digits.\n    #\n    # If the sum is a list of integers, the first item in the list will\n    # be sorted on the index of the first item.\n    #\n    # If the sum is a list of strings, the first item in the list will\n    # be sorted on the index of the first item.\n    #\n    # If the sum is a list of numbers, the first item in the list will\n    # be sorted on the index of the first item.\n    #\n    # If the sum is a list of lists, the first item in the list will\n    # be sorted on the index of the first item.\n    #\n    # If the sum is a list of lists, the first item in the list will\n    # be sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # first sort by sum of digits\n    nums.sort(key=lambda x: sum(x))\n    # then sort by index\n    for i, num in enumerate(nums):\n        if num not in nums:\n            continue\n        if i == len(nums) - 1:\n            break\n        nums[i] -= num\n    # finally sort by index\n    nums.sort(key=lambda x: int(nums[i]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(num) for num in nums]\n    return sorted(nums, key=lambda num: sum([int(n) for n in num]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_list = sorted(nums, key=lambda x: x.sum(1))\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums[0]] + \\\n            order_by_points([nums[0] + i for i in nums if i!= nums[0]])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in nums:\n        if i < nums:\n            nums.insert(i, i)\n    return sorted(nums, key=lambda s: s.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    result = []\n    for i, n in enumerate(nums):\n        if i == 0:\n            continue\n        result.append(n / n ** 2)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    else:\n        return sorted(nums, key=lambda n: n.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list according to the sum of their digits\n    #  in ascending order\n    #  - add the sum of digits to the end of the list\n    #  - add the sum of digits to the start of the list\n    #  - add the sum of digits to the start of the list\n    #  - add the sum of digits to the end of the list\n    #  - add the sum of digits to the end of the list\n    #  - add the sum of digits to the end of the list\n\n    # sort the list according to the sum of their digits\n    #  in ascending order\n    #  - add the sum of digits to the end of the list\n    #  - add the sum of digits to the start of the list\n    #  - add the sum of digits to the start of the list\n    #  - add the sum of digits to the end of the list\n    #  - add the sum of digits to the end of the list\n    #  - add the sum of digits to the end of the list\n\n    # sort the list according to the sum of their digits\n    #  in ascending order\n    #  - add the sum of digits to the end of the list\n    #  - add the sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n\n    nums = sorted(nums, key=lambda x: (x + 1) * 2)\n    return [(x, i) for i, x in enumerate(nums) if x >= 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    def sort(a, b):\n        if a == b:\n            return 0\n        if a > b:\n            return 1\n        return -1\n\n    return sort(*nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return\n\n    nums.sort(key=lambda x: x.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum(d) for d in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(a):\n        if len(a) == 0:\n            return\n        nums.sort()\n        return nums[:-1] + [a for a in nums[:-1]]\n\n    def _do_sort(a):\n        if len(a) == 0:\n            return\n        nums.sort()\n        return nums[:-1] + [a for a in nums[:-1]]\n\n    def _do_sort_accumulate(a, b):\n        if len(a) == len(b):\n            return a + b\n        else:\n            return _do_sort(a) + _do_sort(b)\n\n    def _do_sort_accumulate_accumulate(a, b, c):\n        if len(a) == len(b):\n            return a + b + c\n        else:\n            return _do_sort(a) + _do_sort(b) + _do_sort(c)\n\n    _do_sort = _do_sort_accumulate = _do_sort_accumulate_accumulate\n\n    nums = [int(a) for a in nums]\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i])\n        if i == len(nums) -", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    nums = [nums[1:]]\n    nums.sort(reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums = sorted(nums)\n    if nums == []:\n        return\n    return [int(i) for i in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    for item in nums:\n        if item > 0:\n            yield item\n    else:\n        for item in nums:\n            yield item\n    yield 0\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    nums.sort(key=lambda x: x + 1)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    # sort by index\n    nums.sort(reverse=True)\n    #", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    for i, num in enumerate(nums):\n        if i in nums:\n            continue\n        nums.insert(i, num)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in nums:\n        if i in nums:\n            return i\n        else:\n            return None\n\n    return sorted(nums, key=lambda i: i + 1, reverse=True)[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert nums is list\n\n    for num in nums:\n        if isinstance(num, int):\n            num = num.__class__.__name__\n        if isinstance(num, tuple):\n            num = num[0]\n        assert num in nums\n        if num!= nums[num]:\n            if num > nums[num]:\n                nums.append(num)\n            else:\n                nums.reverse()\n        else:\n            nums.append(num)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by index\n    nums.sort()\n    # sort by sum\n    nums.sort(key=lambda x: x.sum())\n\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(0))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(1))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(2))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(3))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(4))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(5))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(6))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(7))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(8))\n    # sort by sum of digits\n    nums.sort(key=lambda x: x.sum(9))\n    # sort by sum of digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sum([dig for x, digits in zip(nums, digits)]) / len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list by the sum of their digits\n    res = []\n    for item in nums:\n        res.append(item + item)\n    res = sorted(res, key=lambda x: x + 1)\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(item):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        if isinstance(item, (list, tuple)):\n            if len(item) == 2:\n                return item[0] + item[1]\n            else:\n                return item[0] - item[1]\n        else:\n            return item\n\n    # sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    sort([1, 11, -1, -11, -12])\n    # sort([]) == []\n    sort([])\n    # sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    sort([1, 11, -1, -11, -12])\n    # sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    sort([1, 11, -1, -11, -12])\n    # sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    sort([1, 11, -1, -11, -12])\n    # sort([1, 11, -1, -11, -12])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return list(sorted(nums, key=lambda n: n.sum(), reverse=True))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda x, y: x + y * x.sum(axis=1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    nums = [nums]\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == nums[-1]:\n            nums.pop(i)\n        else:\n            nums.append(nums[i])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        nums = range(0, len(nums))\n    nums.sort(key=lambda x: x)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if nums.count(1) == 1:\n        return\n    nums.sort(key=lambda x: x - 1)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    s = sum(nums)\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums = [num for num in nums]\n    if len(nums) == 1:\n        return\n    if len(nums) == 2:\n        return\n    if len(nums) > 3:\n        # Sort by the sum of digits\n        return sorted([sum(n) for n in nums])\n    else:\n        # Sort by the number of digits\n        return sorted([sum(n) for n in nums], key=lambda n: n[1])[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n    return sort(nums, _sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # First sort by sum of digits\n    if nums.ndim == 1:\n        return sorted(nums, key=lambda i: sum(i))\n    # Second sort by sum of digits of each item\n    elif nums.ndim == 2:\n        return sorted([sum(i) for i in nums], key=lambda i: sum(i) / nums.ndim)\n    # Third sort by sum of digits of each item\n    elif nums.ndim == 3:\n        return sorted([sum(i) for i in nums], key=lambda i: sum(i) / nums.ndim, reverse=True)\n    # Fourth sort by sum of digits of each item\n    elif nums.ndim == 4:\n        return sorted([sum(i) for i in nums], key=lambda i: sum(i) / nums.ndim, reverse=True, reverse=True)\n    return sorted(nums, key=lambda i: sum(i), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n\n    if nums.count(1) == 2:\n        return nums[0], nums[1]\n    else:\n        return nums, order_by_points(nums[0], nums[1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return list(map(lambda i: int(i), nums))[:-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n\n    if len(nums) == 1:\n        return nums[0]\n\n    if len(nums) > 1:\n        nums = nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12]\n\n    if len(nums) == 2:\n        return nums[0], nums[1]\n\n    if len(nums) == 3:\n        return nums[0], nums[1], nums[2]\n\n    if len(nums) == 4:\n        return nums[0], nums[1], nums[2], nums[3]\n\n    if len(nums) == 5:\n        return nums[0], nums[1], nums[2], nums[3], nums[4]\n\n    if len(nums) == 6:\n        return nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11], nums[12]\n\n    if len(nums) == 7:\n        return nums[0],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if isinstance(nums, list):\n        nums = [nums]\n    else:\n        nums = [nums]\n\n    def sort(x):\n        return nums.index(x) - nums.index(x[0])\n\n    def sort_lower(x):\n        return sort(x) + 1\n    sort_lower(nums[0])\n    sort_lower(nums[1])\n    sort_lower(nums[2])\n    sort_lower(nums[3])\n    sort_lower(nums[4])\n    sort_lower(nums[5])\n    sort_lower(nums[6])\n    sort_lower(nums[7])\n    sort_lower(nums[8])\n    sort_lower(nums[9])\n    sort_lower(nums[10])\n    sort_lower(nums[11])\n    sort_lower(nums[12])\n    return sort(nums[0:nums.index(nums[0])]) - 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Create a list of tuples\n    # in descending order of the sum of their digits\n    # and sort them by their index\n    # in the original list\n\n    # Create a list of tuples\n    # in ascending order of the sum of their digits\n    # and sort them by their index\n    # in the original list\n\n    # Create a list of tuples\n    # in ascending order of the sum of their digits\n    # and sort them by their index\n    # in the original list\n\n    # Create a list of tuples\n    # in descending order of the sum of their digits\n    # and sort them by their index\n    # in the original list\n\n    # Create a list of tuples\n    # in descending order of the sum of their digits\n    # and sort them by their index\n    # in the original list\n\n    # Create a list of tuples\n    # in descending order of the sum of their digits\n    # and sort them by their index\n    # in the original list\n\n    # Create a list of tuples\n    # in descending order of the sum of their digits\n    # and sort them by their index\n    # in the original list\n\n    # Create a list of tuples\n    # in descending order of the sum of their digits\n    # and sort them by their index\n    # in the original list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort by sum of digits\n    return sorted([sum(n) for n in nums], key=lambda n: sum(n) / len(n))\n    # Sort by index in original list\n    return sorted([item for item in nums if item!= 0], key=lambda n: item)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    nums = nums.split()\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        for i, num in enumerate(nums):\n            if i == 1:\n                return num\n            else:\n                if num.digits!= 0:\n                    order = num.digits - 1\n                else:\n                    order = 0\n                nums = nums[:order] + nums[1:]\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return\n    elif len(nums) == 2:\n        return\n    else:\n        return [sum(n.digits) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(nums):\n        return max([sum(x) for x in nums]) - min([sum(x) for x in nums])\n\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum(d) for d in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if nums.count(1) == 0:\n        return\n    if nums.count(2) == 0:\n        return\n    if nums.count(3) == 0:\n        return\n    nums = nums.split(',')\n    if nums.count(4) == 0:\n        return\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums = nums.split(',')\n    nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums.sort(key=lambda x: x + 1)\n    for i in range(len(nums)):\n        nums[i] = nums[i - 1] + 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return cmp(a.sum(1), b.sum(1))\n\n    nums = list(zip(*nums))\n    sorted_list = []\n    for num in nums:\n        sorted_list.append(num)\n    sorted_list.sort(reverse=True)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum\n    nums = sorted(nums, key=lambda n: sum(n.digits), reverse=True)\n    # sort by index\n    nums = sorted(nums, key=lambda n: n[0], reverse=True)\n    # sort by sort order\n    nums = sorted(nums, key=lambda n: n[0], reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda i: sum(i.digits))\n    if nums == []:\n        return []\n    return sorted(nums, key=lambda i: sum(i.digits) + i.index, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # If there are several items with similar sum of their digits,\n    # order them based on their index in original list.\n    if len(nums) > 1:\n        nums = [num for num in nums if num.digits == num.digits + 1]\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if isinstance(nums, list):\n        nums = [nums]\n    nums = [nums[n]: n for n in nums]\n    n = 0\n    i = 0\n    while i < len(nums):\n        n += nums[i]\n        if n == len(nums):\n            break\n        if n > len(nums):\n            i += 1\n        else:\n            i += 1\n    return sorted(nums, key=lambda n: n + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        if len(nums) == 1:\n            nums = [nums]\n        else:\n            nums = [nums, nums]\n\n    def sort(a, b):\n        return a - b\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    return [(ord(n) + ord(n + 1)) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list by sum of digits\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        # sort the list by sum of digits\n        nums.sort(key=lambda x: x + 1)\n        # reverse the list\n        nums.reverse()\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        # If there are several items with similar sum of their digits,\n        # order them based on their index in original list.\n        if len(nums) > 1:\n            nums = [nums[:-1], nums[1:]]\n        nums = sorted(nums, key=lambda x: x.sum(1), reverse=True)\n        return [nums[0], nums[1], nums[2:]]\n\n    return nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # This function is designed to be very fast\n    # (it takes only O(n) time)\n    # It is a little slower than the\n    # equivalent of the following but\n    # faster than the following.\n    #\n    # def sort(nums):\n    #     if len(nums) == 1:\n    #         return nums[0]\n    #\n    #     nums = sorted(nums, key=lambda num: sum([int(n) for n in nums]))\n    #     return nums[0]\n\n    def sort(nums):\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return list(map(int, nums))\n\n    def sort_digits(nums):\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return list(map(int, nums))\n\n    def sort_digits(nums, digits):\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return list(map(int, nums, digits))\n\n    def sort_digits(nums, digits, points):\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return list(map(int, nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points_asc(l):\n        return l[::-1] + l[1:]\n    return lambda x: x[::-1] + x[1:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sum([(i, ord(i)) for i in nums]) > sum([(i, ord(i)) for i in nums]) - 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, (list, tuple)):\n        nums = [nums]\n    else:\n        nums = [nums]\n\n    for i in range(len(nums)):\n        nums[i] = sum([int(x) for x in nums])\n    nums = sorted(nums, key=lambda x: x)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    # Sort by sum of digits\n    return [sum(x) for x in nums]\n\n    # Sort by index in original list\n    return [num for num in nums if num in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list in ascending order\n    nums.sort()\n    # Get the index of the first item\n    first = nums[0]\n    # Get the index of the last item\n    last = nums[-1]\n\n    # Get the sum of the digits of the first item\n    sum = 0\n    for i in range(first, last):\n        sum += int(nums[i])\n    # Get the sum of the digits of the last item\n    sum += int(nums[last])\n\n    # Return the sum of the digits\n    return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Compute the sum of digits of the items\n    sum = 0\n    for item in nums:\n        sum += item.digits\n    # Sort the list\n    sorted_list = []\n    for item in nums:\n        sorted_list.append(item + sum / 2)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(n) for n in nums]\n    for i, n in enumerate(nums):\n        if i == 0:\n            continue\n        if n > 0:\n            nums[i] -= 1\n        else:\n            nums[i] += 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums = nums.split('.')\n    if len(nums) == 1:\n        return\n    # sort according to sum of digits\n    return nums.sort(lambda x, y: x + y * (abs(x - y)))\n\n    # sort according to number of digits\n    return nums.sort(lambda x, y: x + y * (abs(x - y))) + nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        nums = nums.split(',')\n        nums = [int(n) for n in nums]\n        nums = sorted(nums, key=lambda x: x[0], reverse=True)\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    for i in range(len(nums)):\n        num = nums[i]\n        if num not in nums:\n            continue\n        nums.remove(num)\n    return sorted(nums, key=lambda n: n.sum(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums = sorted(nums, key=lambda i: i.sum(1))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        nums = [nums[0]] + nums\n        nums = [int(num) for num in nums]\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Set up a dictionary mapping the integers to their indices\n    # in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys of the dictionary are the integers, and the values are\n    # the index of the corresponding integer in the original list.\n    #\n    # The keys", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list by sum of digits\n    i = 0\n    while i < len(nums):\n        i += 1\n        nums[i] = nums[i-1] + nums[i]\n        if nums[i] < nums[i-1]:\n            nums[i-1] = nums[i]\n        else:\n            nums[i-1] = -1\n\n    # Sort the list by index\n    i = 0\n    while i < len(nums):\n        i += 1\n        nums[i] = nums[i-1] + nums[i]\n        if nums[i] > nums[i-1]:\n            nums[i-1] = nums[i]\n        else:\n            nums[i-1] = -1\n\n    # Return sorted list\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums == []:\n        return\n    if len(nums) == 1:\n        return\n    nums = list(nums)\n    sorted_list = []\n    for i in range(len(nums)):\n        sorted_list.append(nums[i])\n        if nums[i] > nums[len(nums) - i - 1] and nums[len(nums) - i - 1] < nums[i]:\n            sorted_list.append(nums[len(nums) - i - 1])\n    sorted_list = sorted(sorted_list)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list\n    if nums == []:\n        return\n    # sort the list by the sum of their digits\n    if nums.count(1) == 1:\n        nums.sort(key=lambda x: x.sum())\n    # sort by the index\n    nums.sort(key=lambda x: x.index)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return [order_by_points(i) for i in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        return sum(n.digits for n in nums)\n    else:\n        return 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    # 0   1   2   3   4   5   6   7   8   9   10\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n\n    # sort by index in original list\n    # 0   1   2   3   4   5   6   7   8   9   10\n    #   \\   \\   \\   \\   \\   \\   \\   \\   \\\n    #   \\   \\   \\   \\   \\   \\", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(nums[i])\n    return tuple(new_list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    #\n    # NOTE: when the order is specified in the method, we must make sure\n    # that the order is compatible with the original list. Otherwise\n    # the function will raise an exception.\n    #\n    # If the order is not compatible with the original list, the function\n    # will raise an exception.\n    #\n    # The order is also specified in the method. In this case we don't\n    # need to make sure that the order is compatible with the original\n    # list.\n    #\n    # To make sure that the order is compatible with the original list,\n    # the following condition must be true:\n    #\n    #   * The first element of the original list is not the first\n    #     element of the sorted list.\n    #\n    #   * The second element of the original list is not the second\n    #     element of the sorted list.\n    #\n    # If the first and second elements are not the first and second\n    # elements of the sorted list, the order will not be compatible\n    # with the original list.\n    #\n    # If the first and second elements are the same, the order will\n    # be compatible with the original list.\n    #\n    # If the first and second elements are different, the order\n    # will not be compatible with the", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([num for num in nums if sum(num.digits) == sum(nums)], key=lambda x: x[1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda l: sorted(l, key=lambda x: sum(x.digits), reverse=True)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return list(zip(*sorted(nums, reverse=True)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        nums = [nums]\n        nums.sort()\n        if nums.count(-1) > 0:\n            nums.reverse()\n        return nums\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    return nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    else:\n        return sorted(nums, key=lambda x: x + 1, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    nums = [int(i) for i in nums if i]\n    digits = len(nums)\n    order = [int(i) for i in nums if i >= 0]\n    if order.index(0) < digits:\n        order = [int(i) for i in nums if i >= 0]\n    if order.index(0) > digits:\n        order = [int(i) for i in nums if i <= digits - 1]\n    return [order]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = []\n    for i in xrange(len(nums)):\n        order.append(i + 1)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return (a + b) / 2\n\n    nums = list(set(nums))\n    nums.sort(sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    nums.sort(key=lambda num: sum(num.digits) + 1)\n    # sort by index\n    for num in nums:\n        if num == 1:\n            nums.pop()\n        else:\n            nums.insert(0, num + 1)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # write the function\n    nums = list(set(nums))\n    for num in nums:\n        num = num.split('.')\n        if len(num) == 2:\n            num = num[0] + num[1]\n        else:\n            num = num[0] + num[1:]\n        num = int(num)\n        num = int(num) - 1\n        num = int(num) + 1\n        nums.insert(0, num)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return itertools.product(\n            [num for num in nums if num > 0],\n            [num for num in nums if num < 0])\n\n    for num in nums:\n        if num > 0:\n            order_by_points(nums)\n        else:\n            order_by_points([])\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_func(a, b):\n        return int(b - a)\n\n    def sort_func2(a, b):\n        return int(b - a) * 2\n\n    nums = [float(n) for n in nums]\n    # sort them in ascending order\n    for i, n in enumerate(nums):\n        # order by sum of digits\n        if sort_func(n, n) < sort_func2:\n            sort_func2(n, n)\n        # order by index in original list\n        if sort_func2(n, n) < sort_func(n, n):\n            sort_func(n, n)\n    return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n        \"\"\"\n        a.sort()\n        b.sort()\n        return a - b\n\n    nums = list(range(len(nums)))\n    for i, num in enumerate(nums):\n        sort(num, num + 1)\n\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort by sum of digits\n    if len(nums) > 0:\n        sorted_list = [sum(num[i]) for i in nums]\n    else:\n        sorted_list = []\n    # Get index of lowest sum of digits\n    lowest_sum = 0\n    for num in sorted_list:\n        # If there is no sum of digits, then just return\n        if num is None:\n            return sorted_list\n        else:\n            # Check for lowest sum of digits\n            if lowest_sum < num:\n                lowest_sum = num\n            # Otherwise, find index of lowest sum of digits\n            else:\n                index = sorted_list.index(lowest_sum)\n                if index == 0:\n                    return sorted_list\n                else:\n                    return sorted_list[index - 1] + sorted_list[index - 2]\n\n    # If there is no lowest sum of digits, return\n    if lowest_sum is None:\n        return sorted_list\n    else:\n        return sorted_list[lowest_sum] + sorted_list[lowest_sum + 1] + sorted_list[lowest_sum + 2] + sorted_list[lowest_sum + 3] + sorted_list[lowest_sum + 4] + sorted_list[lowest_sum + 5] + sorted_list[lowest_sum + 6] + sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = sorted(nums, key=lambda x: x + 1)\n    return sorted(nums, key=lambda x: x * 10, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = list(nums)\n    nums = [int(x) for x in nums]\n    if len(nums) == 2:\n        return sorted(nums, key=lambda x: abs(x))\n    else:\n        return sorted(nums, key=lambda x: abs(x) / len(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # for num in nums:\n    #     print(num)\n    #     print(sum(num.digits))\n    #     print(sum(num))\n    #     # print(sum(num.digits) + sum(num.digits.split()) + sum(num.digits.split().split()))\n    #     # print(sum(num.digits.split() + sum(num.digits.split().split()) + sum(num.digits.split().split())))\n    #     # print(sum(num.digits.split() + sum(num.digits.split().split()) + sum(num.digits.split().split()) + sum(num.digits.split().split()) + sum(num.digits.split().split())))\n    #     print(sum(num.digits.split()) + sum(num.digits.split().split()) + sum(num.digits.split().split()) + sum(num.digits.split().split()) + sum(num.digits.split().split()) + sum(num.digits.split().split()))\n    #     print(sum(num.digits.split", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    result = []\n    for i in range(len(nums)):\n        if nums[i] > nums[-1]:\n            result.append(nums[i])\n        else:\n            result.append(nums[-1])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        nums = [int(i) for i in nums]\n    else:\n        nums = []\n    # sort by sum of digits\n    return sum([i for i in nums if i]) > 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    if len(nums) == 0:\n        return\n    if nums[0]!= 0:\n        nums = nums[1:]\n    if len(nums) == 1:\n        nums = nums[0]\n    if nums[0]!= 0:\n        nums = nums[1:]\n    nums = list(map(float, nums))\n    if len(nums) > 1:\n        nums = list(map(float, nums))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a.sum() == b.sum():\n            return 0\n        return a.index - b.index\n    return sort\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert nums is list, \"nums must be list\"\n    assert len(nums) == len(nums[0]), \"nums must be an integer list\"\n    assert len(nums) > 0, \"nums must be non-empty\"\n    for i in range(len(nums)):\n        assert nums[i] == nums[i], \"nums must be the same length\"\n        assert nums[i] >= 0, \"nums must be non-negative\"\n        if nums[i] == nums[i-1]:\n            assert i == 0, \"nums must be consecutive\"\n    return sorted(nums, key=lambda x: x.sum(1) / x.digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    nums = [nums[0], nums[1], nums[2], nums[3]]\n    if len(nums) == 4:\n        return order_by_points(nums)\n    else:\n        return order_by_points(nums, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    if nums.__len__() == 1:\n        return nums[0]\n\n    nums = nums.__iter__()\n\n    for num in nums:\n        if num.__len__() == 1:\n            return num[0]\n\n    return [num[0] for num in nums if num.__len__() == 1 and num[0].__len__() == 1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers\n    return sorted([sum(i) for i in nums], key=lambda x: x.__str__())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    nums.sort()\n    return [sum(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        else:\n            if nums[i] < nums[(i+1) % len(nums)]:\n                nums[i] = nums[(i+1) % len(nums)]\n            else:\n                nums[(i+1) % len(nums)] = nums[i]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        return cmp(a - b, 0)\n\n    nums = sorted(nums, key=_sort)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if nums.count(0) == 1:\n        return nums\n    if nums.count(1) == 2:\n        return nums.pop(0)\n    if nums.count(2) == 3:\n        return nums.pop(0)\n    if nums.count(3) == 4:\n        return nums.pop(0)\n    if nums.count(4) == 5:\n        return nums.pop(0)\n    if nums.count(5) == 6:\n        return nums.pop(0)\n    if nums.count(6) == 7:\n        return nums.pop(0)\n    if nums.count(7) == 8:\n        return nums.pop(0)\n    if nums.count(8) == 9:\n        return nums.pop(0)\n    if nums.count(9) == 10:\n        return nums.pop(0)\n    if nums.count(10) == 11:\n        return nums.pop(0)\n    if nums.count(11) == 12:\n        return nums.pop(0)\n    if nums.count(12) == 13:\n        return nums.pop(0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        nums = nums[0]\n    if nums is None:\n        return\n    nums.sort(reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    # Sort the list in ascending order by their sum\n    return sorted([sum(i) for i in nums], key=lambda x: x + 1, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for n in nums:\n        if n < 0:\n            raise ValueError(\"Number must be non-negative\")\n        if n > len(nums) - 1:\n            raise ValueError(\"Number must be less than or equal to the length of list\")\n        nums[n] = n\n\n    return sorted(nums, key=lambda n: n)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return [nums.index(i) for i in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = list(set(nums))\n    for num in nums:\n        num = int(num)\n        if num < 0:\n            num = -num\n        if num > len(nums):\n            num = len(nums)\n        if num == nums[-1] and nums[-1]!= num:\n            num = nums[-1]\n    return [int(n) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort in ascending order\n    sorted_nums = sorted(nums, key=lambda num: sum([int(n.split('.')[-1]) for n in num]))\n    # return sorted_nums\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(nums[i] + nums[i])\n    return new_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sum(map(lambda i: i*10.0, nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not isinstance(nums, list):\n        nums = [nums]\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([int(i) for i in nums], key=lambda i: i + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for i in range(len(nums)):\n        if i > 1:\n            result.append(i)\n        else:\n            result.append(nums[i])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sum([i for i in nums if i > 0]) + sum([i for i in nums if i < 0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: sum(n.digits), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # if there are multiple items with similar sum of their digits,\n    # order them based on their index in original list\n    if len(nums) > 1:\n        return [ord(num[0]) for num in nums]\n    return sorted(nums, key=lambda x: x + 1) + sorted(nums[:-1], key=lambda x: x - 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = []\n    for i in range(len(nums)):\n        if i in nums:\n            order.append(i)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(list(map(ord, nums)), key=lambda x: x[1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x.__len__() > 1 and x[0] > x[1] or x[0] < x[1]\n\n    # sort([1, 11, -1, -11, -12])\n    # sort([1, 11, -1, -11, -12])\n    # sort([]) == []\n    sort = lambda x: x[0]\n    nums = [x[0] for x in nums]\n    nums = sorted(nums, key=sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sorted(x):\n        return int(x) + int(x) - int(x)\n\n    return sorted(nums, key=_sorted)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort items by sum of digits\n    if nums is None:\n        return\n    if nums.shape[1] == 1:\n        return\n    # sort by index\n    if nums.index(0) == 0:\n        return\n    # sort by sum of digits\n    if nums.sum() < nums.sum(1):\n        return\n    # sort by index\n    if nums.index(1) == 0:\n        return\n    # sort by sum of digits\n    if nums.sum() < nums.sum(2):\n        return\n    # sort by index\n    if nums.index(2) == 0:\n        return\n    # sort by sum of digits\n    if nums.sum() < nums.sum(3):\n        return\n    # sort by index\n    if nums.index(3) == 0:\n        return\n    # sort by sum of digits\n    if nums.sum() < nums.sum(4):\n        return\n    # sort by index\n    if nums.index(4) == 0:\n        return\n    # sort by sum of digits\n    if nums.sum() < nums.sum(5):\n        return\n    # sort by index\n    if nums.index(5)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    else:\n        nums = [num] * len(nums)\n        if len(nums) == 1:\n            return\n        else:\n            for num in nums:\n                for i in range(len(num)):\n                    nums[i] += num[i]\n    return sorted(nums, key=lambda x: x - x.sum(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list in ascending order\n    for i in nums:\n        if i!= 0:\n            i += 1\n    # Apply the function to the sorted list\n    return [i for i in nums if i][0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: x + 1)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    else:\n        for i in range(len(nums)):\n            sum = sum(nums[i])\n            if sum > 0 and sum <= len(nums):\n                nums.insert(i, sum)\n    return sorted(nums, key=lambda x: sum(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        nums.sort()\n    elif len(nums) == 2:\n        nums.sort(reverse=True)\n    else:\n        raise ValueError('Number of items must be at least 2.')\n\n    # If there is only one item, return it\n    if len(nums) == 1:\n        nums.pop(0)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort by sum of digits\n    nums = sorted(nums, key=lambda num: sum([int(n) for n in nums]))\n    # Write a function which sorts the given list of integers\n    # in ascending order according to the sum of their digits.\n    def order_by_points(nums):\n        # Loop through list and sort by sum of digits\n        for num in nums:\n            # Write a function which sorts the given list of integers\n            # in ascending order according to the sum of their digits.\n            nums = sorted(nums, key=lambda num: sum([int(n) for n in nums]))\n            # Return sorted list of integers\n            return nums\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(map(lambda x: x.sum(), nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = sorted(nums, key=lambda num: sum(len(nums) for num in nums))\n    if len(nums) == 1:\n        return\n    nums = [int(num) for num in nums]\n    return [int(num) for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted([sum([int(n) for n in nums]) for n in nums], key=lambda num: sum([int(n) for n in nums]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return a sorted list of integers in ascending order.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        else:\n            return [int(i) for i in nums]\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    # we want to sort by sum of digits\n    digits = sum(nums)\n    if digits == 1:\n        return\n    # we want to sort by the index\n    i = 0\n    while i < len(nums) and nums[i] == digits:\n        i += 1\n    return [i for i in range(0, len(nums), digits)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list of integers\n    sorted_list = []\n    for i in range(len(nums)):\n        sorted_list.append(nums[i])\n    # add the sorted list to a list\n    for i in range(len(nums)):\n        sorted_num = sorted(nums, key=lambda x: x.digits)\n    # return the list with sorted numbers\n    return sorted_num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    new = []\n    for i in range(len(nums)):\n        new.append(nums[i] + nums[(i+1) % len(nums)])\n    return new", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda x: x[::-1].sum(1) + x[::-1].sum(2) + x[::-1].sum(3) + x[::-1].sum(4) + x[::-1].sum(5) + x[::-1].sum(6) + x[::-1].sum(7) + x[::-1].sum(8) + x[::-1].sum(9) + x[::-1].sum(10) + x[::-1].sum(11) + x[::-1].sum(12)\n\n    return lambda x: x.sum(1) + x.sum(2) + x.sum(3) + x.sum(4) + x.sum(5) + x.sum(6) + x.sum(7) + x.sum(8) + x.sum(9) + x.sum(10) + x.sum(11) + x.sum(12)\n\n    def __repr__(self):\n        return \"<%s, %s>\" % (self.__class__.__name__, self.__dict__.get('__dict__', {}).get('__dict__',", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = []\n    for i in range(nums.shape[0]):\n        s.append(i)\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([sum(d) for d in nums], key=lambda n: n + 1, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    return sum(nums, key=lambda n: (n, n))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list by sum of digits\n    for i in nums:\n        if i > 0:\n            ordered_points = [i + 1 for i in nums if i.sum(1) > 0]\n        else:\n            ordered_points = nums\n    return ordered_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    else:\n        return [(n, sum(n) for n in nums)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums.count(-1) == 1:\n        nums = [nums for i in nums if not i.isdigit()]\n    nums.sort(reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda x: x.__add__(x.__sub__(x.__sub__(x.__sub__(x.__add__(x.__sub__(x.__add__(x.__sub__(x.__sub__(x.__add__(x.__sub__(x.__add__(x.__sub__(x.__add__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__add__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__add__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(x.__sub__(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    res = []\n    for i, num in enumerate(nums):\n        res.append(i)\n    res.sort(key=lambda item: sum([item - i for i in range(len(nums))]))\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    elif nums.count(0) == 1:\n        nums = nums[:-1]\n    else:\n        nums = nums[:-1] + nums[:-1]\n    for i, num in enumerate(nums):\n        if i == 0:\n            continue\n        if num == 0:\n            continue\n        if num == 1:\n            continue\n        if num == 2:\n            continue\n        if num == 3:\n            continue\n        if num == 4:\n            continue\n        if num == 5:\n            continue\n        if num == 6:\n            continue\n        if num == 7:\n            continue\n        if num == 8:\n            continue\n        if num == 9:\n            continue\n        if num == 10:\n            continue\n        if num == 11:\n            continue\n        if num == 12:\n            continue\n        if num == 13:\n            continue\n        if num == 14:\n            continue\n        if num == 15:\n            continue\n        if num == 16:\n            continue\n        if num == 17:\n            continue\n        if num == 18:\n            continue\n        if num == 19:\n            continue\n        if num == 20:\n            continue\n        if num == 21:\n            continue\n        if num == 22:\n            continue\n        if num == 23:\n            continue\n        if num == 24:\n            continue\n        if num == 25:\n            continue\n        if num == 26:\n            continue\n        if num == 27", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Order the list in descending order\n    for i in range(len(nums)):\n        if nums[i] > nums[i+1]:\n            nums.pop(i)\n    # sort the list by the sum of their digits\n    nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums.__len__() == 0:\n        return []\n\n    # sort by sum of digits\n    for i in range(nums.__len__()):\n        if nums[i] == 0:\n            continue\n        if nums[i] < nums[nums.index(i) + 1:]:\n            order = i\n        else:\n            order = nums.index(i) + 1\n        if order < nums.index(i):\n            nums.insert(order, nums[i])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in nums:\n        if i not in nums:\n            return\n        if i > nums[0]:\n            nums.insert(0, i)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(i) for i in nums]\n    s = sum(n.digits for n in nums)\n    if s == 0:\n        return nums\n    else:\n        return sorted([int(i) for i in nums if s > i], key=lambda x: x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda i: sum(i.digits), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x.sum(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i] - nums[(i + 1) % len(nums)])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: sum(n.digits), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = list(set(nums))\n    if len(nums) > 1:\n        raise ValueError('There are more than one item with same sum of digits')\n    for i in range(len(nums)):\n        if nums[i] == nums[-1]:\n            nums.pop(i)\n    nums = list(set(nums))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, (list, tuple)):\n        nums = [nums]\n    else:\n        raise ValueError('nums must be list or tuple')\n\n    for num in nums:\n        if isinstance(num, list):\n            num = [num]\n        else:\n            num = num.encode('utf-8')\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers\n    res = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            res.append(i)\n        else:\n            res.append(i + 1)\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[26] == 0:\n        return\n    if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        nums.sort(key=lambda x: x.sum())\n    else:\n        nums = []\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return cmp(a.sum(), b.sum())\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x.__get__(0), reverse=True)\n    return nums.tolist()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        \"\"\"\n        Sort the given list according to the sum of their digits.\n\n        Parameters\n        ----------\n        a : list\n            List of integers.\n        b : list\n            List of integers.\n        \"\"\"\n        if len(a) == len(b):\n            return 0\n        else:\n            if a[0] < b[0]:\n                return -1\n            else:\n                return 1\n\n    # Sorting\n    nums = sorted(nums, _sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums.sort()\n    nums.reverse()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        nums = [num] + nums\n        return [num] + sorted(nums, key=lambda x: x.sum())\n\n    def _sort_num(a, b):\n        return a - b\n\n    def _sort_num_sort(a, b):\n        return _sort_num(a, b) + _sort_num_sort(b, a)\n\n    def _sort_num_sort(a, b):\n        return _sort_num(a, b) - _sort_num_sort(b, a)\n\n    def _sort_num_sort(a, b):\n        return _sort_num(a, b) - _sort_num_sort(b, a)\n\n    nums = []\n    for num in nums:\n        nums.append(_sort_num(num, num))\n    nums = sorted(nums, key=_sort_num_sort)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        # sort the list in ascending order\n        nums = [nums[0]]\n        for i in range(1, len(nums)):\n            nums.append(nums[i])\n            nums.sort()\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    nums = sorted(nums, key=lambda i: i + 1)\n    return [num for i in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    nums = [num] + nums\n    nums = [int(i) for i in nums]\n    result = []\n    for num in nums:\n        result.append(num)\n    return sorted(result, key=lambda i: sum([i.digits() for i in nums]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    else:\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return order_by_points([int(i) for i in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return\n\n    def sort_func(num1, num2):\n        if num1 == num2:\n            return 0\n        if num1 > num2:\n            return 1\n        if num1 < num2:\n            return -1\n        return sort(num1, num2, sort_func)\n\n    return sort_func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list in ascending order\n    i = 0\n    while i < len(nums):\n        if nums[i] > nums[[i + 1]]:\n            i += 1\n        else:\n            i += 1\n    return sorted(nums, key=lambda x: x.sum(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if nums.count(0) == 1:\n        return nums.pop(0)\n    else:\n        if nums.count(1) == 1:\n            return nums.pop(1)\n        else:\n            return [nums[n for n in nums if n!= 0] for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n        \"\"\"\n        sum = 0\n        digits = 0\n        for num in nums:\n            digits += 1\n            if num == 0:\n                sum += 1\n                break\n        return (sum - digits) / 2\n\n    def sorted_list(list):\n        \"\"\"\n        Sort the list of integers according to the sum of their digits.\n        \"\"\"\n        return list.sort(key=lambda x: x.sum())\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the list of integers according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum())\n\n    def sorted_list_with_digits(list):\n        \"\"\"\n        Sort the list of integers according to the sum of their digits.\n        \"\"\"\n        return sorted(list, key=lambda x: x.sum(), reverse=True)\n\n    def sorted_list_with_digits_with_underscores(list):\n        \"\"\"\n        Sort the list of integers according to the sum of their digits.\n        \"\"\"\n        return sorted(list, key=lambda x: x.sum(), reverse=True, reverse_key=True)\n\n    def sorted_list_with_unders", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list\n    # if there is a list of integers, use the list to sort\n    if isinstance(nums, list):\n        nums = [nums]\n    if len(nums) == 1:\n        nums = nums[0]\n    else:\n        nums = [nums, nums, nums, nums, nums]\n    nums = list(set(nums))\n    # sort the list\n    sort = lambda x: x[1]\n    if sort(nums) == sort(nums):\n        nums = sorted(nums)\n    # sort the list\n    sort = lambda x: x[1]\n    nums = sorted(nums, reverse=True)\n    # return the sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    else:\n        return sorted(nums, key=lambda n: sum(n.digits), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return list(map(lambda x: x.ord(), nums))\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_list = []\n    for item in nums:\n        sorted_list.append(item - item % 10)\n    sorted_list.sort()\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if nums.count(0) == 0:\n        return\n    for i in range(nums.count(0)):\n        if i == 0:\n            continue\n        else:\n            # if i == 0, skip the first digit\n            for j in range(i + 1, nums.count(0)):\n                if j == i:\n                    continue\n                else:\n                    if j > i:\n                        break\n                    else:\n                        # if j > i, skip the next digit\n                        for k in range(i + 1, nums.count(j)):\n                            if k == j:\n                                break\n                            else:\n                                # if k > i, skip the last digit\n                                for l in range(i + 1, nums.count(k)):\n                                    if l == k:\n                                        break\n                                    else:\n                                        # if k > i, skip the next digit\n                                        for m in range(i + 1, nums.count(j)):\n                                            if m == k:\n                                                break\n                                            else:\n                                                # if k > i, skip the next digit\n                                                for n in range(i + 1, nums.count(k)):\n                                                    if n == k:\n                                                        break\n                                                        # if k > i,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    result = []\n    for item in nums:\n        if item in result:\n            result.append(item)\n        else:\n            result.append(item + 1)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if isinstance(nums, list):\n        nums = list(nums)\n    nums = [nums[i] for i in nums]\n    if nums is None:\n        return\n    if isinstance(nums, tuple):\n        nums = [nums[i] for i in nums]\n    if isinstance(nums, list):\n        nums = [nums[i] for i in nums]\n    if nums is None:\n        return\n    if nums == []:\n        return\n    nums = [nums[i] for i in nums if i]\n    nums = sorted(nums, key=lambda x: x.total)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    # Sort by digits\n    def sort(a, b):\n        return a - b.digits\n    return sort(*[sum(a.digits) for a in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(list):\n        \"\"\"\n        Sort the list of integers in ascending order according to the sum\n        of their digits.\n        \"\"\"\n        if len(list) == 1:\n            return list[0]\n        else:\n            return list[:] + sorted(list[1:])\n\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        nums = [nums]\n        i = 0\n        while i < len(nums):\n            n = nums[i + 1]\n            if n in nums:\n                nums.remove(n)\n                i += 1\n            else:\n                i += 1\n        return sorted(nums, key=lambda x: x - 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda i: sum([i.digits]) + i.digits)\n    # sort by index\n    nums = list(set(nums))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum\n    nums = [num for num in nums if sum(num.split()) == sum(num.split())]\n    return sorted(nums, key=lambda num: sum(num.split())), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(zip(*[list(num) for num in nums]))"]]